CREATE PROC [FOND_ID].[USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_DPAS] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@PRD_ID [INTEGER] AS
BEGIN
BEGIN TRY
	--declare variable
	DECLARE @V_START			DATETIME,
	        @V_END				DATETIME,
			@V_DURATION			DATETIME,
	        @V_FUNCTION_NAME	VARCHAR(100),
			@V_DESCRIPTION		VARCHAR(100),
	        @V_CMD				VARCHAR(100),
			@V_SEQNO			INTEGER,
	        @V_PRD_ID			INTEGER,
			@V_CREATED_DATE		DATETIME,
	        @V_START_DATE		DATE,
	        @V_END_DATE			DATE,
			--@PRD_ID				INTEGER,
------START GET RUN ID DETAIL FROM ABC------
     @BATCH_MASTER_ID    VARCHAR(20) = 0,
     @BATCH_RUN_ID       VARCHAR(20) = 0,
     @JOB_MASTER_ID      VARCHAR(20) = 0,
     @JOB_RUN_ID         VARCHAR(20) = 0,
     @GMT_START_DTTM     DATETIME = GETDATE();
	 
	 
	EXEC STAG_ID.USP_GetRunIdReturn
      @JobName        = @JOBNAMESTR,
      @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
      @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
      @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
      @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
      @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
------END GET RUN ID DETAIL FROM ABC--------- 
  
------set variable----------------
	SET @V_FUNCTION_NAME = 'FOND_ID.USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES';
	SET @V_SEQNO = 1;
	SET @V_START_DATE = CONVERT(DATE, CONVERT(CHAR(10), @PRD_ID));
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('Start ', @V_FUNCTION_NAME, ' : ', @V_START_DATE)
	
-------store initial step to log---------
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

-----------------------------
	--- DROP ALL TEMPORARY TABLES
	-----------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('DROP ALL TEMPORARY TABLES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, [DESCRIPTION])
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	
	IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_DUP ') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_DUP ;
	IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_ICG_FLAG') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_ICG_FLAG;
	IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES;
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_TMP_1', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_TMP_1;



	--IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_INVALID') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_INVALID;
	TRUNCATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_INVALID;
	TRUNCATE TABLE FOND_ID.FOND_IFRS17_MPFILES_DPAS;
	--IF OBJECT_ID('FOND_ID.FOND_IFRS17_MPFILES') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_MPFILES;
	
	   ---------------------------------------------------
		--- Check Duplicate records
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION	= CONCAT('CREATE  TABLE TMP_IFRS17_ICG_STORES_DPAS_DUP : ', @V_START);
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
		-- check duplicate
		--drop table if exists FOND_ID.FOND_IFRS17_ICG_STORES_DUP ;
		
		--IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_DUP ') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_DUP ;
		
	
		CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_DUP  
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_ID)
		 ,CLUSTERED INDEX(POLICY_ID)
		)
		as 
		select CERTIFICATE_NO AS POLICY_ID,
		PRODUCT_CODE PRODCD,
		'IDR' AS CURRENCY,
		'DPAS' AS CHANNEL,
		RISK_COMMENCEMENT_DATE AS RCD,
		'Valuation Extract' AS [INPUT_TYPE],
		POLICY_STATUS
		--,  BATCH_MASTER_ID
  --      , BATCH_RUN_ID
  --      , JOB_MASTER_ID
  --      , JOB_RUN_ID
	 --   , BATCHDATE
  --      , ETL_PROCESS_DATE_TIME

		,@BATCH_MASTER_ID AS BATCH_MASTER_ID
        ,@BATCH_RUN_ID AS BATCH_RUN_ID
        ,@JOB_MASTER_ID AS JOB_MASTER_ID
        ,@JOB_RUN_ID AS JOB_RUN_ID
	    ,@BATCHDATESTR AS BATCHDATE
        ,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		From [STAG_ID].[STAG_DPAS_PRUTECT_CARE_MONTHLY_REPORT]
		where CERTIFICATE_NO in (select CERTIFICATE_NO 
		from [STAG_ID].[STAG_DPAS_PRUTECT_CARE_MONTHLY_REPORT]
		where NULLIF(TRIM(CERTIFICATE_NO),'') IS NOT NULL 
		group by CERTIFICATE_NO,PRODUCT_CODE,RISK_COMMENCEMENT_DATE having count(*) > 1)
		;

		---------------------------------------------------
		--- Create Temporary Table for ICG Identification Process
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= CONCAT('CREATE TABLE TMP_IFRS17_ICG_STORES_ICG_FLAG : ', @V_START);		

		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		
		/*	
		--drop table if exists STAG_ID.TMP_IFRS17_ICG_STORES_DPAS_icg_flag;
		IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_DPAS_ICG_FLAG') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_DPAS_ICG_FLAG;
		*/

		--CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_DPAS_ICG_FLAG 
		--WITH
		--(
		-- DISTRIBUTION = HASH(POLICY_NO)
		-- ,CLUSTERED INDEX(POLICY_NO)
		--)
		--AS 
		--select distinct (CASE WHEN A.CERTIFICATE_NO IS NOT NULL AND TRIM(A.CERTIFICATE_NO) <> '' THEN A.CERTIFICATE_NO ELSE 'N/A' END) AS POLICY_NO
		--,(CASE WHEN UPPER(TRIM(CAST(A.POLICY_STATUS AS VARCHAR(25)))) = 'INFORCE' THEN   
		--		(CASE WHEN ICGS.POLICY_NO IS NULL THEN 'NEW BUSINESS'
		--			   WHEN CBM.BOUND_BY_REPRICE='N' AND CBM.BOUND_BY_TERMINATION_PROVISION = 'N' AND UPPER(TRIM(ICGS.STATUS_SOURCE)) <> 'INFORCE' THEN 'UPDATE EXISTING BUSINESS'
		--			   WHEN CBM.BOUND_BY_REPRICE='N' AND CBM.BOUND_BY_TERMINATION_PROVISION = 'N' THEN 'NO UPDATE'
		--			   WHEN CBM.BOUND_BY_REPRICE = 'Y' AND dateadd(day,-1,CAST(NULL as DATE)) >  ICGS.CB_END_DT THEN 'NEW BUSINESS'
		--			   WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN 'NEW BUSINESS'
		--			   WHEN UPPER(TRIM(ICGS.STATUS_SOURCE)) <> 'INFORCE' THEN 'UPDATE EXISTING BUSINESS'
		--			   ELSE 'NO UPDATE'
		--		END)
		--	   -- A.STATCODE <> 'IF'
		--	   WHEN ICGS.POLICY_NO IS NULL THEN 'NEW BUSINESS'
		--	   WHEN LOWER(TRIM(CAST(A.POLICY_STATUS AS VARCHAR(25)))) <> LOWER(TRIM(ICGS.STATUS_SOURCE)) THEN 'UPDATE EXISTING BUSINESS'
		--	   WHEN NULLIF(TRIM(A.POLICY_STATUS),'') IS NULL THEN 'UPDATE EXISTING BUSINESS'
		--	   ELSE 'NO UPDATE'
		--END) AS ICG_FLAG
		----, A.BATCH_MASTER_ID
  ----      , A.BATCH_RUN_ID
  ----      , A.JOB_MASTER_ID
  ----      , A.JOB_RUN_ID
	 ----   , A.BATCHDATE
  ----      , A.ETL_PROCESS_DATE_TIME
		--,@BATCH_MASTER_ID AS BATCH_MASTER_ID
  --      ,@BATCH_RUN_ID AS BATCH_RUN_ID
  --      ,@JOB_MASTER_ID AS JOB_MASTER_ID
  --      ,@JOB_RUN_ID AS JOB_RUN_ID
	 --   ,@BATCHDATESTR AS BATCHDATE
  --      ,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		--FROM [STAG_ID].[STAG_DPAS_PRUTECT_CARE_MONTHLY_REPORT] A 
		--LEFT JOIN (
		--	select a.*
		--	, row_number() over(partition by POLICY_NO 
		--	order by CB_START_DT desc, CB_END_DT desc) as idx 
		--	FROM FOND_ID.FOND_IFRS17_ICG_STORES_DPAS a
		--	where lower(trim(SUBSYSTEM)) = lower(trim('DPAS'))
		--		AND PRODUCT_CD = BENEFIT_CD
		--) ICGS
		--ON UPPER(TRIM(A.CERTIFICATE_NO)) = UPPER(TRIM(ICGS.POLICY_NO)) AND ICGS.idx = 1
		--LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_DUP dup on A.CERTIFICATE_NO = dup.POLICY_ID
		--LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_CB_MAPPING_DPAS CBM 
		--ON LOWER(TRIM(A.PRODUCT_CODE)) = LOWER(TRIM(CBM.PRODUCT_CD)) ---- REPLACE BENEFIT_CD TO PRODUCT_CD
		--AND UPPER(TRIM(CAST('DPAS' AS VARCHAR(20)))) = UPPER(TRIM(CBM.SYSTEM)) -- tambah join ke set of contract
		--WHERE dup.POLICY_ID IS NULL;

		CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_ICG_FLAG 
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
		AS 
		select distinct (CASE WHEN A.CERTIFICATE_NO IS NOT NULL AND TRIM(A.CERTIFICATE_NO) <> '' THEN A.CERTIFICATE_NO ELSE 'N/A' END) AS POLICY_NO
		,(CASE 
			   WHEN ICGS.POLICY_NO IS NULL THEN 'NEW BUSINESS'
			   WHEN LOWER(TRIM(CAST(A.POLICY_STATUS AS VARCHAR(25)))) <> LOWER(TRIM(ICGS.STATUS_SOURCE)) THEN 'UPDATE EXISTING BUSINESS'
			   WHEN NULLIF(TRIM(A.POLICY_STATUS),'') IS NULL THEN 'UPDATE EXISTING BUSINESS'
			   ELSE 'NO UPDATE'
		END) AS ICG_FLAG
		,A.RISK_COMMENCEMENT_DATE
		,@BATCH_MASTER_ID AS BATCH_MASTER_ID
        ,@BATCH_RUN_ID AS BATCH_RUN_ID
        ,@JOB_MASTER_ID AS JOB_MASTER_ID
        ,@JOB_RUN_ID AS JOB_RUN_ID
	    ,@BATCHDATESTR AS BATCHDATE
        ,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		FROM STAG_ID.STAG_DPAS_PRUTECT_CARE_MONTHLY_REPORT A 
		LEFT JOIN (
			select  a.*
			, row_number() over(partition by POLICY_NO 
			order by CB_START_DT desc, CB_END_DT desc) as idx 
			FROM FOND_ID.FOND_IFRS17_ICG_STORES a
			where lower(trim(SUBSYSTEM)) = lower(trim('DPAS'))
				AND PRODUCT_CD = BENEFIT_CD
		) ICGS
		--ON UPPER(TRIM(A.CERTIFICATE_NO)) = UPPER(TRIM(ICGS.POLICY_NO)) AND ICGS.idx = 1
		ON UPPER(TRIM(A.CERTIFICATE_NO)) = UPPER(TRIM(ICGS.POLICY_NO)) AND A.RISK_COMMENCEMENT_DATE=ICGS.CB_START_DT --AND ICGS.idx = 1
		LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_DUP dup on A.CERTIFICATE_NO = dup.POLICY_ID
		WHERE dup.POLICY_ID IS NULL;

		--select top 10 * from FOND_ID.FOND_IFRS17_ICG_STORES_DUP


		----------------------------------------------
		--create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_TMP_1
		-----------------------------------------------
		
		SET @V_SEQNO = @V_SEQNO + 1;
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_TMP_1 : ', @V_START);

		INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, [DESCRIPTION])
		VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

			
		--CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_TMP_1
		--WITH
		--(
		--  DISTRIBUTION = HASH(POLICY_NO),
		--  HEAP
		--)
		--AS 
		--	SELECT  
		---- icg_stores column
		--CAST('IAI' AS VARCHAR(4)) AS ENTITY_ID
		--,CAST('DPAS' AS VARCHAR(20)) AS SYSTEM
		--,A.CERTIFICATE_NO AS POLICY_NO
		--,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN CAST(A.PRODUCT_CODE AS VARCHAR(30))
		--	  ELSE ICGS.PRODUCT_CD
		--END) AS PRODUCT_CD
		--,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN CAST('IDR' AS VARCHAR(3))
		--	  ELSE ICGS.CCY_CD
		--	END) AS CCY_CD

		--,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN CAST(A.PRODUCT_CODE AS VARCHAR(30))
		--	  ELSE ICGS.BENEFIT_CD
		--END) AS BENEFIT_CD
		--, (CASE WHEN A.RISK_COMMENCEMENT_DATE > A.RISK_CESSATION_DATE THEN CONVERT(VARCHAR(10), CAST(A.RISK_COMMENCEMENT_DATE AS DATETIME), 20)
		--		ELSE CONVERT(VARCHAR(10), CAST(A.RISK_CESSATION_DATE AS DATETIME), 20)
		--	END) AS COVERAGE_LEVEL_END_DATE
		--,(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN CAST(TRIM(A.POLICY_STATUS) AS VARCHAR(25))
		--		ELSE ICGS.STATUS_SOURCE
		--	END) AS STATUS_SOURCE
		--, CONVERT(VARCHAR(10), CAST(A.RISK_COMMENCEMENT_DATE AS DATETIME), 20) AS CB_START_DT
		--, (CASE WHEN A.RISK_COMMENCEMENT_DATE > A.RISK_CESSATION_DATE THEN CONVERT(VARCHAR(10), CAST(A.RISK_COMMENCEMENT_DATE AS DATETIME), 20)
		--		ELSE CONVERT(VARCHAR(10), CAST(A.RISK_CESSATION_DATE AS DATETIME), 20)
		--	END) AS CB_END_DT
		--, YEAR(A.RISK_COMMENCEMENT_DATE) AS COHORT_YEAR
		--, MONTH(A.RISK_COMMENCEMENT_DATE) AS ENTRY_MONTH
		--, CONCAT(A.CERTIFICATE_NO, '-', YEAR(A.RISK_COMMENCEMENT_DATE)) AS CONTRACT_ID
		--, CASE
  --    			WHEN ICG_FLAG = 'NEW BUSINESS' THEN
  --    				CASE
		--				WHEN PFM.PRODUCT_CD IS NOT NULL THEN
		--					CASE
		--						WHEN PFM.VFA_ELIGIBLE = 'N' THEN PFM.PORTFOLIO_GROUP
		--						WHEN PFM.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PFM.PORTFOLIO_GROUP), 1, LEN(TRIM(PFM.PORTFOLIO_GROUP))-3) + PFM.MEASUREMENT_MODEL
		--					END 
  --    				END
		--		ELSE ICGS.PORTFOLIO_GROUP
		--	END AS PORTFOLIO_GROUP
		--,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN PFM.MEASUREMENT_MODEL
		--		  ELSE ICGS.MEASUREMENT_MODEL
		--	END) AS MEASUREMENT_MODEL
		--,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN SC.SET_OF_CONTRACT
		--		  ELSE ICGS.SET_OF_CONTRACT
		--	END) AS SET_OF_CONTRACT
		--,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN ICC.INSURANCE_CONTRACT_GROUP_ID
		--		  ELSE ICGS.INSURANCE_CONTRACT_GROUP_ID
		--	END) AS INSURANCE_CONTRACT_GROUP_ID
		--,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN ICC.ICG_ID_PROPHET
		--		  ELSE ICGS.ICG_ID_PROPHET
		--	END) AS ICG_ID_PROPHET
		--,(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN SMT.INFORCE_FLAG
		--		  ELSE ICGS.INFORCE_FLAG
		--	END) AS INFORCE_FLAG
		--, (CASE WHEN A.RISK_COMMENCEMENT_DATE > A.RISK_CESSATION_DATE THEN CONVERT(VARCHAR(10), CAST(A.RISK_COMMENCEMENT_DATE AS DATETIME), 20)
		--		ELSE CONVERT(VARCHAR(10), CAST(A.RISK_CESSATION_DATE AS DATETIME), 20)
		--	END) AS BEN_EXP_DATE
		--, A.RISK_COMMENCEMENT_DATE AS RCD
		--,icg_flag.ICG_FLAG AS ICG_FLAG
		--,cast('DPAS' as varchar(20)) as SUBSYSTEM
		--,current_timestamp as CREATED_DATE
		--,current_timestamp as UPDATED_DATE
	 --   ,@BATCH_MASTER_ID AS BATCH_MASTER_ID
  --      ,@BATCH_RUN_ID AS BATCH_RUN_ID
  --      ,@JOB_MASTER_ID AS JOB_MASTER_ID
  --      ,@JOB_RUN_ID AS JOB_RUN_ID
	 --   ,@BATCHDATESTR AS BATCHDATE
  --      ,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		--FROM STAG_ID.STAG_DPAS_PRUTECT_CARE_MONTHLY_REPORT A 
		--LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_DUP 
		--dup on UPPER(TRIM(A.CERTIFICATE_NO)) = UPPER(TRIM(dup.POLICY_ID))
		--LEFT JOIN STAG_ID.TMP_IFRS17_ICG_STORES_DPAS_ICG_FLAG icg_flag  
		--on (CASE WHEN A.CERTIFICATE_NO IS NOT NULL AND TRIM(A.CERTIFICATE_NO) <> '' THEN UPPER(TRIM(A.CERTIFICATE_NO)) ELSE 'N/A' END) = UPPER(TRIM(icg_flag.POLICY_NO))  
		--LEFT JOIN (
		--	select a.*
		--	, row_number() over(partition by POLICY_NO 
		--	order by CB_START_DT desc, CB_END_DT desc) as idx 
		--	FROM FOND_ID.FOND_IFRS17_ICG_STORES_DPAS a
		--	where lower(trim(SUBSYSTEM)) = lower(trim('DPAS')) 
		--		AND PRODUCT_CD = BENEFIT_CD
		--) ICGS
		--ON UPPER(TRIM(A.CERTIFICATE_NO)) = UPPER(TRIM(ICGS.POLICY_NO)) AND ICGS.idx = 1
		--LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING_DPAS PFM --OK
		--on CAST(A.PRODUCT_CODE AS VARCHAR(30)) = PFM.PRODUCT_CD AND CAST('IDR' AS VARCHAR(3)) = PFM.CCY_CD 
		--AND UPPER(TRIM(CAST('DPAS' AS VARCHAR(20)))) = UPPER(TRIM(PFM.SYSTEM))
		--LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_SET_OF_CONTRACT_DPAS SC --OK
		--ON CAST(A.PRODUCT_CODE AS VARCHAR(30)) = SC.PRODUCT_CD AND CAST('IDR' AS VARCHAR(3)) = SC.CCY_CD
		--AND UPPER(TRIM(CAST('DPAS' AS VARCHAR(20)))) = UPPER(TRIM(SC.SYSTEM))
		--LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG_DPAS ICC 
		--ON PFM.PORTFOLIO_GROUP = TRIM(ICC.PORTFOLIO_GROUP)
		--AND YEAR(A.RISK_COMMENCEMENT_DATE) = ICC.COHORT_YEAR
		--AND SC.SET_OF_CONTRACT = ICC.SET_OF_CONTRACT
		--AND PFM.MEASUREMENT_MODEL = ICC.MEASUREMENT_MODEL
		--LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE_DPAS SMT on 
		--(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN
		--		TRIM(UPPER(CAST(TRIM(A.POLICY_STATUS) AS VARCHAR(25))))
		--	  ELSE TRIM(UPPER(ICGS.STATUS_SOURCE))
		--END) = TRIM(UPPER(SMT.STATUS_SOURCE))
		--AND UPPER(TRIM(CAST('DPAS' AS VARCHAR(20)))) = UPPER(TRIM(SMT.SYSTEM))
		--WHERE dup.POLICY_ID is null
		--;

		CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_TMP_1
		WITH
		(
		  DISTRIBUTION = HASH(POLICY_NO),
		  HEAP
		)
		AS 
			SELECT  
		-- icg_stores column
		CAST('IAI' AS VARCHAR(4)) AS ENTITY_ID
		,CAST('DPAS' AS VARCHAR(20)) AS SYSTEM
		,A.CERTIFICATE_NO AS POLICY_NO
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN CAST(A.PRODUCT_CODE AS VARCHAR(30))
			  ELSE ICGS.PRODUCT_CD
		END) AS PRODUCT_CD
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN CAST('IDR' AS VARCHAR(3))
			  ELSE ICGS.CCY_CD
			END) AS CCY_CD
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN CAST(A.PRODUCT_CODE AS VARCHAR(30))
			  ELSE ICGS.BENEFIT_CD
		END) AS BENEFIT_CD
		, (CASE WHEN A.RISK_COMMENCEMENT_DATE > A.RISK_CESSATION_DATE THEN CONVERT(VARCHAR(10), CAST(A.RISK_COMMENCEMENT_DATE AS DATETIME), 20)
				ELSE CONVERT(VARCHAR(10), CAST(A.RISK_CESSATION_DATE AS DATETIME), 20)
			END) AS COVERAGE_LEVEL_END_DATE
		,(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN CAST(TRIM(A.POLICY_STATUS) AS VARCHAR(25))
				ELSE ICGS.STATUS_SOURCE
			END) AS STATUS_SOURCE
		, CONVERT(VARCHAR(10), CAST(A.RISK_COMMENCEMENT_DATE AS DATETIME), 20) AS CB_START_DT
		, (CASE WHEN A.RISK_COMMENCEMENT_DATE > A.RISK_CESSATION_DATE THEN CONVERT(VARCHAR(10), CAST(A.RISK_COMMENCEMENT_DATE AS DATETIME), 20)
				ELSE CONVERT(VARCHAR(10), CAST(A.RISK_CESSATION_DATE AS DATETIME), 20)
			END) AS CB_END_DT
		, YEAR(A.RISK_COMMENCEMENT_DATE) AS COHORT_YEAR
		, MONTH(A.RISK_COMMENCEMENT_DATE) AS ENTRY_MONTH
		, CONCAT(A.CERTIFICATE_NO, '-', YEAR(A.RISK_COMMENCEMENT_DATE)) AS CONTRACT_ID
		, CASE
      			WHEN ICG_FLAG = 'NEW BUSINESS' THEN
      				CASE
						WHEN PFM.PRODUCT_CD IS NOT NULL THEN
							CASE
								WHEN PFM.VFA_ELIGIBLE = 'N' THEN PFM.PORTFOLIO_GROUP
								WHEN PFM.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PFM.PORTFOLIO_GROUP), 1, LEN(TRIM(PFM.PORTFOLIO_GROUP))-3) + PFM.MEASUREMENT_MODEL
							END 
      				END
				ELSE ICGS.PORTFOLIO_GROUP
			END AS PORTFOLIO_GROUP
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN PFM.MEASUREMENT_MODEL
				  ELSE ICGS.MEASUREMENT_MODEL
			END) AS MEASUREMENT_MODEL
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN SC.SET_OF_CONTRACT
				  ELSE ICGS.SET_OF_CONTRACT
			END) AS SET_OF_CONTRACT
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN ICC.INSURANCE_CONTRACT_GROUP_ID
				  ELSE ICGS.INSURANCE_CONTRACT_GROUP_ID
			END) AS INSURANCE_CONTRACT_GROUP_ID
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN ICC.ICG_ID_PROPHET
				  ELSE ICGS.ICG_ID_PROPHET
			END) AS ICG_ID_PROPHET
		,(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN SMT.INFORCE_FLAG
				  ELSE ICGS.INFORCE_FLAG
			END) AS INFORCE_FLAG
		, (CASE WHEN A.RISK_COMMENCEMENT_DATE > A.RISK_CESSATION_DATE THEN CONVERT(VARCHAR(10), CAST(A.RISK_COMMENCEMENT_DATE AS DATETIME), 20)
				ELSE CONVERT(VARCHAR(10), CAST(A.RISK_CESSATION_DATE AS DATETIME), 20)
			END) AS BEN_EXP_DATE
		, A.RISK_COMMENCEMENT_DATE AS RCD
		,icg_flag.ICG_FLAG AS ICG_FLAG
		,cast('DPAS' as varchar(20)) as SUBSYSTEM
		,current_timestamp as CREATED_DATE
		,current_timestamp as UPDATED_DATE
	    ,@BATCH_MASTER_ID AS BATCH_MASTER_ID
        ,@BATCH_RUN_ID AS BATCH_RUN_ID
        ,@JOB_MASTER_ID AS JOB_MASTER_ID
        ,@JOB_RUN_ID AS JOB_RUN_ID
	    ,@BATCHDATESTR AS BATCHDATE
        ,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		FROM STAG_ID.STAG_DPAS_PRUTECT_CARE_MONTHLY_REPORT A 
		LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_DUP 
		dup on UPPER(TRIM(A.CERTIFICATE_NO)) = UPPER(TRIM(dup.POLICY_ID))
		LEFT JOIN STAG_ID.TMP_IFRS17_ICG_STORES_ICG_FLAG icg_flag  
		on (CASE WHEN A.CERTIFICATE_NO IS NOT NULL AND TRIM(A.CERTIFICATE_NO) <> '' THEN UPPER(TRIM(A.CERTIFICATE_NO)) ELSE 'N/A' END) = UPPER(TRIM(icg_flag.POLICY_NO))  
		AND  A.RISK_COMMENCEMENT_DATE = icg_flag.RISK_COMMENCEMENT_DATE
		LEFT JOIN (
			select a.*
			, row_number() over(partition by POLICY_NO 
			order by CB_START_DT desc, CB_END_DT desc) as idx 
			FROM FOND_ID.FOND_IFRS17_ICG_STORES a
			where lower(trim(SUBSYSTEM)) = lower(trim('DPAS')) 
				AND PRODUCT_CD = BENEFIT_CD
		) ICGS
		ON UPPER(TRIM(A.CERTIFICATE_NO)) = UPPER(TRIM(ICGS.POLICY_NO)) AND A.RISK_COMMENCEMENT_DATE=ICGS.CB_START_DT --AND ICGS.idx = 1
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING PFM --OK
		on CAST(A.PRODUCT_CODE AS VARCHAR(30)) = PFM.PRODUCT_CD AND CAST('IDR' AS VARCHAR(3)) = PFM.CCY_CD 
		AND UPPER(TRIM(CAST('DPAS' AS VARCHAR(20)))) = UPPER(TRIM(PFM.SYSTEM))
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_SET_OF_CONTRACT SC --OK
		ON CAST(A.PRODUCT_CODE AS VARCHAR(30)) = SC.PRODUCT_CD AND CAST('IDR' AS VARCHAR(3)) = SC.CCY_CD
		AND UPPER(TRIM(CAST('DPAS' AS VARCHAR(20)))) = UPPER(TRIM(SC.SYSTEM))
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG ICC 
		ON PFM.PORTFOLIO_GROUP = TRIM(ICC.PORTFOLIO_GROUP)
		AND YEAR(A.RISK_COMMENCEMENT_DATE) = ICC.COHORT_YEAR
		AND SC.SET_OF_CONTRACT = ICC.SET_OF_CONTRACT
		AND PFM.MEASUREMENT_MODEL = ICC.MEASUREMENT_MODEL
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE SMT on 
		(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN
				TRIM(UPPER(CAST(TRIM(A.POLICY_STATUS) AS VARCHAR(25))))
			  ELSE TRIM(UPPER(ICGS.STATUS_SOURCE))
		END) = TRIM(UPPER(SMT.STATUS_SOURCE))
		AND UPPER(TRIM(CAST('DPAS' AS VARCHAR(20)))) = UPPER(TRIM(SMT.SYSTEM))
		
		WHERE dup.POLICY_ID is null 
		;

		--select top 10 * from STAG_ID.TMP_IFRS17_ICG_STORES_ICG_FLAG
		---------------------------------------------------
		--- Get ICG Stores only for non duplicate records
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE TABLE ifrs17_icg_stores : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

			
		CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
		AS
		SELECT  
		ENTITY_ID
		,SYSTEM
		,POLICY_NO
		,PRODUCT_CD
		,BENEFIT_CD
		,CONTRACT_ID
		,PORTFOLIO_GROUP
		,COHORT_YEAR
		,SET_OF_CONTRACT
		,INSURANCE_CONTRACT_GROUP_ID
		,ICG_ID_PROPHET
		,ENTRY_MONTH
		,CB_START_DT
		,CASE 
			WHEN CB_START_DT > COVERAGE_LEVEL_END_DATE THEN CB_START_DT 
			ELSE COVERAGE_LEVEL_END_DATE 
		END AS CB_END_DT
		,MEASUREMENT_MODEL
		,INFORCE_FLAG
		,COVERAGE_LEVEL_END_DATE
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE
		,ICG_FLAG
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		,BATCH_MASTER_ID
		,BATCH_RUN_ID
		,JOB_MASTER_ID
		,JOB_RUN_ID
		,BATCHDATE
		,ETL_PROCESS_DATE_TIME
		FROM tempdb.dbo.#TMP_IFRS17_ICG_STORES_TMP_1
		;

		--------------------------------------------------------------------
		--- Create table invalid ICG Stores  IFRS17
		--------------------------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE VIEW  FOND_ID.FOND_IFRS17_ICG_STORES_INVALID: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		--drop table if exists FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_INVALID;
		/*
		IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_INVALID') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_INVALID;
		CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_INVALID
		WITH
		(
		  DISTRIBUTION = HASH(POLICY_NO),
		  CLUSTERED INDEX(POLICY_NO)
		)
		AS
		*/
		INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES_DPAS_INVALID
		SELECT 
		A.ENTITY_ID
		,A.SYSTEM
		,A.POLICY_NO
		,A.PRODUCT_CD
		,A.BENEFIT_CD
		,A.CONTRACT_ID
		,A.PORTFOLIO_GROUP
		,A.COHORT_YEAR
		,A.SET_OF_CONTRACT
		,A.INSURANCE_CONTRACT_GROUP_ID
		,A.ICG_ID_PROPHET
		,A.ENTRY_MONTH
		,CB_START_DT as CB_START_DT
		,(case when A.CB_END_DT IS NOT NULL AND A.BEN_EXP_DATE IS NOT NULL THEN (case when A.CB_END_DT <= A.BEN_EXP_DATE then A.CB_END_DT else A.BEN_EXP_DATE end) ELSE NULL end) as CB_END_DT
		,MEASUREMENT_MODEL 
		,INFORCE_FLAG
		,(case when A.COVERAGE_LEVEL_END_DATE IS NOT NULL AND A.BEN_EXP_DATE IS NOT NULL THEN (case when A.COVERAGE_LEVEL_END_DATE <= A.BEN_EXP_DATE then A.COVERAGE_LEVEL_END_DATE else A.BEN_EXP_DATE end) ELSE NULL end) as COVERAGE_LEVEL_END_DATE
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE as BEN_EXP_DATE
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		,upper(
			(case when NULLIF(TRIM(A.POLICY_NO),'') is null then 'POLICY_NO,' else '' end)+
			(case when NULLIF(TRIM(A.PRODUCT_CD),'') is null then 'PRODUCT_CD,' else '' end)+
			(case when NULLIF(TRIM(A.BENEFIT_CD),'') is null then 'BENEFIT_CD,' else '' end)+
			(case when NULLIF(TRIM(A.CONTRACT_ID),'') is null then 'CONTRACT_ID,' else '' end)+
			(case when NULLIF(TRIM(A.PORTFOLIO_GROUP),'') is null then 'PORTFOLIO_GROUP,' else '' end)+
			(case when A.COHORT_YEAR is null then 'COHORT_YEAR,' else '' end)+
			(case when NULLIF(TRIM(A.SET_OF_CONTRACT),'') is null then 'SET_OF_CONTRACT,' else '' end)+
			(case when NULLIF(TRIM(A.INSURANCE_CONTRACT_GROUP_ID),'') is null then 'INSURANCE_CONTRACT_GROUP_ID,' else '' end)+
			(case when A.ICG_ID_PROPHET is null then 'ICG_ID_PROPHET,' else '' end)+
			(case when A.ENTRY_MONTH is null then 'ENTRY_MONTH,' else '' end)+
			(case when A.CB_START_DT is null then 'CB_START_DT,' else '' end)+
			(case when (case when A.CB_END_DT IS NOT NULL AND A.BEN_EXP_DATE IS NOT NULL THEN (case when A.CB_END_DT <= A.BEN_EXP_DATE then A.CB_END_DT else A.BEN_EXP_DATE end) ELSE NULL end) is null then 'CB_END_DT,' else '' end)+
			(case when NULLIF(TRIM(A.MEASUREMENT_MODEL),'') is null then 'MEASUREMENT_MODEL,' else '' end)+
			(case when NULLIF(TRIM(A.INFORCE_FLAG),'') is null then 'INFORCE_FLAG,' else '' end)+
			(case when (case when A.COVERAGE_LEVEL_END_DATE IS NOT NULL AND A.BEN_EXP_DATE IS NOT NULL THEN (case when A.COVERAGE_LEVEL_END_DATE <= A.BEN_EXP_DATE then A.COVERAGE_LEVEL_END_DATE else A.BEN_EXP_DATE end) ELSE NULL end) is null then 'COVERAGE_LEVEL_END_DATE,' else '' end)+
			(case when NULLIF(TRIM(A.CCY_CD),'') is null then 'CCY_CD,' else '' end)+
			(case when NULLIF(TRIM(A.STATUS_SOURCE),'') is null then 'STATUS_SOURCE,' else '' end) +
			(case when A.BEN_EXP_DATE is null then 'BEN_EXP_DATE,' else '' end) +
			(case when A.CB_START_DT > A.BEN_EXP_DATE then 'CB_START_DT > BEN_EXP_DATE,' else '' end)
		) as INVALID_DESC 
		--, A.BATCH_MASTER_ID
  --      , A.BATCH_RUN_ID
  --      , A.JOB_MASTER_ID
  --      , A.JOB_RUN_ID
	 --   , A.BATCHDATE
  --      , A.ETL_PROCESS_DATE_TIME
	  ,@BATCH_MASTER_ID AS BATCH_MASTER_ID
      ,@BATCH_RUN_ID AS BATCH_RUN_ID
      ,@JOB_MASTER_ID AS JOB_MASTER_ID
      ,@JOB_RUN_ID AS JOB_RUN_ID
	  ,@BATCHDATESTR AS BATCHDATE
      ,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		from STAG_ID.TMP_IFRS17_ICG_STORES A
		where 
		(case 	
			when NULLIF(TRIM(POLICY_NO),'') is null then 'N'
			when NULLIF(TRIM(PRODUCT_CD),'') is null then 'N'
			when NULLIF(TRIM(BENEFIT_CD),'') is null then 'N'
			when NULLIF(TRIM(CONTRACT_ID),'') is null then 'N'
			when NULLIF(TRIM(PORTFOLIO_GROUP),'') is null then 'N'
			when COHORT_YEAR is null then 'N'
			when NULLIF(TRIM(SET_OF_CONTRACT),'') is null then 'N'
			when NULLIF(TRIM(INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
			when ICG_ID_PROPHET is null then 'N'
			when ENTRY_MONTH is null then 'N'
			when CB_START_DT is null then 'N'
			when CB_END_DT is null then 'N'
			when NULLIF(TRIM(MEASUREMENT_MODEL),'') is null then 'N'
			when NULLIF(TRIM(INFORCE_FLAG),'') is null then 'N'
			when COVERAGE_LEVEL_END_DATE is null then 'N'
			when NULLIF(TRIM(CCY_CD),'') is null then 'N'
			when NULLIF(TRIM(STATUS_SOURCE),'') is null then 'N'
			when BEN_EXP_DATE is null then 'N'
			when (CB_START_DT > BEN_EXP_DATE AND STATUS_SOURCE = 'INFORCE') then 'N'
			ELSE 'Y'
		end) = 'N'
		; 
		
		

		---------------------------------------------------
		--- Begin transaction
		---------------------------------------------------
		
		--BEGIN TRAN;
		--SET NOCOUNT ON

		---------------------------------------------------
		--- Update existing records to ICG Stores Tables for new business
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'update FOND_ID.FOND_IFRS17_ICG_STORES for new business : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- update existing records in icg stores for valid new business. update only INFORCE_FLAG='N'
		update FOND_ID.FOND_IFRS17_ICG_STORES 
		set INFORCE_FLAG = 'N', UPDATED_DATE=current_timestamp
		from STAG_ID.TMP_IFRS17_ICG_STORES
		where UPPER(TRIM(FOND_IFRS17_ICG_STORES.POLICY_NO)) = UPPER(TRIM(TMP_IFRS17_ICG_STORES.POLICY_NO))
		AND UPPER(TRIM(FOND_IFRS17_ICG_STORES.BENEFIT_CD)) = UPPER(TRIM(TMP_IFRS17_ICG_STORES.BENEFIT_CD))
		AND FOND_IFRS17_ICG_STORES.CB_START_DT = TMP_IFRS17_ICG_STORES.CB_START_DT
		AND TMP_IFRS17_ICG_STORES.ICG_FLAG = 'NEW BUSINESS'
		AND lower(trim(FOND_IFRS17_ICG_STORES.SUBSYSTEM)) = lower(trim('DPAS'))
		AND (case 	
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES.POLICY_NO),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES.PRODUCT_CD),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES.BENEFIT_CD),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES.CONTRACT_ID),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES.PORTFOLIO_GROUP),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES.COHORT_YEAR is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES.SET_OF_CONTRACT),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES.INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES.ICG_ID_PROPHET is null then 'N'
			when TMP_IFRS17_ICG_STORES.ENTRY_MONTH is null then 'N'
			when TMP_IFRS17_ICG_STORES.CB_START_DT is null then 'N'
			when TMP_IFRS17_ICG_STORES.CB_END_DT is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES.MEASUREMENT_MODEL),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES.INFORCE_FLAG),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES.COVERAGE_LEVEL_END_DATE is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES.CCY_CD),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES.STATUS_SOURCE),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES.BEN_EXP_DATE is null then 'N'
			when (TMP_IFRS17_ICG_STORES.CB_START_DT > TMP_IFRS17_ICG_STORES.BEN_EXP_DATE AND TMP_IFRS17_ICG_STORES.STATUS_SOURCE ='INFORCE') then 'N'
			ELSE 'Y'
		end) = 'Y'
		;
---------------------------------------------------
		--- Update existing records to ICG Stores Tables
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'update FOND_ID.FOND_IFRS17_ICG_STORES: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- update existing records in icg stores.
		update FOND_ID.FOND_IFRS17_ICG_STORES 
		set STATUS_SOURCE = TMP_IFRS17_ICG_STORES.STATUS_SOURCE, INFORCE_FLAG = TMP_IFRS17_ICG_STORES.INFORCE_FLAG, UPDATED_DATE=current_timestamp
		from STAG_ID.TMP_IFRS17_ICG_STORES 
		where UPPER(TRIM(FOND_IFRS17_ICG_STORES.POLICY_NO)) = UPPER(TRIM(TMP_IFRS17_ICG_STORES.POLICY_NO))
		AND UPPER(TRIM(FOND_IFRS17_ICG_STORES.BENEFIT_CD)) = UPPER(TRIM(TMP_IFRS17_ICG_STORES.BENEFIT_CD))
		AND FOND_IFRS17_ICG_STORES.CB_START_DT = TMP_IFRS17_ICG_STORES.CB_START_DT
		AND lower(trim(FOND_IFRS17_ICG_STORES.SUBSYSTEM)) = lower(trim('DPAS'))
		AND TMP_IFRS17_ICG_STORES.ICG_FLAG = 'UPDATE EXISTING BUSINESS' 
		AND NULLIF(TRIM(TMP_IFRS17_ICG_STORES.INFORCE_FLAG),'') is not null 
		AND NULLIF(TRIM(TMP_IFRS17_ICG_STORES.STATUS_SOURCE),'') is not null 
		;

		---------------------------------------------------
		--- Insert new valid records to ICG Stores Tables
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'insert into FOND_ID.FOND_IFRS17_ICG_STORES for new business: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- insert valid new records to icg stores
		INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES(
		ENTITY_ID
		,SYSTEM
		,POLICY_NO
		,PRODUCT_CD
		,BENEFIT_CD
		,CONTRACT_ID
		,PORTFOLIO_GROUP
		,COHORT_YEAR
		,SET_OF_CONTRACT
		,INSURANCE_CONTRACT_GROUP_ID
		,ICG_ID_PROPHET
		,ENTRY_MONTH
		,CB_START_DT
		,CB_END_DT
		,MEASUREMENT_MODEL
		,INFORCE_FLAG
		,COVERAGE_LEVEL_END_DATE
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
	  ,BATCH_MASTER_ID
      ,BATCH_RUN_ID
      ,JOB_MASTER_ID
      ,JOB_RUN_ID
	  ,BATCHDATE
      ,ETL_PROCESS_DATE_TIME
		)
		SELECT 
		ENTITY_ID
		,SYSTEM
		,POLICY_NO
		,PRODUCT_CD
		,BENEFIT_CD
		,CONTRACT_ID
		,PORTFOLIO_GROUP
		,COHORT_YEAR
		,SET_OF_CONTRACT
		,INSURANCE_CONTRACT_GROUP_ID
		,ICG_ID_PROPHET
		,ENTRY_MONTH
		,CB_START_DT
		,(case when CB_END_DT <= BEN_EXP_DATE then CB_END_DT else BEN_EXP_DATE end)
		,MEASUREMENT_MODEL
		,INFORCE_FLAG
		,(case when COVERAGE_LEVEL_END_DATE <= BEN_EXP_DATE then COVERAGE_LEVEL_END_DATE else BEN_EXP_DATE end)
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		 --,BATCH_MASTER_ID
   --   ,BATCH_RUN_ID
   --   ,JOB_MASTER_ID
   --   ,JOB_RUN_ID
	  --,BATCHDATE
   --   ,ETL_PROCESS_DATE_TIME
	  ,@BATCH_MASTER_ID AS BATCH_MASTER_ID
      ,@BATCH_RUN_ID AS BATCH_RUN_ID
      ,@JOB_MASTER_ID AS JOB_MASTER_ID
      ,@JOB_RUN_ID AS JOB_RUN_ID
	  ,@BATCHDATESTR AS BATCHDATE
      ,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		from STAG_ID.TMP_IFRS17_ICG_STORES
		where ICG_FLAG =  'NEW BUSINESS'
		AND (case 	
			when NULLIF(TRIM(POLICY_NO),'') is null then 'N'
			when NULLIF(TRIM(PRODUCT_CD),'') is null then 'N'
			when NULLIF(TRIM(BENEFIT_CD),'') is null then 'N'
			when NULLIF(TRIM(CONTRACT_ID),'') is null then 'N'
			when NULLIF(TRIM(PORTFOLIO_GROUP),'') is null then 'N'
			when COHORT_YEAR is null then 'N'
			when NULLIF(TRIM(SET_OF_CONTRACT),'') is null then 'N'
			when NULLIF(TRIM(INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
			when ICG_ID_PROPHET is null then 'N'
			when ENTRY_MONTH is null then 'N'
			when CB_START_DT is null then 'N'
			when CB_END_DT is null then 'N'
			when NULLIF(TRIM(MEASUREMENT_MODEL),'') is null then 'N'
			when NULLIF(TRIM(INFORCE_FLAG),'') is null then 'N'
			when COVERAGE_LEVEL_END_DATE is null then 'N'
			when NULLIF(TRIM(CCY_CD),'') is null then 'N'
			when NULLIF(TRIM(STATUS_SOURCE),'') is null then 'N'
			when BEN_EXP_DATE is null then 'N'
			when (CB_START_DT > BEN_EXP_DATE AND STATUS_SOURCE= 'INFORCE') then 'N'
			ELSE 'Y'
		end) = 'Y'
		;

		--------------------------------------------------------------------
		--- INSERT final table for reporting MP Files IFRS17
		--- will be change after get final structure
		--------------------------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'INSERT TABLE FOND_ID.FOND_IFRS17_MPFILES: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		--drop table if exists FOND_ID.FOND_IFRS17_MPFILES_DPAS;
		--IF OBJECT_ID('FOND_ID.FOND_IFRS17_MPFILES_DPAS_TEST ') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_MPFILES_DPAS_TEST ;
		/*CREATE TABLE FOND_ID.FOND_IFRS17_MPFILES_DPAS
		WITH
		(
		  DISTRIBUTION = HASH(POLICY_ID),
		  CLUSTERED INDEX(POLICY_ID)
		)
		AS
		*/
		INSERT INTO FOND_ID.FOND_IFRS17_MPFILES_DPAS
		SELECT
		DPAS.SNAP_DATE
		,DPAS.SNAP_MONTH
		,DPAS.SNAP_YEAR
		,DPAS.POLICY_NO
		,DPAS.CERTIFICATE_NO
		,DPAS.RISK_CESSATION_DATE
		,DPAS.RISK_COMMENCEMENT_DATE
		,DPAS.RCD_15
		,DPAS.PRODUCT_NAME
		,DPAS.PLAN_NAME
		,DPAS.PREMIUM
		,DPAS.POLICY_STATUS
		,DPAS.REFERAL_CODE
		,DPAS.SOURCE_OF_BUSINESS
		,DPAS.PRODUCT_CODE
		,DPAS.POLICY_TERM
		,DPAS.APE
		,DPAS.MM
		,DPAS.DATE_OF_BIRTH
		,DPAS.APE_RECOGNIZED
		,DPAS.PAYMENT_TYPE
		,DPAS.VOUCHER_AMOUNT
		,DPAS.VOUCHER_CODE
		,DPAS.CAMPAIGN_CODE
		,DPAS.SHARIA_INDICATOR
		,DPAS.PARTNER_NAME
		,DPAS.BILLING_CHANNEL
		,DPAS.BILLING_FREQUENCY
		,DPAS.NATURAL_DEATH_BENEFIT
		,DPAS.DAILY_CASH_PAN_BENEFIT
		,DPAS.ICU_BENEFIT
		,DPAS.ACCIDENTAL_DEATH_BENEFIT
		,DPAS.TPD_BENEFIT
		,DPAS.INFECTIOUS_DISEASE_BENEFIT
		,DPAS.POLICYHOLDER_ID
		,DPAS.FIRST_NAME
		,DPAS.LAST_NAME
		,DPAS.NIK
		,DPAS.CITY
		,DPAS.LIFE_ASSURED_ID
		,DPAS.PARTICIPANT_ID
		,DPAS.BENEFICIARY_ID
		,DPAS.PAYOR_ID
		,b.IFRS_ONEROUS_GRP
		,(case when cast(FORMAT(@V_START_DATE,'yyyy') as numeric(4,0)) = a.COHORT_YEAR then a.ENTRY_MONTH
			   when a.COHORT_YEAR < 1997 then 13
			   when a.COHORT_YEAR is not null then (a.COHORT_YEAR-1997) + 14
		 end) as IFRS_CY_GRP
		,c.IFRS_PORT_GRP
		,c.IFRS_MEASURE_MODEL
		,a.COHORT_YEAR as BASIC_ENTRY_YEAR
		,a.ENTRY_MONTH as BASIC_ENTRY_MONTH
		,(CAST(FORMAT(a.CB_END_DT,'yyyy') AS NUMERIC(4,0))-CAST(FORMAT(a.CB_START_DT,'yyyy') AS NUMERIC(4,0)))*12
		+ (CAST(FORMAT(a.CB_END_DT,'MM') AS NUMERIC(2,0))-CAST(FORMAT(a.CB_START_DT,'MM') AS NUMERIC(2,0))) as IFRS_CB_TERM_M
		,(case when cast(FORMAT(@V_START_DATE,'yyyy') as numeric(4,0)) = a.COHORT_YEAR then a.ENTRY_MONTH when a.COHORT_YEAR is not null then 0 else null end) as MTHS_TO_SALE
		,a.INSURANCE_CONTRACT_GROUP_ID AS IFRS_ICG_ID
		,a.ICG_ID_PROPHET AS IFRS_ICG_ID_PROPHET
		,b.SUB_GROUP_ID
		,a.ENTITY_ID
		,a.CB_START_DT
		,a.CB_END_DT
		,(case when cast(FORMAT(@V_START_DATE,'yyyy') as numeric(4,0)) = a.COHORT_YEAR then 
				NULLIF(TRIM(a.INSURANCE_CONTRACT_GROUP_ID),'')+'_'+NULLIF(TRIM(UPPER(FORMAT(a.CB_START_DT,'MMM'))),'') end) 
		as REL_INSURANCE_CONTRACT_GROUP_ID
		 --,BATCH_MASTER_ID
   --   ,BATCH_RUN_ID
   --   ,JOB_MASTER_ID
   --   ,JOB_RUN_ID
	  --,BATCHDATE
   --   ,ETL_PROCESS_DATE_TIME
		,@BATCH_MASTER_ID AS BATCH_MASTER_ID
		,@BATCH_RUN_ID AS BATCH_RUN_ID
		,@JOB_MASTER_ID AS JOB_MASTER_ID
		,@JOB_RUN_ID AS JOB_RUN_ID
		,@BATCHDATESTR AS BATCHDATE
		,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		--INTO FOND_ID.FOND_IFRS17_MPFILES_DPAS_TEST
		from [STAG_ID].[STAG_DPAS_PRUTECT_CARE_MONTHLY_REPORT] DPAS
		LEFT join (
			select x.*
			, row_number() over(partition by POLICY_NO 
			order by CB_START_DT desc, CB_END_DT desc) as idx 
			FROM FOND_ID.FOND_IFRS17_ICG_STORES x
			where lower(trim(x.SUBSYSTEM)) = lower(trim('DPAS'))
			AND PRODUCT_CD = BENEFIT_CD
		) a
		ON (CASE WHEN NULLIF(TRIM(DPAS.CERTIFICATE_NO),'') IS NOT NULL THEN UPPER(TRIM(DPAS.CERTIFICATE_NO)) ELSE 'N/A' END) = UPPER(TRIM(a.POLICY_NO)) AND a.idx = 1
		Left join STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG b 
		on a.PORTFOLIO_GROUP = b.PORTFOLIO_GROUP
		and cast(a.COHORT_YEAR as numeric(4,0)) = cast(b.COHORT_YEAR as numeric(4,0))
		and a.SET_OF_CONTRACT = b.SET_OF_CONTRACT
		left join STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING c 
		on a.PRODUCT_CD = c.PRODUCT_CD AND a.CCY_CD = c.CCY_CD 
		AND UPPER(TRIM(CAST('DPAS' AS VARCHAR(20)))) = UPPER(TRIM(c.SYSTEM))
		;

		
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Finish ' + @V_FUNCTION_NAME + ' : ' +  convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION]) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		--IF @@TRANCOUNT > 0
		--COMMIT TRANSACTION
		

	END TRY

	BEGIN CATCH
	
		DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
		DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
		DECLARE @ErrorState AS INT = ERROR_STATE()
		
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		--IF @@TRANCOUNT > 0  
		--ROLLBACK TRAN; 
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION]) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)
		
	END CATCH ;
END;	

