CREATE PROC [FOND_ID].[USP_LOAD_ETL1_FNC_MONTHLY_VFA_CONSOLIDATION_TOOLS] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@PRD_ID [INTEGER] AS

BEGIN TRY
    --declare variable
	DECLARE @V_START			DATETIME,
	        @V_END				DATETIME,
			@V_DURATION			DATETIME,
	        @V_FUNCTION_NAME	VARCHAR(100),
			@V_DESCRIPTION		VARCHAR(100),
	        @V_CMD				VARCHAR(100),
			@V_SEQNO			INTEGER,
	        @V_PRD_ID			INTEGER,
			@V_CREATED_DATE		DATETIME,
	        @V_START_DATE		DATE,
	        @V_END_DATE			DATE,
	------START GET RUN ID DETAIL FROM ABC------
            @BATCH_MASTER_ID    VARCHAR(20) = 0,
            @BATCH_RUN_ID       VARCHAR(20) = 0,
            @JOB_MASTER_ID      VARCHAR(20) = 0,
            @JOB_RUN_ID         VARCHAR(20) = 0,
            @GMT_START_DTTM     VARCHAR(20) = GETDATE();

	EXEC STAG_ID.USP_GetRunIdReturn
      @JobName         = @JOBNAMESTR,
      @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
      @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
      @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
      @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
      @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
    ------END GET RUN ID DETAIL FROM ABC------

	--set variable
	SET @V_FUNCTION_NAME = 'FOND_ID.USP_LOAD_ETL1_FNC_MONTHLY_VFA_CONSOLIDATION_TOOLS';
	SET @V_SEQNO = 1;
	SET @V_START_DATE = CONVERT(DATE, CONVERT(CHAR(10), @PRD_ID));
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('Start ', @V_FUNCTION_NAME, ' : ', @V_START_DATE);

	--store initial step to log
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	-------------------------------------------------------
	--- PREPARATION (DROP TMP TABLE & TRUNCATE TARGET TABLE
	-------------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('DROP ALL TEMPORARY TABLES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

    --drop temp object if exists
	IF OBJECT_ID('tempdb.dbo.#VFA_UNION_VE', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#VFA_UNION_VE;
	IF OBJECT_ID('tempdb.dbo.#VFA_ASSESSMENT_AGG', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#VFA_ASSESSMENT_AGG;

	--drop temp table
	IF OBJECT_ID('STAG_ID.TMP_VFA_VALIDATE_VALUATION_EXTRACT','U') IS NOT NULL DROP TABLE STAG_ID.TMP_VFA_VALIDATE_VALUATION_EXTRACT;

	--truncate target table
	TRUNCATE TABLE STAG_ID.STAG_CONFIG_IFRS17_VFA_ELIGIBILITY;
	TRUNCATE TABLE STAG_ID.STAG_CONFIG_IFRS17_VFA_ELIGIBILITY_INVALID;

	--------------------------
	--- TRANSFORM PROPHET DATA
	--------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('TRANSFORM PROPHET DATA : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	--------------------------------------------
	--create temp table tempdb.dbo.#VFA_ASSESSMENT_AGG
	--------------------------------------------
	CREATE TABLE tempdb.dbo.#VFA_ASSESSMENT_AGG
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
	AS
	SELECT
	  POL_NO AS POLICY_NO,
	  SUM(DISC_FUND_CHG) AS DISC_FUND_CHG,
	  SUM(PV_IFRS_VARFEE_PROFIT_SHARE) AS PV_IFRS_VARFEE_PROFIT_SHARE,
	  SUM(DISC_IFRS_UI_O_UFII) AS DISC_IFRS_UI_O_UFII,
	  SUM(DISC_FV_DEATH_BEN_COST) AS DISC_FV_DEATH_BEN_COST,
	  SUM(DISC_FV_DEATH_BEN_VARYING) AS DISC_FV_DEATH_BEN_VARYING,
	  SUM(DISC_FV_MAT_BEN_COST) AS DISC_FV_MAT_BEN_COST,
	  SUM(DISC_FV_MAT_BEN_VARYING) AS DISC_FV_MAT_BEN_VARYING,
	  SUM(DISC_FV_RIDER_BEN_COST) AS DISC_FV_RIDER_BEN_COST,
	  SUM(DISC_FV_SURR_BEN_COST) AS DISC_FV_SURR_BEN_COST,
	  SUM(DISC_FV_SURR_BEN_VARYING) AS DISC_FV_SURR_BEN_VARYING,
	  SUM(DISC_FV_CASH_BON_VARYING) AS DISC_FV_CASH_BON_VARYING,
	  SUM(DISC_TAB_INV_RETURN) AS DISC_TAB_INV_RETURN,
	  SUM(DISC_US_DIST_PH) AS DISC_US_DIST_PH,
	  SUM(DISC_FV_CC_U_VARYING) AS DISC_FV_CC_U_VARYING,
	  SUM(IFRS_DISC_CV_ROP_PP) AS IFRS_DISC_CV_ROP_PP,
	  SUM(DISC_CC_INV_RETURN) AS DISC_CC_INV_RETURN
	FROM STAG_ID.STAG_PROPHET_PROPHET_VFA_ASSESSMENT
	GROUP BY POL_NO;

	--------------------------------------------------------
	--insert into STAG_ID.STAG_CONFIG_IFRS17_VFA_ELIGIBILITY
	--------------------------------------------------------
	INSERT INTO STAG_ID.STAG_CONFIG_IFRS17_VFA_ELIGIBILITY
	SELECT *, CASE WHEN VFA_TEST1  > 0.5 AND VFA_TEST2  > 0.5 THEN 1 ELSE 0  
		END AS IFRS_MEASURE_MODEL,
	@BATCH_MASTER_ID AS BATCH_MASTER_ID,
	@BATCH_RUN_ID AS BATCH_RUN_ID,
	@JOB_MASTER_ID AS JOB_MASTER_ID,
	@JOB_RUN_ID AS JOB_RUN_ID,
	@BATCHDATESTR AS BATCHDATE,
	@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
	FROM (
	SELECT
	  STAG_ID.LPAD(POLICY_NO, 8, '0') AS POLICY_NO,
	  CASE WHEN (COALESCE(DISC_IFRS_UI_O_UFII,0)+COALESCE(DISC_CC_INV_RETURN,0)) = 0 THEN 0 ELSE
	  (1 - ((COALESCE(PV_IFRS_VARFEE_PROFIT_SHARE, 0) + COALESCE(DISC_FUND_CHG, 0) + COALESCE(DISC_TAB_INV_RETURN, 0))/(COALESCE(DISC_IFRS_UI_O_UFII,0)+COALESCE(DISC_CC_INV_RETURN,0)))) END AS VFA_TEST1,
	  ( (COALESCE(IFRS_DISC_CV_ROP_PP, 0) + COALESCE(DISC_FV_DEATH_BEN_VARYING, 0) + COALESCE(DISC_FV_MAT_BEN_VARYING, 0) + COALESCE(DISC_FV_SURR_BEN_VARYING, 0) + COALESCE(DISC_FV_CASH_BON_VARYING, 0) + COALESCE(DISC_US_DIST_PH, 0) + COALESCE(DISC_FV_CC_U_VARYING,0))
	  / (COALESCE(IFRS_DISC_CV_ROP_PP, 0) + COALESCE(DISC_FV_DEATH_BEN_COST, 0) + COALESCE(DISC_FV_MAT_BEN_COST, 0) + COALESCE(DISC_FV_RIDER_BEN_COST, 0) + COALESCE(DISC_FV_SURR_BEN_COST, 0) + COALESCE(DISC_FV_CC_U_VARYING, 0) + COALESCE(DISC_FV_DEATH_BEN_VARYING, 0) + COALESCE(DISC_FV_MAT_BEN_VARYING, 0) + COALESCE(DISC_FV_SURR_BEN_VARYING, 0) + COALESCE(DISC_FV_CASH_BON_VARYING, 0) + COALESCE(DISC_US_DIST_PH, 0))) AS VFA_TEST2
	FROM tempdb.dbo.#VFA_ASSESSMENT_AGG
	)A ;

	--------------------------------------------
	--create temp table tempdb.dbo.#VFA_UNION_VE
	--------------------------------------------
	CREATE TABLE tempdb.dbo.#VFA_UNION_VE
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
	AS
	SELECT NULLIF(TRIM(CHDRNUM), '') AS POLICY_NO FROM STAG_ID.STAG_LIFEASIA_ZPRUPF_V2 WHERE UPPER(TRIM(STATCODE)) NOT IN('CF', 'VF')
	UNION ALL
	SELECT NULLIF(TRIM(CHDRNUM), '') AS POLICY_NO FROM STAG_ID.STAG_LIFEASIA_AC1108RDB WHERE UPPER(TRIM(STATCODE)) NOT IN('CF', 'VF')
	UNION ALL
	SELECT NULLIF(TRIM(CHDRNUM), '') AS POLICY_NO FROM STAG_ID.STAG_LIFEASIA_IPSUPF WHERE UPPER(TRIM(STATCODE)) NOT IN('CF', 'VF');

	--------------------------------------------------------------
	--create temp table STAG_ID.TMP_VFA_VALIDATE_VALUATION_EXTRACT
	--------------------------------------------------------------
	CREATE TABLE STAG_ID.TMP_VFA_VALIDATE_VALUATION_EXTRACT
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  CLUSTERED INDEX(POLICY_NO)
    )
	AS
	SELECT
	  UNION_VE.POLICY_NO,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME

	FROM tempdb.dbo.#VFA_UNION_VE AS UNION_VE

	LEFT JOIN
	  (
	    SELECT POLICY_NO FROM FOND_ID.FOND_IFRS17_ICG_STORES
		WHERE UPPER(TRIM(SUBSYSTEM)) IN('PROPHETU', 'PROPTRDB', 'RESVPIA')
	  ) AS ICGS
	ON UNION_VE.POLICY_NO = ICGS.POLICY_NO
	
	WHERE ICGS.POLICY_NO IS NULL

	UNION ALL

	SELECT
	  ICGS.POLICY_NO,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME

	FROM
	  (
	    SELECT POLICY_NO FROM FOND_ID.FOND_IFRS17_ICG_STORES
		WHERE UPPER(TRIM(SUBSYSTEM)) IN('PROPHETU', 'PROPTRDB', 'RESVPIA')
	  ) AS ICGS

	LEFT JOIN tempdb.dbo.#VFA_UNION_VE AS UNION_VE
	ON ICGS.POLICY_NO = UNION_VE.POLICY_NO
	
	WHERE UNION_VE.POLICY_NO IS NULL;

	----------------------------------------------------------------
	--insert into STAG_ID.STAG_CONFIG_IFRS17_VFA_ELIGIBILITY_INVALID
	----------------------------------------------------------------
	INSERT INTO STAG_ID.STAG_CONFIG_IFRS17_VFA_ELIGIBILITY_INVALID
	SELECT
	  VFA_ELIGIBILITY.POLICY_NO,
	  'NOT FOUND IN ICG' AS ERROR_DESC,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME

	FROM STAG_ID.STAG_CONFIG_IFRS17_VFA_ELIGIBILITY AS VFA_ELIGIBILITY
	
	LEFT JOIN STAG_ID.TMP_VFA_VALIDATE_VALUATION_EXTRACT AS VALIDATE_VALUATION_EXTRACT
	ON VFA_ELIGIBILITY.POLICY_NO = VALIDATE_VALUATION_EXTRACT.POLICY_NO
	
	WHERE VALIDATE_VALUATION_EXTRACT.POLICY_NO IS NULL
	
	UNION ALL
	
	SELECT
	  VALIDATE_VALUATION_EXTRACT.POLICY_NO,
	  'NOT FOUND IN VFA ELIGIBILITY' AS ERROR_DESC,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME

	FROM STAG_ID.TMP_VFA_VALIDATE_VALUATION_EXTRACT AS VALIDATE_VALUATION_EXTRACT
	
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_VFA_ELIGIBILITY AS VFA_ELIGIBILITY
	ON VALIDATE_VALUATION_EXTRACT.POLICY_NO = VFA_ELIGIBILITY.POLICY_NO
	
	WHERE VFA_ELIGIBILITY.POLICY_NO IS NULL;

	--store end step to log
	SET @V_END = CURRENT_TIMESTAMP;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = CONCAT('Finish ', @V_FUNCTION_NAME, ' : ', @V_END, ' Duration ', DATEDIFF(MINUTE, @V_START, @V_END));

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_END, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	--IF @@TRANCOUNT > 0
	--	COMMIT TRANSACTION;

END TRY

BEGIN CATCH
  --IF @@TRANCOUNT > 0
  --  ROLLBACK TRANSACTION;

  DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
  DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
  DECLARE @ErrorState AS INT = ERROR_STATE()

  SET @V_SEQNO 	= @V_SEQNO + 1;
  SET @V_START 	= CONVERT(DATETIME,GETDATE());
  SET @V_END 	= CONVERT(DATETIME,GETDATE());
  SET @V_DESCRIPTION	='Error execution for function on ' + @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) + ' with Error Message : ' + ERROR_MESSAGE();

  INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION") VALUES(@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
  RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)

  
END CATCH;




