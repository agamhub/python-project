CREATE PROC [FOND_ID].[USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PRUAMAN] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@PRD_ID [INTEGER] AS
BEGIN
BEGIN TRY
		--declare variable
	DECLARE @V_START			DATETIME,
	        @V_END				DATETIME,
			@V_DURATION			DATETIME,
	        @V_FUNCTION_NAME	VARCHAR(100),
			@V_DESCRIPTION		VARCHAR(100),
	        @V_CMD				VARCHAR(100),
			@V_SEQNO			INTEGER,
	        @V_PRD_ID			INTEGER,
			@V_CREATED_DATE		DATETIME,
	        @V_START_DATE		DATE,
	        @V_END_DATE			DATE,
------START GET RUN ID DETAIL FROM ABC------
     @BATCH_MASTER_ID    VARCHAR(20) = 0,
     @BATCH_RUN_ID       VARCHAR(20) = 0,
     @JOB_MASTER_ID      VARCHAR(20) = 0,
     @JOB_RUN_ID         VARCHAR(20) = 0,
     @GMT_START_DTTM     VARCHAR(20) = GETDATE();
	 
	EXEC STAG_ID.USP_GetRunIdReturn
      @JobName        = @JOBNAMESTR,
      @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
      @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
      @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
      @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
      @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
------END GET RUN ID DETAIL FROM ABC--------- 	

------set variable----------------
	SET @V_FUNCTION_NAME = 'FOND_ID.USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PRUAMAN';
	SET @V_SEQNO = 1;
	SET @V_START_DATE = CONVERT(DATE, CONVERT(CHAR(10), @PRD_ID));
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('Start ', @V_FUNCTION_NAME, ' : ', @V_START_DATE)
	  	   
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,"DESCRIPTION")
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	-----------------------------
	--- DROP ALL TEMPORARY TABLES
	-----------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('DROP ALL TEMPORARY TABLES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	--drop temp object if exists
	IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_DUP ') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_DUP ;
	
	IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN_ICG_FLAG') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN_ICG_FLAG;
	
	IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN;
	
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_PRUAMAN_TMP_1', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PRUAMAN_TMP_1;
	
	--IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_INVALID') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_INVALID;
	
	TRUNCATE TABLE FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN;
	TRUNCATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_INVALID;
		
	
		---------------------------------------------------
		--- Check Duplicate records
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE  TABLE TMP_IFRS17_ICG_STORES_PRUAMAN_DUP  : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	

		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,"DESCRIPTION")
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
		-- check duplicate
		--drop table if exists FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_DUP ;
		/*
		IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_DUP ') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_DUP ;
		*/
		
		CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_DUP  
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_ID)
		 ,CLUSTERED INDEX(POLICY_ID)
		)
		as
		select 
		POLICY_ID,
		CONTRACT_OWNER,
		CONTRACT_NUMBER,
		DISBURSTMENT_MONTH,
		SENT_BY,
		DELIVERY_DATE,
		"PLAN",
		LIFE_ASSURED,
		"ADDRESS",
		GENDER,
		ID_NUMBER,
		DATE_OF_BIRTH,
		NATIONALITY,
		BRANCH_NAME,
		LOAN_NUMBER,
		BENEFICIARY_NAME,
		BENEFICIARY_DATE_OF_BIRTH,
		RELATION_BETWEEN,
		"STATUS",
		INITIAL_LOAN,
		LAST_TOP_UP,
		TOTAL_LOAN,
		LOAN_DATE,
		DUE_DATE,
		PREMIUM_NETT,
		PREMIUM_GROSS,
		TENOR,
		DATE_TOP_UP,
		DATE_RESTRUCTURE,
		IS_ACTIVE,
		CREATED_BY,
		CREATED_DATE,
		MODIFIED_BY,
		MODIFIED_DATE,
		IS_DELETED,
		SOURCE_TYPE,
		PROCESS_TYPE,
		PROCESS_TIME,
		JOB_PROCESS_ID,
		@BATCH_MASTER_ID AS BATCH_MASTER_ID,
		@BATCH_RUN_ID AS BATCH_RUN_ID,
		@JOB_MASTER_ID AS JOB_MASTER_ID,
		@JOB_RUN_ID AS JOB_RUN_ID,
		@BATCHDATESTR AS BATCHDATE,
		@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		from STAG_ID.STAG_PRUAMAN_STAG_MS_POLICY
		where POLICY_ID in (select POLICY_ID from STAG_ID.STAG_PRUAMAN_STAG_MS_POLICY
		where NULLIF(TRIM(CAST(POLICY_ID as Varchar(36))),'') IS NOT NULL group by POLICY_ID having count(*) > 1)
		;  


		---------------------------------------------------
		--- Create Temporary Table for ICG Identification Process
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE TABLE TMP_IFRS17_ICG_STORES_PRUAMAN_ICG_FLAG : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,"DESCRIPTION")
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
		--drop table if exists STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN_icg_flag;
		/*
		IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN_ICG_FLAG') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN_ICG_FLAG;
		*/
		
		CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN_ICG_FLAG 
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
		AS 
		select distinct (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID as Varchar(36))),'')  IS NOT NULL THEN A.POLICY_ID ELSE 'N/A' END) AS POLICY_NO
		,(CASE WHEN UPPER(TRIM(CAST((CASE 
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('INFORCE', 'CLAIM') THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IS NULL THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('TERMINATED','CANCELLED') THEN NULL
					   WHEN claim.POLICY_NO IS NULL AND ICGS.STATUS_SOURCE IN ('CLAIM') THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) >=  @V_START_DATE AND UPPER(TRIM(A.IS_ACTIVE)) = 'TRUE'  THEN 'INFORCE'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) < @V_START_DATE THEN 'TERMINATED'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) >=  @V_START_DATE AND UPPER(TRIM(A.IS_ACTIVE)) = 'FALSE'  THEN  'CANCELLED'
					  END) AS VARCHAR(25)))) = 'INFORCE' THEN
							(CASE WHEN ICGS.POLICY_NO IS NULL THEN 'NEW BUSINESS'
								   WHEN CBM.BOUND_BY_REPRICE='N' AND CBM.BOUND_BY_TERMINATION_PROVISION = 'N' AND UPPER(TRIM(ICGS.STATUS_SOURCE)) <> 'INFORCE' THEN 'UPDATE EXISTING BUSINESS'
								   WHEN CBM.BOUND_BY_REPRICE='N' AND CBM.BOUND_BY_TERMINATION_PROVISION = 'N' THEN 'NO UPDATE'
								   WHEN CBM.BOUND_BY_REPRICE = 'Y' AND CAST(A.DUE_DATE as DATE) >  ICGS.CB_END_DT THEN 'NEW BUSINESS'
								   WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN 'NEW BUSINESS'
								   WHEN UPPER(TRIM(ICGS.STATUS_SOURCE)) <> 'INFORCE' THEN 'UPDATE EXISTING BUSINESS'
								   ELSE 'NO UPDATE'
							END)
			   -- A.STATCODE <> 'IF'
			   WHEN ICGS.POLICY_NO IS NULL THEN 'NEW BUSINESS'
			   WHEN LOWER(TRIM(CAST((CASE 
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('INFORCE', 'CLAIM') THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IS NULL THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('TERMINATED','CANCELLED') THEN NULL
					   WHEN claim.POLICY_NO IS NULL AND ICGS.STATUS_SOURCE IN ('CLAIM') THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) >=  @V_START_DATE AND UPPER(TRIM(A.IS_ACTIVE)) = 'TRUE'  THEN 'INFORCE'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) < @V_START_DATE THEN 'TERMINATED'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) >=  @V_START_DATE AND UPPER(TRIM(A.IS_ACTIVE)) = 'FALSE'  THEN  'CANCELLED'
					  END) AS VARCHAR(25)))) <> LOWER(TRIM(ICGS.STATUS_SOURCE)) THEN 'UPDATE EXISTING BUSINESS'
			  WHEN (CASE 
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('INFORCE', 'CLAIM') THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IS NULL THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('TERMINATED','CANCELLED') THEN NULL
					   WHEN claim.POLICY_NO IS NULL AND ICGS.STATUS_SOURCE IN ('CLAIM') THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) >=  @V_START_DATE AND UPPER(TRIM(A.IS_ACTIVE)) = 'TRUE'  THEN 'INFORCE'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) < @V_START_DATE THEN 'TERMINATED'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) >=  @V_START_DATE AND UPPER(TRIM(A.IS_ACTIVE)) = 'FALSE'  THEN  'CANCELLED'
					  END) IS NULL THEN 'UPDATE EXISTING BUSINESS' 
	  		  ELSE 'NO UPDATE'
		END) AS ICG_FLAG,
		@BATCH_MASTER_ID AS BATCH_MASTER_ID,
		@BATCH_RUN_ID AS BATCH_RUN_ID,
		@JOB_MASTER_ID AS JOB_MASTER_ID,
		@JOB_RUN_ID AS JOB_RUN_ID,
		@BATCHDATESTR AS BATCHDATE,
		@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		FROM STAG_ID.STAG_PRUAMAN_STAG_MS_POLICY A
		LEFT JOIN FOND_ID.FOND_PRUAMAN_ETL4_PRUAMAN claim
		on (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))) ELSE 'N/A' END)  = UPPER(TRIM(CAST(claim.POLICY_NO as Varchar(36)))) 
		AND claim.SUN_CD='5111010000'
		LEFT JOIN (
			select a.*
			, row_number() over(partition by POLICY_NO
			order by CB_START_DT desc, CB_END_DT desc) as idx
			FROM FOND_ID.FOND_IFRS17_ICG_STORES a
			where lower(trim(SUBSYSTEM)) = lower(trim('PruAman'))
			AND PRODUCT_CD = BENEFIT_CD
		) ICGS
		ON (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))) ELSE 'N/A' END) = UPPER(TRIM(CAST(ICGS.POLICY_NO as Varchar(36))))
		AND ICGS.idx = 1
		LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_DUP dup on A.POLICY_ID = dup.POLICY_ID
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_CB_MAPPING CBM ON LOWER(TRIM(CAST('PruAman' AS VARCHAR(30)))) = LOWER(TRIM(CBM.PRODUCT_CD))
		AND UPPER(TRIM(CAST('PruAman' AS VARCHAR(20)))) = UPPER(TRIM(CBM.SYSTEM))
		WHERE dup.POLICY_ID IS NULL
		;
	
		
		----------------------------------------------
		--create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_PRUAMAN_TMP_1
		-----------------------------------------------
		
		SET @V_SEQNO = @V_SEQNO + 1;
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_PRUAMAN_TMP_1 : ', @V_START);

		INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
		VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

		
		CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PRUAMAN_TMP_1
		WITH
		(
		  DISTRIBUTION = HASH(POLICY_NO),
		  HEAP
		)
		AS
		SELECT
		-- icg_stores column
		CAST('IAI' AS VARCHAR(4)) AS ENTITY_ID
		,CAST('PruAman' AS VARCHAR(20)) AS SYSTEM
		,CAST(A.POLICY_ID AS VARCHAR(36)) AS POLICY_NO
		,CAST('PruAman' AS VARCHAR(30)) AS PRODUCT_CD
		,CAST('PruAman' AS VARCHAR(30)) AS BENEFIT_CD
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
		NULLIF(TRIM(CAST(A.POLICY_ID as Varchar(50))),'') + '-' + FORMAT((CASE
				WHEN ICGS.POLICY_NO IS NULL THEN CAST(A.LOAN_DATE as DATE)
				WHEN CBM.BOUND_BY_REPRICE = 'Y' AND CAST(A.DUE_DATE as DATE) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
			END),'yyyy')
			  ELSE ICGS.CONTRACT_ID
		END) AS CONTRACT_ID
		--,PFM.PORTFOLIO_GROUP
		/*,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN PFM.PORTFOLIO_GROUP
			  ELSE ICGS.PORTFOLIO_GROUP
		END) AS PORTFOLIO_GROUP*/
		,CASE
      		WHEN  ICG_FLAG = 'NEW BUSINESS' THEN
      			CASE
					WHEN PFM.PRODUCT_CD IS NOT NULL THEN
						CASE
							WHEN PFM.VFA_ELIGIBLE = 'N' THEN PFM.PORTFOLIO_GROUP
							WHEN PFM.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PFM.PORTFOLIO_GROUP), 1, LEN(TRIM(PFM.PORTFOLIO_GROUP))-3) + PFM.MEASUREMENT_MODEL
						END 
      			END
			ELSE ICGS.PORTFOLIO_GROUP
		END AS PORTFOLIO_GROUP
		,CAST(FORMAT((CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
				(CASE
					WHEN ICGS.POLICY_NO IS NULL THEN CAST(A.LOAN_DATE as DATE)
					WHEN CBM.BOUND_BY_REPRICE = 'Y' AND CAST(A.DUE_DATE as DATE) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
					WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				END)
			  ELSE ICGS.CB_START_DT
		END),'yyyy') AS NUMERIC(4,0)) as COHORT_YEAR
		--,SC.SET_OF_CONTRACT
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN SC.SET_OF_CONTRACT
			  ELSE ICGS.SET_OF_CONTRACT
		END) AS SET_OF_CONTRACT
		--,ICC.INSURANCE_CONTRACT_GROUP_ID
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN ICC.INSURANCE_CONTRACT_GROUP_ID
			  ELSE ICGS.INSURANCE_CONTRACT_GROUP_ID
		END) AS INSURANCE_CONTRACT_GROUP_ID
		--,ICC.ICG_ID_PROPHET
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN ICC.ICG_ID_PROPHET
			  ELSE ICGS.ICG_ID_PROPHET
		END) AS ICG_ID_PROPHET
		,CAST(FORMAT((CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
				(CASE
					WHEN ICGS.POLICY_NO IS NULL THEN CAST(A.LOAN_DATE as DATE)
					WHEN CBM.BOUND_BY_REPRICE = 'Y' AND CAST(A.DUE_DATE as DATE) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
					WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				END)
			  ELSE ICGS.CB_START_DT
		END),'MM') AS NUMERIC(2,0)) as ENTRY_MONTH
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
				(CASE
					WHEN ICGS.POLICY_NO IS NULL THEN CAST(A.LOAN_DATE as DATE)
					WHEN CBM.BOUND_BY_REPRICE = 'Y' AND CAST(A.DUE_DATE as DATE) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
					WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				END)
			  ELSE ICGS.CB_START_DT
		END) AS CB_START_DT
		--,PFM.MEASUREMENT_MODEL
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN PFM.MEASUREMENT_MODEL
			  ELSE ICGS.MEASUREMENT_MODEL
		END) AS MEASUREMENT_MODEL
		--,SMT.INFORCE_FLAG
		,(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN SMT.INFORCE_FLAG
			  ELSE ICGS.INFORCE_FLAG
		END) AS INFORCE_FLAG
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
					(CASE
						WHEN BOUND_BY_REPRICE='N' AND BOUND_BY_TERMINATION_PROVISION = 'N' THEN CAST(A.DUE_DATE as DATE) -- BEN_EXP_DATE (RISK_CESS_DATE)
						WHEN BOUND_BY_REPRICE = 'Y' AND BOUND_BY_TERMINATION_PROVISION = 'N' THEN
							 dateadd(month,COALESCE(CAST(CBM.POINT_OF_BOUNDARY_REPRICE AS INTEGER),0),
							 (CASE
								WHEN ICGS.POLICY_NO IS NULL THEN CAST(A.LOAN_DATE as DATE)
								WHEN CBM.BOUND_BY_REPRICE = 'Y' AND CAST(A.DUE_DATE as DATE) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
								WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
							 END))
						WHEN BOUND_BY_TERMINATION_PROVISION = 'Y' AND BOUND_BY_REPRICE = 'N' THEN
							 dateadd(month,COALESCE(CAST(CBM.POINT_OF_BOUNDARY_TERMINATION AS INTEGER),0),
							 (CASE
								WHEN ICGS.POLICY_NO IS NULL THEN CAST(A.LOAN_DATE as DATE)
								WHEN CBM.BOUND_BY_REPRICE = 'Y' AND CAST(A.DUE_DATE as DATE) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
								WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
							 END))
					END)
			  ELSE ICGS.COVERAGE_LEVEL_END_DATE
		END) AS COVERAGE_LEVEL_END_DATE
		--,CAST('IDR' AS VARCHAR(3)) AS CCY_CD
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN CAST('IDR' AS VARCHAR(3))
			  ELSE ICGS.CCY_CD
		END) AS CCY_CD
		,(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN
				CAST((CASE 
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('INFORCE', 'CLAIM') THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IS NULL THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('TERMINATED','CANCELLED') THEN NULL
					   WHEN claim.POLICY_NO IS NULL AND ICGS.STATUS_SOURCE IN ('CLAIM') THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) >=  @V_START_DATE AND UPPER(TRIM(A.IS_ACTIVE)) = 'TRUE'  THEN 'INFORCE'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) < @V_START_DATE THEN 'TERMINATED'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) >=  @V_START_DATE AND UPPER(TRIM(A.IS_ACTIVE)) = 'FALSE'  THEN  'CANCELLED'
					  END) AS VARCHAR(25))
			  ELSE ICGS.STATUS_SOURCE
		END) AS STATUS_SOURCE
		--,CAST(A.DUE_DATE as DATE) AS BEN_EXP_DATE
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN CAST(A.DUE_DATE as DATE)
			  ELSE ICGS.BEN_EXP_DATE
		END) AS BEN_EXP_DATE
		,icg_flag.ICG_FLAG AS ICG_FLAG
		,cast('PruAman' as varchar(20)) as SUBSYSTEM
		,current_timestamp as CREATED_DATE
		,current_timestamp as UPDATED_DATE
		,@BATCH_MASTER_ID AS BATCH_MASTER_ID
		,@BATCH_RUN_ID AS BATCH_RUN_ID
		,@JOB_MASTER_ID AS JOB_MASTER_ID
		,@JOB_RUN_ID AS JOB_RUN_ID
		,@BATCHDATESTR AS BATCHDATE
		,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		FROM STAG_ID.STAG_PRUAMAN_STAG_MS_POLICY    A
		LEFT JOIN FOND_ID.FOND_PRUAMAN_ETL4_PRUAMAN claim
		on (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))) ELSE 'N/A' END) = UPPER(TRIM(CAST(claim.POLICY_NO AS VARCHAR(36))))  
		AND claim.SUN_CD='5111010000'
		LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_DUP dup on A.POLICY_ID = dup.POLICY_ID
		LEFT JOIN STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN_ICG_FLAG icg_flag
		on (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))) ELSE 'N/A' END) 
		= UPPER(TRIM(CAST(icg_flag.POLICY_NO AS VARCHAR(36))))
		LEFT JOIN (
			select a.*
			, row_number() over(partition by POLICY_NO
			order by CB_START_DT desc, CB_END_DT desc) as idx
			FROM FOND_ID.FOND_IFRS17_ICG_STORES a
			where lower(trim(SUBSYSTEM)) = lower(trim('PruAman'))
			AND PRODUCT_CD = BENEFIT_CD
		) ICGS
		ON (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))) ELSE 'N/A' END) = UPPER(TRIM(CAST(ICGS.POLICY_NO AS VARCHAR(36)))) 
		AND ICGS.idx = 1
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_CB_MAPPING CBM ON CAST('PruAman' AS VARCHAR(30)) = CBM.PRODUCT_CD
		AND UPPER(TRIM(CAST('PruAman' AS VARCHAR(20)))) = UPPER(TRIM(CBM.SYSTEM))
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING PFM
		on CAST('PruAman' AS VARCHAR(30)) = PFM.PRODUCT_CD AND CAST('IDR' AS VARCHAR(3)) = PFM.CCY_CD
		AND UPPER(TRIM(CAST('PruAman' AS VARCHAR(20)))) = UPPER(TRIM(PFM.SYSTEM))
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_SET_OF_CONTRACT SC
		ON CAST('PruAman' AS VARCHAR(30)) = SC.PRODUCT_CD AND CAST('IDR' AS VARCHAR(3)) = SC.CCY_CD
		AND UPPER(TRIM(CAST('PruAman' AS VARCHAR(20)))) = UPPER(TRIM(SC.SYSTEM))
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG ICC
		ON --TRIM(PFM.PORTFOLIO_GROUP) = TRIM(ICC.PORTFOLIO_GROUP)
		(CASE
      		WHEN  ICG_FLAG = 'NEW BUSINESS' THEN
      			CASE
					WHEN PFM.PRODUCT_CD IS NOT NULL THEN
						CASE
							WHEN PFM.VFA_ELIGIBLE = 'N' THEN TRIM(PFM.PORTFOLIO_GROUP)
							WHEN PFM.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PFM.PORTFOLIO_GROUP), 1, LEN(TRIM(PFM.PORTFOLIO_GROUP))-3) + PFM.MEASUREMENT_MODEL
						END 
      			END
			ELSE TRIM(ICGS.PORTFOLIO_GROUP)
		END) = TRIM(ICC.PORTFOLIO_GROUP)
		AND CAST(FORMAT((CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
				(CASE
					WHEN ICGS.POLICY_NO IS NULL THEN CAST(A.LOAN_DATE as DATE)
					WHEN CBM.BOUND_BY_REPRICE = 'Y' AND CAST(A.DUE_DATE as DATE) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
					WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				END)
			  ELSE ICGS.CB_START_DT
		END),'yyyy') AS NUMERIC(4,0)) = CAST(ICC.COHORT_YEAR AS NUMERIC(4,0))
		AND TRIM(SC.SET_OF_CONTRACT) = TRIM(ICC.SET_OF_CONTRACT)
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE SMT on
		TRIM(UPPER((CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN
				CAST((CASE 
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('INFORCE', 'CLAIM') THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IS NULL THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('TERMINATED','CANCELLED') THEN NULL
					   WHEN claim.POLICY_NO IS NULL AND ICGS.STATUS_SOURCE IN ('CLAIM') THEN 'CLAIM'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) >=  @V_START_DATE AND UPPER(TRIM(A.IS_ACTIVE)) = 'TRUE'  THEN 'INFORCE'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) < @V_START_DATE THEN 'TERMINATED'
					   WHEN claim.POLICY_NO IS NULL AND CAST(A.DUE_DATE as DATE) >=  @V_START_DATE AND UPPER(TRIM(A.IS_ACTIVE)) = 'FALSE'  THEN  'CANCELLED'
					  END) AS VARCHAR(25))
			  ELSE ICGS.STATUS_SOURCE
		END))) = TRIM(UPPER(SMT.STATUS_SOURCE))
		AND UPPER(TRIM(CAST('PruAman' AS VARCHAR(20)))) = UPPER(TRIM(SMT.SYSTEM))
		WHERE dup.POLICY_ID is null
		;
		
		---------------------------------------------------
		--- Get ICG Stores only for non duplicate records
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE TABLE ifrs17_icg_stores_PRUAMAN : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,"DESCRIPTION")
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN 
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
		AS
		SELECT
		 ENTITY_ID
		,SYSTEM
		,POLICY_NO
		,PRODUCT_CD
		,BENEFIT_CD
		,CONTRACT_ID
		,PORTFOLIO_GROUP
		,COHORT_YEAR
		,SET_OF_CONTRACT
		,INSURANCE_CONTRACT_GROUP_ID
		,ICG_ID_PROPHET
		,ENTRY_MONTH
		,CB_START_DT
		,CASE 
			WHEN CB_START_DT > COVERAGE_LEVEL_END_DATE THEN CB_START_DT 
			ELSE COVERAGE_LEVEL_END_DATE 
		END AS CB_END_DT
		,MEASUREMENT_MODEL
		,INFORCE_FLAG
		,COVERAGE_LEVEL_END_DATE
    	,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE
		,ICG_FLAG
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		,BATCH_MASTER_ID
		,BATCH_RUN_ID
		,JOB_MASTER_ID
		,JOB_RUN_ID
		,BATCHDATE
		,ETL_PROCESS_DATE_TIME
		FROM tempdb.dbo.#TMP_IFRS17_ICG_STORES_PRUAMAN_TMP_1
		;
		
		
				--------------------------------------------------------------------
		--- Create TABLE for invalid ICG Stores  IFRS17
		--- will be change after get final structure
		--------------------------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE TABLE  FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_INVALID: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,"DESCRIPTION")
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		--drop table if exists FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_INVALID;
		/*IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_INVALID') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_INVALID;
		CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_INVALID 
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
		AS
		*/
		--TRUNCATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_INVALID;
		INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_INVALID
		select 
		a.ENTITY_ID
		,a.SYSTEM
		,a.POLICY_NO
		,a.PRODUCT_CD
		,a.BENEFIT_CD
		,a.CONTRACT_ID
		,a.PORTFOLIO_GROUP
		,a.COHORT_YEAR
		,a.SET_OF_CONTRACT
		,a.INSURANCE_CONTRACT_GROUP_ID
		,a.ICG_ID_PROPHET
		,a.ENTRY_MONTH
		,CB_START_DT as CB_START_DT
		,(case when a.CB_END_DT IS NOT NULL AND a.BEN_EXP_DATE IS NOT NULL THEN (case when a.CB_END_DT <= a.BEN_EXP_DATE then a.CB_END_DT else a.BEN_EXP_DATE end) ELSE NULL end) as CB_END_DT
		,MEASUREMENT_MODEL 
		,INFORCE_FLAG
		,(case when a.COVERAGE_LEVEL_END_DATE IS NOT NULL AND a.BEN_EXP_DATE IS NOT NULL THEN (case when a.COVERAGE_LEVEL_END_DATE <= a.BEN_EXP_DATE then a.COVERAGE_LEVEL_END_DATE else a.BEN_EXP_DATE end) ELSE NULL end) as COVERAGE_LEVEL_END_DATE
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE as BEN_EXP_DATE
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		,upper(
			(case when NULLIF(TRIM(a.POLICY_NO),'') is null then 'POLICY_NO,' else '' end)+
			(case when NULLIF(TRIM(a.PRODUCT_CD),'') is null then 'PRODUCT_CD,' else '' end)+
			(case when NULLIF(TRIM(a.BENEFIT_CD),'') is null then 'BENEFIT_CD,' else '' end)+
			(case when NULLIF(TRIM(a.CONTRACT_ID),'') is null then 'CONTRACT_ID,' else '' end)+
			(case when NULLIF(TRIM(a.PORTFOLIO_GROUP),'') is null then 'PORTFOLIO_GROUP,' else '' end)+
			(case when a.COHORT_YEAR is null then 'COHORT_YEAR,' else '' end)+
			(case when NULLIF(TRIM(a.SET_OF_CONTRACT),'') is null then 'SET_OF_CONTRACT,' else '' end)+
			(case when NULLIF(TRIM(a.INSURANCE_CONTRACT_GROUP_ID),'') is null then 'INSURANCE_CONTRACT_GROUP_ID,' else '' end)+
			(case when a.ICG_ID_PROPHET is null then 'ICG_ID_PROPHET,' else '' end)+
			(case when a.ENTRY_MONTH is null then 'ENTRY_MONTH,' else '' end)+
			(case when a.CB_START_DT is null then 'CB_START_DT,' else '' end)+
			(case when (case when a.CB_END_DT IS NOT NULL AND a.BEN_EXP_DATE IS NOT NULL THEN (case when a.CB_END_DT <= a.BEN_EXP_DATE then a.CB_END_DT else a.BEN_EXP_DATE end) ELSE NULL end) is null then 'CB_END_DT,' else '' end)+
			(case when NULLIF(TRIM(a.MEASUREMENT_MODEL),'') is null then 'MEASUREMENT_MODEL,' else '' end)+
			(case when NULLIF(TRIM(a.INFORCE_FLAG),'') is null then 'INFORCE_FLAG,' else '' end)+
			(case when (case when a.COVERAGE_LEVEL_END_DATE IS NOT NULL AND a.BEN_EXP_DATE IS NOT NULL THEN (case when a.COVERAGE_LEVEL_END_DATE <= a.BEN_EXP_DATE then a.COVERAGE_LEVEL_END_DATE else a.BEN_EXP_DATE end) ELSE NULL end) is null then 'COVERAGE_LEVEL_END_DATE,' else '' end)+
			(case when NULLIF(TRIM(a.CCY_CD),'') is null then 'CCY_CD,' else '' end)+
			(case when NULLIF(TRIM(a.STATUS_SOURCE),'') is null then 'STATUS_SOURCE,' else '' end) +
			(case when a.BEN_EXP_DATE is null then 'BEN_EXP_DATE,' else '' end) +
			(case when a.CB_START_DT > a.BEN_EXP_DATE then 'CB_START_DT > BEN_EXP_DATE,' else '' end)
		) as INVALID_DESC 
		,@BATCH_MASTER_ID AS BATCH_MASTER_ID
		,@BATCH_RUN_ID AS BATCH_RUN_ID
		,@JOB_MASTER_ID AS JOB_MASTER_ID
		,@JOB_RUN_ID AS JOB_RUN_ID
		,@BATCHDATESTR AS BATCHDATE
		,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		from STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN a
		where 
		(case 	
			when NULLIF(TRIM(POLICY_NO),'') is null then 'N'
			when NULLIF(TRIM(PRODUCT_CD),'') is null then 'N'
			when NULLIF(TRIM(BENEFIT_CD),'') is null then 'N'
			when NULLIF(TRIM(CONTRACT_ID),'') is null then 'N'
			when NULLIF(TRIM(PORTFOLIO_GROUP),'') is null then 'N'
			when COHORT_YEAR is null then 'N'
			when NULLIF(TRIM(SET_OF_CONTRACT),'') is null then 'N'
			when NULLIF(TRIM(INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
			when ICG_ID_PROPHET is null then 'N'
			when ENTRY_MONTH is null then 'N'
			when CB_START_DT is null then 'N'
			when CB_END_DT is null then 'N'
			when NULLIF(TRIM(MEASUREMENT_MODEL),'') is null then 'N'
			when NULLIF(TRIM(INFORCE_FLAG),'') is null then 'N'
			when COVERAGE_LEVEL_END_DATE is null then 'N'
			when NULLIF(TRIM(CCY_CD),'') is null then 'N'
			when NULLIF(TRIM(STATUS_SOURCE),'') is null then 'N'
			when BEN_EXP_DATE is null then 'N'
			when (CB_START_DT > BEN_EXP_DATE AND STATUS_SOURCE = 'INFORCE') then 'N'
			ELSE 'Y'
		end) = 'N'
		; 


		
		---------------------------------------------------
		--- Begin transaction
		---------------------------------------------------
		
		--BEGIN TRAN;
		--SET NOCOUNT ON

		---------------------------------------------------
		--- Update existing records to ICG Stores Tables for "new business"
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'update FOND_ID.FOND_IFRS17_ICG_STORES for new business : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,"DESCRIPTION")
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- update existing records in icg stores for valid new business. update only INFORCE_FLAG='N'
		update FOND_ID.FOND_IFRS17_ICG_STORES 
		set INFORCE_FLAG = 'N', UPDATED_DATE=current_timestamp
		from STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN 
		where UPPER(TRIM(FOND_IFRS17_ICG_STORES.POLICY_NO)) = UPPER(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.POLICY_NO))
		AND TMP_IFRS17_ICG_STORES_PRUAMAN.ICG_FLAG = 'NEW BUSINESS'
		AND lower(trim(FOND_IFRS17_ICG_STORES.SUBSYSTEM)) = lower(trim('PruAman'))
		AND (case
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.POLICY_NO),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.PRODUCT_CD),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.BENEFIT_CD),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.CONTRACT_ID),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.PORTFOLIO_GROUP),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES_PRUAMAN.COHORT_YEAR is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.SET_OF_CONTRACT),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES_PRUAMAN.ICG_ID_PROPHET is null then 'N'
			when TMP_IFRS17_ICG_STORES_PRUAMAN.ENTRY_MONTH is null then 'N'
			when TMP_IFRS17_ICG_STORES_PRUAMAN.CB_START_DT is null then 'N'
			when TMP_IFRS17_ICG_STORES_PRUAMAN.CB_END_DT is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.MEASUREMENT_MODEL),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.INFORCE_FLAG),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES_PRUAMAN.COVERAGE_LEVEL_END_DATE is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.CCY_CD),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.STATUS_SOURCE),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES_PRUAMAN.BEN_EXP_DATE is null then 'N'
			when (TMP_IFRS17_ICG_STORES_PRUAMAN.CB_START_DT > TMP_IFRS17_ICG_STORES_PRUAMAN.BEN_EXP_DATE  AND TMP_IFRS17_ICG_STORES_PRUAMAN.STATUS_SOURCE = 'INFORCE') then 'N'
			ELSE 'Y'
		end) = 'Y'
		;

		---------------------------------------------------
		--- Update existing records to ICG Stores Tables
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'update FOND_ID.FOND_IFRS17_ICG_STORES: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,"DESCRIPTION")
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- update existing records in icg stores.
		update FOND_ID.FOND_IFRS17_ICG_STORES 
		set STATUS_SOURCE = TMP_IFRS17_ICG_STORES_PRUAMAN.STATUS_SOURCE, INFORCE_FLAG = TMP_IFRS17_ICG_STORES_PRUAMAN.INFORCE_FLAG, UPDATED_DATE=current_timestamp
		from STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN 
		where UPPER(TRIM(FOND_IFRS17_ICG_STORES.POLICY_NO)) = UPPER(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.POLICY_NO))
		AND FOND_IFRS17_ICG_STORES.BENEFIT_CD = TMP_IFRS17_ICG_STORES_PRUAMAN.BENEFIT_CD
		AND lower(trim(FOND_IFRS17_ICG_STORES.SUBSYSTEM)) = lower(trim('PruAman'))
		AND TMP_IFRS17_ICG_STORES_PRUAMAN.ICG_FLAG = 'UPDATE EXISTING BUSINESS' 
		AND NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.INFORCE_FLAG),'') is not null 
		AND NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PRUAMAN.STATUS_SOURCE),'') is not null 
		;

		---------------------------------------------------
		--- Insert new valid records to ICG Stores Tables
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'insert into FOND_ID.FOND_IFRS17_ICG_STORES for new business: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,"DESCRIPTION")
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- insert valid new records to icg stores
		INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES(
		ENTITY_ID
		,SYSTEM
		,POLICY_NO
		,PRODUCT_CD
		,BENEFIT_CD
		,CONTRACT_ID
		,PORTFOLIO_GROUP
		,COHORT_YEAR
		,SET_OF_CONTRACT
		,INSURANCE_CONTRACT_GROUP_ID
		,ICG_ID_PROPHET
		,ENTRY_MONTH
		,CB_START_DT
		,CB_END_DT
		,MEASUREMENT_MODEL
		,INFORCE_FLAG
		,COVERAGE_LEVEL_END_DATE
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		,BATCH_MASTER_ID
		,BATCH_RUN_ID
		,JOB_MASTER_ID
		,JOB_RUN_ID
		,BATCHDATE
		,ETL_PROCESS_DATE_TIME
		)
		SELECT 
		ENTITY_ID
		,SYSTEM
		,POLICY_NO
		,PRODUCT_CD
		,BENEFIT_CD
		,CONTRACT_ID
		,PORTFOLIO_GROUP
		,COHORT_YEAR
		,SET_OF_CONTRACT
		,INSURANCE_CONTRACT_GROUP_ID
		,ICG_ID_PROPHET
		,ENTRY_MONTH
		,CB_START_DT
		,(case when CB_END_DT <= BEN_EXP_DATE then CB_END_DT else BEN_EXP_DATE end)
		,MEASUREMENT_MODEL
		,INFORCE_FLAG
		,(case when COVERAGE_LEVEL_END_DATE <= BEN_EXP_DATE then COVERAGE_LEVEL_END_DATE else BEN_EXP_DATE end)
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		,@BATCH_MASTER_ID AS BATCH_MASTER_ID
		,@BATCH_RUN_ID AS BATCH_RUN_ID
		,@JOB_MASTER_ID AS JOB_MASTER_ID
		,@JOB_RUN_ID AS JOB_RUN_ID
		,@BATCHDATESTR AS BATCHDATE
		,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		from STAG_ID.TMP_IFRS17_ICG_STORES_PRUAMAN
		where ICG_FLAG =  'NEW BUSINESS'
		AND (case 	
			when NULLIF(TRIM(POLICY_NO),'') is null then 'N'
			when NULLIF(TRIM(PRODUCT_CD),'') is null then 'N'
			when NULLIF(TRIM(BENEFIT_CD),'') is null then 'N'
			when NULLIF(TRIM(CONTRACT_ID),'') is null then 'N'
			when NULLIF(TRIM(PORTFOLIO_GROUP),'') is null then 'N'
			when COHORT_YEAR is null then 'N'
			when NULLIF(TRIM(SET_OF_CONTRACT),'') is null then 'N'
			when NULLIF(TRIM(INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
			when ICG_ID_PROPHET is null then 'N'
			when ENTRY_MONTH is null then 'N'
			when CB_START_DT is null then 'N'
			when CB_END_DT is null then 'N'
			when NULLIF(TRIM(MEASUREMENT_MODEL),'') is null then 'N'
			when NULLIF(TRIM(INFORCE_FLAG),'') is null then 'N'
			when COVERAGE_LEVEL_END_DATE is null then 'N'
			when NULLIF(TRIM(CCY_CD),'') is null then 'N'
			when NULLIF(TRIM(STATUS_SOURCE),'') is null then 'N'
			when BEN_EXP_DATE is null then 'N'
			when (CB_START_DT > BEN_EXP_DATE AND STATUS_SOURCE= 'INFORCE')  then 'N'
			ELSE 'Y'
		end) = 'Y'
		;

		--------------------------------------------------------------------
		--- INSERT final table for reporting MP Files IFRS17
		--- will be change after get final structure
		--------------------------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,"DESCRIPTION")
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		
		
		---------------------------------------------------
		--- Create Temporary Table for MP Files based on valid records in ICG Stores
		---------------------------------------------------
		-- insert valid records
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE TABLE FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,"DESCRIPTION")
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
		-- add new column to MP files for ifrs17 for valid icg stores
		--drop table if exists FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN;
		INSERT INTO FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN		
		SELECT
		-- existing column from pruaman
		PRUAMAN.POLICY_ID
		,PRUAMAN.CONTRACT_OWNER
		,PRUAMAN.CONTRACT_NUMBER
		,PRUAMAN.DISBURSTMENT_MONTH
		,PRUAMAN.SENT_BY
		,PRUAMAN.DELIVERY_DATE
		,PRUAMAN."PLAN"
		,PRUAMAN.LIFE_ASSURED
		,PRUAMAN."ADDRESS"
		,PRUAMAN.GENDER
		,PRUAMAN.ID_NUMBER
		,PRUAMAN.DATE_OF_BIRTH
		,PRUAMAN.NATIONALITY
		,PRUAMAN.BRANCH_NAME
		,PRUAMAN.LOAN_NUMBER
		,PRUAMAN.BENEFICIARY_NAME
		,PRUAMAN.BENEFICIARY_DATE_OF_BIRTH
		,PRUAMAN.RELATION_BETWEEN
		,PRUAMAN.STATUS
		,PRUAMAN.INITIAL_LOAN
		,PRUAMAN.LAST_TOP_UP
		,PRUAMAN.TOTAL_LOAN
		,PRUAMAN.LOAN_DATE
		,PRUAMAN.DUE_DATE
		,PRUAMAN.PREMIUM_NETT
		,PRUAMAN.PREMIUM_GROSS
		,PRUAMAN.TENOR
		,PRUAMAN.DATE_TOP_UP
		,PRUAMAN.DATE_RESTRUCTURE
		,PRUAMAN.IS_ACTIVE
		,PRUAMAN.CREATED_BY
		,PRUAMAN.CREATED_DATE
		,PRUAMAN.MODIFIED_BY
		,PRUAMAN.MODIFIED_DATE
		-- additional column for mpfiles ifrs17
		,a.PRODUCT_CD
		,b.IFRS_ONEROUS_GRP
		,(case when cast(FORMAT(@V_START_DATE,'yyyy') as numeric(4,0)) = a.COHORT_YEAR then a.ENTRY_MONTH
			   when a.COHORT_YEAR < 1997 then 13
			   when a.COHORT_YEAR is not null then (a.COHORT_YEAR-1997) + 14
		 end) as IFRS_CY_GRP
		,c.IFRS_PORT_GRP
		,c.IFRS_MEASURE_MODEL
		,a.COHORT_YEAR as BASIC_ENTRY_YEAR
		,a.ENTRY_MONTH as BASIC_ENTRY_MONTH
		,(CAST(FORMAT(a.CB_END_DT,'yyyy') AS NUMERIC(4,0))-CAST(FORMAT(a.CB_START_DT,'yyyy') AS NUMERIC(4,0)))*12
		+ (CAST(FORMAT(a.CB_END_DT,'MM') AS NUMERIC(2,0))-CAST(FORMAT(a.CB_START_DT,'MM') AS NUMERIC(2,0))) as IFRS_CB_TERM_M
		,(case when cast(FORMAT(@V_START_DATE,'yyyy') as numeric(4,0)) = a.COHORT_YEAR then a.ENTRY_MONTH when a.COHORT_YEAR is not null then 0 else null end) as MTHS_TO_SALE
		,a.INSURANCE_CONTRACT_GROUP_ID AS IFRS_ICG_ID
		,a.ICG_ID_PROPHET AS IFRS_ICG_ID_PROPHET
		,b.SUB_GROUP_ID
		,a.ENTITY_ID
		,a.CCY_CD
		,a.CB_START_DT
		,a.CB_END_DT
		,(case when cast(FORMAT(@V_START_DATE,'yyyy') as numeric(4,0)) = a.COHORT_YEAR then 
				NULLIF(TRIM(a.INSURANCE_CONTRACT_GROUP_ID),'')+'_'+NULLIF(UPPER(TRIM(FORMAT(a.CB_START_DT,'MMM'))),'') end) 
		as REL_INSURANCE_CONTRACT_GROUP_ID
		,a.STATUS_SOURCE
		--,cast('PruAman' as varchar(20)) as SUBSYSTEM
		--,current_timestamp as CREATED_DATE
		--,current_timestamp as UPDATED_DATE
		,@BATCH_MASTER_ID AS BATCH_MASTER_ID
		,@BATCH_RUN_ID AS BATCH_RUN_ID
		,@JOB_MASTER_ID AS JOB_MASTER_ID
		,@JOB_RUN_ID AS JOB_RUN_ID
		,@BATCHDATESTR AS BATCHDATE
		,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		from STAG_ID.STAG_PRUAMAN_STAG_MS_POLICY  PRUAMAN
		LEFT join (
			select x.*
			, row_number() over(partition by POLICY_NO 
			order by CB_START_DT desc, CB_END_DT desc) as idx 
			FROM FOND_ID.FOND_IFRS17_ICG_STORES x
			where lower(trim(x.SUBSYSTEM)) = lower(trim('PruAman'))
			AND PRODUCT_CD = BENEFIT_CD
		) a
		ON (CASE WHEN NULLIF(TRIM(CAST(PRUAMAN.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(PRUAMAN.POLICY_ID AS VARCHAR(36)))) ELSE 'N/A' END) = UPPER(TRIM(CAST(a.POLICY_NO AS VARCHAR(36)))) 
		AND a.idx = 1
		left join STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG b 
		on a.PORTFOLIO_GROUP = b.PORTFOLIO_GROUP
		and (CASE WHEN (cast(a.COHORT_YEAR as numeric(4,0))) <'2018' THEN '2018' ELSE (cast(a.COHORT_YEAR as numeric(4,0))) END) = cast(b.COHORT_YEAR as numeric(4,0))
		and a.SET_OF_CONTRACT = b.SET_OF_CONTRACT
		left join STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING c 
		on a.PRODUCT_CD = c.PRODUCT_CD AND a.CCY_CD = c.CCY_CD 
		AND UPPER(TRIM(CAST('PruAman' AS VARCHAR(20)))) = UPPER(TRIM(c.SYSTEM))
		;
		

		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Finish ' + @V_FUNCTION_NAME + ' : ' +  convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,"DESCRIPTION") VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	

		--IF @@TRANCOUNT > 0  
		--COMMIT TRAN;

	---------------------------------------------------
	--- INSERTING HIS DATA FOR AOM PROCESS AND DELETE HIS DATA IF THERE WAS ROLLBACK PROCESS
	---------------------------------------------------

		DELETE FROM [FOND_ID].[FOND_IFRS17_MPFILES_PRUAMAN_HIS]
		WHERE CAST(BACKUP_BATCHDATE AS DATE) = EOMONTH(CONVERT(DATE, CONVERT(CHAR(10), @V_START_DATE)));

		INSERT INTO [FOND_ID].[FOND_IFRS17_MPFILES_PRUAMAN_HIS]
		SELECT A.*
		FROM (
			SELECT [POLICY_ID] ,[CONTRACT_OWNER] ,[CONTRACT_NUMBER] ,[DISBURSTMENT_MONTH] ,[SENT_BY] ,[DELIVERY_DATE] ,[PLAN] ,[LIFE_ASSURED] ,[ADDRESS] ,[GENDER] ,[ID_NUMBER] ,[DATE_OF_BIRTH] ,[NATIONALITY] ,[BRANCH_NAME] ,[LOAN_NUMBER] ,[BENEFICIARY_NAME] ,[BENEFICIARY_DATE_OF_BIRTH] ,[RELATION_BETWEEN] ,[STATUS] ,[INITIAL_LOAN] ,[LAST_TOP_UP] ,[TOTAL_LOAN] ,[LOAN_DATE] ,[DUE_DATE] ,[PREMIUM_NETT] ,[PREMIUM_GROSS] ,[TENOR] ,[DATE_TOP_UP] ,[DATE_RESTRUCTURE] ,[IS_ACTIVE] ,[CREATED_BY] ,[CREATED_DATE] ,[MODIFIED_BY] ,[MODIFIED_DATE] ,[PRODUCT_CD] ,[IFRS_ONEROUS_GRP] ,[IFRS_CY_GRP] ,[IFRS_PORT_GRP] ,[IFRS_MEASURE_MODEL] ,[BASIC_ENTRY_YEAR] ,[BASIC_ENTRY_MONTH] ,[IFRS_CB_TERM_M] ,[MTHS_TO_SALE] ,[IFRS_ICG_ID] ,[IFRS_ICG_ID_PROPHET] ,[SUB_GROUP_ID] ,[ENTITY_ID] ,[CCY_CD] ,[CB_START_DT] ,[CB_END_DT] ,[REL_INSURANCE_CONTRACT_GROUP_ID] ,[STATUS_SOURCE],
			EOMONTH(CONVERT(DATE, CONVERT(CHAR(10), @V_START_DATE))) AS BACKUP_BATCHDATE,
			BATCH_MASTER_ID, 
			BATCH_RUN_ID,
			JOB_MASTER_ID,
			JOB_RUN_ID,
			BATCHDATE,
			ETL_PROCESS_DATE_TIME
			FROM [FOND_ID].[FOND_IFRS17_MPFILES_PRUAMAN]
		)A;


	END TRY

	BEGIN CATCH
	
		DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
		DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
		DECLARE @ErrorState AS INT = ERROR_STATE()
		
		--IF @@TRANCOUNT > 0  
		--	ROLLBACK TRAN; 
		
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,"DESCRIPTION") VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		
		RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)
		
	END CATCH ;
END;
	


