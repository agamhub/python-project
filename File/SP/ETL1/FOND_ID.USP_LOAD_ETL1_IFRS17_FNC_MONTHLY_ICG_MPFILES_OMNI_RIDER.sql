CREATE PROC [FOND_ID].[USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_OMNI_RIDER] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@PRD_ID [INTEGER] AS
BEGIN TRY
    --declare variable
	DECLARE @V_START			DATETIME,
	        @V_END				DATETIME,
			@V_DURATION			DATETIME,
	        @V_FUNCTION_NAME	VARCHAR(100),
			@V_DESCRIPTION		VARCHAR(100),
	        @V_CMD				VARCHAR(100),
			@V_SEQNO			INTEGER,
	        @V_PRD_ID			INTEGER,
			@V_CREATED_DATE		DATETIME,
	        @V_START_DATE		DATE,
	        @V_END_DATE			DATE,
	------START GET RUN ID DETAIL FROM ABC------
            @BATCH_MASTER_ID    VARCHAR(20) = 0,
            @BATCH_RUN_ID       VARCHAR(20) = 0,
            @JOB_MASTER_ID      VARCHAR(20) = 0,
            @JOB_RUN_ID         VARCHAR(20) = 0,
            @GMT_START_DTTM     VARCHAR(20) = GETDATE();

	EXEC STAG_ID.USP_GetRunIdReturn
      @JobName         = @JOBNAMESTR,
      @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
      @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
      @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
      @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
      @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
    ------END GET RUN ID DETAIL FROM ABC------

	--set variable
	SET @V_FUNCTION_NAME = 'FOND_ID.USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_OMNI_RIDER';
	SET @V_SEQNO = 1;
	SET @V_START_DATE = CONVERT(DATE, CONVERT(CHAR(10), @PRD_ID));
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('Start ', @V_FUNCTION_NAME, ' : ', @V_START_DATE);

	--store initial step to log
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	-----------------------------
	--- DROP ALL TEMPORARY TABLES
	-----------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('DROP ALL TEMPORARY TABLES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
    
	--drop temp object if exists
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_RIDER_TMP_1', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_RIDER_TMP_1;
	--IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_RIDER_TMP_2', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_RIDER_TMP_2;
	
	--drop permanent object if exists
	IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_OMNI_RIDER_DISAPPEAR','U') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_OMNI_RIDER_DISAPPEAR;
	IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_OMNI_RIDER','U') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_OMNI_RIDER;
	
	--DELETE FROM FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_INVALID WHERE UPPER(TRIM(SUBSYSTEM)) = 'OMNI' AND NULLIF(TRIM(PRODUCT_CD), '')  <> BENEFIT_CD; -- Delete Invalid Record in Omni Rider
	
	---------------------------------------------------------------------
	--- CREATE TABLE TO STORE DUPLICATE POLICY_NO IN THE SOURCE TABLE
	---------------------------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('CREATE TABLE TO STORE DUPLICATE POLICY_NO IN THE SOURCE TABLE : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	
	---------------------------------------------------------------------
	--- INSERT INTO OMNI FOR DISAPPEAR POLICY
	---------------------------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT INTO OMNI DISAPPEAR POLICY : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_OMNI_RIDER_DISAPPEAR
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  CLUSTERED INDEX(POLICY_NO)
    )
	AS
		SELECT 
		DISTINCT 
			ICGS_RIDER.POLICY_NO, 
			ICGS_RIDER.PRODUCT_CD, 
			ICGS_RIDER.BENEFIT_CD
		FROM FOND_ID.FOND_IFRS17_ICG_STORES ICGS_RIDER
			LEFT JOIN (
			SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_CI_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS 
				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_CI_RIDER_CODE IS NOT NULL UNION ALL
			SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_TERMINAL_ILLNESS_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS 
				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_TERMINAL_ILLNESS_RIDER_CODE IS NOT NULL UNION ALL
			SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_TPD_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS 
				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_TPD_RIDER_CODE IS NOT NULL UNION ALL
			SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_AD_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS 
				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_AD_RIDER_CODE IS NOT NULL UNION ALL
			SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_ACCIDENTAL_MEDICAL_REIMBURSEMENT_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS 
				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_ACCIDENTAL_MEDICAL_REIMBURSEMENT_RIDER_CODE IS NOT NULL UNION ALL
			SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_ADD_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS 
				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_ADD_RIDER_CODE IS NOT NULL UNION ALL
			SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_OUTPATIENT_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS 
				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_OUTPATIENT_RIDER_CODE IS NOT NULL UNION ALL
			SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_OPTICAL_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS	
				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_OPTICAL_RIDER_CODE IS NOT NULL UNION ALL
			SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_DENTAL_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS	
				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_DENTAL_RIDER_CODE IS NOT NULL UNION ALL
			SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_MATERNITY_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS
				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_MATERNITY_RIDER_CODE IS NOT NULL UNION ALL
			SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_PREVENTIVE_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS	
				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_PREVENTIVE_RIDER_CODE IS NOT NULL UNION ALL
			SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_MEDICAL_EVACUATION_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS
				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_MEDICAL_EVACUATION_RIDER_CODE IS NOT NULL
			) TBL_VALUE_EXTRACT_RIDER
		ON TBL_VALUE_EXTRACT_RIDER.CERTIFICATE_MEMBER_CARD_ID =  ICGS_RIDER.POLICY_NO 
		AND TBL_VALUE_EXTRACT_RIDER.PRODUCT_CODE = ICGS_RIDER.PRODUCT_CD
		AND TBL_VALUE_EXTRACT_RIDER.RIDER_CODE = ICGS_RIDER.BENEFIT_CD
		WHERE 
		    TBL_VALUE_EXTRACT_RIDER.CERTIFICATE_MEMBER_CARD_ID IS NULL 
			AND ICGS_RIDER.PRODUCT_CD <> ICGS_RIDER.BENEFIT_CD 
			AND ICGS_RIDER.STATUS_SOURCE <> 'INACTIVE'
			AND UPPER(ICGS_RIDER.SUBSYSTEM) = 'OMNI'
	;

	------------------------------------------------
	--- INSERT NEW BUSINESS TO ICG STORES TEMP TABLE
	------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT NEW BUSINESS TO ICG STORES TEMP TABLE : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);


	------------------------------------------------------------------
	--create temp table STAG_TEMP_IFRS17_ICG_STORES_PROPTRDR_TMP_1
	------------------------------------------------------------------
	

	CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_RIDER_TMP_1
	WITH
	(
	  HEAP, DISTRIBUTION = ROUND_ROBIN
	)
	AS
	SELECT
	  CAST('IAI' AS VARCHAR(25)) AS ENTITY_ID,
      CAST('OMNI' AS VARCHAR(20)) AS SYSTEM,
      CASE 
		WHEN ICGS_BASIC.POLICY_NO IS NULL THEN TBL_VALUE_EXTRACT_RIDER.CERTIFICATE_MEMBER_CARD_ID
		ELSE ICGS_BASIC.POLICY_NO
	  END AS POLICY_NO,
      ICGS_BASIC.PRODUCT_CD,
      TBL_VALUE_EXTRACT_RIDER.RIDER_CODE AS BENEFIT_CD,
      ICGS_BASIC.CONTRACT_ID,
      ICGS_BASIC.PORTFOLIO_GROUP,
      ICGS_BASIC.COHORT_YEAR,
      ICGS_BASIC.SET_OF_CONTRACT,
      ICGS_BASIC.INSURANCE_CONTRACT_GROUP_ID,
	  ICGS_BASIC.ICG_ID_PROPHET,
  	  ICGS_BASIC.ENTRY_MONTH,
      ICGS_BASIC.CB_START_DT,
      ICGS_BASIC.CB_END_DT,
      ICGS_BASIC.MEASUREMENT_MODEL,
      STATUS_MAP.INFORCE_FLAG,
      ICGS_BASIC.COVERAGE_LEVEL_END_DATE,
      ICGS_BASIC.CCY_CD,
	  ICGS_BASIC.STATUS_SOURCE AS STATUS_SOURCE_BASIC,
      TBL_VALUE_EXTRACT_RIDER.MEMBER_STATUS AS STATUS_SOURCE_RIDER,
      ICGS_BASIC.BEN_EXP_DATE,
	  ICGS_BASIC.SUBSYSTEM,
      ICGS_BASIC.CREATED_DATE,
	  ICGS_BASIC.UPDATED_DATE,
      
      OMNI_TMP.FLAG_INSERT_UPDATE AS FLAG_INSERT_UPDATE_BASIC,
      CASE WHEN OMNI_TMP.CURR_BOUND_BY_REPRICE = 'Y' OR OMNI_TMP.CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' 
      	THEN 'Y' ELSE 'N' 
      END AS SHORTBOUND_FLAG

      FROM 
      (
    	SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_CI_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS  FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_CI_RIDER_CODE IS NOT NULL 
		UNION ALL
		SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_TERMINAL_ILLNESS_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS  FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_TERMINAL_ILLNESS_RIDER_CODE IS NOT NULL 
		UNION ALL
		SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_TPD_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS  FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_TPD_RIDER_CODE IS NOT NULL 
		UNION ALL
		SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_AD_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS  FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_AD_RIDER_CODE IS NOT NULL 
		UNION ALL
		SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_ACCIDENTAL_MEDICAL_REIMBURSEMENT_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS  FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_ACCIDENTAL_MEDICAL_REIMBURSEMENT_RIDER_CODE IS NOT NULL 
		UNION ALL
		SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_ADD_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS  FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_ADD_RIDER_CODE IS NOT NULL 
		UNION ALL
		SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_OUTPATIENT_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS  FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_OUTPATIENT_RIDER_CODE IS NOT NULL 
		UNION ALL
		SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_OPTICAL_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS  FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_OPTICAL_RIDER_CODE IS NOT NULL 
		UNION ALL
		SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_DENTAL_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS  FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_DENTAL_RIDER_CODE IS NOT NULL 
		UNION ALL
		SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_MATERNITY_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS  FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_MATERNITY_RIDER_CODE IS NOT NULL 
		UNION ALL
		SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_PREVENTIVE_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS  FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_PREVENTIVE_RIDER_CODE IS NOT NULL 
		UNION ALL
		SELECT CERTIFICATE_MEMBER_CARD_ID, PRODUCT_CODE, GROUP_MEDICAL_EVACUATION_RIDER_CODE AS RIDER_CODE, MEMBER_STATUS  FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE GROUP_MEDICAL_EVACUATION_RIDER_CODE IS NOT NULL
     )TBL_VALUE_EXTRACT_RIDER
    
    LEFT JOIN 
    (
      SELECT 
      	  *,
      	  ROW_NUMBER() OVER (PARTITION BY POLICY_NO, PRODUCT_CD, BENEFIT_CD ORDER BY CB_START_DT DESC) AS ROWNUM_POLICY_NO
		  FROM FOND_ID.FOND_IFRS17_ICG_STORES
		  WHERE UPPER(SUBSYSTEM) = 'OMNI' 
		  AND STATUS_SOURCE <> 'INACTIVE'
		  AND PRODUCT_CD = BENEFIT_CD 
    ) ICGS_BASIC

    ON TBL_VALUE_EXTRACT_RIDER.CERTIFICATE_MEMBER_CARD_ID =  ICGS_BASIC.POLICY_NO 
    AND TBL_VALUE_EXTRACT_RIDER.PRODUCT_CODE = ICGS_BASIC.PRODUCT_CD
    AND ICGS_BASIC.ROWNUM_POLICY_NO = 1

    LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE AS STATUS_MAP  
    ON UPPER(TRIM(STATUS_MAP.SYSTEM)) = 'OMNI'
    AND STATUS_MAP.STATUS_SOURCE = TBL_VALUE_EXTRACT_RIDER.MEMBER_STATUS

    LEFT JOIN STAG_ID.TMP_IFRS17_ICG_STORES_OMNI AS OMNI_TMP
    ON NULLIF(TRIM(TBL_VALUE_EXTRACT_RIDER.CERTIFICATE_MEMBER_CARD_ID), '') = OMNI_TMP.POLICY_NO

    LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_DUP AS OMNI_DUP
    ON TBL_VALUE_EXTRACT_RIDER.CERTIFICATE_MEMBER_CARD_ID = OMNI_DUP.CERTIFICATE_MEMBER_CARD_ID


    WHERE OMNI_DUP.CERTIFICATE_MEMBER_CARD_ID IS NULL;

	-------------------------------------------------
	--store the result to ICG_STORES_OMNI_TMP
	-------------------------------------------------
	CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_OMNI_RIDER
	WITH
	(
	  HEAP, DISTRIBUTION = ROUND_ROBIN
    )
	AS
	SELECT
      ICG_STORES_OMNI_TMP_1.ENTITY_ID,
      ICG_STORES_OMNI_TMP_1.SYSTEM,
      ICG_STORES_OMNI_TMP_1.POLICY_NO,
      ICG_STORES_OMNI_TMP_1.PRODUCT_CD,
      ICG_STORES_OMNI_TMP_1.CONTRACT_ID,
      ICG_STORES_OMNI_TMP_1.PORTFOLIO_GROUP,
      ICG_STORES_OMNI_TMP_1.COHORT_YEAR,
      ICG_STORES_OMNI_TMP_1.SET_OF_CONTRACT,
      ICG_STORES_OMNI_TMP_1.INSURANCE_CONTRACT_GROUP_ID,
      ICG_STORES_OMNI_TMP_1.ICG_ID_PROPHET,
      ICG_STORES_OMNI_TMP_1.ENTRY_MONTH,
      ICG_STORES_OMNI_TMP_1.CB_START_DT,
      ICG_STORES_OMNI_TMP_1.CB_END_DT,
      ICG_STORES_OMNI_TMP_1.MEASUREMENT_MODEL,
      ICG_STORES_OMNI_TMP_1.INFORCE_FLAG,
      ICG_STORES_OMNI_TMP_1.COVERAGE_LEVEL_END_DATE,
      ICG_STORES_OMNI_TMP_1.CCY_CD,
      ICG_STORES_OMNI_TMP_1.STATUS_SOURCE_BASIC,
      ICG_STORES_OMNI_TMP_1.STATUS_SOURCE_RIDER,
      ICG_STORES_OMNI_TMP_1.BEN_EXP_DATE,
      ICG_STORES_OMNI_TMP_1.FLAG_INSERT_UPDATE_BASIC,
      ICG_STORES_OMNI_TMP_1.SHORTBOUND_FLAG,
	  ICG_STORES_OMNI_TMP_1.BENEFIT_CD,
	  CASE
        WHEN ICG_STORES_OMNI_TMP_1.FLAG_INSERT_UPDATE_BASIC = 'INSERT' AND ICG_STORES_OMNI_TMP_1.SHORTBOUND_FLAG = 'Y' AND ICG_STORES.POLICY_NO IS NOT NULL AND ICG_STORES_OMNI_TMP_1.STATUS_SOURCE_RIDER = 'INFORCE' THEN 'INSERT'
        WHEN ICG_STORES_OMNI_TMP_1.FLAG_INSERT_UPDATE_BASIC = 'INSERT' AND ICG_STORES_OMNI_TMP_1.SHORTBOUND_FLAG = 'Y' AND ICG_STORES.POLICY_NO IS NOT NULL AND COALESCE(ICG_STORES_OMNI_TMP_1.STATUS_SOURCE_RIDER, '') <> 'INFORCE' THEN 'UPDATE'
        WHEN ICG_STORES.POLICY_NO IS NULL THEN 'INSERT'
        WHEN ICG_STORES_OMNI_TMP_1.FLAG_INSERT_UPDATE_BASIC IN('UPDATE', 'NO UPDATE') AND ICG_STORES.POLICY_NO IS NOT NULL AND COALESCE(ICG_STORES_OMNI_TMP_1.STATUS_SOURCE_RIDER, '') <> ICG_STORES.STATUS_SOURCE THEN 'UPDATE'
        ELSE 'NO UPDATE'
      END AS FLAG_INSERT_UPDATE_RIDER,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME

	FROM tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_RIDER_TMP_1 AS ICG_STORES_OMNI_TMP_1

    LEFT JOIN 
    (
      SELECT
        POLICY_NO,
        PRODUCT_CD,
        BENEFIT_CD,
        STATUS_SOURCE,
        INFORCE_FLAG,
        ROW_NUMBER() OVER(PARTITION BY POLICY_NO, PRODUCT_CD, BENEFIT_CD ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
      
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  WHERE UPPER(SUBSYSTEM) = 'OMNI'
	  AND BENEFIT_CD <> PRODUCT_CD
    ) ICG_STORES
    ON ICG_STORES_OMNI_TMP_1.POLICY_NO = ICG_STORES.POLICY_NO
    AND ICG_STORES_OMNI_TMP_1.PRODUCT_CD = ICG_STORES.PRODUCT_CD
    AND ICG_STORES_OMNI_TMP_1.BENEFIT_CD = ICG_STORES.BENEFIT_CD
    AND ICG_STORES.ROWNUM_POLICY_NO = 1;
	   	 
	---------------------------------------------
	--- INSERT INVALID DATA TO ICG_STORES_INVALID
	---------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT INVALID DATA TO ICG_STORES_INVALID : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_INVALID
	SELECT
      ICG_STORES_OMNI_RIDER_TMP.ENTITY_ID,
      ICG_STORES_OMNI_RIDER_TMP.SYSTEM,
      ICG_STORES_OMNI_RIDER_TMP.POLICY_NO,
      CASE  
		WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.PRODUCT_CD IS NOT NULL	THEN ICG_STORES_OMNI_INVALID.PRODUCT_CD
		WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.PRODUCT_CD 
		ELSE ICG_STORES_OMNI_RIDER_TMP.PRODUCT_CD
      END AS PRODUCT_CD,
      CASE 
		WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.BENEFIT_CD 
		ELSE ICG_STORES_OMNI_RIDER_TMP.BENEFIT_CD 
	 END AS BENEFIT_CD,
      CASE 
		WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.CONTRACT_ID IS NOT NULL THEN ICG_STORES_OMNI_INVALID.CONTRACT_ID
        WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.CONTRACT_ID 
		ELSE ICG_STORES_OMNI_RIDER_TMP.CONTRACT_ID
      END AS CONTRACT_ID,
      CASE 
		   WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.PORTFOLIO_GROUP IS NOT NULL THEN ICG_STORES_OMNI_INVALID.PORTFOLIO_GROUP
           WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.PORTFOLIO_GROUP 
		   ELSE ICG_STORES_OMNI_RIDER_TMP.PORTFOLIO_GROUP
      END AS PORTFOLIO_GROUP,
      CASE WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.COHORT_YEAR IS NOT NULL THEN ICG_STORES_OMNI_INVALID.COHORT_YEAR
           WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.COHORT_YEAR 
		   ELSE ICG_STORES_OMNI_RIDER_TMP.COHORT_YEAR
      END AS COHORT_YEAR,
      CASE WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.SET_OF_CONTRACT IS NOT NULL THEN ICG_STORES_OMNI_INVALID.SET_OF_CONTRACT
           WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.SET_OF_CONTRACT 
		   ELSE ICG_STORES_OMNI_RIDER_TMP.SET_OF_CONTRACT
      END AS SET_OF_CONTRACT,
      CASE WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.INSURANCE_CONTRACT_GROUP_ID IS NOT NULL THEN ICG_STORES_OMNI_INVALID.INSURANCE_CONTRACT_GROUP_ID
           WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.INSURANCE_CONTRACT_GROUP_ID 
		   ELSE ICG_STORES_OMNI_RIDER_TMP.INSURANCE_CONTRACT_GROUP_ID
      END AS INSURANCE_CONTRACT_GROUP_ID,
      CASE WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.ICG_ID_PROPHET IS NOT NULL THEN ICG_STORES_OMNI_INVALID.ICG_ID_PROPHET
           WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.ICG_ID_PROPHET 
		   ELSE ICG_STORES_OMNI_RIDER_TMP.ICG_ID_PROPHET
      END AS ICG_ID_PROPHET,
      CASE WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.ENTRY_MONTH IS NOT NULL THEN ICG_STORES_OMNI_INVALID.ENTRY_MONTH
           WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.ENTRY_MONTH 
		   ELSE ICG_STORES_OMNI_RIDER_TMP.ENTRY_MONTH
      END AS ENTRY_MONTH,
      CASE WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.CB_START_DT IS NOT NULL THEN ICG_STORES_OMNI_INVALID.CB_START_DT
           WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.CB_START_DT 
		   ELSE ICG_STORES_OMNI_RIDER_TMP.CB_START_DT
      END AS CB_START_DT,
      CASE WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.CB_END_DT IS NOT NULL THEN ICG_STORES_OMNI_INVALID.CB_END_DT
           WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.CB_END_DT 
		   ELSE ICG_STORES_OMNI_RIDER_TMP.CB_END_DT
      END AS CB_END_DT,
      CASE WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.MEASUREMENT_MODEL IS NOT NULL THEN ICG_STORES_OMNI_INVALID.MEASUREMENT_MODEL
           WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.MEASUREMENT_MODEL 
		   ELSE ICG_STORES_OMNI_RIDER_TMP.MEASUREMENT_MODEL
      END AS MEASUREMENT_MODEL,
      ICG_STORES_OMNI_RIDER_TMP.INFORCE_FLAG,
      CASE WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL  OR ICG_STORES_OMNI_INVALID.COVERAGE_LEVEL_END_DATE IS NOT NULL THEN ICG_STORES_OMNI_INVALID.COVERAGE_LEVEL_END_DATE
           WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.COVERAGE_LEVEL_END_DATE 
		   ELSE ICG_STORES_OMNI_RIDER_TMP.COVERAGE_LEVEL_END_DATE
      END AS COVERAGE_LEVEL_END_DATE,
      CASE WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.CCY_CD IS NOT NULL THEN ICG_STORES_OMNI_INVALID.CCY_CD
           WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.CCY_CD 
		   ELSE ICG_STORES_OMNI_RIDER_TMP.CCY_CD
      END AS CCY_CD,
      ICG_STORES_OMNI_RIDER_TMP.STATUS_SOURCE_RIDER,
      CASE WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL OR ICG_STORES_OMNI_INVALID.BEN_EXP_DATE IS NOT NULL THEN ICG_STORES_OMNI_INVALID.BEN_EXP_DATE
           WHEN ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.BEN_EXP_DATE 
		   ELSE ICG_STORES_OMNI_RIDER_TMP.BEN_EXP_DATE
      END AS BEN_EXP_DATE,
      CAST('OMNI' AS VARCHAR(20)) AS SUBSYSTEM,
      CURRENT_TIMESTAMP AS CREATED_DATE,
      CURRENT_TIMESTAMP AS UPDATED_DATE,
      (
        CASE
          WHEN OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL THEN 'BASIC_DUPLICATE'
          WHEN ICG_STORES_OMNI_INVALID.POLICY_NO IS NOT NULL THEN 'BASIC_INVALID'
          ELSE
		    (
            CASE WHEN ICG_STORES_OMNI_RIDER_TMP.BENEFIT_CD IS NULL THEN 'BENEFIT_CD,' ELSE '' END +
            CASE WHEN ICG_STORES_OMNI_RIDER_TMP.INFORCE_FLAG IS NULL THEN 'INFORCE_FLAG,' ELSE '' END +
            CASE WHEN ICG_STORES_OMNI_RIDER_TMP.STATUS_SOURCE_RIDER IS NULL THEN 'STATUS_SOURCE,' ELSE '' END)
        END
      ) AS INVALID_DESC
                    
    FROM STAG_ID.TMP_IFRS17_ICG_STORES_OMNI_RIDER AS ICG_STORES_OMNI_RIDER_TMP

    LEFT JOIN (SELECT CERTIFICATE_MEMBER_CARD_ID FROM FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_DUP GROUP BY CERTIFICATE_MEMBER_CARD_ID) AS OMNI_RIDER_DUP
    ON ICG_STORES_OMNI_RIDER_TMP.POLICY_NO = NULLIF(TRIM(OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID), '')

    LEFT JOIN (SELECT * FROM FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_INVALID WHERE UPPER(TRIM(SUBSYSTEM)) = 'OMNI') AS ICG_STORES_OMNI_INVALID
    ON ICG_STORES_OMNI_RIDER_TMP.POLICY_NO = ICG_STORES_OMNI_INVALID.POLICY_NO

    LEFT JOIN
    (
      SELECT
        POLICY_NO,
	    PRODUCT_CD,
	    BENEFIT_CD,
	    CONTRACT_ID,
	    COHORT_YEAR,
	    SET_OF_CONTRACT,
	    PORTFOLIO_GROUP,
	    INSURANCE_CONTRACT_GROUP_ID,
	    ICG_ID_PROPHET,
	    ENTRY_MONTH,
	    CB_START_DT,
	    CB_END_DT,
	    MEASUREMENT_MODEL,
	    COVERAGE_LEVEL_END_DATE,
	    CCY_CD,
	    BEN_EXP_DATE,
	    INFORCE_FLAG,
	    STATUS_SOURCE,
        ROW_NUMBER() OVER(PARTITION BY POLICY_NO, PRODUCT_CD, BENEFIT_CD ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_RIDER
     
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  
	  WHERE UPPER(SUBSYSTEM) = 'OMNI'
	  AND PRODUCT_CD <> BENEFIT_CD
    ) ICG_STORES_VALID
    ON ICG_STORES_OMNI_RIDER_TMP.POLICY_NO = ICG_STORES_VALID.POLICY_NO
    AND ICG_STORES_OMNI_RIDER_TMP.PRODUCT_CD = ICG_STORES_VALID.PRODUCT_CD
    AND ICG_STORES_OMNI_RIDER_TMP.BENEFIT_CD = ICG_STORES_VALID.BENEFIT_CD
    AND ICG_STORES_VALID.ROWNUM_RIDER = 1

    WHERE
    (
      OMNI_RIDER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL --When basic is duplicate, all new riders is considered as invalid
      OR ICG_STORES_OMNI_INVALID.POLICY_NO IS NOT NULL --When basic policy is invalid, all riders is considered as invalid as well.
      OR ICG_STORES_OMNI_RIDER_TMP.POLICY_NO IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.PRODUCT_CD IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.BENEFIT_CD IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.CONTRACT_ID IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.PORTFOLIO_GROUP IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.COHORT_YEAR IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.SET_OF_CONTRACT IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.INSURANCE_CONTRACT_GROUP_ID IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.ICG_ID_PROPHET IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.ENTRY_MONTH IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.CB_START_DT IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.CB_END_DT IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.MEASUREMENT_MODEL IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.INFORCE_FLAG IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.COVERAGE_LEVEL_END_DATE IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.CCY_CD IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.STATUS_SOURCE_RIDER IS NULL
      OR ICG_STORES_OMNI_RIDER_TMP.BEN_EXP_DATE IS NULL
    );

	--BEGIN TRANSACTION;
	--SET NOCOUNT ON

	---------------------------
	--- UPDATE TABLE ICG STORES
	---------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('UPDATE TABLE ICG STORES : ', @V_START);
	-- table disappear
	-- inforce

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	UPDATE ICG_STORES
	SET
	  INFORCE_FLAG = (CASE
	                    WHEN IFRS17_ICG_STORES_OMNI_TMP.FLAG_INSERT_UPDATE_RIDER = 'INSERT' THEN 'N'
	                    WHEN IFRS17_ICG_STORES_OMNI_TMP.STATUS_SOURCE_RIDER = ICG_STORES.STATUS_SOURCE AND ICG_STORES.STATUS_SOURCE = 'INFORCE' AND IFRS17_ICG_STORES_OMNI_TMP.CB_END_DT <> ICG_STORES.CB_END_DT AND IFRS17_ICG_STORES_OMNI_TMP.FLAG_INSERT_UPDATE_RIDER = 'INSERT' THEN 'N'
                        ELSE IFRS17_ICG_STORES_OMNI_TMP.INFORCE_FLAG
                      END),
	  STATUS_SOURCE = (CASE
	                     WHEN IFRS17_ICG_STORES_OMNI_TMP.FLAG_INSERT_UPDATE_RIDER = 'INSERT' THEN ICG_STORES.STATUS_SOURCE
	                     ELSE IFRS17_ICG_STORES_OMNI_TMP.STATUS_SOURCE_RIDER
	                   END),
	  UPDATED_DATE = CURRENT_TIMESTAMP
	
	FROM FOND_ID.FOND_IFRS17_ICG_STORES AS ICG_STORES

	JOIN
	(
	  SELECT
	    POLICY_NO,
	    PRODUCT_CD,
		BENEFIT_CD,
	    CB_START_DT,
	    CB_END_DT,
	    STATUS_SOURCE,---???
	    ROW_NUMBER() OVER(PARTITION BY POLICY_NO, PRODUCT_CD, BENEFIT_CD ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_RIDER
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  WHERE UPPER(SUBSYSTEM) = 'OMNI'
	  AND PRODUCT_CD <> BENEFIT_CD
	) AS LATEST_ICGS
	ON LATEST_ICGS.POLICY_NO = ICG_STORES.POLICY_NO
	AND LATEST_ICGS.PRODUCT_CD = ICG_STORES.PRODUCT_CD
	AND LATEST_ICGS.BENEFIT_CD = ICG_STORES.BENEFIT_CD
	AND LATEST_ICGS.CB_START_DT = ICG_STORES.CB_START_DT
	AND LATEST_ICGS.CB_END_DT = ICG_STORES.CB_END_DT
	AND LATEST_ICGS.ROWNUM_RIDER = 1
	
	JOIN STAG_ID.TMP_IFRS17_ICG_STORES_OMNI_RIDER AS IFRS17_ICG_STORES_OMNI_TMP
	ON IFRS17_ICG_STORES_OMNI_TMP.POLICY_NO = LATEST_ICGS.POLICY_NO
	AND IFRS17_ICG_STORES_OMNI_TMP.BENEFIT_CD = LATEST_ICGS.BENEFIT_CD
	AND IFRS17_ICG_STORES_OMNI_TMP.FLAG_INSERT_UPDATE_RIDER IN('INSERT', 'UPDATE')

	LEFT JOIN 
    (
      SELECT *,
        ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
      
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  
	  WHERE UPPER(SUBSYSTEM) = 'OMNI'
	  AND PRODUCT_CD = BENEFIT_CD
    ) ICG_STORES_BASIC
    ON IFRS17_ICG_STORES_OMNI_TMP.POLICY_NO = ICG_STORES_BASIC.POLICY_NO
    AND ICG_STORES_BASIC.ROWNUM_POLICY_NO = 1

    LEFT JOIN (SELECT CERTIFICATE_MEMBER_CARD_ID FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER  WHERE NULLIF(TRIM(CERTIFICATE_MEMBER_CARD_ID), '') IS NOT NULL GROUP BY CERTIFICATE_MEMBER_CARD_ID) AS OMNI_PROPHET_CUSTOMER
    ON IFRS17_ICG_STORES_OMNI_TMP.POLICY_NO = NULLIF(TRIM(OMNI_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID), '')

    LEFT JOIN (SELECT * FROM FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_INVALID WHERE UPPER(TRIM(SUBSYSTEM)) = 'OMNI') AS ICG_STORES_OMNI_INVALID
    ON IFRS17_ICG_STORES_OMNI_TMP.POLICY_NO = ICG_STORES_OMNI_INVALID.POLICY_NO
   
	WHERE UPPER(TRIM(ICG_STORES.SUBSYSTEM)) = 'OMNI' --'PROPTRDR'
	AND IFRS17_ICG_STORES_OMNI_TMP.POLICY_NO IS NOT NULL
	AND IFRS17_ICG_STORES_OMNI_TMP.PRODUCT_CD IS NOT NULL
	AND IFRS17_ICG_STORES_OMNI_TMP.BENEFIT_CD IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.CONTRACT_ID IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.PORTFOLIO_GROUP IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.COHORT_YEAR IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.SET_OF_CONTRACT IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.INSURANCE_CONTRACT_GROUP_ID IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.ICG_ID_PROPHET IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.ENTRY_MONTH IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.CB_START_DT IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.CB_END_DT IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.MEASUREMENT_MODEL IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.INFORCE_FLAG IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.COVERAGE_LEVEL_END_DATE IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.CCY_CD IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.STATUS_SOURCE_RIDER IS NOT NULL
    AND IFRS17_ICG_STORES_OMNI_TMP.BEN_EXP_DATE IS NOT NULL
	AND ICG_STORES_BASIC.POLICY_NO IS NOT NULL
	--ONLY PROCESS RIDERS WITH VALID BASIC:
    AND OMNI_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL 
	AND ICG_STORES_OMNI_INVALID.POLICY_NO IS NULL;

    ---------------------------------------
	--- INSERT NEW VALID DATA TO ICG_STORES
	---------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT NEW VALID DATA TO ICG_STORES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES
	(
	  ENTITY_ID,
      SYSTEM,
	  POLICY_NO,
	  PRODUCT_CD,
	  BENEFIT_CD,
	  CONTRACT_ID,
	  PORTFOLIO_GROUP,
	  COHORT_YEAR,
	  SET_OF_CONTRACT,
	  INSURANCE_CONTRACT_GROUP_ID,
	  ICG_ID_PROPHET,
	  ENTRY_MONTH,
	  CB_START_DT,
	  CB_END_DT,
	  MEASUREMENT_MODEL,
	  INFORCE_FLAG,
	  COVERAGE_LEVEL_END_DATE,
	  CCY_CD,
	  STATUS_SOURCE,
	  BEN_EXP_DATE,
	  SUBSYSTEM,
	  CREATED_DATE,
	  UPDATED_DATE,
	  BATCH_MASTER_ID,
      BATCH_RUN_ID,
      JOB_MASTER_ID,
      JOB_RUN_ID,
	  BATCHDATE,
      ETL_PROCESS_DATE_TIME
	)
    SELECT
      ICG_STORES_OMNI_RIDER_TMP.ENTITY_ID,
      ICG_STORES_OMNI_RIDER_TMP.SYSTEM,
      ICG_STORES_OMNI_RIDER_TMP.POLICY_NO,
      ICG_STORES_OMNI_RIDER_TMP.PRODUCT_CD,
      ICG_STORES_OMNI_RIDER_TMP.BENEFIT_CD,
      ICG_STORES_OMNI_RIDER_TMP.CONTRACT_ID,
      ICG_STORES_OMNI_RIDER_TMP.PORTFOLIO_GROUP,
      ICG_STORES_OMNI_RIDER_TMP.COHORT_YEAR,
      ICG_STORES_OMNI_RIDER_TMP.SET_OF_CONTRACT,
      ICG_STORES_OMNI_RIDER_TMP.INSURANCE_CONTRACT_GROUP_ID,
      ICG_STORES_OMNI_RIDER_TMP.ICG_ID_PROPHET,
      ICG_STORES_OMNI_RIDER_TMP.ENTRY_MONTH,
      ICG_STORES_OMNI_RIDER_TMP.CB_START_DT,
      ICG_STORES_OMNI_RIDER_TMP.CB_END_DT,
      ICG_STORES_OMNI_RIDER_TMP.MEASUREMENT_MODEL,
      ICG_STORES_OMNI_RIDER_TMP.INFORCE_FLAG,
      ICG_STORES_OMNI_RIDER_TMP.COVERAGE_LEVEL_END_DATE,
      ICG_STORES_OMNI_RIDER_TMP.CCY_CD,
      ICG_STORES_OMNI_RIDER_TMP.STATUS_SOURCE_RIDER,
      ICG_STORES_OMNI_RIDER_TMP.BEN_EXP_DATE,
      CAST('OMNI' AS VARCHAR(20)) AS SUBSYSTEM,
      CURRENT_TIMESTAMP AS CREATED_DATE,
      CURRENT_TIMESTAMP AS UPDATED_DATE,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
    
	FROM STAG_ID.TMP_IFRS17_ICG_STORES_OMNI_RIDER AS ICG_STORES_OMNI_RIDER_TMP

	LEFT JOIN 
    (
      SELECT *,
        ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
      
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  
	  WHERE UPPER(SUBSYSTEM) = 'OMNI'
	  AND PRODUCT_CD = BENEFIT_CD
    ) ICG_STORES_BASIC
    ON ICG_STORES_OMNI_RIDER_TMP.POLICY_NO = ICG_STORES_BASIC.POLICY_NO
    AND ICG_STORES_BASIC.ROWNUM_POLICY_NO = 1

    LEFT JOIN (SELECT CERTIFICATE_MEMBER_CARD_ID FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER WHERE NULLIF(TRIM(CERTIFICATE_MEMBER_CARD_ID), '') IS NOT NULL GROUP BY CERTIFICATE_MEMBER_CARD_ID) AS OMNI_PROPHET_CUSTOMER
    ON ICG_STORES_OMNI_RIDER_TMP.POLICY_NO = NULLIF(TRIM(OMNI_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID), '')

    LEFT JOIN (SELECT POLICY_NO FROM FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_INVALID WHERE UPPER(TRIM(SUBSYSTEM)) = 'OMNI') AS ICG_STORES_OMNI_INVALID
    ON ICG_STORES_OMNI_RIDER_TMP.POLICY_NO = ICG_STORES_OMNI_INVALID.POLICY_NO
    
	WHERE ICG_STORES_OMNI_RIDER_TMP.FLAG_INSERT_UPDATE_RIDER = 'INSERT'
    AND ICG_STORES_OMNI_RIDER_TMP.POLICY_NO IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.PRODUCT_CD IS NOT NULL
	AND ICG_STORES_OMNI_RIDER_TMP.BENEFIT_CD IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.CONTRACT_ID IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.PORTFOLIO_GROUP IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.COHORT_YEAR IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.SET_OF_CONTRACT IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.INSURANCE_CONTRACT_GROUP_ID IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.ICG_ID_PROPHET IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.ENTRY_MONTH IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.CB_START_DT IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.CB_END_DT IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.MEASUREMENT_MODEL IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.INFORCE_FLAG IS NOT NULL 
    AND ICG_STORES_OMNI_RIDER_TMP.COVERAGE_LEVEL_END_DATE IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.CCY_CD IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.STATUS_SOURCE_RIDER IS NOT NULL
    AND ICG_STORES_OMNI_RIDER_TMP.BEN_EXP_DATE IS NOT NULL
	AND ICG_STORES_BASIC.POLICY_NO IS NOT NULL
    AND OMNI_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL 
	AND ICG_STORES_OMNI_INVALID.POLICY_NO IS NULL
	AND ICG_STORES_OMNI_RIDER_TMP.PRODUCT_CD <> ICG_STORES_OMNI_RIDER_TMP.BENEFIT_CD;

	-------------------------
	--- UPDATE RIDER INACTIVE
	-------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('UPDATE RIDER OUTFORCE : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	UPDATE ICG_STORES

	SET STATUS_SOURCE = STATUS_MAP.STATUS_SOURCE,
	    INFORCE_FLAG = STATUS_MAP.INFORCE_FLAG,
	    UPDATED_DATE = CURRENT_TIMESTAMP

	FROM FOND_ID.FOND_IFRS17_ICG_STORES AS ICG_STORES

	JOIN
	(
	  SELECT
	    POLICY_NO,
	    PRODUCT_CD,
	    BENEFIT_CD,
	    STATUS_SOURCE,
	    CB_START_DT,
	    CB_END_DT,
	    ROW_NUMBER() OVER(PARTITION BY POLICY_NO, PRODUCT_CD, BENEFIT_CD ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_RIDER
	  
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  
	  WHERE UPPER(SUBSYSTEM) = 'OMNI'
	  AND PRODUCT_CD <> BENEFIT_CD
	  AND STATUS_SOURCE = 'INFORCE'
	) LATEST_ICGS
	ON ICG_STORES.POLICY_NO = LATEST_ICGS.POLICY_NO
    AND ICG_STORES.PRODUCT_CD = LATEST_ICGS.PRODUCT_CD
	AND ICG_STORES.BENEFIT_CD = LATEST_ICGS.BENEFIT_CD
	AND ICG_STORES.CB_START_DT = LATEST_ICGS.CB_START_DT
	AND ICG_STORES.CB_END_DT = LATEST_ICGS.CB_END_DT
	AND LATEST_ICGS.ROWNUM_RIDER = 1

	INNER JOIN  STAG_ID.TMP_IFRS17_ICG_STORES_OMNI_RIDER_DISAPPEAR OMNI_RIDER_DISAPPEAR		
	ON LATEST_ICGS.POLICY_NO = OMNI_RIDER_DISAPPEAR.POLICY_NO
	AND LATEST_ICGS.BENEFIT_CD = OMNI_RIDER_DISAPPEAR.BENEFIT_CD

	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE AS STATUS_MAP  
    ON STATUS_MAP.STATUS_SOURCE = 'INACTIVE'
    AND UPPER(TRIM(STATUS_MAP.SYSTEM)) = 'OMNI'

	;

	--store end step to log
	SET @V_END = CURRENT_TIMESTAMP;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = CONCAT('Finish ', @V_FUNCTION_NAME, ' : ', @V_END, ' Duration ', DATEDIFF(MINUTE, @V_START, @V_END));

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_END, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	--IF @@TRANCOUNT > 0
	--	COMMIT TRANSACTION;

END TRY

BEGIN CATCH
	--IF @@TRANCOUNT > 0
	--	ROLLBACK TRANSACTION;
	
	DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
	DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
	DECLARE @ErrorState AS INT = ERROR_STATE()

	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= CONVERT(DATETIME,GETDATE());
	SET @V_END 	= CONVERT(DATETIME,GETDATE());
	SET @V_DESCRIPTION	='Error execution for function on ' + @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) + ' with Error Message : ' + ERROR_MESSAGE();

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION) VALUES(@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)
END CATCH;

