CREATE PROC [FOND_ID].[USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PROPTRDB] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@PRD_ID [INTEGER] AS

BEGIN TRY
    --declare variable
	DECLARE @V_START			DATETIME,
	        @V_END				DATETIME,
			@V_DURATION			DATETIME,
	        @V_FUNCTION_NAME	VARCHAR(100),
			@V_DESCRIPTION		VARCHAR(100),
	        @V_CMD				VARCHAR(100),
			@V_SEQNO			INTEGER,
	        @V_PRD_ID			INTEGER,
			@V_CREATED_DATE		DATETIME,
	        @V_START_DATE		DATE,
	        @V_END_DATE			DATE,
	------START GET RUN ID DETAIL FROM ABC------
            @BATCH_MASTER_ID    VARCHAR(20) = 0,
            @BATCH_RUN_ID       VARCHAR(20) = 0,
            @JOB_MASTER_ID      VARCHAR(20) = 0,
            @JOB_RUN_ID         VARCHAR(20) = 0,
            @GMT_START_DTTM     VARCHAR(20) = GETDATE();

	EXEC STAG_ID.USP_GetRunIdReturn
      @JobName         = @JOBNAMESTR,
      @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
      @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
      @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
      @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
      @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
    ------END GET RUN ID DETAIL FROM ABC------

	--set variable
	SET @V_FUNCTION_NAME = 'FOND_ID.USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PROPTRDB';
	SET @V_SEQNO = 1;
	SET @V_START_DATE = CONVERT(DATE, CONVERT(CHAR(10), @PRD_ID));
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('Start ', @V_FUNCTION_NAME, ' : ', @V_START_DATE);

	--store initial step to log
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	-----------------------------
	--- DROP ALL TEMPORARY TABLES
	-----------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('DROP ALL TEMPORARY TABLES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

    --drop temp object if exists
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_1', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_1;
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_2', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_2;
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_INVALID', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_INVALID;

	--drop permanent object if exists
	IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_DUP','U') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_DUP;
	IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDB','U') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDB;
	IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_INVALID','U') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_INVALID;
	--IF OBJECT_ID('FOND_ID.FOND_IFRS17_MPFILES_PROPTRDB','U') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_MPFILES_PROPTRDB;
	TRUNCATE TABLE FOND_ID.FOND_IFRS17_MPFILES_PROPTRDB;
	--TRUNCATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_INVALID;

	---------------------------------------------------------------------
	--- CREATE TABLE TO STORE DUPLICATE POLICY_NO IN THE SOURCE TABLE
	---------------------------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('CREATE TABLE TO STORE DUPLICATE POLICY_NO IN THE SOURCE TABLE : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_DUP
	WITH
	(
	  DISTRIBUTION = HASH(CHDRNUM),
	  CLUSTERED INDEX(CHDRNUM)
    )
	AS
	SELECT
	  NULLIF(TRIM(CHDRNUM), '') AS CHDRNUM,
      CRTABLE,
      ANBCCD,
      SEX,
      MORTCLS,
      PRMTRM,
      RSKTRM,
      PREMI,
      BILLFREQ,
      SUMINS,
      TOTBON,
      PTDATE,
      HOISSDTE,
      CRRCD,
      RCESDTE,
      CNTCURR,
      STATCODE,
      CURRFROM,
      ZLINSTPREM,
      BPAYTY,
      BPAYNY,
      SLSCNL,
      BILLCHNL,
      ZPDFSURR,
      LSURNAME,
      CLTPHONE01,
      CLTPHONE02,
      LIFCNUM,
      AGNTNUM,
      LSURNAME01,
      DTEAPP,
      DTETRM,
      TSALESUNT,
      REPORTAG,
      LSURNAME02,
      REGION,
      FUND,
      CLTADDR04,
      CLTADDR05,
      CLTDOB,
      MEDFLG,
      SRCEBUS,
      REASONCD,
      LONGDESC,
      COWNNUM,
      REGION_INDICATOR,
	  SIO_GIO_FLAG,
      PRUSEHAT_SOLUTION_PLAN_TYPE,
      SUBSTANDARD_LOADING,
	  CAMPAIGN_FLAG,
	  TOTCLAIMS,
	  STAT_SECT,
	  PAS_CV,
	  [E-SUBMISSION_E-POLICY_AND_MAILFLAG],
	  WP_FLAG,
	  CAMP_CODE,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
	FROM STAG_ID.STAG_LIFEASIA_AC1108RDB
	WHERE CHDRNUM IN (SELECT CHDRNUM FROM STAG_ID.STAG_LIFEASIA_AC1108RDB WHERE NULLIF(TRIM(CHDRNUM), '') IS NOT NULL GROUP BY CHDRNUM HAVING COUNT(*) > 1);

	------------------------------------------------
	--- INSERT NEW BUSINESS TO ICG STORES TEMP TABLE
	------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT NEW BUSINESS TO ICG STORES TEMP TABLE : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	-----------------------------------------------
	--create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_1
	-----------------------------------------------
	CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_1
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
	AS
	SELECT
	  CAST('IAI' AS VARCHAR(25)) AS "ENTITY_ID",
      CAST('Life Asia' AS VARCHAR(20)) AS "SYSTEM",
	  NULLIF(TRIM(AC1108RDB.CHDRNUM), '') AS POLICY_NO,
	  AC1108RDB.CRTABLE AS PRODUCT_CD,
	  (NULLIF(TRIM(AC1108RDB.CHDRNUM), '') + '-' +
	    FORMAT((CASE
	    		WHEN AC1108RDB.HOISSDTE = 99999999 THEN NULL
                WHEN ICG_STORES.POLICY_NO IS NULL THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.HOISSDTE)))
				WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.PTDATE)))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN DATEADD(DAY, 1, ICG_STORES.CB_END_DT)
				ELSE ICG_STORES.CB_START_DT
                END),'yyyy')) AS CONTRACT_ID,
      CASE
      		WHEN ICG_STORES.POLICY_NO IS NULL THEN
			    CASE 
			    	WHEN PORTFOLIO_MAP.PRODUCT_CD IS NOT NULL THEN
			        CASE
				    	WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'N' THEN PORTFOLIO_MAP.PORTFOLIO_GROUP
				    	WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'Y' AND RIGHT(PORTFOLIO_MAP.PORTFOLIO_GROUP,3) NOT IN ('VFA') THEN TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP) + '_' +  
				      		CASE
					    		WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 0 THEN 'GMM'
								WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 1 THEN 'VFA'
					  		END
						WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP), 1, LEN(TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP))-3) +
					 		CASE
					    		WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 0 THEN 'GMM'
								WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 1 THEN 'VFA'
					  		END
				  	END
				 END
	  		 ELSE ICG_STORES.PORTFOLIO_GROUP
	  END AS PORTFOLIO_GROUP,
      CASE
         WHEN AC1108RDB.HOISSDTE = 99999999 THEN NULL
         WHEN ICG_STORES.POLICY_NO IS NULL THEN DATEPART(YEAR, (CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.HOISSDTE)))))
         WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.PTDATE)))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN DATEPART(YEAR, (DATEADD(DAY, 1, ICG_STORES.CB_END_DT)))
         ELSE ICG_STORES.COHORT_YEAR
      END AS COHORT_YEAR,
	  --20-05-2021 Add logic for Existing Business
	  SET_OF_CONTRACT.SET_OF_CONTRACT,
      ICG_CONFIG.INSURANCE_CONTRACT_GROUP_ID,
      ICG_CONFIG.ICG_ID_PROPHET,
      CASE
       	 WHEN AC1108RDB.HOISSDTE = 99999999 THEN NULL
         WHEN ICG_STORES.POLICY_NO IS NULL THEN DATEPART(MONTH, (CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.HOISSDTE)))))
         WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.PTDATE)))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN DATEPART(MONTH, (DATEADD(DAY, 1, ICG_STORES.CB_END_DT)))
         ELSE ICG_STORES.ENTRY_MONTH
       END AS ENTRY_MONTH,
      CASE
        WHEN ICG_STORES.POLICY_NO IS NULL AND AC1108RDB.CRRCD > AC1108RDB.HOISSDTE THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.HOISSDTE)))
        WHEN ICG_STORES.POLICY_NO IS NULL THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.CRRCD)))
		WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.PTDATE)))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN DATEADD(DAY, 1, ICG_STORES.CB_END_DT)
		ELSE ICG_STORES.CB_START_DT
	  END AS CB_START_DT,
	  CASE
	  	WHEN ICG_STORES.POLICY_NO IS NULL THEN
	    	CASE
	  			WHEN PORTFOLIO_MAP.PRODUCT_CD IS NOT NULL THEN
	      			CASE
				    WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'N' THEN PORTFOLIO_MAP.MEASUREMENT_MODEL
					WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'Y' THEN
					  CASE
						    WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 0 THEN 'GMM'
							WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 1 THEN 'VFA'
			  		  END
		  			END
		  	 END
	  	ELSE ICG_STORES.MEASUREMENT_MODEL
	  END AS MEASUREMENT_MODEL,
      STATUS_MAP.INFORCE_FLAG,
      CASE
        WHEN ICG_STORES.POLICY_NO IS NULL THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.CRRCD)))
		WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.PTDATE)))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN DATEADD(DAY, 1, ICG_STORES.CB_END_DT)
		ELSE ICG_STORES.CB_START_DT
      END AS COVERAGE_LEVEL_START_DATE,
	  CASE 
	  WHEN PORTFOLIO_MAP.MATURITY_AGE = 0 THEN 
		CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.RCESDTE))) 
	  ELSE 
		DATEADD(YEAR,PORTFOLIO_MAP.MATURITY_AGE,CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.CLTDOB))))
	  END AS BEN_EXP_DATE,
	  AC1108RDB.CNTCURR AS CCY_CD,
      AC1108RDB.STATCODE AS STATUS_SOURCE,
	  CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.PTDATE))) AS CURR_PTDATE,
      CB_MAP.BOUND_BY_REPRICE AS CURR_BOUND_BY_REPRICE,
      CB_MAP.POINT_OF_BOUNDARY_REPRICE AS CURR_POINT_OF_BOUNDARY_REPRICE,
      CB_MAP.BOUND_BY_TERMINATION_PROVISION AS CURR_BOUND_BY_TERMINATION_PROVISION,
      CB_MAP.POINT_OF_BOUNDARY_TERMINATION AS CURR_POINT_OF_BOUNDARY_TERMINATION,
      ICG_STORES.POLICY_NO AS CURR_POLICY_NO,
      ICG_STORES.CB_START_DT AS CURR_CB_START_DT,
      ICG_STORES.CB_END_DT AS CURR_CB_END_DT,
      ICG_STORES.STATUS_SOURCE AS CURR_STATUS_SOURCE

	FROM STAG_ID.STAG_LIFEASIA_AC1108RDB AS AC1108RDB
    
	LEFT JOIN
      (
	    SELECT
		  POLICY_NO,
		  PRODUCT_CD,
		  CCY_CD,
          CB_START_DT,
		  CB_END_DT,
		  STATUS_SOURCE,
		  ENTRY_MONTH,
		  COHORT_YEAR,
		  PORTFOLIO_GROUP,
		  MEASUREMENT_MODEL,
		  SET_OF_CONTRACT,
		  INSURANCE_CONTRACT_GROUP_ID,
		  ICG_ID_PROPHET,
		  ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
		
		FROM FOND_ID.FOND_IFRS17_ICG_STORES
		
		WHERE UPPER(TRIM(SUBSYSTEM)) = 'PROPTRDB'
		AND PRODUCT_CD = BENEFIT_CD
	  ) AS ICG_STORES
	ON NULLIF(TRIM(AC1108RDB.CHDRNUM), '') = ICG_STORES.POLICY_NO
	AND ICG_STORES.ROWNUM_POLICY_NO = 1

	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_VFA_ELIGIBILITY AS VFA_ELIGIBILITY
	ON NULLIF(TRIM(AC1108RDB.CHDRNUM), '') = VFA_ELIGIBILITY.POLICY_NO

	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING AS PORTFOLIO_MAP
    ON AC1108RDB.CRTABLE = PORTFOLIO_MAP.PRODUCT_CD
    AND AC1108RDB.CNTCURR = PORTFOLIO_MAP.CCY_CD
    AND UPPER(PORTFOLIO_MAP.SYSTEM) = 'LIFE ASIA'
	
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_SET_OF_CONTRACT AS SET_OF_CONTRACT
    ON AC1108RDB.CRTABLE = SET_OF_CONTRACT.PRODUCT_CD
	AND AC1108RDB.CNTCURR = SET_OF_CONTRACT.CCY_CD
	AND UPPER(SET_OF_CONTRACT.SYSTEM) = 'LIFE ASIA'
	
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE AS STATUS_MAP
    ON AC1108RDB.STATCODE = STATUS_MAP.STATUS_SOURCE
    AND UPPER(STATUS_MAP.SYSTEM) = 'LIFE ASIA'
	
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_CB_MAPPING AS CB_MAP
	ON AC1108RDB.CRTABLE = CB_MAP.PRODUCT_CD
    AND UPPER(CB_MAP.SYSTEM) = 'LIFE ASIA'
	
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG AS ICG_CONFIG
    ON 
    DATEPART(YEAR, (
                       CASE
                         WHEN AC1108RDB.HOISSDTE = 99999999 THEN NULL
                         WHEN ICG_STORES.POLICY_NO IS NULL THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.HOISSDTE)))
				         WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, AC1108RDB.PTDATE)))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN DATEADD(DAY, 1, ICG_STORES.CB_END_DT)
				         ELSE ICG_STORES.CB_START_DT
                       END)) = ICG_CONFIG.COHORT_YEAR
   
    AND SET_OF_CONTRACT.SET_OF_CONTRACT = ICG_CONFIG.SET_OF_CONTRACT
	AND (
	   CASE
      		WHEN ICG_STORES.POLICY_NO IS NULL THEN
			    CASE 
			    	WHEN PORTFOLIO_MAP.PRODUCT_CD IS NOT NULL THEN
			        CASE
				    	WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'N' THEN PORTFOLIO_MAP.PORTFOLIO_GROUP
				    	WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'Y' AND RIGHT(PORTFOLIO_MAP.PORTFOLIO_GROUP,3) NOT IN ('VFA') THEN TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP) + '_' +  
				      		CASE
					    		WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 0 THEN 'GMM'
								WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 1 THEN 'VFA'
					  		END
						WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP), 1, LEN(TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP))-3) +
					 		CASE
					    		WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 0 THEN 'GMM'
								WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 1 THEN 'VFA'
					  		END
				  	END
				 END
	  		 ELSE ICG_STORES.PORTFOLIO_GROUP
	  END
	) = ICG_CONFIG.PORTFOLIO_GROUP
	AND (
	  CASE
	  	WHEN ICG_STORES.POLICY_NO IS NULL THEN
	    	CASE
	  			WHEN PORTFOLIO_MAP.PRODUCT_CD IS NOT NULL THEN
	      			CASE
				    WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'N' THEN PORTFOLIO_MAP.MEASUREMENT_MODEL
					WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'Y' THEN
					  CASE
						    WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 0 THEN 'GMM'
							WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 1 THEN 'VFA'
			  		  END
		  			END
		  	 END
	  	ELSE ICG_STORES.MEASUREMENT_MODEL
	  END
	) = ICG_CONFIG.MEASUREMENT_MODEL
	
	LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_DUP AC1108RDB_DUP
	ON NULLIF(TRIM(AC1108RDB.CHDRNUM), '') = NULLIF(TRIM(AC1108RDB_DUP.CHDRNUM), '')
	AND AC1108RDB.CRTABLE = AC1108RDB_DUP.CRTABLE
	
	WHERE NULLIF(TRIM(AC1108RDB_DUP.CHDRNUM), '') IS NULL;

	-----------------------------------------------
	--create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_2
	-----------------------------------------------
	CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_2
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
	AS
	SELECT
	  "ENTITY_ID",
	  "SYSTEM",
	  POLICY_NO,
	  PRODUCT_CD,
	  CONTRACT_ID,
	  PORTFOLIO_GROUP,
	  COHORT_YEAR,
	  SET_OF_CONTRACT,
	  INSURANCE_CONTRACT_GROUP_ID,
	  ICG_ID_PROPHET,
	  ENTRY_MONTH,
	  CB_START_DT,
	  MEASUREMENT_MODEL,
	  INFORCE_FLAG,
	  COVERAGE_LEVEL_START_DATE,
	  BEN_EXP_DATE,
	  CCY_CD,
	  STATUS_SOURCE,
	  CURR_PTDATE,
	  CURR_BOUND_BY_REPRICE,
	  CURR_POINT_OF_BOUNDARY_REPRICE,
	  CURR_BOUND_BY_TERMINATION_PROVISION,
	  CURR_POINT_OF_BOUNDARY_TERMINATION,
	  CURR_POLICY_NO,
	  CURR_CB_START_DT,
	  CURR_CB_END_DT,
	  CURR_STATUS_SOURCE,
	  CASE
        WHEN CURR_BOUND_BY_REPRICE = 'N' AND CURR_BOUND_BY_TERMINATION_PROVISION = 'N' THEN BEN_EXP_DATE
        WHEN CURR_BOUND_BY_REPRICE = 'Y' AND CURR_BOUND_BY_TERMINATION_PROVISION = 'N' THEN
          CASE
            WHEN CB_START_DT IS NULL OR BEN_EXP_DATE IS NULL THEN NULL
            WHEN DATEADD(MONTH, COALESCE(CURR_POINT_OF_BOUNDARY_REPRICE, 0), (
              CASE
                WHEN CURR_POLICY_NO IS NULL THEN CB_START_DT
	            WHEN ((DATEADD(DAY, -1, CURR_PTDATE) > CURR_CB_END_DT)
	              OR (CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > CURR_CB_END_DT)) THEN DATEADD(DAY, 1,  CURR_CB_END_DT)
                ELSE CURR_CB_START_DT
              END)) <= BEN_EXP_DATE
			  THEN DATEADD(MONTH, COALESCE(CURR_POINT_OF_BOUNDARY_REPRICE, 0), (
                CASE
                  WHEN CURR_POLICY_NO IS NULL THEN CB_START_DT
	              WHEN ((DATEADD(DAY, -1, CURR_PTDATE) > CURR_CB_END_DT)
	                OR (CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > CURR_CB_END_DT)) THEN DATEADD(DAY, 1,  CURR_CB_END_DT)
                  ELSE CURR_CB_START_DT
                END))
            ELSE BEN_EXP_DATE
          END  
	    WHEN CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND CURR_BOUND_BY_REPRICE = 'N' THEN
          CASE
            WHEN CB_START_DT IS NULL OR BEN_EXP_DATE IS NULL THEN NULL
            WHEN DATEADD(MONTH, COALESCE(CURR_POINT_OF_BOUNDARY_TERMINATION, 0), (
              CASE
                WHEN CURR_POLICY_NO IS NULL THEN CB_START_DT
	            WHEN ((DATEADD(DAY, -1, CURR_PTDATE) > CURR_CB_END_DT)
	              OR (CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > CURR_CB_END_DT)) THEN DATEADD(DAY, 1,  CURR_CB_END_DT)
                ELSE CURR_CB_START_DT
              END)) <= BEN_EXP_DATE
			  THEN DATEADD(MONTH, COALESCE(CURR_POINT_OF_BOUNDARY_TERMINATION, 0), (
                CASE
                  WHEN CURR_POLICY_NO IS NULL THEN CB_START_DT
	              WHEN ((DATEADD(DAY, -1, CURR_PTDATE) > CURR_CB_END_DT)
	                OR (CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > CURR_CB_END_DT)) THEN DATEADD(DAY, 1,  CURR_CB_END_DT)
                  ELSE CURR_CB_START_DT
                END))
            ELSE BEN_EXP_DATE
          END  
	    ELSE CURR_CB_END_DT
		END AS COVERAGE_LEVEL_END_DATE

	FROM tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_1;

	-------------------------------------------------
	--store the result to ICG_STORES_PROPTRDB_TMP
	-------------------------------------------------
	CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDB
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  CLUSTERED INDEX(POLICY_NO)
    )
	AS
	SELECT
	  "ENTITY_ID",
	  "SYSTEM",
	  POLICY_NO,
	  PRODUCT_CD,
	  CONTRACT_ID,
	  PORTFOLIO_GROUP,
	  COHORT_YEAR,
	  SET_OF_CONTRACT,
	  INSURANCE_CONTRACT_GROUP_ID,
	  ICG_ID_PROPHET,
	  ENTRY_MONTH,
	  CB_START_DT,
	  MEASUREMENT_MODEL,
	  INFORCE_FLAG,
	  COVERAGE_LEVEL_START_DATE,
	  BEN_EXP_DATE,
	  CCY_CD,
	  STATUS_SOURCE,
	  CURR_PTDATE,
	  CURR_BOUND_BY_REPRICE,
	  CURR_POINT_OF_BOUNDARY_REPRICE,
	  CURR_BOUND_BY_TERMINATION_PROVISION,
	  CURR_POINT_OF_BOUNDARY_TERMINATION,
	  CURR_POLICY_NO,
	  CURR_CB_START_DT,
	  CURR_CB_END_DT,
	  CURR_STATUS_SOURCE,
	  CB_END_DT,
	  COVERAGE_LEVEL_END_DATE,
      CASE
        WHEN (
		       CURR_POLICY_NO IS NULL
               OR (COALESCE(STATUS_SOURCE, '') = 'IF'
                   AND ((CURR_BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CURR_PTDATE) > CURR_CB_END_DT))
                       OR (CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > CURR_CB_END_DT)))
			 ) THEN 'INSERT'
        WHEN (
		       (COALESCE(STATUS_SOURCE, '') <> CURR_STATUS_SOURCE)
               OR (COALESCE(STATUS_SOURCE, '') = CURR_STATUS_SOURCE AND CURR_STATUS_SOURCE = 'IF' AND CB_END_DT <> CURR_CB_END_DT)
               OR (CURR_BOUND_BY_REPRICE = 'N' AND CURR_BOUND_BY_TERMINATION_PROVISION = 'N' AND CURR_STATUS_SOURCE <> 'IF')
               OR (CURR_BOUND_BY_REPRICE= 'Y' AND (DATEADD(DAY, -1, CURR_PTDATE) <= CURR_CB_END_DT) AND CURR_STATUS_SOURCE <> 'IF')
             )THEN 'UPDATE'
        ELSE 'NO UPDATE'
      END AS FLAG_INSERT_UPDATE,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
    
	FROM 
	(
	SELECT *,	
		CASE 
			WHEN CB_START_DT > COVERAGE_LEVEL_END_DATE THEN CB_START_DT 
			ELSE COVERAGE_LEVEL_END_DATE END AS CB_END_DT 
	FROM tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_2)A;

	--------------------------------------------------------------
	--- create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_INVALID
	--------------------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_INVALID : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_INVALID
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
    AS
	SELECT
      COALESCE(POLICY_NO, 'N/A') AS POLICY_NO,
      PRODUCT_CD,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
    
	FROM STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDB
    
	WHERE ( FLAG_INSERT_UPDATE IN ('INSERT')
    AND
      (
        POLICY_NO IS NULL
        OR PRODUCT_CD IS NULL
        OR CONTRACT_ID IS NULL
        OR PORTFOLIO_GROUP IS NULL
        OR COHORT_YEAR IS NULL
        OR SET_OF_CONTRACT IS NULL
        OR INSURANCE_CONTRACT_GROUP_ID IS NULL
        OR ICG_ID_PROPHET IS NULL
        OR ENTRY_MONTH IS NULL
        OR CB_START_DT IS NULL
        OR CB_END_DT IS NULL
        OR MEASUREMENT_MODEL IS NULL
        OR INFORCE_FLAG IS NULL
        OR COVERAGE_LEVEL_END_DATE IS NULL
        OR CCY_CD IS NULL
        OR STATUS_SOURCE IS NULL
        OR BEN_EXP_DATE IS NULL
		OR (CB_START_DT > BEN_EXP_DATE AND STATUS_SOURCE = 'IF')
      )) OR 
	  ( FLAG_INSERT_UPDATE IN ('UPDATE') 
	  AND 
		(
		POLICY_NO IS NULL
		OR STATUS_SOURCE IS NULL
		)
	  )
	  ;

	---------------------------------------------
	--- INSERT INVALID DATA TO ICG_STORES_INVALID
	---------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT INVALID DATA TO ICG_STORES_INVALID : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_INVALID
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  CLUSTERED INDEX(POLICY_NO)
    )
	AS
	--INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_INVALID
	SELECT
      ICG_STORES_TMP."ENTITY_ID",
      ICG_STORES_TMP."SYSTEM",
      ICG_STORES_TMP.POLICY_NO,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.PRODUCT_CD ELSE ICG_STORES_TMP.PRODUCT_CD END AS PRODUCT_CD,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.PRODUCT_CD ELSE ICG_STORES_TMP.PRODUCT_CD END AS BENEFIT_CD,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.CONTRACT_ID ELSE ICG_STORES_TMP.CONTRACT_ID END AS CONTRACT_ID,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.PORTFOLIO_GROUP ELSE ICG_STORES_TMP.PORTFOLIO_GROUP END AS PORTFOLIO_GROUP,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.COHORT_YEAR ELSE ICG_STORES_TMP.COHORT_YEAR END AS COHORT_YEAR,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.SET_OF_CONTRACT ELSE ICG_STORES_TMP.SET_OF_CONTRACT END AS SET_OF_CONTRACT,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.INSURANCE_CONTRACT_GROUP_ID ELSE ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID END AS INSURANCE_CONTRACT_GROUP_ID,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.ICG_ID_PROPHET ELSE ICG_STORES_TMP.ICG_ID_PROPHET END AS ICG_ID_PROPHET,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.ENTRY_MONTH ELSE ICG_STORES_TMP.ENTRY_MONTH END AS ENTRY_MONTH,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.CB_START_DT ELSE ICG_STORES_TMP.CB_START_DT END AS CB_START_DT,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.CB_END_DT ELSE ICG_STORES_TMP.CB_END_DT END AS CB_END_DT,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.MEASUREMENT_MODEL ELSE ICG_STORES_TMP.MEASUREMENT_MODEL END AS MEASUREMENT_MODEL,
      ICG_STORES_TMP.INFORCE_FLAG AS INFORCE_FLAG,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.COVERAGE_LEVEL_END_DATE ELSE ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE END AS COVERAGE_LEVEL_END_DATE,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.CCY_CD ELSE ICG_STORES_TMP.CCY_CD END AS CCY_CD,
      ICG_STORES_TMP.STATUS_SOURCE AS STATUS_SOURCE,
      CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.BEN_EXP_DATE ELSE ICG_STORES_TMP.BEN_EXP_DATE END AS BEN_EXP_DATE,
      CAST('Proptrdb' AS VARCHAR(20)) AS SUBSYSTEM,
      CURRENT_TIMESTAMP AS CREATED_DATE,
      CURRENT_TIMESTAMP AS UPDATED_DATE,
      (
        (
		CASE WHEN ICG_STORES_TMP.POLICY_NO IS NULL THEN 'POLICY_NO,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.PRODUCT_CD IS NULL THEN 'PRODUCT_CD, BENEFIT_CD, ' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.CONTRACT_ID IS NULL THEN 'CONTRACT_ID,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.PORTFOLIO_GROUP IS NULL THEN 'PORTFOLIO_GROUP,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.COHORT_YEAR IS NULL THEN 'COHORT_YEAR,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.SET_OF_CONTRACT IS NULL THEN 'SET_OF_CONTRACT,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID IS NULL THEN 'INSURANCE_CONTRACT_GROUP_ID,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.ICG_ID_PROPHET IS NULL THEN 'ICG_ID_PROPHET,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.ENTRY_MONTH IS NULL THEN 'ENTRY_MONTH,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.CB_START_DT IS NULL THEN 'CB_START_DT,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.CB_END_DT IS NULL THEN 'CB_END_DT,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.MEASUREMENT_MODEL IS NULL THEN 'MEASUREMENT_MODEL,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.INFORCE_FLAG IS NULL THEN 'INFORCE_FLAG,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE IS NULL THEN 'COVERAGE_LEVEL_END_DATE,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.CCY_CD IS NULL THEN 'CCY_CD,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.STATUS_SOURCE IS NULL THEN 'STATUS_SOURCE,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.BEN_EXP_DATE IS NULL THEN 'BEN_EXP_DATE,' ELSE '' END +
        CASE WHEN ICG_STORES_TMP.CB_START_DT > ICG_STORES_TMP.BEN_EXP_DATE THEN 'CB_START_DT > BEN_EXP_DATE,' ELSE '' END) 
      ) AS INVALID_DESC,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
                    
    FROM STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDB AS ICG_STORES_TMP

    LEFT JOIN
      (
        --VALID ICG_STORES
	    SELECT
	      POLICY_NO,
	      PRODUCT_CD,
          CONTRACT_ID,
          COHORT_YEAR,
          SET_OF_CONTRACT,
          PORTFOLIO_GROUP,
          INSURANCE_CONTRACT_GROUP_ID,
          ICG_ID_PROPHET,
          ENTRY_MONTH,
          CB_START_DT,
          CB_END_DT,
          MEASUREMENT_MODEL,
          COVERAGE_LEVEL_END_DATE,
          CCY_CD,
          BEN_EXP_DATE,
          ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
	    
		FROM FOND_ID.FOND_IFRS17_ICG_STORES
	    
		WHERE UPPER(TRIM(SUBSYSTEM)) = 'PROPTRDB'
	    AND PRODUCT_CD = BENEFIT_CD
      ) AS ICG_STORES_VALID
    ON ICG_STORES_TMP.POLICY_NO = ICG_STORES_VALID.POLICY_NO
    AND ICG_STORES_VALID.ROWNUM_POLICY_NO = 1

    WHERE ICG_STORES_TMP.FLAG_INSERT_UPDATE IN('INSERT', 'UPDATE')
    AND
      (
        ICG_STORES_TMP.POLICY_NO IS NULL
        OR ICG_STORES_TMP.PRODUCT_CD IS NULL
        OR ICG_STORES_TMP.CONTRACT_ID IS NULL
        OR ICG_STORES_TMP.PORTFOLIO_GROUP IS NULL
        OR ICG_STORES_TMP.COHORT_YEAR IS NULL
        OR ICG_STORES_TMP.SET_OF_CONTRACT IS NULL
        OR ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID IS NULL
        OR ICG_STORES_TMP.ICG_ID_PROPHET IS NULL
        OR ICG_STORES_TMP.ENTRY_MONTH IS NULL
        OR ICG_STORES_TMP.CB_START_DT IS NULL
        OR ICG_STORES_TMP.CB_END_DT IS NULL
        OR ICG_STORES_TMP.MEASUREMENT_MODEL IS NULL
        OR ICG_STORES_TMP.INFORCE_FLAG IS NULL
        OR ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE IS NULL
        OR ICG_STORES_TMP.CCY_CD IS NULL
        OR ICG_STORES_TMP.STATUS_SOURCE IS NULL
        OR ICG_STORES_TMP.BEN_EXP_DATE IS NULL
		OR (ICG_STORES_TMP.CB_START_DT > ICG_STORES_TMP.BEN_EXP_DATE  and ICG_STORES_TMP.STATUS_SOURCE = 'IF')
      );

	--BEGIN TRANSACTION;
	--SET NOCOUNT ON


	---------------------------
	--- UPDATE TABLE ICG STORES
	---------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('UPDATE TABLE ICG STORES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	UPDATE ICG_STORES
	SET
	  INFORCE_FLAG = (CASE
	                    WHEN IFRS17_ICG_STORES_PROPTRDB_TMP.FLAG_INSERT_UPDATE = 'INSERT' THEN 'N'
	                    WHEN IFRS17_ICG_STORES_PROPTRDB_TMP.STATUS_SOURCE = ICG_STORES.STATUS_SOURCE AND ICG_STORES.STATUS_SOURCE = 'IF' AND IFRS17_ICG_STORES_PROPTRDB_TMP.CB_END_DT <> ICG_STORES.CB_END_DT AND IFRS17_ICG_STORES_PROPTRDB_TMP.FLAG_INSERT_UPDATE = 'INSERT' THEN 'N'
                        ELSE IFRS17_ICG_STORES_PROPTRDB_TMP.INFORCE_FLAG
                      END),
	  STATUS_SOURCE = (CASE
	                     WHEN IFRS17_ICG_STORES_PROPTRDB_TMP.FLAG_INSERT_UPDATE = 'INSERT' THEN ICG_STORES.STATUS_SOURCE
	                     ELSE IFRS17_ICG_STORES_PROPTRDB_TMP.STATUS_SOURCE
	                   END),
	  UPDATED_DATE = CURRENT_TIMESTAMP
	
	FROM FOND_ID.FOND_IFRS17_ICG_STORES AS ICG_STORES

	JOIN
	(
	  SELECT
	    POLICY_NO,
	    PRODUCT_CD,
	    CB_START_DT,
	    CB_END_DT,
	    ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_BASIC_POLICY
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  WHERE PRODUCT_CD = BENEFIT_CD
	  AND UPPER(SUBSYSTEM) = 'PROPTRDB'
	) AS LATEST_ICGS
	ON LATEST_ICGS.POLICY_NO = ICG_STORES.POLICY_NO
	AND LATEST_ICGS.PRODUCT_CD = ICG_STORES.PRODUCT_CD
	AND LATEST_ICGS.CB_START_DT = ICG_STORES.CB_START_DT
	AND LATEST_ICGS.CB_END_DT = ICG_STORES.CB_END_DT
	AND LATEST_ICGS.ROWNUM_BASIC_POLICY = 1
	
	JOIN STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDB AS IFRS17_ICG_STORES_PROPTRDB_TMP
	ON IFRS17_ICG_STORES_PROPTRDB_TMP.POLICY_NO = LATEST_ICGS.POLICY_NO
	AND IFRS17_ICG_STORES_PROPTRDB_TMP.FLAG_INSERT_UPDATE IN('INSERT', 'UPDATE')
    
	WHERE UPPER(TRIM(ICG_STORES.SUBSYSTEM)) = 'PROPTRDB'
	AND ICG_STORES.PRODUCT_CD = ICG_STORES.BENEFIT_CD
	AND IFRS17_ICG_STORES_PROPTRDB_TMP.POLICY_NO IS NOT NULL
	AND IFRS17_ICG_STORES_PROPTRDB_TMP.PRODUCT_CD IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.CONTRACT_ID IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.PORTFOLIO_GROUP IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.COHORT_YEAR IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.SET_OF_CONTRACT IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.INSURANCE_CONTRACT_GROUP_ID IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.ICG_ID_PROPHET IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.ENTRY_MONTH IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.CB_START_DT IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.CB_END_DT IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.MEASUREMENT_MODEL IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.INFORCE_FLAG IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.COVERAGE_LEVEL_END_DATE IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.CCY_CD IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.STATUS_SOURCE IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDB_TMP.BEN_EXP_DATE IS NOT NULL
	AND (IFRS17_ICG_STORES_PROPTRDB_TMP.CB_START_DT <= IFRS17_ICG_STORES_PROPTRDB_TMP.BEN_EXP_DATE or IFRS17_ICG_STORES_PROPTRDB_TMP.STATUS_SOURCE <> 'IF');

    ---------------------------------------
	--- INSERT NEW VALID DATA TO ICG_STORES
	---------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT NEW VALID DATA TO ICG_STORES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES
	(
	  "ENTITY_ID",
      "SYSTEM",
	  POLICY_NO,
	  PRODUCT_CD,
	  BENEFIT_CD,
	  CONTRACT_ID,
	  PORTFOLIO_GROUP,
	  COHORT_YEAR,
	  SET_OF_CONTRACT,
	  INSURANCE_CONTRACT_GROUP_ID,
	  ICG_ID_PROPHET,
	  ENTRY_MONTH,
	  CB_START_DT,
	  CB_END_DT,
	  MEASUREMENT_MODEL,
	  INFORCE_FLAG,
	  COVERAGE_LEVEL_END_DATE,
	  CCY_CD,
	  STATUS_SOURCE,
	  BEN_EXP_DATE,
	  SUBSYSTEM,
	  CREATED_DATE,
	  UPDATED_DATE,
	  BATCH_MASTER_ID,
      BATCH_RUN_ID,
      JOB_MASTER_ID,
      JOB_RUN_ID,
	  BATCHDATE,
      ETL_PROCESS_DATE_TIME
	)
    SELECT
      ICG_STORES_TMP."ENTITY_ID",
      ICG_STORES_TMP."SYSTEM",
      ICG_STORES_TMP.POLICY_NO,
      ICG_STORES_TMP.PRODUCT_CD,
      ICG_STORES_TMP.PRODUCT_CD AS BENEFIT_CD,
      ICG_STORES_TMP.CONTRACT_ID,
      ICG_STORES_TMP.PORTFOLIO_GROUP,
      ICG_STORES_TMP.COHORT_YEAR,
      ICG_STORES_TMP.SET_OF_CONTRACT,
      ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID,
      ICG_STORES_TMP.ICG_ID_PROPHET,
      ICG_STORES_TMP.ENTRY_MONTH,
      ICG_STORES_TMP.CB_START_DT,
      ICG_STORES_TMP.CB_END_DT,
      ICG_STORES_TMP.MEASUREMENT_MODEL,
      ICG_STORES_TMP.INFORCE_FLAG,
      ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE,
      ICG_STORES_TMP.CCY_CD,
      ICG_STORES_TMP.STATUS_SOURCE,
      ICG_STORES_TMP.BEN_EXP_DATE,
      CAST('Proptrdb' AS VARCHAR(20)) AS SUBSYSTEM,
      CURRENT_TIMESTAMP AS CREATED_DATE,
      CURRENT_TIMESTAMP AS UPDATED_DATE,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
    
	FROM STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDB AS ICG_STORES_TMP
    
	WHERE ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'INSERT'
    AND ICG_STORES_TMP.POLICY_NO IS NOT NULL
    AND ICG_STORES_TMP.PRODUCT_CD IS NOT NULL
    AND ICG_STORES_TMP.CONTRACT_ID IS NOT NULL
    AND ICG_STORES_TMP.PORTFOLIO_GROUP IS NOT NULL
    AND ICG_STORES_TMP.COHORT_YEAR IS NOT NULL
    AND ICG_STORES_TMP.SET_OF_CONTRACT IS NOT NULL
    AND ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID IS NOT NULL
    AND ICG_STORES_TMP.ICG_ID_PROPHET IS NOT NULL
    AND ICG_STORES_TMP.ENTRY_MONTH IS NOT NULL
    AND ICG_STORES_TMP.CB_START_DT IS NOT NULL
    AND ICG_STORES_TMP.CB_END_DT IS NOT NULL
    AND ICG_STORES_TMP.MEASUREMENT_MODEL IS NOT NULL
    AND ICG_STORES_TMP.INFORCE_FLAG IS NOT NULL
    AND ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE IS NOT NULL
    AND ICG_STORES_TMP.CCY_CD IS NOT NULL
    AND ICG_STORES_TMP.STATUS_SOURCE IS NOT NULL
    AND ICG_STORES_TMP.BEN_EXP_DATE IS NOT NULL
	AND ICG_STORES_TMP.CB_START_DT <= ICG_STORES_TMP.BEN_EXP_DATE;

	-------------------------------------
	--- INSERT INTO MPFILES PROPTRDB
	-------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT INTO MPFILES PROPTRDB : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	INSERT INTO FOND_ID.FOND_IFRS17_MPFILES_PROPTRDB
	SELECT
      NULLIF(TRIM(AC1108RDB.CHDRNUM), '') AS CHDRNUM,
      AC1108RDB.CRTABLE,
      AC1108RDB.ANBCCD,
      AC1108RDB.SEX,
      AC1108RDB.MORTCLS,
      AC1108RDB.PRMTRM,
      AC1108RDB.RSKTRM,
      AC1108RDB.PREMI,
      AC1108RDB.BILLFREQ,
      AC1108RDB.SUMINS,
      AC1108RDB.TOTBON,
      AC1108RDB.PTDATE,
      AC1108RDB.HOISSDTE,
      AC1108RDB.CRRCD,
      AC1108RDB.RCESDTE,
      AC1108RDB.CNTCURR,
      AC1108RDB.STATCODE,
      AC1108RDB.CURRFROM,
      AC1108RDB.ZLINSTPREM,
      AC1108RDB.BPAYTY,
      AC1108RDB.BPAYNY,
      AC1108RDB.SLSCNL,
      AC1108RDB.BILLCHNL,
      AC1108RDB.ZPDFSURR,
      AC1108RDB.LSURNAME,
      AC1108RDB.CLTPHONE01,
      AC1108RDB.CLTPHONE02,
      AC1108RDB.LIFCNUM,
      AC1108RDB.AGNTNUM,
      AC1108RDB.LSURNAME01,
      AC1108RDB.DTEAPP,
      AC1108RDB.DTETRM,
      AC1108RDB.TSALESUNT,
      AC1108RDB.REPORTAG,
      AC1108RDB.LSURNAME02,
      AC1108RDB.REGION,
      AC1108RDB.FUND,
      AC1108RDB.CLTADDR04,
      AC1108RDB.CLTADDR05,
      AC1108RDB.CLTDOB,
      AC1108RDB.MEDFLG,
      AC1108RDB.SRCEBUS,
      AC1108RDB.REASONCD,
      AC1108RDB.LONGDESC,
      AC1108RDB.COWNNUM,
      AC1108RDB.REGION_INDICATOR,
	  AC1108RDB.SIO_GIO_FLAG,
      AC1108RDB.PRUSEHAT_SOLUTION_PLAN_TYPE,
      AC1108RDB.SUBSTANDARD_LOADING,
	  AC1108RDB.CAMPAIGN_FLAG,
	  AC1108RDB.TOTCLAIMS,
	  AC1108RDB.STAT_SECT,
	  AC1108RDB.PAS_CV,
	  AC1108RDB.[E-SUBMISSION_E-POLICY_AND_MAILFLAG],
	  AC1108RDB.WP_FLAG,
	  AC1108RDB.CAMP_CODE,
	  ICG_CONFIG.IFRS_ONEROUS_GRP,
      CASE
        WHEN DATEPART(YEAR, @V_START_DATE) = ICG_STORES_VALID.COHORT_YEAR THEN ICG_STORES_VALID.ENTRY_MONTH
        WHEN ICG_STORES_VALID.COHORT_YEAR < 1997 THEN 13
        ELSE (ICG_STORES_VALID.COHORT_YEAR - 1997) + 14
      END AS IFRS_CY_GRP,
      PORTFOLIO_DETAILS.IFRS_PORT_GRP,
      CASE
	    WHEN ICG_STORES_VALID.MEASUREMENT_MODEL = 'GMM' THEN 0
		WHEN ICG_STORES_VALID.MEASUREMENT_MODEL = 'VFA' THEN 1
	  END AS IFRS_MEASURE_MODEL,
      ICG_STORES_VALID.COHORT_YEAR AS BASIC_ENTRY_YEAR,
      ICG_STORES_VALID.ENTRY_MONTH AS BASIC_ENTRY_MONTH,
      DATEDIFF(MONTH, ICG_STORES_VALID.CB_START_DT, ICG_STORES_VALID.CB_END_DT) AS IFRS_CB_TERM_M,
      CASE
        WHEN DATEPART(YEAR, @V_START_DATE) = ICG_STORES_VALID.COHORT_YEAR THEN ICG_STORES_VALID.ENTRY_MONTH
        WHEN ICG_STORES_VALID.COHORT_YEAR IS NOT NULL THEN 0
        ELSE NULL
      END AS MTHS_TO_SALE,
      ICG_STORES_VALID.INSURANCE_CONTRACT_GROUP_ID AS IFRS_ICG_ID,
      ICG_STORES_VALID.ICG_ID_PROPHET AS IFRS_ICG_ID_PROPHET,
      ICG_CONFIG.SUB_GROUP_ID,
      ICG_STORES_VALID.ENTITY_ID AS ENTITY_ID,
      ICG_STORES_VALID.CB_START_DT AS CB_START_DT,
      ICG_STORES_VALID.CB_END_DT AS CB_END_DT,
      CASE WHEN DATEPART(YEAR, @V_START_DATE) = ICG_STORES_VALID.COHORT_YEAR THEN (ICG_STORES_VALID.INSURANCE_CONTRACT_GROUP_ID + '_' + UPPER(ICG_STORES_VALID.ENTRY_MONTH_MMM)) END AS REL_INSURANCE_CONTRACT_GROUP_ID,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
                    
    FROM STAG_ID.STAG_LIFEASIA_AC1108RDB AC1108RDB
    
	LEFT JOIN
      (
        --VALID ICG_STORES
	    SELECT
	      "ENTITY_ID",
		  POLICY_NO,
          PRODUCT_CD,
          INSURANCE_CONTRACT_GROUP_ID,
		  ICG_ID_PROPHET,
		  COHORT_YEAR,
		  ENTRY_MONTH,
		  CCY_CD,
		  CB_START_DT,
		  CB_END_DT,
		  MEASUREMENT_MODEL,
		  PORTFOLIO_GROUP,
		  SET_OF_CONTRACT,
		  CASE WHEN(ENTRY_MONTH =1) THEN 'JAN'
			WHEN(ENTRY_MONTH =2) THEN 'FEB'
			WHEN(ENTRY_MONTH =3) THEN 'MAR'
			WHEN(ENTRY_MONTH =4) THEN 'APR'
			WHEN(ENTRY_MONTH =5) THEN 'MAY'
			WHEN(ENTRY_MONTH =6) THEN 'JUN'
			WHEN(ENTRY_MONTH =7) THEN 'JUL'
			WHEN(ENTRY_MONTH =8) THEN 'AUG'
			WHEN(ENTRY_MONTH =9) THEN 'SEP'
			WHEN(ENTRY_MONTH =10) THEN 'OCT'
			WHEN(ENTRY_MONTH =11) THEN 'NOV'
			WHEN(ENTRY_MONTH =12) THEN 'DEC'
		 END AS ENTRY_MONTH_MMM,
		 ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
	    
		FROM FOND_ID.FOND_IFRS17_ICG_STORES
	    
		WHERE UPPER(TRIM(SUBSYSTEM)) = 'PROPTRDB'
	    AND PRODUCT_CD = BENEFIT_CD
      ) AS ICG_STORES_VALID
    ON NULLIF(TRIM(AC1108RDB.CHDRNUM), '') = ICG_STORES_VALID.POLICY_NO
    AND ICG_STORES_VALID.ROWNUM_POLICY_NO = 1
    
--	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING AS PORTFOLIO_MAP
--    ON ICG_STORES_VALID.PRODUCT_CD = PORTFOLIO_MAP.PRODUCT_CD
--    AND ICG_STORES_VALID.CCY_CD = PORTFOLIO_MAP.CCY_CD
--    AND UPPER(TRIM(PORTFOLIO_MAP."SYSTEM")) = 'LIFE ASIA'
   
    LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_SET_OF_CONTRACT AS SET_OF_CONTRACT
    ON ICG_STORES_VALID.PRODUCT_CD = SET_OF_CONTRACT.PRODUCT_CD
	AND ICG_STORES_VALID.CCY_CD = SET_OF_CONTRACT.CCY_CD
	AND UPPER(TRIM(SET_OF_CONTRACT."SYSTEM")) = 'LIFE ASIA'
    
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG AS ICG_CONFIG
   ON  (CASE WHEN (ICG_STORES_VALID.COHORT_YEAR) <'2018' THEN '2018' ELSE (ICG_STORES_VALID.COHORT_YEAR) END) = ICG_CONFIG.COHORT_YEAR
	AND ICG_STORES_VALID.MEASUREMENT_MODEL = ICG_CONFIG.MEASUREMENT_MODEL
	AND ICG_STORES_VALID.PORTFOLIO_GROUP = ICG_CONFIG.PORTFOLIO_GROUP
    AND ICG_STORES_VALID.SET_OF_CONTRACT = ICG_CONFIG.SET_OF_CONTRACT

    LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_DETAILS AS PORTFOLIO_DETAILS
	ON ICG_STORES_VALID.PORTFOLIO_GROUP = PORTFOLIO_DETAILS.PORTFOLIO_GROUP 
	;

	--store end step to log
	SET @V_END = CURRENT_TIMESTAMP;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = CONCAT('Finish ', @V_FUNCTION_NAME, ' : ', @V_END, ' Duration ', DATEDIFF(MINUTE, @V_START, @V_END));

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_END, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	--IF @@TRANCOUNT > 0
	--	COMMIT TRANSACTION;

END TRY

BEGIN CATCH
  --IF @@TRANCOUNT > 0
  --  ROLLBACK TRANSACTION;

  DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
  DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
  DECLARE @ErrorState AS INT = ERROR_STATE()

  SET @V_SEQNO 	= @V_SEQNO + 1;
  SET @V_START 	= CONVERT(DATETIME,GETDATE());
  SET @V_END 	= CONVERT(DATETIME,GETDATE());
  SET @V_DESCRIPTION	='Error execution for function on ' + @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) + ' with Error Message : ' + ERROR_MESSAGE();

  INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION") VALUES(@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
  RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)

  

END CATCH;
