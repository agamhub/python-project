CREATE PROC [FOND_ID].[USP_IFRS17_PRUAMAN_AOM_5ABC] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@PRD_ID [INTEGER] AS

BEGIN
DECLARE @V_START			DATETIME,
		@V_END				DATETIME,
		@V_DURATION			DATETIME,
		@V_FUNCTION_NAME	VARCHAR(100),
		@V_DESCRIPTION		VARCHAR(100),
		@V_CMD				VARCHAR(100),
		@V_SEQNO			INTEGER,
		@V_PRD_ID			INTEGER,
		@V_CREATED_DATE		DATETIME,
		@V_START_DATE		DATE,
		@V_END_DATE			DATE,
------START GET RUN ID DETAIL FROM ABC------
 @BATCH_MASTER_ID    VARCHAR(20) = 0,
 @BATCH_RUN_ID       VARCHAR(20) = 0,
 @JOB_MASTER_ID      VARCHAR(20) = 0,
 @JOB_RUN_ID         VARCHAR(20) = 0,
 @GMT_START_DTTM     VARCHAR(20) = GETDATE();
	
EXEC STAG_ID.USP_GetRunIdReturn
  @JobName        = @JOBNAMESTR,
  @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
  @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
  @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
  @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
  @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
------END GET RUN ID DETAIL FROM ABC--------- 	

------set variable----------------
SET @BATCHDATESTR = CAST(EOMONTH(CAST(CONCAT(SUBSTRING(@BATCHDATESTR,0,5),'-',SUBSTRING(@BATCHDATESTR,5,2),'-01') AS DATE)) AS VARCHAR(10));
SET @PRD_ID = CONCAT(SUBSTRING(CAST(@PRD_ID AS VARCHAR),0,5),SUBSTRING(CAST(@PRD_ID AS VARCHAR),5,2),'01');

SET @V_FUNCTION_NAME = 'FOND_ID.USP_IFRS17_PRUAMAN_AOM_5ABC';
SET @V_SEQNO = 1;
SET @V_START_DATE = CONVERT(DATE, CONVERT(CHAR(10), @PRD_ID));
SET @V_START = CURRENT_TIMESTAMP;
SET @V_DESCRIPTION = CONCAT('Start ', @V_FUNCTION_NAME, ' : ', @V_START_DATE)

INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

BEGIN TRY
DROP TABLE [FOND_ID].[FOND_IFRS17_PRUAMAN_AOM_5ABC];
PRINT 'Table exist, dropping table..'
END TRY
BEGIN CATCH
	PRINT 'Table does not exists..'
END CATCH

BEGIN TRY
CREATE TABLE [FOND_ID].[FOND_IFRS17_PRUAMAN_AOM_5ABC]
WITH
	(
	  DISTRIBUTION = HASH(POLICY_ID),
	  HEAP
	) AS
SELECT DISTINCT
	SOP.[POLICY_ID]
		  ,SOP.[CONTRACT_OWNER]
		  ,SOP.[CONTRACT_NUMBER]
		  ,SOP.[DISBURSTMENT_MONTH]
		  ,SOP.[SENT_BY]
		  ,SOP.[DELIVERY_DATE]
		  ,SOP.[PLAN]
		  ,SOP.[LIFE_ASSURED]
		  ,SOP.[ADDRESS]
		  ,SOP.[GENDER]
		  ,SOP.[ID_NUMBER]
		  ,SOP.[DATE_OF_BIRTH]
		  ,SOP.[NATIONALITY]
		  ,SOP.[BRANCH_NAME]
		  ,SOP.[LOAN_NUMBER]
		  ,SOP.[BENEFICIARY_NAME]
		  ,SOP.[BENEFICIARY_DATE_OF_BIRTH]
		  ,SOP.[RELATION_BETWEEN]
		  ,SOP.[STATUS]
		  ,SOP.[INITIAL_LOAN]
		  ,SOP.[LAST_TOP_UP]
		  ,SOP.[TOTAL_LOAN]
		  ,SOP.[LOAN_DATE]
		  ,SOP.[DUE_DATE]
		  ,SOP.[PREMIUM_NETT]
		  ,SOP.[PREMIUM_GROSS]
		  ,SOP.[TENOR]
		  ,SOP.[DATE_TOP_UP]
		  ,SOP.[DATE_RESTRUCTURE]
		  ,SOP.[IS_ACTIVE]
		  ,SOP.[CREATED_BY]
		  ,SOP.[CREATED_DATE]
		  ,SOP.[MODIFIED_BY]
		  ,SOP.[MODIFIED_DATE]
		  ,SOP.[PRODUCT_CD] --Altered
		  -- updated by dyah 08/06/2022
		,CASE 
			WHEN (SOP.[IFRS_ONEROUS_GRP] IS NULL OR SOP.[IFRS_ONEROUS_GRP] = '') THEN COALESCE(EOP.[IFRS_ONEROUS_GRP],'') 
			ELSE COALESCE(SOP.[IFRS_ONEROUS_GRP],'') END AS [IFRS_ONEROUS_GRP]
		,CASE 
			WHEN (SOP.[IFRS_CY_GRP] IS NULL OR SOP.[IFRS_CY_GRP] = '') THEN COALESCE(EOP.[IFRS_CY_GRP],'') 
			ELSE COALESCE(SOP.[IFRS_CY_GRP],'') END AS [IFRS_CY_GRP]
		,CASE 
			WHEN (SOP.[IFRS_PORT_GRP]  IS NULL OR SOP.[IFRS_PORT_GRP]  = '') THEN COALESCE(EOP.[IFRS_PORT_GRP] ,'') 
			ELSE COALESCE(SOP.[IFRS_PORT_GRP] ,'') END AS [IFRS_PORT_GRP] 
		,CASE 
			WHEN (SOP.[IFRS_MEASURE_MODEL]  IS NULL OR SOP.[IFRS_MEASURE_MODEL]  = '') THEN COALESCE(EOP.[IFRS_MEASURE_MODEL] ,'') 
			ELSE COALESCE(SOP.[IFRS_MEASURE_MODEL] ,'') END AS [IFRS_MEASURE_MODEL]
		,CASE 
			WHEN (SOP.[BASIC_ENTRY_YEAR] IS NULL OR SOP.[BASIC_ENTRY_YEAR] = '') THEN COALESCE(EOP.[BASIC_ENTRY_YEAR],'') 
			ELSE COALESCE(SOP.[BASIC_ENTRY_YEAR],'') END AS [BASIC_ENTRY_YEAR]
		,CASE 
			WHEN (SOP.[BASIC_ENTRY_MONTH] IS NULL OR SOP.[BASIC_ENTRY_MONTH] = '') THEN COALESCE(EOP.[BASIC_ENTRY_MONTH],'') 
			ELSE COALESCE(SOP.[BASIC_ENTRY_MONTH],'') END AS [BASIC_ENTRY_MONTH]
		,CASE 
			WHEN (SOP.[IFRS_CB_TERM_M] IS NULL OR SOP.[IFRS_CB_TERM_M] = '') THEN COALESCE(EOP.[IFRS_CB_TERM_M],'') 
			ELSE COALESCE(SOP.[IFRS_CB_TERM_M],'') END AS [IFRS_CB_TERM_M]
		,CASE 
			WHEN (SOP.[MTHS_TO_SALE] IS NULL OR SOP.[MTHS_TO_SALE] = '') THEN COALESCE(EOP.[MTHS_TO_SALE],'') 
			ELSE COALESCE(SOP.[MTHS_TO_SALE],'') END AS [MTHS_TO_SALE]
		,CASE 
			WHEN (SOP.[IFRS_ICG_ID] IS NULL OR SOP.[IFRS_ICG_ID] = '') THEN COALESCE(EOP.[IFRS_ICG_ID],'') 
			ELSE COALESCE(SOP.[IFRS_ICG_ID],'') END AS [IFRS_ICG_ID]
		,CASE 
			WHEN (SOP.[IFRS_ICG_ID_PROPHET] IS NULL OR SOP.[IFRS_ICG_ID_PROPHET] = '') THEN COALESCE(EOP.[IFRS_ICG_ID_PROPHET],'') 
			ELSE COALESCE(SOP.[IFRS_ICG_ID_PROPHET],'') END AS [IFRS_ICG_ID_PROPHET]
		,CASE 
			WHEN (SOP.[SUB_GROUP_ID] IS NULL OR SOP.[SUB_GROUP_ID] = '') THEN COALESCE(EOP.[SUB_GROUP_ID],'') 
			ELSE COALESCE(SOP.[SUB_GROUP_ID],'') END AS [SUB_GROUP_ID]
		,CASE 
			WHEN (SOP.[ENTITY_ID] IS NULL OR SOP.[ENTITY_ID] = '') THEN COALESCE(EOP.[ENTITY_ID],'') 
			ELSE COALESCE(SOP.[ENTITY_ID],'') END AS [ENTITY_ID]
		,CASE 
			WHEN (SOP.[CCY_CD] IS NULL OR SOP.[CCY_CD] = '') THEN COALESCE(EOP.[CCY_CD],'') 
			ELSE COALESCE(SOP.[CCY_CD],'') END AS [CCY_CD]
		,CASE 
			WHEN (SOP.[CB_START_DT] IS NULL OR SOP.[CB_START_DT] = '') THEN COALESCE(EOP.[CB_START_DT],'') 
			ELSE COALESCE(SOP.[CB_START_DT],'') END AS [CB_START_DT]
		,CASE 
			WHEN (SOP.[CB_END_DT] IS NULL OR SOP.[CB_END_DT] = '') THEN COALESCE(EOP.[CB_END_DT],'') 
			ELSE COALESCE(SOP.[CB_END_DT],'') END AS [CB_END_DT]
		,CASE 
			WHEN (SOP.[REL_INSURANCE_CONTRACT_GROUP_ID] IS NULL OR SOP.[REL_INSURANCE_CONTRACT_GROUP_ID] = '') THEN COALESCE(EOP.[REL_INSURANCE_CONTRACT_GROUP_ID],'') 
			ELSE COALESCE(SOP.[REL_INSURANCE_CONTRACT_GROUP_ID],'') END AS [REL_INSURANCE_CONTRACT_GROUP_ID]
	,SOP.[STATUS_SOURCE]
	,EOP.[STATUS_SOURCE] AS [STATCODE_EOP],
	@BATCH_MASTER_ID AS BATCH_MASTER_ID, 
	@BATCH_RUN_ID AS BATCH_RUN_ID,
	@JOB_MASTER_ID AS JOB_MASTER_ID,
	@JOB_RUN_ID  AS JOB_RUN_ID,
	@BATCHDATESTR AS BATCHDATE,
	@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
FROM (
	SELECT * FROM (
		SELECT * , ROW_NUMBER() OVER(PARTITION BY [POLICY_ID] ORDER BY BACKUP_BATCHDATE ASC) AS ROW_NUMBER
		FROM FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN_HIS
		--UPDATE SOP to gether 2 digit month
		WHERE BACKUP_BATCHDATE >= CAST(CONCAT(YEAR(CAST(@BATCHDATESTR AS DATE))-1,'-12-31') AS DATE) 
		AND CONCAT( YEAR(BACKUP_BATCHDATE),SUBSTRING(CAST(BACKUP_BATCHDATE AS CHAR),6,2)) <= CONCAT(YEAR(CAST(@BATCHDATESTR AS DATE)),SUBSTRING(CAST(@BATCHDATESTR AS CHAR),6,2))
	)TMP WHERE TMP.ROW_NUMBER = 1
) AS SOP
LEFT JOIN (
  SELECT *
  FROM FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN_HIS
  WHERE YEAR(BACKUP_BATCHDATE) = YEAR(CAST(@BATCHDATESTR AS DATE)) AND MONTH(BACKUP_BATCHDATE) = MONTH(CAST(@BATCHDATESTR AS DATE))
) AS EOP ON SOP.[POLICY_ID] = EOP.[POLICY_ID];


END TRY
	BEGIN CATCH
	    DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
		DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
		DECLARE @ErrorState AS INT = ERROR_STATE()

 		--IF @@TRANCOUNT > 0  
		--	ROLLBACK TRAN; 
		
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)
	
	END CATCH

END


