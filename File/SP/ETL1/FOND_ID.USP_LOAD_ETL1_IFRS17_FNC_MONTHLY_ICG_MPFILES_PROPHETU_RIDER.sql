CREATE PROC [FOND_ID].[USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PROPHETU_RIDER] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@P_PRD_ID [integer] AS
BEGIN
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_DURATION		datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = '[USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PROPHETU_RIDER]';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO		integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;

	--- ABC Framework parameter
	DECLARE @BATCH_MASTER_ID    VARCHAR(20) = 0;
	DECLARE @BATCH_RUN_ID    VARCHAR(20)  = 0;
	DECLARE @JOB_MASTER_ID    VARCHAR(20)  = 0;
	DECLARE @JOB_RUN_ID    VARCHAR(20)  = 0;
	DECLARE @GMT_START_DTTM    VARCHAR(20) = getdate();
	
	BEGIN TRY

		---------------------------------------------------
		--- Setup ABC Framework Parameters
		---------------------------------------------------
		EXEC STAG_ID.USP_GetRunIdReturn
		@JobName = @JOBNAMESTR
		,@BATCH_MASTER_ID  = @BATCH_MASTER_ID OUTPUT
		,@BATCH_RUN_ID   = @BATCH_RUN_ID OUTPUT
		,@JOB_MASTER_ID  = @JOB_MASTER_ID OUTPUT
		,@JOB_RUN_ID  = @JOB_RUN_ID OUTPUT
		,@GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
		------END GET RUN ID DETAIL FROM ABC------
		
		SET @V_START_DATE	= convert(date, cast(@P_PRD_ID as varchar(8))); -- valuation extract date
		PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
		SET @V_START 	= convert(datetime,getDATE());

		SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
		PRINT	@V_DESCRIPTION;
		SET @V_SEQNO		= @V_SEQNO + 1;

		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		---------------------------------------------------
		--- Drop temp tables
		---------------------------------------------------
		IF OBJECT_ID('STAG_ID.TMP_IFRS17_PROPHETU_RIDERS') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_PROPHETU_RIDERS;
		IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS_ICG_FLAG') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS_ICG_FLAG;
		IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS;
		IF OBJECT_ID('STAG_ID.TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE;
		--TRUNCATE TABLE STAG_ID.TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE;
		

		---------------------------------------------------
		--- Create Temporary Table for Prophetu Riders
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE TABLE TMP_IFRS17_PROPHETU_RIDERS : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
		-- get benefit expiry
		--drop table if exists STAG_ID.TMP_IFRS17_PROPHETU_RIDERS ;
		
		CREATE TABLE STAG_ID.TMP_IFRS17_PROPHETU_RIDERS  
		WITH
		(
		 DISTRIBUTION = HASH(CHDRNUM)
		 ,CLUSTERED INDEX(CHDRNUM)
		)
		as
		SELECT A.CHDRNUM
		,A.CNTTYPE
		,B.CRTABLE
		,B.LIFE
		,B.COVERAGE
		,B.RIDER
		,A.STATCODE AS BASIC_STATUS
		,B.STATCODE AS RIDER_STATUS
		,B.TRANSACTION_DATE
		,B.TRANNO
		--- ABC Framework parameter
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		FROM STAG_ID.STAG_LIFEASIA_ZPRUPF_V2 A
		JOIN (
			select 
			covr_v2.CHDRNUM,
			covr_v2.CRTABLE,
			covr_v2.STATCODE,
			covr_v2.LIFE,
			covr_v2.COVERAGE,
			covr_v2.RIDER,
			covr_v2.TRANNO,
			covr_v2.TRANSACTION_DATE,
			covr_v2.TRANSACTION_DATE_V2,
			ROW_NUMBER() OVER(PARTITION BY covr_v2.CHDRNUM,covr_v2.CRTABLE,covr_v2.LIFE,covr_v2.COVERAGE,covr_v2.RIDER ORDER BY covr_v2.TRANNO DESC, covr_v2.TRANSACTION_DATE_V2 DESC) AS ROW_NUMBER_TRNDATE
			from 
			(
				SELECT A.CHDRNUM,A.CRTABLE,A.STATCODE,A.LIFE,A.COVERAGE,A.RIDER,A.TRANNO,A.TRANSACTION_DATE
				,CAST(CASE WHEN SUBSTRING(STAG_ID.LPAD(TRANSACTION_DATE,6,'0'),1,2) > 80 THEN
						CONCAT(19,STAG_ID.LPAD(TRANSACTION_DATE,6,'0'))
					ELSE
						CONCAT(20,STAG_ID.LPAD(TRANSACTION_DATE,6,'0'))
				END as INTEGER) as TRANSACTION_DATE_V2
				FROM STAG_ID.STAG_LIFEASIA_COVRPF A
				JOIN 
				(
					SELECT CHDRNUM,CRTABLE,LIFE,COVERAGE,RIDER,
					ROW_NUMBER() OVER(PARTITION BY CHDRNUM, CRTABLE,LIFE ORDER BY COVERAGE DESC,RIDER DESC) as ROW_NUMBER_RIDER
					FROM STAG_ID.STAG_LIFEASIA_COVRPF
					WHERE
					(LIFE+COVERAGE+RIDER) <> ('01'+'01'+'00')
					AND SUBSTRING(CRTABLE,1,1)<>'U'
					GROUP BY CHDRNUM,CRTABLE,LIFE,RIDER,COVERAGE
				)B 
				ON 
				A.CHDRNUM = B.CHDRNUM 
				AND A.CRTABLE = B.CRTABLE 
				AND A.LIFE = B.LIFE
				AND A.COVERAGE = B.COVERAGE
				AND A.RIDER = B.RIDER
				WHERE B.ROW_NUMBER_RIDER = 1
				and CAST(CASE WHEN SUBSTRING(STAG_ID.LPAD(TRANSACTION_DATE,6,'0'),1,2) > 80 THEN
						CONCAT(19,STAG_ID.LPAD(TRANSACTION_DATE,6,'0'))
					ELSE
						CONCAT(20,STAG_ID.LPAD(TRANSACTION_DATE,6,'0'))
					END AS INTEGER) <= @P_PRD_ID
				--ORDER BY A.CHDRNUM DESC ,A.LIFE DESC,A.COVERAGE DESC,A.RIDER DESC
			) covr_v2 
		
		)B 
		ON 
		A.CHDRNUM = B.CHDRNUM
		AND B.ROW_NUMBER_TRNDATE = 1;

		
		

		---------------------------------------------------
		--- Create Temporary Table for ICG Identification Process
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE TABLE TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS_ICG_FLAG : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	


		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
		--drop table if exists STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS_ICG_FLAG;
		
		CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS_ICG_FLAG 
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
		AS 
		select distinct
        B.POLICY_NO
		,B.PRODUCT_CD
		,(case when dup.RIDER_CODE is not null then A.CRTABLE+A.LIFE else A.CRTABLE end) as BENEFIT_CD
		,(CASE 
			  -- RIDER_STATUS = IF
			  WHEN UPPER(TRIM(A.RIDER_STATUS)) = 'IF' THEN   
				(CASE 
					   WHEN B.ICG_FLAG IN ('NEW BUSINESS') THEN 'NEW RIDERS'
					   WHEN ICGS.BENEFIT_CD IS NULL THEN 'NEW RIDERS'
					   WHEN A.RIDER_STATUS <> ICGS.STATUS_SOURCE THEN 'UPDATE EXISTING RIDERS'
					   ELSE 'NO UPDATE'
				END)
			   -- RIDER_STATUS <> IF and Not Exists in ICG Stores
			   WHEN ICGS.BENEFIT_CD IS NULL AND B.STATUS_SOURCE = 'IF' AND NULLIF(TRIM(A.RIDER_STATUS),'') IS NOT NULL THEN 'EXCLUDE'
			   WHEN ICGS.BENEFIT_CD IS NULL THEN 'NEW RIDERS'
			   -- RIDER_STATUS <> IF and Exists in ICG Stores
			   WHEN COALESCE(A.RIDER_STATUS,'N/A') <> ICGS.STATUS_SOURCE THEN 'UPDATE EXISTING RIDERS'
			   ELSE 'NO UPDATE'
		 END) RIDERS_FLAG
		--- ABC Framework parameter
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		from STAG_ID.TMP_IFRS17_PROPHETU_RIDERS A
		inner join STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU B
		on A.CHDRNUM = B.POLICY_NO
		left join (select distinct RIDER_CODE from STAG_ID.STAG_LIFEASIA_IFRS17_MULTINS_RIDER_CODES) dup
		on A.CRTABLE = dup.RIDER_CODE
		LEFT JOIN (
			select A.*
			, row_number() over(partition by POLICY_NO, BENEFIT_CD 
			order by CB_START_DT desc, CB_END_DT desc, CREATED_DATE desc, UPDATED_DATE desc) as idx 
			FROM FOND_ID.FOND_IFRS17_ICG_STORES A
			where lower(trim(SUBSYSTEM)) = lower(trim('Prophetu'))
			AND PRODUCT_CD <> BENEFIT_CD
		) ICGS ON A.CHDRNUM = ICGS.POLICY_NO 
		AND (case when dup.RIDER_CODE is not null then A.CRTABLE+A.LIFE else A.CRTABLE end) = ICGS.BENEFIT_CD AND ICGS.idx=1
		;
	
		
		---------------------------------------------------
		--- Get ICG Stores only for non duplicate records
		--- Calculate ICG Stores for Benefit Level (Riders)
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE TABLE TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
	
		-- drop table
		--drop TABLE if exists STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS;
		
		CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS 
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
		AS
		select 
		B.ENTITY_ID
		,B.SYSTEM
		,B.POLICY_NO
		,B.PRODUCT_CD
		,(case when dup.RIDER_CODE is not null then A.CRTABLE+A.LIFE else A.CRTABLE end) as BENEFIT_CD
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.CONTRACT_ID else ICGS.CONTRACT_ID end) as CONTRACT_ID
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.PORTFOLIO_GROUP else ICGS.PORTFOLIO_GROUP end) as PORTFOLIO_GROUP
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.COHORT_YEAR else ICGS.COHORT_YEAR end) as COHORT_YEAR
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.SET_OF_CONTRACT else ICGS.SET_OF_CONTRACT end) as SET_OF_CONTRACT
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.INSURANCE_CONTRACT_GROUP_ID else ICGS.INSURANCE_CONTRACT_GROUP_ID end) as INSURANCE_CONTRACT_GROUP_ID
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.ICG_ID_PROPHET else ICGS.ICG_ID_PROPHET end) as ICG_ID_PROPHET
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.ENTRY_MONTH else ICGS.ENTRY_MONTH end) as ENTRY_MONTH
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.CB_START_DT else ICGS.CB_START_DT end) as CB_START_DT
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.CB_END_DT else ICGS.CB_END_DT end) as CB_END_DT
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.MEASUREMENT_MODEL else ICGS.MEASUREMENT_MODEL end) as MEASUREMENT_MODEL
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE','UPDATE EXISTING RIDERS') then SMT.INFORCE_FLAG else ICGS.INFORCE_FLAG end) as INFORCE_FLAG
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.COVERAGE_LEVEL_END_DATE else ICGS.COVERAGE_LEVEL_END_DATE end) as COVERAGE_LEVEL_END_DATE
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.CCY_CD else ICGS.CCY_CD end) as CCY_CD
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE','UPDATE EXISTING RIDERS') then A.RIDER_STATUS else ICGS.STATUS_SOURCE end) as STATUS_SOURCE
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then B.BEN_EXP_DATE else ICGS.BEN_EXP_DATE end) as BEN_EXP_DATE
		,B.STATUS_SOURCE as BASIC_STATUS
		,B.INFORCE_FLAG as BASIC_INFORCE_FLAG
		,B.ICG_FLAG
		,icg_flag.RIDERS_FLAG
		,cast('Prophetu' as varchar(20)) as SUBSYSTEM
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then CURRENT_TIMESTAMP else ICGS.CREATED_DATE end) as CREATED_DATE
		,(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE') then CURRENT_TIMESTAMP else ICGS.UPDATED_DATE end) as UPDATED_DATE
		--- ABC Framework parameter
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		from STAG_ID.TMP_IFRS17_PROPHETU_RIDERS A
		inner join STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU B
		on A.CHDRNUM = B.POLICY_NO
		left join (select distinct RIDER_CODE from STAG_ID.STAG_LIFEASIA_IFRS17_MULTINS_RIDER_CODES) dup
		on A.CRTABLE = dup.RIDER_CODE
		LEFT JOIN (
			select A.*
			, row_number() over(partition by POLICY_NO, BENEFIT_CD 
			order by CB_START_DT desc, CB_END_DT desc, CREATED_DATE desc, UPDATED_DATE desc) as idx 
			FROM FOND_ID.FOND_IFRS17_ICG_STORES A
			where lower(trim(SUBSYSTEM)) = lower(trim('Prophetu'))
			AND PRODUCT_CD <> BENEFIT_CD
		) ICGS 
		ON A.CHDRNUM = ICGS.POLICY_NO 
		AND (case when dup.RIDER_CODE is not null then A.CRTABLE+A.LIFE else A.CRTABLE end) = ICGS.BENEFIT_CD AND ICGS.idx=1
		LEFT JOIN STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS_ICG_FLAG icg_flag
		ON B.POLICY_NO = icg_flag.POLICY_NO
		AND COALESCE(TRIM(B.PRODUCT_CD),'N/A') = COALESCE(TRIM(icg_flag.PRODUCT_CD),'N/A')
		AND COALESCE((case when dup.RIDER_CODE is not null then A.CRTABLE+A.LIFE else A.CRTABLE end),'N/A') = COALESCE(icg_flag.BENEFIT_CD,'N/A')
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE SMT on 
		(CASE WHEN icg_flag.RIDERS_FLAG IN ('NEW RIDERS','EXCLUDE','UPDATE EXISTING RIDERS') then A.RIDER_STATUS else ICGS.STATUS_SOURCE end) = SMT.STATUS_SOURCE
		AND UPPER(TRIM(CAST('Life Asia' AS VARCHAR(20)))) = UPPER(TRIM(SMT.SYSTEM))
		;

		---------------------------------------------------
		--- Begin transaction
		---------------------------------------------------
		--BEGIN TRAN;
		--SET NOCOUNT ON
		
		---------------------------------------------------
		--- Update existing records to ICG Stores Tables for "new riders"
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'update FOND_ID.FOND_IFRS17_ICG_STORES for new riders : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- update existing records in icg stores for valid new business. update only INFORCE_FLAG='N'
		update FOND_ID.FOND_IFRS17_ICG_STORES 
		set INFORCE_FLAG = 'N'
		, UPDATED_DATE=CURRENT_TIMESTAMP
		from STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS 
		where FOND_IFRS17_ICG_STORES.POLICY_NO = TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.POLICY_NO
		AND TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.RIDERS_FLAG = 'NEW RIDERS'
		AND FOND_IFRS17_ICG_STORES.PRODUCT_CD = TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.PRODUCT_CD
		AND FOND_IFRS17_ICG_STORES.BENEFIT_CD = TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.BENEFIT_CD	
		AND lower(trim(FOND_IFRS17_ICG_STORES.SUBSYSTEM)) = lower(trim('Prophetu'))
		AND (case 	
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.POLICY_NO),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.PRODUCT_CD),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.BENEFIT_CD),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.CONTRACT_ID),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.PORTFOLIO_GROUP),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.COHORT_YEAR is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.SET_OF_CONTRACT),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.ICG_ID_PROPHET is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.ENTRY_MONTH is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.CB_START_DT is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.CB_END_DT is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.MEASUREMENT_MODEL),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.INFORCE_FLAG),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.COVERAGE_LEVEL_END_DATE is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.CCY_CD),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.STATUS_SOURCE),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.BASIC_STATUS),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.BASIC_INFORCE_FLAG),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.BEN_EXP_DATE is null then 'N'
			when (TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.CB_START_DT > TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.BEN_EXP_DATE OR TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.STATUS_SOURCE <>'IF')  then 'N'
			ELSE 'Y'
		end) = 'Y'
		;

		---------------------------------------------------
		--- Update existing records to ICG Stores Tables
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'update FOND_ID.FOND_IFRS17_ICG_STORES: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- update existing records in icg stores.
		update FOND_ID.FOND_IFRS17_ICG_STORES 
		set STATUS_SOURCE = TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.STATUS_SOURCE
		, INFORCE_FLAG = TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.INFORCE_FLAG
		, UPDATED_DATE=CURRENT_TIMESTAMP
		from STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS 
		where FOND_IFRS17_ICG_STORES.POLICY_NO = TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.POLICY_NO
		AND FOND_IFRS17_ICG_STORES.PRODUCT_CD = TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.PRODUCT_CD
		AND FOND_IFRS17_ICG_STORES.BENEFIT_CD = TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.BENEFIT_CD	
		AND FOND_IFRS17_ICG_STORES.CB_START_DT = TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.CB_START_DT
		AND FOND_IFRS17_ICG_STORES.CB_END_DT = TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.CB_END_DT
		AND FOND_IFRS17_ICG_STORES.CREATED_DATE = TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.CREATED_DATE
		AND FOND_IFRS17_ICG_STORES.UPDATED_DATE = TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.UPDATED_DATE
		AND TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.RIDERS_FLAG = 'UPDATE EXISTING RIDERS' 
		AND lower(trim(FOND_IFRS17_ICG_STORES.SUBSYSTEM)) = lower(trim('Prophetu'))
		AND NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.INFORCE_FLAG),'') is not null 
		AND NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS.STATUS_SOURCE),'') is not null 
		;

		---------------------------------------------------
		--- Insert new valid records to ICG Stores Tables
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'insert into FOND_ID.FOND_IFRS17_ICG_STORES for new riders: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- insert valid new records to icg stores
		INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES(
		ENTITY_ID
		,SYSTEM
		,POLICY_NO
		,PRODUCT_CD
		,BENEFIT_CD
		,CONTRACT_ID
		,PORTFOLIO_GROUP
		,COHORT_YEAR
		,SET_OF_CONTRACT
		,INSURANCE_CONTRACT_GROUP_ID
		,ICG_ID_PROPHET
		,ENTRY_MONTH
		,CB_START_DT
		,CB_END_DT
		,MEASUREMENT_MODEL
		,INFORCE_FLAG
		,COVERAGE_LEVEL_END_DATE
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		--- ABC Framework parameter
		,BATCH_MASTER_ID 
		,BATCH_RUN_ID 
		,JOB_MASTER_ID
		,JOB_RUN_ID  
		,BATCHDATE
		,ETL_PROCESS_DATE_TIME 
		)
		SELECT 
		ENTITY_ID
		,SYSTEM
		,POLICY_NO
		,PRODUCT_CD
		,BENEFIT_CD
		,CONTRACT_ID
		,PORTFOLIO_GROUP
		,COHORT_YEAR
		,SET_OF_CONTRACT
		,INSURANCE_CONTRACT_GROUP_ID
		,ICG_ID_PROPHET
		,ENTRY_MONTH
		,CB_START_DT
		,(case when CB_END_DT <= BEN_EXP_DATE then CB_END_DT else BEN_EXP_DATE end)
		,MEASUREMENT_MODEL
		,INFORCE_FLAG
		,(case when COVERAGE_LEVEL_END_DATE <= BEN_EXP_DATE then COVERAGE_LEVEL_END_DATE else BEN_EXP_DATE end)
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		--- ABC Framework parameter
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		from STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS
		where RIDERS_FLAG =  'NEW RIDERS'
		AND (case 	
			when NULLIF(TRIM(POLICY_NO),'') is null then 'N'
			when NULLIF(TRIM(PRODUCT_CD),'') is null then 'N'
			when NULLIF(TRIM(BENEFIT_CD),'') is null then 'N'
			when NULLIF(TRIM(CONTRACT_ID),'') is null then 'N'
			when NULLIF(TRIM(PORTFOLIO_GROUP),'') is null then 'N'
			when COHORT_YEAR is null then 'N'
			when NULLIF(TRIM(SET_OF_CONTRACT),'') is null then 'N'
			when NULLIF(TRIM(INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
			when ICG_ID_PROPHET is null then 'N'
			when ENTRY_MONTH is null then 'N'
			when CB_START_DT is null then 'N'
			when CB_END_DT is null then 'N'
			when NULLIF(TRIM(MEASUREMENT_MODEL),'') is null then 'N'
			when NULLIF(TRIM(INFORCE_FLAG),'') is null then 'N'
			when COVERAGE_LEVEL_END_DATE is null then 'N'
			when NULLIF(TRIM(CCY_CD),'') is null then 'N'
			when NULLIF(TRIM(STATUS_SOURCE),'') is null then 'N'
			when NULLIF(TRIM(BASIC_STATUS),'') is null then 'N'
			when NULLIF(TRIM(BASIC_INFORCE_FLAG),'') is null then 'N'
			when BEN_EXP_DATE is null then 'N'
			when CB_START_DT > BEN_EXP_DATE then 'N'
			ELSE 'Y'
		end) = 'Y'
		;

	

		--------------------------------------------------------------------
		--- Insert into invalid ICG Stores  IFRS17
		--------------------------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE VIEW  FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_INVALID: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		
		INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_INVALID 
		select 
		A.ENTITY_ID
		,A.SYSTEM
		,A.POLICY_NO
		,A.PRODUCT_CD
		,A.BENEFIT_CD
		,A.CONTRACT_ID
		,A.PORTFOLIO_GROUP
		,A.COHORT_YEAR
		,A.SET_OF_CONTRACT
		,A.INSURANCE_CONTRACT_GROUP_ID
		,A.ICG_ID_PROPHET
		,A.ENTRY_MONTH
		,A.CB_START_DT
		,(case when A.CB_END_DT IS NOT NULL AND A.BEN_EXP_DATE IS NOT NULL THEN (case when A.CB_END_DT <= A.BEN_EXP_DATE then A.CB_END_DT else A.BEN_EXP_DATE end) ELSE NULL end) as CB_END_DT
		,A.MEASUREMENT_MODEL 
		,A.INFORCE_FLAG
		,(case when A.COVERAGE_LEVEL_END_DATE IS NOT NULL AND A.BEN_EXP_DATE IS NOT NULL THEN (case when A.COVERAGE_LEVEL_END_DATE <= A.BEN_EXP_DATE then A.COVERAGE_LEVEL_END_DATE else A.BEN_EXP_DATE end) ELSE NULL end) as COVERAGE_LEVEL_END_DATE
		,A.CCY_CD
		,A.STATUS_SOURCE
		,A.BEN_EXP_DATE
		,A.SUBSYSTEM
		,A.CREATED_DATE
		,A.UPDATED_DATE
		,upper(
			(case when 
			(case 	
				when NULLIF(TRIM(A.POLICY_NO),'') is null then 'N'
				when NULLIF(TRIM(A.PRODUCT_CD),'') is null then 'N'
				when NULLIF(TRIM(A.CONTRACT_ID),'') is null then 'N'
				when NULLIF(TRIM(A.PORTFOLIO_GROUP),'') is null then 'N'
				when A.COHORT_YEAR is null then 'N'
				when NULLIF(TRIM(A.SET_OF_CONTRACT),'') is null then 'N'
				when NULLIF(TRIM(A.INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
				when A.ICG_ID_PROPHET is null then 'N'
				when A.ENTRY_MONTH is null then 'N'
				when A.CB_START_DT is null then 'N'
				when A.CB_END_DT is null then 'N'
				when NULLIF(TRIM(A.MEASUREMENT_MODEL),'') is null then 'N'
				when A.COVERAGE_LEVEL_END_DATE is null then 'N'
				when NULLIF(TRIM(A.CCY_CD),'') is null then 'N'
				when NULLIF(TRIM(A.BASIC_STATUS),'') is null then 'N'
				when NULLIF(TRIM(A.BASIC_INFORCE_FLAG),'') is null then 'N'
				when A.BEN_EXP_DATE is null then 'N'
				when A.CB_START_DT > A.BEN_EXP_DATE then 'N'
				ELSE 'Y'
			end) = 'N' then 'BASIC_INVALID' 
			else 
				(case when A.BENEFIT_CD is null or trim(A.BENEFIT_CD) = '' then 'BENEFIT_CD,' else '' end)+
				(case when A.INFORCE_FLAG is null or trim(A.INFORCE_FLAG) = '' then 'INFORCE_FLAG,' else '' end)+
				(case when A.STATUS_SOURCE is null or trim(A.STATUS_SOURCE) = '' then 'STATUS_SOURCE,' else '' end)
			end)
		) as invalid_desc 
		--- ABC Framework parameter
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		from STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS A
		LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_INVALID B
		ON A.POLICY_NO = B.POLICY_NO
		AND A.BENEFIT_CD = B.BENEFIT_CD
		where A.RIDERS_FLAG NOT IN ('EXCLUDE')
		AND  
		(case 	
			when NULLIF(TRIM(A.POLICY_NO),'') is null then 'N'
			when NULLIF(TRIM(A.PRODUCT_CD),'') is null then 'N'
			when NULLIF(TRIM(A.BENEFIT_CD),'') is null then 'N'
			when NULLIF(TRIM(A.CONTRACT_ID),'') is null then 'N'
			when NULLIF(TRIM(A.PORTFOLIO_GROUP),'') is null then 'N'
			when A.COHORT_YEAR is null then 'N'
			when NULLIF(TRIM(A.SET_OF_CONTRACT),'') is null then 'N'
			when NULLIF(TRIM(A.INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
			when A.ICG_ID_PROPHET is null then 'N'
			when A.ENTRY_MONTH is null then 'N'
			when A.CB_START_DT is null then 'N'
			when A.CB_END_DT is null then 'N'
			when NULLIF(TRIM(A.MEASUREMENT_MODEL),'') is null then 'N'
			when NULLIF(TRIM(A.INFORCE_FLAG),'') is null then 'N'
			when A.COVERAGE_LEVEL_END_DATE is null then 'N'
			when NULLIF(TRIM(A.CCY_CD),'') is null then 'N'
			when NULLIF(TRIM(A.STATUS_SOURCE),'') is null then 'N'
			when NULLIF(TRIM(A.BASIC_STATUS),'') is null then 'N'
			when NULLIF(TRIM(A.BASIC_INFORCE_FLAG),'') is null then 'N'
			when A.BEN_EXP_DATE is null then 'N'
			when (A.CB_START_DT > A.BEN_EXP_DATE AND A.STATUS_SOURCE = 'IF') then 'N'
			ELSE 'Y'
		end) = 'N'
		AND B.BENEFIT_CD IS NULL
		;

		

		--------------------------------------------------
		--- Create Table temp for outfource
		---------------------------------------------------
		-- insert valid records
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'create table TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE": ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
		--drop table if exists FOND_ID.FOND_IFRS17_MPFILES_PROPHETU;
		CREATE TABLE STAG_ID.TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE 
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED COLUMNSTORE INDEX
		)
		AS
		--INSERT INTO STAG_ID.TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE
		SELECT 
		ICGS.POLICY_NO
		,ICGS.PRODUCT_CD
		,ICGS.BENEFIT_CD
		,ICGS.CB_START_DT
		,ICGS.CB_END_DT
		,ICGS.INFORCE_FLAG
		,ICGS.STATUS_SOURCE
		,ICGS.SUBSYSTEM
		,ICGS.CREATED_DATE
		,ICGS.UPDATED_DATE
		,C.STATUS_SOURCE AS NEW_STATUS_SOURCE
		,C.INFORCE_FLAG AS NEW_INFORCE_FLAG
		--- ABC Framework parameter
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		FROM 
		(
			select A.*
			, row_number() over(partition by POLICY_NO, BENEFIT_CD 
			order by CB_START_DT desc, CB_END_DT desc, CREATED_DATE desc, UPDATED_DATE desc) as idx 
			FROM FOND_ID.FOND_IFRS17_ICG_STORES A
			where lower(trim(SUBSYSTEM)) = lower(trim('Prophetu'))
			AND PRODUCT_CD <> BENEFIT_CD
		) ICGS
		LEFT JOIN STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_RIDERS B 
		ON 
		ICGS.POLICY_NO = B.POLICY_NO
		AND ICGS.PRODUCT_CD = B.PRODUCT_CD
		AND ICGS.BENEFIT_CD = B.BENEFIT_CD 
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE C
		ON TRIM(UPPER('OUTFORCE')) = TRIM(UPPER(C.STATUS_SOURCE)) 
		AND UPPER(TRIM(C.SYSTEM)) = 'LIFE ASIA'
		WHERE ICGS.idx=1
		AND B.POLICY_NO IS NULL 
		AND ICGS.STATUS_SOURCE = 'IF'
		;

		-- update status ICG Stores Riders to outforce
		update FOND_ID.FOND_IFRS17_ICG_STORES 
		set STATUS_SOURCE = TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE.NEW_STATUS_SOURCE
		, INFORCE_FLAG = TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE.NEW_INFORCE_FLAG
		, UPDATED_DATE=CURRENT_TIMESTAMP
		from STAG_ID.TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE 
		where FOND_IFRS17_ICG_STORES.POLICY_NO = TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE.POLICY_NO
		AND FOND_IFRS17_ICG_STORES.BENEFIT_CD = TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE.BENEFIT_CD
		AND FOND_IFRS17_ICG_STORES.PRODUCT_CD = TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE.PRODUCT_CD
		AND FOND_IFRS17_ICG_STORES.CB_START_DT = TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE.CB_START_DT
		AND FOND_IFRS17_ICG_STORES.CB_END_DT = TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE.CB_END_DT
		AND FOND_IFRS17_ICG_STORES.CREATED_DATE = TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE.CREATED_DATE
		AND FOND_IFRS17_ICG_STORES.UPDATED_DATE = TMP_IFRS17_PROPHETU_RIDERS_OUTFORCE.UPDATED_DATE
		AND lower(trim(FOND_IFRS17_ICG_STORES.SUBSYSTEM)) = lower(trim('Prophetu'))
		;


		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Finish ' + @V_FUNCTION_NAME + ' : ' +  convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		--IF @@TRANCOUNT > 0  
		--	COMMIT TRAN;

	END TRY

	BEGIN CATCH
		--IF @@TRANCOUNT > 0  
		--	ROLLBACK TRAN;

	    DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
		DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
		DECLARE @ErrorState AS INT = ERROR_STATE()

 		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION

		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)
	
	END CATCH

END;



