CREATE PROC [FOND_ID].[USP_LOAD_ABSTR_IFRS17_BALANCING_SP] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@p_prd_id [integer] AS
BEGIN
	
	--DECLARE @BATCHDATESTR [NVARCHAR](10)='202404',@JOBNAMESTR [NVARCHAR](2000)='',@p_prd_id [integer]=20240401;
	DECLARE @V_START			datetime,
	@V_END				datetime,
	@V_DURATION			datetime,
	@V_FUNCTION_NAME	varchar(100),
	@V_DESCRIPTION		varchar(500),
	@V_CMD				nvarchar(max),
	@V_CMD_2			nvarchar(max),
	@V_CMD_3			nvarchar(max),
	@V_PARAM			nvarchar(4000),
	@V_SEQNO			integer,
	@V_PRD_ID			varchar(7),
	@V_CREATED_DATE		datetime,
	@V_START_DATE		date,
	@V_END_DATE			date,
	@V_FLAG				varchar(1),
	@YEAR1 				integer,
	@MONTH1 			integer,
	@V_TABLE_1			NVARCHAR(100),
	@V_TABLE_2			NVARCHAR(100),

	------ START ABC ------
    @BATCH_MASTER_ID    VARCHAR(20) = 0,
    @BATCH_RUN_ID       VARCHAR(20) = 0,
    @JOB_MASTER_ID      VARCHAR(20) = 0,
    @JOB_RUN_ID         VARCHAR(20) = 0,
    @GMT_START_DTTM     VARCHAR(20) = GETDATE();
	 
	EXEC STAG_ID.USP_GetRunIdReturn
      @JobName        = @JOBNAMESTR,
      @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
      @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
      @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
      @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
      @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
	-------- END ABC --------- 
	
	SET @V_FUNCTION_NAME	= 'FOND_ID.USP_LOAD_ABSTR_IFRS17_BALANCING_SP (GRGSGT)';
	SET @V_SEQNO			= 0;
	
	BEGIN TRY
	
	SET @V_START_DATE	= convert(date, convert(varchar(8), @p_prd_id), 112);
	SET @V_START 		= current_timestamp;

	-- Extracting Parameter Input Year
	SET @YEAR1           = YEAR(@V_START_DATE);
	-- Extracting Parameter Input Month
	SET @MONTH1          = MONTH(@V_START_DATE);
	-- Create YYYY0MM Period
	SET @V_PRD_ID		 = CONCAT(CONCAT(@YEAR1,'0'),STAG_ID.LPAD(@MONTH1,2,'0'));
	PRINT	'Param Year: '+ convert(varchar(4), @YEAR1) +' and Month: '+ convert(varchar(2), @MONTH1);


	----------------------------------------------------
	-- STEP 1: INITIALIZATION
	----------------------------------------------------
	SET @V_DESCRIPTION 	= 'Start '+ @V_FUNCTION_NAME +' PARAM YEAR='+ convert(varchar(4), @YEAR1) +' PARAM MONTH='+ convert(varchar(2), @MONTH1) +': '+ convert(varchar(20), @V_START);
	PRINT	'Start '+ @V_FUNCTION_NAME +': '+ convert(varchar(20), @V_START);

	INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	--- END OF STEP 1

	----------------------------------------------------
	-- STEP 3A: DROP TEMP TABLE IF EXISTS
	----------------------------------------------------
	SET @V_START 		= current_timestamp;
	SET @V_SEQNO		= @V_SEQNO + 1;
	SET @V_DESCRIPTION 	= 'DROP TEMP TABLE IF EXISTS abstr_ifrs17_balancing_temp, grgsgt_suspense_account_temp, abstr_ifrs17_coa_analysis_code_2: '+ convert(varchar(20),current_timestamp);
	PRINT	@V_DESCRIPTION;
	
	SET @V_CMD = 
	N'IF OBJECT_ID(''tempdb.dbo.#ABSTR_IFRS17_BALANCING_TEMP'', ''U'') IS NOT NULL
	DROP TABLE #ABSTR_IFRS17_BALANCING_TEMP';
	EXEC sp_executesql @V_CMD;

	SET @V_CMD = 
	N'IF OBJECT_ID(''tempdb.dbo.#ABSTR_IFRS17_BALANCING_TEMP_IAI'', ''U'') IS NOT NULL
	DROP TABLE #ABSTR_IFRS17_BALANCING_TEMP_IAI';
	EXEC sp_executesql @V_CMD;
	
	SET @V_CMD = 
	N'IF OBJECT_ID(''tempdb.dbo.#GRGSGT_SUSPENSE_ACCOUNT_TEMP'', ''U'') IS NOT NULL
	DROP TABLE #GRGSGT_SUSPENSE_ACCOUNT_TEMP';
	EXEC sp_executesql @V_CMD;

	SET @V_CMD = 
	N'IF OBJECT_ID(''tempdb.dbo.#ABSTR_IFRS17_COA_ANALYSIS_CODE_2'', ''U'') IS NOT NULL
	DROP TABLE #ABSTR_IFRS17_COA_ANALYSIS_CODE_2';
	EXEC sp_executesql @V_CMD;

	SET @V_CMD = 
	N'IF OBJECT_ID(''tempdb.dbo.#ABSTR_IFRS17_COA_ANALYSIS_CODE_IAI'', ''U'') IS NOT NULL
	DROP TABLE #ABSTR_IFRS17_COA_ANALYSIS_CODE_IAI';
	EXEC sp_executesql @V_CMD;

	IF OBJECT_ID('tempdb.dbo.#TMP_ENTITY_SPLIT', 'U') IS NOT NULL
	DROP TABLE #TMP_ENTITY_SPLIT;
	
	IF OBJECT_ID('tempdb.dbo.#TMP_COVR_COVT_1', 'U') IS NOT NULL
	DROP TABLE #TMP_COVR_COVT_1;
	

	--CREATE TABLE WOP_STEP_10B
	IF OBJECT_ID('STAG_ID.WOP_STEP_10B','U') IS NOT NULL DROP TABLE STAG_ID.WOP_STEP_10B;
	EXEC('SELECT * INTO STAG_ID.WOP_STEP_10B FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES_SPLITTING WHERE 1=0');

	--CREATE TABLE WOP_STEP_10B
	IF OBJECT_ID('STAG_ID.WOP_STEP_10B_IAI','U') IS NOT NULL DROP TABLE STAG_ID.WOP_STEP_10B_IAI;
	EXEC('SELECT * INTO STAG_ID.WOP_STEP_10B_IAI FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES WHERE 1=0');

	INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	--- END OF STEP 3A
	
	----------------------------------------------------
	-- STEP 3B: CREATE TEMP TABLES BEFORE INSERTED TO TARGET TABLE
	----------------------------------------------------
	SET @V_START 		= current_timestamp;
	SET @V_SEQNO		= @V_SEQNO + 1;
	SET @V_DESCRIPTION 	= 'DATA INTO TEMP TABLE: '+ convert(varchar(20),current_timestamp);
	PRINT	@V_DESCRIPTION;
	
	SET @V_CMD = 
	N'CREATE TABLE #ABSTR_IFRS17_BALANCING_TEMP
	(
	    ENTITY_ID VARCHAR(100),
	    ACCNT_CODE VARCHAR(100),
	    ACCNT_NAME VARCHAR(100),
	    PERIOD VARCHAR(100),
	    TRANS_DATE DATE,
	    AMT_RPT_CY NUMERIC(38,2),
	    SUNGL_AMOUNT NUMERIC(38,2)
	)';
	EXEC sp_executesql @V_CMD;
	
	SET @V_TABLE_1 = CONCAT('FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_',@BATCHDATESTR,'_HIS');
	SET @V_TABLE_2 = CONCAT('FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_NONRELATED_',@BATCHDATESTR,'_HIS');
	PRINT @V_TABLE_1;
	PRINT @V_TABLE_2;


	SET @V_CMD =
	N'WITH COA_TG005_PSY as(
	SELECT distinct SUBSTRING(ITEMITEM,1,5) as SUN_CD_5, ''IAS'' as RECLASS_ENTITY FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG005'' AND GENAREA = ''ANALYSYSCD08PSY'' AND SUBSTRING(ITEMITEM,5,1) NOT IN (''X'',''Y'')
	)
	,COA_TG005_P01 as(
	SELECT SUBSTRING(ITEMITEM,1,5) as SUN_CD_5, ''IAC'' as RECLASS_ENTITY FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG005'' AND GENAREA = ''ANALYSYSCD08P01''
	)
	,COA_TJ309 as(
	select distinct value as SUN_CD, ''IAS'' as RECLASS_ENTITY from(
			SELECT COA1, COA2, COA3 FROM (
					SELECT SUBSTRING(GENAREA,22,10) COA1, SUBSTRING(GENAREA,35,8) ITEM1, SUBSTRING(GENAREA,43,10) COA2, SUBSTRING(GENAREA,56,8) ITEM2,SUBSTRING(GENAREA,64,10) COA3, SUBSTRING(GENAREA,77,8) ITEM3
					FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TJ309'' AND ITEMITEM = ''B06B1'') Z
			)X
			unpivot( value for COA in(COA1, COA2, COA3)) up
	)
	,ETL2_IFIE_FUND_CD as(
	SELECT DISTINCT FUND_CD_LAS,''IAS'' as RECLASS_ENTITY FROM STAG_ID.STAG_CONFIG_ETL2_IFIE_FUND_CD_MAPPING WHERE SHA_FLG = ''IAS'' AND FUND_CD_LAS IS NOT NULL
	)
	,T_TABLE AS (
	SELECT CASE WHEN L.USER_APPROVAL=''Y'' THEN L.SUGGESTED_ENTITY 
			ELSE NULL END AS NEW_ENTITY_ID,
		CASE WHEN C.POLICY_NO IS NOT NULL THEN 
				CASE 
					WHEN C.INSURANCE_CONTRACT_GROUP_ID LIKE ''%CON%'' THEN ''IAC'' 
					WHEN C.INSURANCE_CONTRACT_GROUP_ID LIKE ''%SHA%'' THEN ''IAS''
					WHEN C.INSURANCE_CONTRACT_GROUP_ID LIKE ''%B71%'' THEN ''IAS''
				END
			WHEN A.POLICY_NO IS NOT NULL AND C.POLICY_NO IS NULL THEN D.SY_FLG -- cater O with policy_no
			WHEN A.POLICY_NO IS NULL THEN -- when null go back to RTRN & ACMVPF -- but this should be fix T6
					CASE
						WHEN E.RRN IS NOT NULL
							THEN
								CASE 
									WHEN SUBSTRING(F.SHORTDESC,1,3) = ''PLA'' THEN ''IAC''
									WHEN SUBSTRING(F.SHORTDESC,1,4) = ''PSLA'' THEN ''IAS''
									ELSE ''IAC'' -- RRN exists in rtrn but null bankcode set IAC
								END
						WHEN G.RRN IS NOT NULL
							THEN
								CASE 
									WHEN G.TAXCODE IS NULL THEN ''IAC''
									WHEN G.TAXCODE IS NOT NULL THEN ''IAS''
								END	
					END
			END ENTITY_FLAG,
				';

	SET @V_CMD_2='
	CASE WHEN SUBSTRING(A.SUN_CD,1,5)=H.SUN_CD_5 THEN H.RECLASS_ENTITY
		WHEN SUBSTRING(A.SUN_CD,1,5)=I.SUN_CD_5 THEN I.RECLASS_ENTITY
		WHEN A.SUN_CD=J.SUN_CD THEN J.RECLASS_ENTITY
		WHEN G.TAXCODE=K.FUND_CD_LAS THEN I.RECLASS_ENTITY
	ELSE NULL END AS RECLASS_ENTITY_ID,
	A.*
	FROM (SELECT * FROM '+@V_TABLE_1+' UNION ALL
		SELECT * FROM '+@V_TABLE_2+'
		) A
	LEFT JOIN (SELECT *, ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY INFORCE_FLAG DESC) RN FROM FOND_ID.FOND_IFRS17_ICG_STORES
			WHERE PRODUCT_CD = BENEFIT_CD) C ON A.POLICY_NO = C.POLICY_NO AND C.RN = 1
	LEFT JOIN STAG_ID.TMP_COVR_COVT_1 B ON B.LIFE+COVERAGE+RIDER = ''010100'' AND B.CHDRNUM = A.POLICY_NO -- basic rider
	LEFT JOIN STAG_ID.TMP_ENTITY_SPLIT D ON B.CRTABLE = D.ITEMITEM AND D.RN = 1 -- sharia conv
	LEFT JOIN STAG_ID.STAG_LIFEASIA_RTRNPF_ETL4 E ON A.RRN = E.NEW_RRN AND E.BATCHDATE = '+@BATCHDATESTR+'-- RTRN rrn to get bankcode
	LEFT JOIN STAG_ID.STAG_LIFEASIA_DESCPF F ON E.BANKCODE = F.DESCITEM AND F.DESCTABL = ''T3688'' AND F.DESCCOY = ''2'' -- mapping rrn bank code
	LEFT JOIN STAG_ID.STAG_LIFEASIA_ACMVPF G ON G.BATCACTYR= @YEAR1 AND G.BATCACTMN=@MONTH1 AND A.RRN = G.RRN -- missmatch T6 connect again to acmvpf
	LEFT JOIN COA_TG005_PSY H ON H.SUN_CD_5=SUBSTRING(A.SUN_CD,1,5)
	LEFT JOIN COA_TG005_P01 I ON I.SUN_CD_5=SUBSTRING(A.SUN_CD,1,5)
	LEFT JOIN COA_TJ309 J ON J.SUN_CD=A.SUN_CD
	LEFT JOIN ETL2_IFIE_FUND_CD K ON K.FUND_CD_LAS=G.TAXCODE AND G.BATCHDATE = '+@BATCHDATESTR+'
	LEFT JOIN(SELECT * FROM [FOND_ID].[FOND_ETL4_VS_SUNGL_COMPARATION_ENTITY] WHERE BATCHDATE='+@BATCHDATESTR+' ) L ON L.BATCHDATE='+@BATCHDATESTR+' AND A.SUN_CD=L.SUN_CD
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_HARDCODE_ENTITY WHERE FLAG=''INTERCO'') M ON M.SUN_CD=A.SUN_CD
	)

	INSERT INTO #ABSTR_IFRS17_BALANCING_TEMP
	SELECT COALESCE(NEW_ENTITY_ID,ENTITY_FLAG,RECLASS_ENTITY_ID) AS ENTITY_FLAG, SUN_CD AS ACCNT_CODE, NULL AS ACCNT_NAME, ACCT_PERIOD, TXN_DT AS TRANS_DATE,
	SUM(AMT_RPT_CCY) AMT_RPT_CCY, 0 AS SUNGL_AMOUNT
	FROM T_TABLE A 
	GROUP BY COALESCE(NEW_ENTITY_ID,ENTITY_FLAG,RECLASS_ENTITY_ID), SUN_CD, ACCT_PERIOD, TXN_DT';
	SET @V_CMD_3 = @V_CMD+@V_CMD_2;
	SET @V_PARAM = 	N'@YEAR1 int, @MONTH1 int,@V_TABLE_1 NVARCHAR, @V_TABLE_2 NVARCHAR';
	EXEC sp_executesql @V_CMD_3, @V_PARAM, @MONTH1=@MONTH1, @YEAR1=@YEAR1,@V_TABLE_1=@V_TABLE_1, @V_TABLE_2=@V_TABLE_2;
	
	SET @V_CMD =
	N'INSERT INTO #ABSTR_IFRS17_BALANCING_TEMP
	SELECT ENTITY_ID, ACCNT_CODE, NULL AS ACCNT_NAME, @V_PRD_ID AS PERIOD, 
	EOMONTH(@V_START_DATE) TRANS_DATE, 0 AS AMT_RPT_CY, SUM(CAST(AMOUNT AS NUMERIC(28,6))) AS SUNGL_AMOUNT 
	FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL
	WHERE PERIOD = CONCAT(CONCAT(@YEAR1,''/0''),STAG_ID.LPAD(@MONTH1,2,''0'')) AND JRNAL_TYPE = ''LAS'' AND LEDGER = ''A''
	GROUP BY ENTITY_ID, ACCNT_CODE, PERIOD';
	SET @V_PARAM = 	N'@V_PRD_ID VARCHAR(7), @V_START_DATE DATE, @YEAR1 int, @MONTH1 int';
	EXEC sp_executesql @V_CMD, @V_PARAM, @V_PRD_ID=@V_PRD_ID, @V_START_DATE=@V_START_DATE, @MONTH1=@MONTH1, @YEAR1=@YEAR1;

	SET @V_CMD =
	N'SELECT ENTITY_ID,ACCNT_CODE COA, T0, T1, T2, T3, T4, T5, T6, T7, T8, '''' AS T9
	INTO #ABSTR_IFRS17_COA_ANALYSIS_CODE_2
	FROM
	(
	SELECT *,
	ROW_NUMBER() OVER(PARTITION BY ACCNT_CODE ORDER BY PERIOD DESC, AMOUNT DESC) AS RNK FROM 
	(
	SELECT ENTITY_ID,PERIOD, SUM(CAST(AMOUNT AS NUMERIC(28,6))) AMOUNT, ACCNT_CODE, ANAL_T0 T0, ANAL_T1 T1, ANAL_T2 T2, ANAL_T3 T3, ANAL_T4 T4, ANAL_T5 T5, 
	ANAL_T6 T6, ANAL_T7 T7,	ANAL_T8 T8
	FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL WHERE JRNAL_TYPE = ''LAS'' AND LEDGER = ''A''
	GROUP BY ENTITY_ID,PERIOD, ACCNT_CODE, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9
	) T) T
	WHERE RNK = 1';
	EXEC sp_executesql @V_CMD;


	---COMBINE---
		SET @V_CMD = 
	N'CREATE TABLE #ABSTR_IFRS17_BALANCING_TEMP_IAI
	(
	    ENTITY_ID VARCHAR(100),
	    ACCNT_CODE VARCHAR(100),
	    ACCNT_NAME VARCHAR(100),
	    PERIOD VARCHAR(100),
	    TRANS_DATE DATE,
	    AMT_RPT_CY NUMERIC(38,2),
	    SUNGL_AMOUNT NUMERIC(38,2)
	)';
	EXEC sp_executesql @V_CMD;
	
	SET @V_CMD =
	N'WITH T_TABLE AS (
	SELECT 
		CAST(''ACMV'' AS VARCHAR(4)) MOVEMENT, RDOCNUM, RLDGACCT, SACSCODE, SACSTYP, BATCTRCDE, TRANDESC, ORIGCURR, 
		CASE WHEN GLSIGN = ''-'' THEN -1 * ORIGAMT ELSE ORIGAMT END ORIGAMT, CASE WHEN GLSIGN = ''-'' THEN -1 * ACCTAMT ELSE ACCTAMT END ACCTAMT, 
		BATCCOY, BATCBRN, BATCACTYR, BATCACTMN, BATCBATCH, TRANNO, GENLCOY, POSTMONTH, POSTYEAR, GLCODE, GLSIGN, GENLCUR, 
		EFFDATE, CAST(CONCAT(SUBSTRING(CAST(BATCACTYR AS VARCHAR),1,2),TRANSACTION_DATE) AS NUMERIC) TRANSACTION_DATE, RDOCPFX, RLDGPFX, TRANREF, RDOCCOY, 
		TAXCODE, CAST(CASE WHEN TAXCODE = ''SY'' THEN ''PSY'' ELSE ''P01'' END AS VARCHAR) T7_CHECK, JRNSEQ, RLDGCOY
	FROM STAG_ID.STAG_LIFEASIA_ACMVPF
	WHERE BATCACTYR = @YEAR1 AND BATCACTMN = @MONTH1
	UNION ALL
	SELECT 
		CAST(''RTRN'' AS VARCHAR(4)) MOVEMENT, RDOCNUM, RLDGACCT, SACSCODE, SACSTYP, BATCTRCDE, TRANDESC, ORIGCCY ORIGCURR, 
		CASE WHEN GLSIGN = ''-'' THEN -1 * ORIGAMT ELSE ORIGAMT END ORIGAMT, CASE WHEN GLSIGN = ''-'' THEN -1 * ACCTAMT ELSE ACCTAMT END ACCTAMT,
		BATCCOY, BATCBRN, BATCACTYR, BATCACTMN, BATCBATCH, TRANNO, GENLCOY, POSTMONTH, POSTYEAR, GLCODE, GLSIGN, GENLCUR, 
		EFFDATE, TRANDATE AS TRANSACTION_DATE, RDOCPFX, RLDGPFX, '''' AS TRANREF, RDOCCOY, '''' AS TAXCODE, 
		CASE WHEN RDOCPFX <> ''CH'' THEN ''P01'' ELSE '''' END AS T7_CHECK, JRNSEQ, RLDGCOY
	FROM STAG_ID.STAG_LIFEASIA_RTRNPF
	WHERE BATCACTYR = @YEAR1 AND BATCACTMN = @MONTH1
	),

	G_TABLE AS (
	SELECT 
		A.BATCCOY, A.BATCBRN, A.BATCACTYR, A.BATCACTMN, A.BATCTRCDE, A.BATCBATCH, A.GENLCOY, A.GENLCUR, A.GENLCDE, A.POSTMONTH, 
		A.POSTYEAR, SUM(A.POSTAMT01) POSTAMT01A, SUM(A.POSTAMT02) POSTAMT02A, A.ORIGCURR, A.APRVDATE,
		B.SHTDESC, B.ALTREF, B.GENLPFX
	FROM STAG_ID.STAG_LIFEASIA_GTRNPF A
	LEFT JOIN 
	(SELECT 
		GENLPFX, GENLCOY, GENLCUR, GENLCDE, SHTDESC, ALTREF, VALIDFLAG 
	FROM STAG_ID.STAG_LIFEASIA_GENLPF WHERE VALIDFLAG <>''2'' AND TRIM(ISNULL(ALTREF,'''')) <> ''''
			AND POSTFLAG = ''P'' AND ALTREF LIKE ''%/%'') B 
	ON A.GENLCOY = B.GENLCOY AND A.GENLCUR = B.GENLCUR AND A.GENLCDE = B.GENLCDE
	WHERE BATCACTYR = @YEAR1 AND BATCACTMN = @MONTH1
	AND A.APRVDATE IS NOT NULL AND B.ALTREF IS NOT NULL
		GROUP BY A.BATCCOY, A.BATCBRN, A.BATCACTYR, A.BATCACTMN, A.BATCTRCDE, A.BATCBATCH, A.GENLCOY, A.GENLCUR, A.GENLCDE, 
		A.POSTMONTH, A.POSTYEAR, A.ORIGCURR, A.APRVDATE, 
		B.SHTDESC, B.ALTREF, B.GENLPFX
	)
	INSERT INTO #ABSTR_IFRS17_BALANCING_TEMP_IAI
	SELECT ''IAI'' AS ENTITY_ID, SUN_CD AS ACCNT_CODE, NULL AS ACCNT_NAME, [PERIOD], EOMONTH(PERIOD_DATE) AS TRANS_DATE,
	SUM(ACCTAMT) AMT_RPT_CY, 0 AS SUNGL_AMOUNT
	FROM
	(
	SELECT 
		SUBSTRING(B.ALTREF,1,10) SUN_CD, CONCAT(CONCAT(A.BATCACTYR,''0''),STAG_ID.LPAD(A.BATCACTMN,2,''0'')) [PERIOD], 
		CAST(CONCAT(CONCAT(A.BATCACTYR,STAG_ID.LPAD(A.BATCACTMN,2,''0'')),''01'') AS DATE) PERIOD_DATE, ACCTAMT	
	FROM T_TABLE A 
	INNER JOIN G_TABLE B 
	ON A.BATCCOY = B.BATCCOY AND A.BATCBRN = B.BATCBRN AND A.BATCACTYR = B.BATCACTYR AND A.BATCACTMN = B.BATCACTMN 
	AND A.BATCTRCDE = B.BATCTRCDE AND A.BATCBATCH = B.BATCBATCH AND A.GENLCOY = B.GENLCOY AND A.GENLCUR = B.GENLCUR 
	AND TRIM(A.GLCODE) = TRIM(B.GENLCDE) AND A.ORIGCURR = B.ORIGCURR AND A.POSTMONTH = B.POSTMONTH AND A.POSTYEAR = B.POSTYEAR
	) LAS
	GROUP BY SUN_CD, [PERIOD], PERIOD_DATE';
	SET @V_PARAM = 	N'@YEAR1 int, @MONTH1 int';
	EXEC sp_executesql @V_CMD, @V_PARAM, @MONTH1=@MONTH1, @YEAR1=@YEAR1;
	
	SET @V_CMD =
	N'INSERT INTO #ABSTR_IFRS17_BALANCING_TEMP_IAI
	SELECT ''IAI'' ENTITY_ID, ACCNT_CODE, NULL AS ACCNT_NAME, @V_PRD_ID AS PERIOD, 
	EOMONTH(@V_START_DATE) TRANS_DATE, 0 AS AMT_RPT_CY, SUM(CAST(AMOUNT AS NUMERIC(28,6))) AS SUNGL_AMOUNT 
	FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL
	WHERE PERIOD = CONCAT(CONCAT(@YEAR1,''/0''),STAG_ID.LPAD(@MONTH1,2,''0'')) AND JRNAL_TYPE = ''LAS'' AND LEDGER = ''A''
	GROUP BY ACCNT_CODE, PERIOD';
	SET @V_PARAM = 	N'@V_PRD_ID VARCHAR(7), @V_START_DATE DATE, @YEAR1 int, @MONTH1 int';
	EXEC sp_executesql @V_CMD, @V_PARAM, @V_PRD_ID=@V_PRD_ID, @V_START_DATE=@V_START_DATE, @MONTH1=@MONTH1, @YEAR1=@YEAR1;

	SET @V_CMD =
	N'SELECT ACCNT_CODE COA, T0, T1, T2, T3, T4, T5, T6, T7, T8, '''' AS T9
	INTO #ABSTR_IFRS17_COA_ANALYSIS_CODE_IAI
	FROM
	(
	SELECT *,
	ROW_NUMBER() OVER(PARTITION BY ACCNT_CODE ORDER BY PERIOD DESC, AMOUNT DESC) AS RNK FROM 
	(
	SELECT PERIOD, SUM(CAST(AMOUNT AS NUMERIC(28,6))) AMOUNT, ACCNT_CODE, ANAL_T0 T0, ANAL_T1 T1, ANAL_T2 T2, ANAL_T3 T3, ANAL_T4 T4, ANAL_T5 T5, 
	ANAL_T6 T6, ANAL_T7 T7,	ANAL_T8 T8
	FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL WHERE JRNAL_TYPE = ''LAS'' AND LEDGER = ''A''
	GROUP BY PERIOD, ACCNT_CODE, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9
	) T) T
	WHERE RNK = 1';
	EXEC sp_executesql @V_CMD;
	
	INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	--- END OF STEP 3B
	
	-- FROM HERE WE SET THE ROLLBACK ON ALL TRANSACTION IF ONE PROCESS FAILED --
	BEGIN TRANSACTION;
	----------------------------------------------------
	-- STEP 4A: DELETE DATA BASED ON PERIOD PARAMETER IN TARGET TABLE
	----------------------------------------------------
	SET @V_START 		= current_timestamp;
	SET @V_SEQNO		= @V_SEQNO + 1;
	SET @V_DESCRIPTION 	= 'DELETE FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL & FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING: '+ CONVERT(VARCHAR(20),CURRENT_TIMESTAMP);
	PRINT	@V_DESCRIPTION;
	
	DELETE FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL_SPLITTING ;
	
	DELETE FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_SPLITTING ;
	
	DELETE FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL;
	
	DELETE FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING;

	INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		
	--- END OF STEP 4A
	
	----------------------------------------------------
	-- STEP 4B: INSERTING DATA TO FINAL TABLE
	-- THEN CHECK WHETHER WE NEED TO INSERT SUSPENSE ACCOUNT ENTRY
	----------------------------------------------------
	SET @V_START 		= current_timestamp;
	SET @V_SEQNO		= @V_SEQNO + 1;
	SET @V_DESCRIPTION  = 'INSERTING DATA TO STAG_ID.STAG_ETL4_ABSTR_IFRS17_BALANCING_ORIGINAL:'+ convert(varchar(20),current_timestamp);
	PRINT	@V_DESCRIPTION;
	
	INSERT INTO FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL_SPLITTING 
	SELECT	DIFF.ENTITY_ID,
		DIFF.ACCOUNT_CODE, 
		DIFF.ACCT_PERIOD, 
		DIFF.TRANS_DATE, 
		DIFF.BASE_AMOUNT, 
		DIFF.DC, 
		DIFF.JOURNAL_TYPE, 
		DIFF.TRANS_REFERENCE, 
		DIFF.DESCRIPTION, 
		DIFF.DUE_DATE, 
		DIFF.CURR_CODE, 
		DIFF.TRANS_AMOUNT, 
		COALESCE(CODE.T0,DIFF.T0) T0, 
		CODE.T1, 
		CODE.T2,
		CODE.T3, 
		CODE.T4,
		CODE.T5,
		CODE.T6,
		DIFF.T7,
		@BATCH_MASTER_ID AS BATCH_MASTER_ID, 
		@BATCH_RUN_ID AS BATCH_RUN_ID,
		@JOB_MASTER_ID AS JOB_MASTER_ID,
		@JOB_RUN_ID  AS JOB_RUN_ID,
		@BATCHDATESTR AS BATCHDATE,
		@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
	FROM
	(SELECT ENTITY_ID,T.ACCNT_CODE ACCOUNT_CODE,[PERIOD] AS ACCT_PERIOD, T.TRANS_DATE, (AMT_RPT_CY - SUNGL_AMOUNT) as BASE_AMOUNT, CASE WHEN (AMT_RPT_CY - SUNGL_AMOUNT) > 0 THEN 'D' ELSE 'C' END AS DC, 'LAS17' AS JOURNAL_TYPE, 
	'IFRS GRGSGT BAL' AS TRANS_REFERENCE, 'IFRS17 GRGSGT BAL ON COA LEVEL' AS DESCRIPTION, NULL AS DUE_DATE, '' AS CURR_CODE, NULL AS TRANS_AMOUNT,'0000LAS' AS T0,  '' AS T1, '' AS T2, '' AS T3, '' AS T4, '' AS T5, 
		'' AS T6,  'PSY' AS T7 FROM  #ABSTR_IFRS17_BALANCING_TEMP T
		WHERE ACCNT_CODE in(SELECT distinct ACCNT_CODE FROM(
	SELECT ACCNT_CODE ,  SUM(AMT_RPT_CY) - SUM(SUNGL_AMOUNT) AS BASE_AMOUNT
	FROM #ABSTR_IFRS17_BALANCING_TEMP
	WHERE ACCNT_CODE IS NOT NULL
	GROUP BY  ACCNT_CODE) A WHERE BASE_AMOUNT <>0)) DIFF
	LEFT JOIN 
	(SELECT * FROM #ABSTR_IFRS17_COA_ANALYSIS_CODE_2) CODE
	ON DIFF.ACCOUNT_CODE = CODE.COA AND DIFF.ENTITY_ID=CODE.ENTITY_ID;
	
	-- DO WE NEED SUSPENSE ENTRY? IF 1 YES.
	SET @V_FLAG =
	(SELECT CASE WHEN SUM_OTHER_ENTRIES <> 0 THEN 1 ELSE 0 END FLAG 
	FROM 
	(SELECT SUM(BASE_AMOUNT) AS SUM_OTHER_ENTRIES FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL_SPLITTING  WHERE ACC_PERIOD = @V_PRD_ID) T);
	PRINT @V_FLAG;
	
	-- IF WE NEED SUSPENSE ENTRY THEN CREATE A RECORD FOR IT.
	IF @V_FLAG = 1
	BEGIN
		INSERT INTO FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL_SPLITTING 
		SELECT DIFF.ENTITY_ID,
			DIFF.ACCOUNT_CODE, 
			DIFF.ACC_PERIOD, 
			DIFF.TRANS_DATE, 
			DIFF.BASE_AMOUNT, 
			DIFF.DC, 
			DIFF.JOURNAL_TYPE, 
			DIFF.TRANS_REFERENCE, 
			DIFF.DESCRIPTION, 
			DIFF.DUE_DATE, 
			DIFF.CURR_CODE, 
			DIFF.TRANS_AMOUNT,
			COALESCE(CODE.T0,DIFF.T0) T0, 
			CODE.T1, 
			CODE.T2, 
			CODE.T3, 
			CODE.T4, 
			CODE.T5, 
			CODE.T6, 
			DIFF.T7,
			@BATCH_MASTER_ID AS BATCH_MASTER_ID, 
			@BATCH_RUN_ID AS BATCH_RUN_ID,
			@JOB_MASTER_ID AS JOB_MASTER_ID,
			@JOB_RUN_ID  AS JOB_RUN_ID,
			@BATCHDATESTR AS BATCHDATE,
			@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		FROM
		(SELECT T.ENTITY_ID,T.ACCOUNT_CODE, T.ACC_PERIOD, T.TRANS_DATE, T.BASE_AMOUNT, CASE WHEN T.BASE_AMOUNT > 0 THEN 'D' ELSE 'C' END AS DC,
		T.JOURNAL_TYPE, T.TRANS_REFERENCE, T.DESCRIPTION, CAST(NULL AS DATE) AS DUE_DATE, '' AS CURR_CODE, CAST(NULL AS NUMERIC) AS TRANS_AMOUNT, T.T0, '' AS T1, '' AS T2, '' AS T3, '' AS T4, '' AS T5, '' AS T6, T.T7
		FROM
		(SELECT '9020000000' AS ACCOUNT_CODE, @V_PRD_ID AS ACC_PERIOD, MAX(TRANS_DATE) AS TRANS_DATE, -1 * SUM(BASE_AMOUNT) AS BASE_AMOUNT, 'LAS17' AS JOURNAL_TYPE, 'IFRS GRGSGT BAL' AS TRANS_REFERENCE, 'IFRS17 GRGSGT BAL ON COA LEVEL' AS DESCRIPTION, '0000LAS' AS T0, 'PSY' AS T7 
		FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL_SPLITTING 
		WHERE ACC_PERIOD = @V_PRD_ID) T) DIFF
		LEFT JOIN 
		(SELECT * FROM #ABSTR_IFRS17_COA_ANALYSIS_CODE_2) CODE
		ON DIFF.ACCOUNT_CODE = CODE.COA;

	END


	----COMBINE---
	INSERT INTO FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL
	SELECT	
		DIFF.ACCOUNT_CODE, 
		DIFF.ACCT_PERIOD, 
		DIFF.TRANS_DATE, 
		DIFF.BASE_AMOUNT, 
		DIFF.DC, 
		DIFF.JOURNAL_TYPE, 
		DIFF.TRANS_REFERENCE, 
		DIFF.DESCRIPTION, 
		DIFF.DUE_DATE, 
		DIFF.CURR_CODE, 
		DIFF.TRANS_AMOUNT, 
		COALESCE(CODE.T0,DIFF.T0) T0, 
		CODE.T1, 
		CODE.T2,
		CODE.T3, 
		CODE.T4,
		CODE.T5,
		CODE.T6,
		DIFF.T7,
		@BATCH_MASTER_ID AS BATCH_MASTER_ID, 
		@BATCH_RUN_ID AS BATCH_RUN_ID,
		@JOB_MASTER_ID AS JOB_MASTER_ID,
		@JOB_RUN_ID  AS JOB_RUN_ID,
		@BATCHDATESTR AS BATCHDATE,
		@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
	FROM
	(SELECT T.ACCOUNT_CODE, T.ACCT_PERIOD, T.TRANS_DATE, T.BASE_AMOUNT, CASE WHEN T.BASE_AMOUNT > 0 THEN 'D' ELSE 'C' END AS DC, T.JOURNAL_TYPE, 
	T.TRANS_REFERENCE, T.DESCRIPTION, NULL AS DUE_DATE, '' AS CURR_CODE, NULL AS TRANS_AMOUNT, T.T0, '' AS T1, '' AS T2, '' AS T3, '' AS T4, '' AS T5, 
	'' AS T6, T.T7
	FROM
	(SELECT ACCNT_CODE AS ACCOUNT_CODE, [PERIOD] AS ACCT_PERIOD, TRANS_DATE, SUM(AMT_RPT_CY) - SUM(SUNGL_AMOUNT) AS BASE_AMOUNT, 'LAS17' AS JOURNAL_TYPE, 
	'IFRS GRGSGT BAL' AS TRANS_REFERENCE, 'IFRS17 GRGSGT BAL ON COA LEVEL' AS DESCRIPTION, '0000LAS' AS T0, 'PSY' AS T7 
	FROM #ABSTR_IFRS17_BALANCING_TEMP_IAI
	WHERE ACCNT_CODE IS NOT NULL
	GROUP BY ENTITY_ID, ACCNT_CODE, ACCNT_NAME, [PERIOD], TRANS_DATE) T
	WHERE BASE_AMOUNT <> 0) DIFF
	LEFT JOIN 
	(SELECT * FROM #ABSTR_IFRS17_COA_ANALYSIS_CODE_IAI) CODE
	ON DIFF.ACCOUNT_CODE = CODE.COA;
	
	-- DO WE NEED SUSPENSE ENTRY? IF 1 YES.
	SET @V_FLAG =
	(SELECT CASE WHEN SUM_OTHER_ENTRIES <> 0 THEN 1 ELSE 0 END FLAG 
	FROM 
	(SELECT SUM(BASE_AMOUNT) AS SUM_OTHER_ENTRIES FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL WHERE ACC_PERIOD = @V_PRD_ID) T);
	PRINT @V_FLAG;
	
	-- IF WE NEED SUSPENSE ENTRY THEN CREATE A RECORD FOR IT.
	IF @V_FLAG = 1
	BEGIN
		INSERT INTO FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL
		SELECT 
			DIFF.ACCOUNT_CODE, 
			DIFF.ACC_PERIOD, 
			DIFF.TRANS_DATE, 
			DIFF.BASE_AMOUNT, 
			DIFF.DC, 
			DIFF.JOURNAL_TYPE, 
			DIFF.TRANS_REFERENCE, 
			DIFF.DESCRIPTION, 
			DIFF.DUE_DATE, 
			DIFF.CURR_CODE, 
			DIFF.TRANS_AMOUNT,
			COALESCE(CODE.T0,DIFF.T0) T0, 
			CODE.T1, 
			CODE.T2, 
			CODE.T3, 
			CODE.T4, 
			CODE.T5, 
			CODE.T6, 
			DIFF.T7,
			@BATCH_MASTER_ID AS BATCH_MASTER_ID, 
			@BATCH_RUN_ID AS BATCH_RUN_ID,
			@JOB_MASTER_ID AS JOB_MASTER_ID,
			@JOB_RUN_ID  AS JOB_RUN_ID,
			@BATCHDATESTR AS BATCHDATE,
			@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		FROM
		(SELECT T.ACCOUNT_CODE, T.ACC_PERIOD, T.TRANS_DATE, T.BASE_AMOUNT, CASE WHEN T.BASE_AMOUNT > 0 THEN 'D' ELSE 'C' END AS DC,
		T.JOURNAL_TYPE, T.TRANS_REFERENCE, T.DESCRIPTION, CAST(NULL AS DATE) AS DUE_DATE, '' AS CURR_CODE, CAST(NULL AS NUMERIC) AS TRANS_AMOUNT, T.T0, '' AS T1, '' AS T2, '' AS T3, '' AS T4, '' AS T5, '' AS T6, T.T7
		FROM
		(SELECT '9020000000' AS ACCOUNT_CODE, @V_PRD_ID AS ACC_PERIOD, MAX(TRANS_DATE) AS TRANS_DATE, -1 * SUM(BASE_AMOUNT) AS BASE_AMOUNT, 'LAS17' AS JOURNAL_TYPE, 'IFRS GRGSGT BAL' AS TRANS_REFERENCE, 'IFRS17 GRGSGT BAL ON COA LEVEL' AS DESCRIPTION, '0000LAS' AS T0, 'PSY' AS T7 
		FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL
		WHERE ACC_PERIOD = @V_PRD_ID) T) DIFF
		LEFT JOIN 
		(SELECT * FROM #ABSTR_IFRS17_COA_ANALYSIS_CODE_IAI) CODE
		ON DIFF.ACCOUNT_CODE = CODE.COA;

	END
	
	INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		
	--- END OF STEP 4B
	
	----------------------------------------------------
	-- STEP 5: INSERT INTO TEMPLATE TABLE
	-- TRANSFORM THE ORIGINAL DATA INTO STRING WITH CORRECT LENGTH.
	----------------------------------------------------
	SET @V_START 		= current_timestamp;
	SET @V_SEQNO		= @V_SEQNO + 1;
	SET @V_DESCRIPTION  = 'INSERTING DATA IN ACCORDANCE WITH THE TEMPLATE TO FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING:'+ convert(varchar(20),current_timestamp);
	PRINT	@V_DESCRIPTION;
	
	INSERT INTO FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_SPLITTING 
	SELECT 	ENTITY_ID,
		CASE WHEN ACCOUNT_CODE IS NULL THEN STAG_ID.LPAD(' ',10,' ') ELSE STAG_ID.RPAD(ACCOUNT_CODE,10,' ') END AS ACCOUNT_CODE,
		STAG_ID.LPAD(' ',5,' ') AS FIELD2,
		CASE WHEN ACC_PERIOD IS NULL THEN STAG_ID.LPAD(' ',7,' ') ELSE STAG_ID.RPAD(ACC_PERIOD,7,' ') END AS ACC_PERIOD,
		CASE WHEN TRANS_DATE IS NULL THEN STAG_ID.LPAD(' ',8,' ') ELSE CONVERT(VARCHAR(8),TRANS_DATE,112) END AS TRANS_DATE,
		STAG_ID.LPAD(' ',2,' ') AS FIELD5,
		' ' AS FIELD6,
		STAG_ID.LPAD(' ',14,' ') AS FIELD7,
		CASE WHEN BASE_AMOUNT IS NULL THEN STAG_ID.LPAD(' ',18,' ') ELSE STAG_ID.LPAD(REPLACE(CAST(ABS(BASE_AMOUNT) AS NUMERIC(18,3)),'.',''),18,'0') END AS BASE_AMOUNT,
		CASE WHEN DC IS NULL THEN ' ' ELSE CAST(DC AS VARCHAR(1)) END AS DC,
		' ' AS FIELD10,
		CASE WHEN JOURNAL_TYPE IS NULL THEN STAG_ID.LPAD(' ',5,' ') ELSE STAG_ID.RPAD(JOURNAL_TYPE,5,' ') END AS JOURNAL_TYPE,
		STAG_ID.LPAD(' ',5,' ') AS FIELD12,
		CASE WHEN TRANS_REFERENCE IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(TRANS_REFERENCE,15,' ') END AS TRANS_REFERENCE,
		CASE WHEN [DESCRIPTION] IS NULL THEN STAG_ID.LPAD(' ',25,' ') ELSE STAG_ID.RPAD(REPLACE([DESCRIPTION],' ',''),25,' ') END AS [DESCRIPTION],
		STAG_ID.LPAD(' ',8,' ') AS FIELD15,
		STAG_ID.LPAD(' ',7,' ') AS FIELD16,
		CASE WHEN DUE_DATE IS NULL THEN STAG_ID.LPAD(' ',8,' ') ELSE CONVERT(VARCHAR(8),DUE_DATE,112) END AS DUE_DATE,
		STAG_ID.LPAD(' ',46,' ') AS FIELD18,
		CASE WHEN CURR_CODE IS NULL THEN STAG_ID.LPAD(' ',5,' ') ELSE STAG_ID.RPAD(CURR_CODE,5,' ') END AS CURR_CODE,
		STAG_ID.LPAD(' ',18,' ') AS FIELD20,
		CASE WHEN TRANS_AMOUNT IS NULL THEN STAG_ID.LPAD(' ',18,' ') ELSE STAG_ID.LPAD(REPLACE(CAST(ABS(TRANS_AMOUNT) AS NUMERIC(18,3)),'.',''),18,'0') END AS TRANS_AMOUNT,
		STAG_ID.LPAD(' ',14,' ') AS FIELD22,
		CASE WHEN T0 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T0,15,' ') END T0,
		CASE WHEN T1 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T1,15,' ') END T1,
		CASE WHEN T2 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T2,15,' ') END T2,
		CASE WHEN T3 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T3,15,' ') END T3,
		CASE WHEN T4 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T4,15,' ') END T4,
		CASE WHEN T5 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T5,15,' ') END T5,
		CASE WHEN T6 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T6,15,' ') END T6,
		CASE WHEN T7 IS NULL THEN STAG_ID.LPAD(' ',3,' ') ELSE STAG_ID.RPAD(T7,3,' ') END T7
	FROM
	(SELECT * FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL_SPLITTING 
	WHERE ACC_PERIOD = @V_PRD_ID) A;


	---COMBINE---
	INSERT INTO FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING
	SELECT 	
		CASE WHEN ACCOUNT_CODE IS NULL THEN STAG_ID.LPAD(' ',10,' ') ELSE STAG_ID.RPAD(ACCOUNT_CODE,10,' ') END AS ACCOUNT_CODE,
		STAG_ID.LPAD(' ',5,' ') AS FIELD2,
		CASE WHEN ACC_PERIOD IS NULL THEN STAG_ID.LPAD(' ',7,' ') ELSE STAG_ID.RPAD(ACC_PERIOD,7,' ') END AS ACC_PERIOD,
		CASE WHEN TRANS_DATE IS NULL THEN STAG_ID.LPAD(' ',8,' ') ELSE CONVERT(VARCHAR(8),TRANS_DATE,112) END AS TRANS_DATE,
		STAG_ID.LPAD(' ',2,' ') AS FIELD5,
		' ' AS FIELD6,
		STAG_ID.LPAD(' ',14,' ') AS FIELD7,
		CASE WHEN BASE_AMOUNT IS NULL THEN STAG_ID.LPAD(' ',18,' ') ELSE STAG_ID.LPAD(REPLACE(CAST(ABS(BASE_AMOUNT) AS NUMERIC(18,3)),'.',''),18,'0') END AS BASE_AMOUNT,
		CASE WHEN DC IS NULL THEN ' ' ELSE CAST(DC AS VARCHAR(1)) END AS DC,
		' ' AS FIELD10,
		CASE WHEN JOURNAL_TYPE IS NULL THEN STAG_ID.LPAD(' ',5,' ') ELSE STAG_ID.RPAD(JOURNAL_TYPE,5,' ') END AS JOURNAL_TYPE,
		STAG_ID.LPAD(' ',5,' ') AS FIELD12,
		CASE WHEN TRANS_REFERENCE IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(TRANS_REFERENCE,15,' ') END AS TRANS_REFERENCE,
		CASE WHEN [DESCRIPTION] IS NULL THEN STAG_ID.LPAD(' ',25,' ') ELSE STAG_ID.RPAD(REPLACE([DESCRIPTION],' ',''),25,' ') END AS [DESCRIPTION],
		STAG_ID.LPAD(' ',8,' ') AS FIELD15,
		STAG_ID.LPAD(' ',7,' ') AS FIELD16,
		CASE WHEN DUE_DATE IS NULL THEN STAG_ID.LPAD(' ',8,' ') ELSE CONVERT(VARCHAR(8),DUE_DATE,112) END AS DUE_DATE,
		STAG_ID.LPAD(' ',46,' ') AS FIELD18,
		CASE WHEN CURR_CODE IS NULL THEN STAG_ID.LPAD(' ',5,' ') ELSE STAG_ID.RPAD(CURR_CODE,5,' ') END AS CURR_CODE,
		STAG_ID.LPAD(' ',18,' ') AS FIELD20,
		CASE WHEN TRANS_AMOUNT IS NULL THEN STAG_ID.LPAD(' ',18,' ') ELSE STAG_ID.LPAD(REPLACE(CAST(ABS(TRANS_AMOUNT) AS NUMERIC(18,3)),'.',''),18,'0') END AS TRANS_AMOUNT,
		STAG_ID.LPAD(' ',14,' ') AS FIELD22,
		CASE WHEN T0 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T0,15,' ') END T0,
		CASE WHEN T1 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T1,15,' ') END T1,
		CASE WHEN T2 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T2,15,' ') END T2,
		CASE WHEN T3 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T3,15,' ') END T3,
		CASE WHEN T4 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T4,15,' ') END T4,
		CASE WHEN T5 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T5,15,' ') END T5,
		CASE WHEN T6 IS NULL THEN STAG_ID.LPAD(' ',15,' ') ELSE STAG_ID.RPAD(T6,15,' ') END T6,
		CASE WHEN T7 IS NULL THEN STAG_ID.LPAD(' ',3,' ') ELSE STAG_ID.RPAD(T7,3,' ') END T7
	FROM
	(SELECT * FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL
	WHERE ACC_PERIOD = @V_PRD_ID) A;
	
	INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		
	--- END OF STEP 5

	--DELETE IF NOT NEED
	----------------------------------------------------
	-- STEP 6: INSERT INTO SUNGL_NEW_ENTRIES TABLE
	----------------------------------------------------
	SET @V_START 		= current_timestamp;
	SET @V_SEQNO		= @V_SEQNO + 1;
	SET @V_DESCRIPTION 	= 'POST GRGSGT NEW ENTRIES TO SUNGL TABLE: '+ CONVERT(VARCHAR(20),CURRENT_TIMESTAMP);
	PRINT	@V_DESCRIPTION;

	-- (1) Initialize variables
	DECLARE @PRD_ID INT = CAST(CONCAT(@YEAR1,STAG_ID.LPAD(@MONTH1,3,'0')) AS INT);

	DECLARE @SUNGL_PERIOD VARCHAR(10) = CONCAT(@YEAR1,'/',0,STAG_ID.LPAD(@MONTH1,2,'0')); --YYYY/0MM
	PRINT @SUNGL_PERIOD
	DECLARE @SUNGL_TRANSDATE VARCHAR(15) = CONVERT(VARCHAR,EOMONTH(@V_START_DATE),103); --YYYYMMDD
	PRINT @SUNGL_TRANSDATE
	DECLARE @SUNGL_EOM VARCHAR(15) = CONVERT(VARCHAR,EOMONTH(@V_START_DATE)); --YYYY-MM-DD
	PRINT @SUNGL_EOM
	DECLARE @SUNGL_TMSTMP VARCHAR(30) = CONCAT(@SUNGL_EOM, ' 12:00:00.000')
	PRINT @SUNGL_TMSTMP

	DECLARE @SUNGL_JRNAL_NO BIGINT = (SELECT MAX(CAST(JRNAL_NO AS INT)) FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL] WHERE PERIOD=@SUNGL_PERIOD AND JRNAL_TYPE <> 'LAS17');
	PRINT @SUNGL_JRNAL_NO
	DECLARE @SUNGL_BATCH_MASTER_ID BIGINT = (SELECT MAX(BATCH_MASTER_ID) FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL] WHERE PERIOD=@SUNGL_PERIOD AND JRNAL_TYPE LIKE 'LAS%');
	PRINT @SUNGL_BATCH_MASTER_ID
	DECLARE @SUNGL_BATCH_RUN_ID BIGINT = (SELECT MAX(BATCH_RUN_ID) FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL] WHERE PERIOD=@SUNGL_PERIOD AND JRNAL_TYPE LIKE 'LAS%');
	PRINT @SUNGL_BATCH_RUN_ID
	DECLARE @SUNGL_JOB_MASTER_ID BIGINT = (SELECT MAX(JOB_MASTER_ID) FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL] WHERE PERIOD=@SUNGL_PERIOD AND JRNAL_TYPE LIKE 'LAS%');
	PRINT @SUNGL_JOB_MASTER_ID
	DECLARE @SUNGL_JOB_RUN_ID BIGINT = (SELECT MAX(JOB_RUN_ID) FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL] WHERE PERIOD=@SUNGL_PERIOD AND JRNAL_TYPE LIKE 'LAS%');
	PRINT @SUNGL_JOB_RUN_ID

	-- (3) Post entry to SUNGL table for COI enhancement new entries
	DELETE FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES_SPLITTING] WHERE DESCRIPTN LIKE '%GRGSGT%' AND JRNAL_TYPE='LAS17' AND PERIOD=@SUNGL_PERIOD;
	DELETE FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] WHERE DESCRIPTN LIKE '%GRGSGT%' AND JRNAL_TYPE='LAS17' AND PERIOD=@SUNGL_PERIOD AND ENTITY_ID NOT IN('IAI');

	DECLARE @ROW_NUMBER INT = (SELECT COALESCE(MAX(CAST(JRNAL_LINE AS INT)),0) FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES_SPLITTING WHERE PERIOD=@SUNGL_PERIOD AND JRNAL_NO = @SUNGL_JRNAL_NO+1);
	PRINT @ROW_NUMBER;

	INSERT INTO [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES_SPLITTING]
	SELECT  ENTITY_ID,NULL as POLICY_NO, NULL as RRN, 'A' LEDGER, ACCOUNT_CODE ACCNT_CODE, @SUNGL_PERIOD PERIOD, @SUNGL_TRANSDATE TRANS_DATE,
	BASE_AMOUNT AMOUNT, DC D_C, NULL ALLOCATION, @SUNGL_JRNAL_NO+1 JRNAL_NO, @ROW_NUMBER+(ROW_NUMBER() OVER(ORDER BY ACCOUNT_CODE)) JRNAL_LINE, 'LAS17' JRNAL_TYPE, 'SYS' JRNAL_SRCE,
	TRANS_REFERENCE TREFERENCE, [DESCRIPTION] DESCRIPTN, NULL ENTRY_DATE, NULL ENTRY_PRD, NULL DUE_DATE, NULL ALLOC_REF, NULL ALLOC_DATE, NULL ALLOC_PERIOD, NULL ASSET_IND,
	NULL ASSET_CODE, NULL ASSET_SUB, 'IDR' CONV_CODE, NULL CONV_RATE, 0.000000 OTHER_AMT, NULL OTHER_DP, NULL CLEARDOWN, NULL REVERSAL, NULL LOSS_GAIN, NULL ROUGH_FLAG, NULL IN_USE_FLAG, 
	T0 ANAL_T0, T1 ANAL_T1, T2 ANAL_T2, T3 ANAL_T3, T4 ANAL_T4, T5 ANAL_T5, T6 ANAL_T6, T7 ANAL_T7, NULL ANAL_T8, NULL ANAL_T9, TRANS_DATE POSTING_DATE,
	NULL ALLOC_IN_PROGRESS, NULL HOLD_REF, NULL HOLD_OP_ID, NULL LAS_CHANGE_USER_ID, NULL LAST_CHANGE_DATE, NULL ORIGINATOR_ID, TRANS_DATE UPLOAD_DATE,
	'FORCE BAL ETL4' FNAME, TRANS_DATE FPROCDATE, 'manual' SOURCE_TYPE, 'append' PROCESS_TYPE, @SUNGL_TMSTMP PROCESS_TIME,
	NEWID() JOB_PROCESS_ID, @SUNGL_BATCH_MASTER_ID BATCH_MASTER_ID, @SUNGL_BATCH_RUN_ID BATCH_RUN_ID, @SUNGL_JOB_MASTER_ID JOB_MASTER_ID, @SUNGL_JOB_RUN_ID JOB_RUN_ID, @BATCHDATESTR BATCHDATE, @SUNGL_TMSTMP ETL_PROCESS_DATE_TIME
	FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL_SPLITTING;
	--DELETE IF NOT NEED

	---COMBINE---
	DELETE FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] WHERE DESCRIPTN LIKE '%GRGSGT%' AND JRNAL_TYPE='LAS17' AND PERIOD=@SUNGL_PERIOD AND ENTITY_ID='IAI';

	SET @ROW_NUMBER = (SELECT COALESCE(MAX(CAST(JRNAL_LINE AS INT)),0) FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES WHERE PERIOD=@SUNGL_PERIOD AND JRNAL_NO = @SUNGL_JRNAL_NO+1);
	PRINT @ROW_NUMBER;

	INSERT INTO [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES]
	SELECT 'IAI' ENTITY_ID, 'A' LEDGER, ACCOUNT_CODE ACCNT_CODE, @SUNGL_PERIOD PERIOD, @SUNGL_TRANSDATE TRANS_DATE,
	BASE_AMOUNT AMOUNT, DC D_C, NULL ALLOCATION, @SUNGL_JRNAL_NO+1 JRNAL_NO, @ROW_NUMBER+(ROW_NUMBER() OVER(ORDER BY ACCOUNT_CODE)) JRNAL_LINE, 'LAS17' JRNAL_TYPE, 'SYS' JRNAL_SRCE,
	TRANS_REFERENCE TREFERENCE, DESCRIPTION DESCRIPTN, NULL ENTRY_DATE, NULL ENTRY_PRD, NULL DUE_DATE, NULL ALLOC_REF, NULL ALLOC_DATE, NULL ALLOC_PERIOD, NULL ASSET_IND,
	NULL ASSET_CODE, NULL ASSET_SUB, 'IDR' CONV_CODE, NULL CONV_RATE, 0.000000 OTHER_AMT, NULL OTHER_DP, NULL CLEARDOWN, NULL REVERSAL, NULL LOSS_GAIN, NULL ROUGH_FLAG, NULL IN_USE_FLAG, 
	T0 ANAL_T0, T1 ANAL_T1, T2 ANAL_T2, T3 ANAL_T3, T4 ANAL_T4, T5 ANAL_T5, T6 ANAL_T6, T7 ANAL_T7, NULL ANAL_T8, NULL ANAL_T9, TRANS_DATE POSTING_DATE,
	NULL ALLOC_IN_PROGRESS, NULL HOLD_REF, NULL HOLD_OP_ID, NULL LAS_CHANGE_USER_ID, NULL LAST_CHANGE_DATE, NULL ORIGINATOR_ID, TRANS_DATE UPLOAD_DATE,
	'FORCE BAL ETL4' FNAME, TRANS_DATE FPROCDATE, 'manual' SOURCE_TYPE, 'append' PROCESS_TYPE, @SUNGL_TMSTMP PROCESS_TIME,
	NEWID() JOB_PROCESS_ID, @SUNGL_BATCH_MASTER_ID BATCH_MASTER_ID, @SUNGL_BATCH_RUN_ID BATCH_RUN_ID, @SUNGL_JOB_MASTER_ID JOB_MASTER_ID, @SUNGL_JOB_RUN_ID JOB_RUN_ID, @BATCHDATESTR BATCHDATE, @SUNGL_TMSTMP ETL_PROCESS_DATE_TIME
	FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING_ORIGINAL;
	--DELETE IF NOT NEED

	-- Add DESCRIPTN Revaluation - WOP Manual from WOP ENCHANCEMENT
	-- (4) Post entry to SUNGL table for COI enhancement new entries
	DELETE FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES_SPLITTING] WHERE DESCRIPTN LIKE '%Revaluation%' AND FNAME='FORCE BAL ETL4' AND PERIOD=@SUNGL_PERIOD;
	DELETE FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] WHERE DESCRIPTN LIKE '%Revaluation%' AND FNAME='FORCE BAL ETL4' AND PERIOD=@SUNGL_PERIOD AND ENTITY_ID NOT IN('IAI');


	DECLARE @ROW_NUMBER2 INT = (SELECT COALESCE(MAX(CAST(JRNAL_LINE AS INT)),0) FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES_SPLITTING WHERE PERIOD=@SUNGL_PERIOD AND JRNAL_NO = @SUNGL_JRNAL_NO+1);
	PRINT @ROW_NUMBER2;

	INSERT INTO STAG_ID.WOP_STEP_10B
	SELECT ENTITY_ID,POLICY_NO, RRN,LEDGER,ACCNT_CODE,PERIOD,TRANS_DATE,AMOUNT,D_C,ALLOCATION,JRNAL_NO,@ROW_NUMBER2+ROW_NUMBER() OVER (ORDER BY ENTITY_ID) JRNAL_LINE,JRNAL_TYPE,JRNAL_SRCE,TREFERENCE,DESCRIPTN,ENTRY_DATE,ENTRY_PRD,DUE_DATE,ALLOC_REF,ALLOC_DATE,ALLOC_PERIOD,ASSET_IND,ASSET_CODE,ASSET_SUB,CONV_CODE,CONV_RATE,OTHER_AMT,OTHER_DP,CLEARDOWN,REVERSAL,LOSS_GAIN,ROUGH_FLAG,IN_USE_FLAG,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,POSTING_DATE,ALLOC_IN_PROGRESS,HOLD_REF,HOLD_OP_ID,LAST_CHANGE_USER_ID,LAST_CHANGE_DATE,ORIGINATOR_ID,UPLOAD_DATE,FNAME,FPROCDATE,SOURCE_TYPE,PROCESS_TYPE,PROCESS_TIME,JOB_PROCESS_ID,BATCH_MASTER_ID,BATCH_RUN_ID,JOB_MASTER_ID,JOB_RUN_ID,BATCHDATE,ETL_PROCESS_DATE_TIME
	FROM (
	--Reverse AMT
	SELECT 
	ENTITY_ID,NULL as POLICY_NO, NULL as RRN,LEDGER,ACCNT_CODE,PERIOD,TRANS_DATE,-1*cast(AMOUNT as numeric(28,6)) AMOUNT,
	case when D_C='D' then 'C' when D_C='C' then 'D' else D_C end as D_C,ALLOCATION,JRNAL_NO,JRNAL_LINE,JRNAL_TYPE,JRNAL_SRCE,TREFERENCE,'Revaluation - WOP Manual' DESCRIPTN,ENTRY_DATE,ENTRY_PRD,DUE_DATE,ALLOC_REF,ALLOC_DATE,ALLOC_PERIOD,ASSET_IND,ASSET_CODE,ASSET_SUB,CONV_CODE,CONV_RATE,OTHER_AMT,OTHER_DP,CLEARDOWN,REVERSAL,LOSS_GAIN,ROUGH_FLAG,IN_USE_FLAG,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,POSTING_DATE,ALLOC_IN_PROGRESS,HOLD_REF,HOLD_OP_ID,null LAST_CHANGE_USER_ID,LAST_CHANGE_DATE,ORIGINATOR_ID,UPLOAD_DATE,
	'FORCE BAL ETL4' FNAME, @SUNGL_EOM FPROCDATE, 'manual' SOURCE_TYPE, 'append' PROCESS_TYPE, @SUNGL_TMSTMP PROCESS_TIME,
	NEWID() JOB_PROCESS_ID, @SUNGL_BATCH_MASTER_ID BATCH_MASTER_ID, @SUNGL_BATCH_RUN_ID BATCH_RUN_ID, @SUNGL_JOB_MASTER_ID JOB_MASTER_ID, @SUNGL_JOB_RUN_ID JOB_RUN_ID,  @BATCHDATESTR BATCHDATE, @SUNGL_TMSTMP ETL_PROCESS_DATE_TIME
	FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL
	WHERE PERIOD= @SUNGL_PERIOD AND ACCNT_CODE='3141990000' AND JRNAL_SRCE= 'REVAL'
	--New SUN_CD
	union
	select 
	ENTITY_ID,NULL as POLICY_NO, NULL as RRN,LEDGER,'3141490000' ACCNT_CODE,PERIOD,TRANS_DATE,CAST(AMOUNT as numeric(28,6)) AMOUNT,D_C,ALLOCATION,JRNAL_NO,JRNAL_LINE,JRNAL_TYPE,JRNAL_SRCE,TREFERENCE,'Revaluation - WOP Manual' DESCRIPTN,ENTRY_DATE,ENTRY_PRD,DUE_DATE,ALLOC_REF,ALLOC_DATE,ALLOC_PERIOD,ASSET_IND,ASSET_CODE,ASSET_SUB,CONV_CODE,CONV_RATE,OTHER_AMT,OTHER_DP,CLEARDOWN,REVERSAL,LOSS_GAIN,ROUGH_FLAG,IN_USE_FLAG,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,POSTING_DATE,ALLOC_IN_PROGRESS,HOLD_REF,HOLD_OP_ID,null LAST_CHANGE_USER_ID,LAST_CHANGE_DATE,ORIGINATOR_ID,UPLOAD_DATE,
	'FORCE BAL ETL4' FNAME, @SUNGL_EOM FPROCDATE, 'manual' SOURCE_TYPE, 'append' PROCESS_TYPE, @SUNGL_TMSTMP PROCESS_TIME,
	NEWID() JOB_PROCESS_ID, @SUNGL_BATCH_MASTER_ID BATCH_MASTER_ID, @SUNGL_BATCH_RUN_ID BATCH_RUN_ID, @SUNGL_JOB_MASTER_ID JOB_MASTER_ID, @SUNGL_JOB_RUN_ID JOB_RUN_ID,  @BATCHDATESTR BATCHDATE, @SUNGL_TMSTMP ETL_PROCESS_DATE_TIME
	FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL
	WHERE PERIOD= @SUNGL_PERIOD AND ACCNT_CODE='3141990000' AND JRNAL_SRCE= 'REVAL'
	) n

	INSERT INTO [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES_SPLITTING] SELECT * FROM STAG_ID.WOP_STEP_10B;


	---COMBINE---
	DELETE FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] WHERE DESCRIPTN LIKE '%Revaluation%' AND FNAME='FORCE BAL ETL4' AND PERIOD=@SUNGL_PERIOD AND ENTITY_ID='IAI';

	SET @ROW_NUMBER2 = (SELECT COALESCE(MAX(CAST(JRNAL_LINE AS INT)),0) FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES WHERE PERIOD=@SUNGL_PERIOD AND JRNAL_NO = @SUNGL_JRNAL_NO+1);
	PRINT @ROW_NUMBER2;

	INSERT INTO STAG_ID.WOP_STEP_10B_IAI
	SELECT ENTITY_ID,LEDGER,ACCNT_CODE,PERIOD,TRANS_DATE,AMOUNT,D_C,ALLOCATION,JRNAL_NO,@ROW_NUMBER2+ROW_NUMBER() OVER (ORDER BY ENTITY_ID) JRNAL_LINE,JRNAL_TYPE,JRNAL_SRCE,TREFERENCE,DESCRIPTN,ENTRY_DATE,ENTRY_PRD,DUE_DATE,ALLOC_REF,ALLOC_DATE,ALLOC_PERIOD,ASSET_IND,ASSET_CODE,ASSET_SUB,CONV_CODE,CONV_RATE,OTHER_AMT,OTHER_DP,CLEARDOWN,REVERSAL,LOSS_GAIN,ROUGH_FLAG,IN_USE_FLAG,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,POSTING_DATE,ALLOC_IN_PROGRESS,HOLD_REF,HOLD_OP_ID,LAST_CHANGE_USER_ID,LAST_CHANGE_DATE,ORIGINATOR_ID,UPLOAD_DATE,FNAME,FPROCDATE,SOURCE_TYPE,PROCESS_TYPE,PROCESS_TIME,JOB_PROCESS_ID,BATCH_MASTER_ID,BATCH_RUN_ID,JOB_MASTER_ID,JOB_RUN_ID,BATCHDATE,ETL_PROCESS_DATE_TIME
	FROM (
	--Reverse AMT
	SELECT 
	'IAI' ENTITY_ID,LEDGER,ACCNT_CODE,PERIOD,TRANS_DATE,-1*cast(AMOUNT as numeric(28,6)) AMOUNT,
	case when D_C='D' then 'C' when D_C='C' then 'D' else D_C end as D_C,ALLOCATION,JRNAL_NO,JRNAL_LINE,JRNAL_TYPE,JRNAL_SRCE,TREFERENCE,'Revaluation - WOP Manual' DESCRIPTN,ENTRY_DATE,ENTRY_PRD,DUE_DATE,ALLOC_REF,ALLOC_DATE,ALLOC_PERIOD,ASSET_IND,ASSET_CODE,ASSET_SUB,CONV_CODE,CONV_RATE,OTHER_AMT,OTHER_DP,CLEARDOWN,REVERSAL,LOSS_GAIN,ROUGH_FLAG,IN_USE_FLAG,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,POSTING_DATE,ALLOC_IN_PROGRESS,HOLD_REF,HOLD_OP_ID,null LAST_CHANGE_USER_ID,LAST_CHANGE_DATE,ORIGINATOR_ID,UPLOAD_DATE,
	'FORCE BAL ETL4' FNAME, @SUNGL_EOM FPROCDATE, 'manual' SOURCE_TYPE, 'append' PROCESS_TYPE, @SUNGL_TMSTMP PROCESS_TIME,
	NEWID() JOB_PROCESS_ID, @SUNGL_BATCH_MASTER_ID BATCH_MASTER_ID, @SUNGL_BATCH_RUN_ID BATCH_RUN_ID, @SUNGL_JOB_MASTER_ID JOB_MASTER_ID, @SUNGL_JOB_RUN_ID JOB_RUN_ID,  @BATCHDATESTR BATCHDATE, @SUNGL_TMSTMP ETL_PROCESS_DATE_TIME
	FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL
	WHERE BATCHDATE= LEFT(@p_prd_id,6) AND ACCNT_CODE='3141990000' AND JRNAL_SRCE= 'REVAL'
	--New SUN_CD
	union
	select
	'IAI' ENTITY_ID,LEDGER,'3141490000' ACCNT_CODE,PERIOD,TRANS_DATE,CAST(AMOUNT as numeric(28,6)) AMOUNT,D_C,ALLOCATION,JRNAL_NO,JRNAL_LINE,JRNAL_TYPE,JRNAL_SRCE,TREFERENCE,'Revaluation - WOP Manual' DESCRIPTN,ENTRY_DATE,ENTRY_PRD,DUE_DATE,ALLOC_REF,ALLOC_DATE,ALLOC_PERIOD,ASSET_IND,ASSET_CODE,ASSET_SUB,CONV_CODE,CONV_RATE,OTHER_AMT,OTHER_DP,CLEARDOWN,REVERSAL,LOSS_GAIN,ROUGH_FLAG,IN_USE_FLAG,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,POSTING_DATE,ALLOC_IN_PROGRESS,HOLD_REF,HOLD_OP_ID,null LAST_CHANGE_USER_ID,LAST_CHANGE_DATE,ORIGINATOR_ID,UPLOAD_DATE,
	'FORCE BAL ETL4' FNAME, @SUNGL_EOM FPROCDATE, 'manual' SOURCE_TYPE, 'append' PROCESS_TYPE, @SUNGL_TMSTMP PROCESS_TIME,
	NEWID() JOB_PROCESS_ID, @SUNGL_BATCH_MASTER_ID BATCH_MASTER_ID, @SUNGL_BATCH_RUN_ID BATCH_RUN_ID, @SUNGL_JOB_MASTER_ID JOB_MASTER_ID, @SUNGL_JOB_RUN_ID JOB_RUN_ID,  @BATCHDATESTR BATCHDATE, @SUNGL_TMSTMP ETL_PROCESS_DATE_TIME
	FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL
	WHERE BATCHDATE= LEFT(@p_prd_id,6) AND ACCNT_CODE='3141990000' AND JRNAL_SRCE= 'REVAL'
	) n

	INSERT INTO [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] SELECT * FROM STAG_ID.WOP_STEP_10B_IAI;

	--INSERT NEW ENTRIES SPLITTING INTO NEW ENTRIES FINAL TABLE---
	INSERT INTO [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES]
	SELECT A.ENTITY_ID,	LEDGER,	ACCNT_CODE,	PERIOD,	TRANS_DATE,SUM(CAST(AMOUNT as NUMERIC(28,6))) as AMOUNT,	D_C,	ALLOCATION,
	B.JRNAL_NO JRNAL_NO,	@ROW_NUMBER+(ROW_NUMBER() OVER(ORDER BY ACCNT_CODE)) JRNAL_LINE,	JRNAL_TYPE,	JRNAL_SRCE,	TREFERENCE,	A.DESCRIPTN,	ENTRY_DATE,	ENTRY_PRD,	DUE_DATE,	
	ALLOC_REF,	ALLOC_DATE,	ALLOC_PERIOD,	ASSET_IND,	ASSET_CODE,	ASSET_SUB,	CONV_CODE,	CONV_RATE,	OTHER_AMT,	
	OTHER_DP,	CLEARDOWN,	REVERSAL,	LOSS_GAIN,	ROUGH_FLAG,	IN_USE_FLAG,	ANAL_T0,	ANAL_T1,	ANAL_T2,	
	ANAL_T3,	ANAL_T4,	ANAL_T5,	ANAL_T6,	ANAL_T7,	ANAL_T8,	ANAL_T9,	POSTING_DATE,	
	ALLOC_IN_PROGRESS,	HOLD_REF,	HOLD_OP_ID,	LAST_CHANGE_USER_ID,	LAST_CHANGE_DATE,	ORIGINATOR_ID,	UPLOAD_DATE,	
	FNAME,	FPROCDATE,	SOURCE_TYPE,	PROCESS_TYPE,	PROCESS_TIME,NEWID() JOB_PROCESS_ID, BATCH_MASTER_ID,BATCH_RUN_ID,	
	JOB_MASTER_ID,JOB_RUN_ID,	BATCHDATE,	ETL_PROCESS_DATE_TIME
	 from [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES_SPLITTING] A 
	 LEFT JOIN (select distinct DESCRIPTN,JRNAL_NO from [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] where PERIOD=@SUNGL_PERIOD AND JRNAL_TYPE='LAS17' and ENTITY_ID  IN('IAI')) B ON A.DESCRIPTN=B.DESCRIPTN
	 WHERE BATCHDATE=@BATCHDATESTR and A.DESCRIPTN like '%GRGSGT%' 
	 group by  ENTITY_ID,	LEDGER,	ACCNT_CODE,	PERIOD,	TRANS_DATE,	D_C,	ALLOCATION,B.JRNAL_NO,	JRNAL_TYPE,	JRNAL_SRCE,	TREFERENCE,	A.DESCRIPTN,	ENTRY_DATE,	ENTRY_PRD,	DUE_DATE,	
	ALLOC_REF,	ALLOC_DATE,	ALLOC_PERIOD,	ASSET_IND,	ASSET_CODE,	ASSET_SUB,	CONV_CODE,	CONV_RATE,	OTHER_AMT,	
	OTHER_DP,	CLEARDOWN,	REVERSAL,	LOSS_GAIN,	ROUGH_FLAG,	IN_USE_FLAG,	ANAL_T0,	ANAL_T1,	ANAL_T2,	
	ANAL_T3,	ANAL_T4,	ANAL_T5,	ANAL_T6,	ANAL_T7,	ANAL_T8,	ANAL_T9,	POSTING_DATE,	
	ALLOC_IN_PROGRESS,	HOLD_REF,	HOLD_OP_ID,	LAST_CHANGE_USER_ID,	LAST_CHANGE_DATE,	ORIGINATOR_ID,	UPLOAD_DATE,	
	FNAME,	FPROCDATE,	SOURCE_TYPE,	PROCESS_TYPE,	PROCESS_TIME,BATCH_MASTER_ID,BATCH_RUN_ID,	
	JOB_MASTER_ID,JOB_RUN_ID,	BATCHDATE,	ETL_PROCESS_DATE_TIME;


	INSERT INTO [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES]
	SELECT A.ENTITY_ID,	LEDGER,	ACCNT_CODE,	PERIOD,	TRANS_DATE,SUM(CAST(AMOUNT as NUMERIC(28,6))) as AMOUNT,	D_C,	ALLOCATION,
	B.JRNAL_NO JRNAL_NO,	@ROW_NUMBER+(ROW_NUMBER() OVER(ORDER BY ACCNT_CODE)) JRNAL_LINE,	JRNAL_TYPE,	JRNAL_SRCE,	TREFERENCE,	A.DESCRIPTN,	ENTRY_DATE,	ENTRY_PRD,	DUE_DATE,	
	ALLOC_REF,	ALLOC_DATE,	ALLOC_PERIOD,	ASSET_IND,	ASSET_CODE,	ASSET_SUB,	CONV_CODE,	CONV_RATE,	OTHER_AMT,	
	OTHER_DP,	CLEARDOWN,	REVERSAL,	LOSS_GAIN,	ROUGH_FLAG,	IN_USE_FLAG,	ANAL_T0,	ANAL_T1,	ANAL_T2,	
	ANAL_T3,	ANAL_T4,	ANAL_T5,	ANAL_T6,	ANAL_T7,	ANAL_T8,	ANAL_T9,	POSTING_DATE,	
	ALLOC_IN_PROGRESS,	HOLD_REF,	HOLD_OP_ID,	LAST_CHANGE_USER_ID,	LAST_CHANGE_DATE,	ORIGINATOR_ID,	UPLOAD_DATE,	
	FNAME,	FPROCDATE,	SOURCE_TYPE,	PROCESS_TYPE,	PROCESS_TIME,NEWID() JOB_PROCESS_ID, BATCH_MASTER_ID,BATCH_RUN_ID,	
	JOB_MASTER_ID,JOB_RUN_ID,	BATCHDATE,	ETL_PROCESS_DATE_TIME
	 from [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES_SPLITTING] A 
	 LEFT JOIN (select  DESCRIPTN,max(JRNAL_NO) JRNAL_NO from [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] where PERIOD=@SUNGL_PERIOD AND DESCRIPTN like '%Revaluation%'  and ENTITY_ID  IN('IAI') group by DESCRIPTN) B ON A.DESCRIPTN=B.DESCRIPTN
	 WHERE BATCHDATE=@BATCHDATESTR and A.DESCRIPTN like '%Revaluation%' 
	 group by  ENTITY_ID,	LEDGER,	ACCNT_CODE,	PERIOD,	TRANS_DATE,	D_C,	ALLOCATION,B.JRNAL_NO,	JRNAL_TYPE,	JRNAL_SRCE,	TREFERENCE,	A.DESCRIPTN,	ENTRY_DATE,	ENTRY_PRD,	DUE_DATE,	
	ALLOC_REF,	ALLOC_DATE,	ALLOC_PERIOD,	ASSET_IND,	ASSET_CODE,	ASSET_SUB,	CONV_CODE,	CONV_RATE,	OTHER_AMT,	
	OTHER_DP,	CLEARDOWN,	REVERSAL,	LOSS_GAIN,	ROUGH_FLAG,	IN_USE_FLAG,	ANAL_T0,	ANAL_T1,	ANAL_T2,	
	ANAL_T3,	ANAL_T4,	ANAL_T5,	ANAL_T6,	ANAL_T7,	ANAL_T8,	ANAL_T9,	POSTING_DATE,	
	ALLOC_IN_PROGRESS,	HOLD_REF,	HOLD_OP_ID,	LAST_CHANGE_USER_ID,	LAST_CHANGE_DATE,	ORIGINATOR_ID,	UPLOAD_DATE,	
	FNAME,	FPROCDATE,	SOURCE_TYPE,	PROCESS_TYPE,	PROCESS_TIME,BATCH_MASTER_ID,BATCH_RUN_ID,	
	JOB_MASTER_ID,JOB_RUN_ID,	BATCHDATE,	ETL_PROCESS_DATE_TIME;

	--DELETE ACCNT_CODE NOT SHOWING IN NEW ENTRIES COMBINE--

	DELETE from [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] where DESCRIPTN like '%GRGSGT%' and PERIOD=@SUNGL_PERIOD and ENTITY_ID NOT IN('IAI')
	AND ACCNT_CODE in(
	SELECT ACCNT_CODE from(
		select  'IAI'ENTITY_ID, ACCNT_CODE,
	SUM(CAST(AMOUNT as NUMERIC(28,6))) AMOUNT 
	from [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] where DESCRIPTN like '%GRGSGT%' and PERIOD=@SUNGL_PERIOD  and ENTITY_ID NOT IN('IAI')
	group by ACCNT_CODE
	--order by 2,1
	except
		select ENTITY_ID, ACCNT_CODE,
	SUM(CAST(AMOUNT as NUMERIC(28,6))) AMOUNT 
	from [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] where DESCRIPTN like '%GRGSGT%' and PERIOD=@SUNGL_PERIOD  and ENTITY_ID='IAI'
	group by ENTITY_ID,ACCNT_CODE
	)A
	union all
	SELECT ACCNT_CODE from(
		select ENTITY_ID, ACCNT_CODE,
	SUM(CAST(AMOUNT as NUMERIC(28,6))) AMOUNT 
	from [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] where DESCRIPTN like '%GRGSGT%' and PERIOD=@SUNGL_PERIOD and ENTITY_ID='IAI'
	group by ENTITY_ID,ACCNT_CODE
	having SUM(CAST(AMOUNT as NUMERIC(28,6))) between -1000 and 1000
	)B
	)

	--ALLOCATE THE VARIANCE INTO THE BIGGEST AMOUNT
	MERGE [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] A
	USING(SELECT A.ENTITY_ID,A.VAR_ENTITY,B.AMOUNT FROM
		(SELECT ENTITY_ID, SUM(CAST(AMOUNT AS NUMERIC(28,6))) VAR_ENTITY  FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] 
	WHERE PERIOD=@SUNGL_PERIOD AND JRNAL_TYPE='LAS17' and DESCRIPTN like '%GRGSGT%' and ENTITY_ID<>'IAI'
	group by ENTITY_ID)A
	LEFT JOIN (
		SELECT ENTITY_ID,MAX(CAST(AMOUNT AS NUMERIC(28,6))) AMOUNT 
	FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] WHERE PERIOD=@SUNGL_PERIOD AND JRNAL_TYPE='LAS17' and DESCRIPTN like '%GRGSGT%' and ENTITY_ID<>'IAI'
	group by ENTITY_ID)B
		ON A.ENTITY_ID=B.ENTITY_ID
	) B ON A.ENTITY_ID=B.ENTITY_ID AND DESCRIPTN like '%GRGSGT%' and A.ENTITY_ID<>'IAI' AND CAST(A.AMOUNT AS NUMERIC(28,6))=B.AMOUNT and A.PERIOD=@SUNGL_PERIOD
	WHEN MATCHED THEN UPDATE
	SET A.AMOUNT=B.AMOUNT+(-1*VAR_ENTITY);	

	--End 

--- END OF STEP 6
	
			-- IF TRANSACTION SUCCEED, WE COMMIT THE PROCESS --
	IF @@TRANCOUNT > 0
                COMMIT;
				PRINT 'COMMIT';
				
						-- AND DROP TEMP TABLE --
	IF OBJECT_ID('tempdb.dbo.#ABSTR_IFRS17_BALANCING_TEMP', 'U') IS NOT NULL
	DROP TABLE #ABSTR_IFRS17_BALANCING_TEMP;
	
	IF OBJECT_ID('tempdb.dbo.#GRGSGT_SUSPENSE_ACCOUNT_TEMP', 'U') IS NOT NULL
	DROP TABLE #GRGSGT_SUSPENSE_ACCOUNT_TEMP;
	
	IF OBJECT_ID('tempdb.dbo.#ABSTR_IFRS17_COA_ANALYSIS_CODE_2', 'U') IS NOT NULL
	DROP TABLE #ABSTR_IFRS17_COA_ANALYSIS_CODE_2;
	
	END TRY
	
				-- IF TRANSACTION FAILED, WE ROLLBACK THE PROCESS --	
	BEGIN CATCH
	
	IF @@TRANCOUNT > 0
                ROLLBACK;
				PRINT 'ROLLBACK';

	SET @V_START 		= current_timestamp;
	SET @V_SEQNO		= @V_SEQNO + 1;
	SET @V_DESCRIPTION 	= 'Error execution for function '+ @V_FUNCTION_NAME + ' at ' + convert(varchar(20),current_timestamp) + ' with Error Message: ' + ERROR_MESSAGE();
	PRINT	@V_DESCRIPTION;
	
	IF OBJECT_ID('tempdb.dbo.#ABSTR_IFRS17_BALANCING_TEMP', 'U') IS NOT NULL
	DROP TABLE #ABSTR_IFRS17_BALANCING_TEMP;
	
	IF OBJECT_ID('tempdb.dbo.#GRGSGT_SUSPENSE_ACCOUNT_TEMP', 'U') IS NOT NULL
	DROP TABLE #GRGSGT_SUSPENSE_ACCOUNT_TEMP;
	
	IF OBJECT_ID('tempdb.dbo.#ABSTR_IFRS17_COA_ANALYSIS_CODE_2', 'U') IS NOT NULL
	DROP TABLE #ABSTR_IFRS17_COA_ANALYSIS_CODE_2;
	
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	DECLARE @ErrorMessage AS NVARCHAR(1000)		= ERROR_MESSAGE();
	DECLARE @ErrorSeverity AS INT				= ERROR_SEVERITY();
	DECLARE @ErrorState AS INT					= ERROR_STATE();

	RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
	
	END CATCH

END;

