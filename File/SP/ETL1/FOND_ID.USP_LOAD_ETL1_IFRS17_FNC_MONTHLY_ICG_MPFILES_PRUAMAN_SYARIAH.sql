CREATE PROC [FOND_ID].[USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PRUAMAN_SYARIAH] @batchdatestr [NVARCHAR](10),@jobnamestr [NVARCHAR](2000),@P_PRD_ID [integer] AS
BEGIN 
	------START GET RUN ID DETAIL FROM ABC------
    DECLARE @BATCH_MASTER_ID    VARCHAR(20) = 0;
    DECLARE @BATCH_RUN_ID    VARCHAR(20)  = 0;
    DECLARE @JOB_MASTER_ID    VARCHAR(20)  = 0;
    DECLARE @JOB_RUN_ID    VARCHAR(20)  = 0;
    DECLARE @GMT_START_DTTM    VARCHAR(20) = getdate();
	
	BEGIN TRY
	EXEC STAG_ID.USP_GetRunIdReturn
    @JobName = @jobnamestr
    ,@BATCH_MASTER_ID  = @BATCH_MASTER_ID OUTPUT
    ,@BATCH_RUN_ID   = @BATCH_RUN_ID OUTPUT
    ,@JOB_MASTER_ID  = @JOB_MASTER_ID OUTPUT
    ,@JOB_RUN_ID  = @JOB_RUN_ID OUTPUT
    ,@GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
    ------END GET RUN ID DETAIL FROM ABC------
    --declare variable
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_DURATION		datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PRUAMAN_SYARIAH';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	SET @V_START_DATE	= convert(date, cast(@P_PRD_ID as varchar(8))); -- valuation extract date
	PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
	SET @V_START 	= convert(datetime,getDATE());

	SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
	PRINT	@V_DESCRIPTION;
	SET @V_SEQNO		= @V_SEQNO + 1;

	INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


	-----------------------------
	--- trucate ALL TEMPORARY TABLES
	-----------------------------
	/**
	TRUNCATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_DUP;
	TRUNCATE TABLE STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_ICG_FLAG;
	TRUNCATE TABLE STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH;
	TRUNCATE TABLE STAG_ID.STAG_TMP_IFRS17_MPFILES_PRUAMAN_SYARIAH;
	TRUNCATE TABLE FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN_SYARIAH;
	*/
	
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_PRUAMANS_TMP_1', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PRUAMANS_TMP_1;

	TRUNCATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_INVALID;
	TRUNCATE TABLE FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN_SYARIAH;
	
	

	---------------------------------------------------
	--- Check Duplicate records
	---------------------------------------------------
	-- insert log process
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	= 'CREATE  TABLE STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_DUP  : ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;


	INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


	-- check duplicate
	--TRUNCATE table if exists FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_DUP ;
	
	---INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_DUP  
	IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_DUP') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_DUP;
	CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_DUP  
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_ID)
		 ,CLUSTERED INDEX(POLICY_ID)
		)
	as
	select * from STAG_ID.STAG_PRUSYARIAH_STAG_ETL4_POLICY
	where POLICY_ID in (select POLICY_ID from STAG_ID.STAG_PRUSYARIAH_STAG_ETL4_POLICY 
	where NULLIF(TRIM(CAST(POLICY_ID AS VARCHAR(36))),'') IS NOT NULL group by POLICY_ID having count(*) > 1)
	;  


	---------------------------------------------------
	--- Create Temporary Table for ICG Identification Process
	---------------------------------------------------
	-- insert log process
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	= 'CREATE TABLE STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_ICG_FLAG : ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;



	INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


	--TRUNCATE table if exists STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_icg_flag;
	
	--INSERT INTO STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_ICG_FLAG 
	IF OBJECT_ID('STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_ICG_FLAG') IS NOT NULL DROP TABLE STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_ICG_FLAG;
	CREATE TABLE STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_ICG_FLAG  
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
	as
	select distinct (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN TRIM(CAST(A.POLICY_ID AS VARCHAR(36))) ELSE 'N/A' END) AS POLICY_NO
	,(CASE WHEN UPPER(TRIM(CAST((CASE 
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('INFORCE','CLAIM') THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IS NULL THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE = 'TERMINATED' THEN NULL
					WHEN claim.POLICY_NO IS NULL AND ICGS.STATUS_SOURCE IN ('CLAIM') THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NULL AND A.DUE_DATE >=  @V_START_DATE  THEN 'INFORCE'
					WHEN claim.POLICY_NO IS NULL AND A.DUE_DATE < @V_START_DATE THEN 'TERMINATED'
					END) AS VARCHAR(25)))) = 'INFORCE' THEN   
						(CASE WHEN ICGS.POLICY_NO IS NULL THEN 'NEW BUSINESS'
								WHEN CBM.BOUND_BY_REPRICE='N' AND CBM.BOUND_BY_TERMINATION_PROVISION = 'N' AND UPPER(TRIM(ICGS.STATUS_SOURCE)) <> 'INFORCE' THEN 'UPDATE EXISTING BUSINESS'
								WHEN CBM.BOUND_BY_REPRICE='N' AND CBM.BOUND_BY_TERMINATION_PROVISION = 'N' THEN 'NO UPDATE'
								WHEN CBM.BOUND_BY_REPRICE = 'Y' AND A.DUE_DATE >  ICGS.CB_END_DT THEN 'NEW BUSINESS' 
								WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN 'NEW BUSINESS'
								WHEN UPPER(TRIM(ICGS.STATUS_SOURCE)) <> 'INFORCE' THEN 'UPDATE EXISTING BUSINESS'
								ELSE 'NO UPDATE'
						END)
			-- A.STATCODE <> 'IF'
			WHEN ICGS.POLICY_NO IS NULL THEN 'NEW BUSINESS'
			WHEN LOWER(TRIM(CAST((CASE 
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('INFORCE','CLAIM') THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IS NULL THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE = 'TERMINATED' THEN NULL
					WHEN claim.POLICY_NO IS NULL AND ICGS.STATUS_SOURCE IN ('CLAIM') THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NULL AND A.DUE_DATE >=  @V_START_DATE  THEN 'INFORCE'
					WHEN claim.POLICY_NO IS NULL AND A.DUE_DATE < @V_START_DATE THEN 'TERMINATED'
					END) AS VARCHAR(25)))) <> LOWER(TRIM(ICGS.STATUS_SOURCE)) THEN 'UPDATE EXISTING BUSINESS'
			WHEN (CASE 
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('INFORCE','CLAIM') THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IS NULL THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE = 'TERMINATED' THEN NULL
					WHEN claim.POLICY_NO IS NULL AND ICGS.STATUS_SOURCE IN ('CLAIM') THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NULL AND A.DUE_DATE >=  @V_START_DATE  THEN 'INFORCE'
					WHEN claim.POLICY_NO IS NULL AND A.DUE_DATE < @V_START_DATE THEN 'TERMINATED'
					END) IS NULL THEN 'UPDATE EXISTING BUSINESS'
			ELSE 'NO UPDATE'
	END) AS ICG_FLAG
	FROM STAG_ID.STAG_PRUSYARIAH_STAG_ETL4_POLICY A
	LEFT JOIN FOND_ID.FOND_PRUSYARIAH_ETL4_PRUAMAN_SYARIAH claim
	on (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))) ELSE 'N/A' END) = UPPER(TRIM(CAST(claim.POLICY_NO as VARCHAR(36))))  
	AND claim.SUN_CD='5111010000'
	LEFT JOIN (
		select a.*
		, row_number() over(partition by POLICY_NO 
		order by CB_START_DT desc, CB_END_DT desc) as idx 
		FROM FOND_ID.FOND_IFRS17_ICG_STORES a
		where lower(trim(SUBSYSTEM)) = lower(trim('PruAmanSya'))
		AND PRODUCT_CD = BENEFIT_CD
	) ICGS
	ON (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))) ELSE 'N/A' END) = UPPER(TRIM(ICGS.POLICY_NO)) AND ICGS.idx = 1
	LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_DUP dup on UPPER(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))) = UPPER(TRIM(CAST(dup.POLICY_ID AS VARCHAR(36))))
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_CB_MAPPING CBM ON LOWER(TRIM(CAST('PruAmanS' AS VARCHAR(30)))) = LOWER(TRIM(CBM.PRODUCT_CD))
	AND UPPER(TRIM(CAST('PruAmanSya' AS VARCHAR(20)))) = UPPER(TRIM(CBM.SYSTEM))
	WHERE dup.POLICY_ID IS NULL
	;
	
		
	----------------------------------------------
	--create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_PRUAMANS_TMP_1
	-----------------------------------------------
	
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_PRUAMANS_TMP_1 : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	
	CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PRUAMANS_TMP_1
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
	AS
	SELECT  
	-- icg_stores column
	CAST('IAI' AS VARCHAR(4)) AS ENTITY_ID
	,CAST('PruAmanSya' AS VARCHAR(20)) AS SYSTEM
	,TRIM(CAST(A.POLICY_ID AS VARCHAR(36))) AS POLICY_NO
	,CAST('PruAmanS' AS VARCHAR(30)) AS PRODUCT_CD
	,CAST('PruAmanS' AS VARCHAR(30)) AS BENEFIT_CD
	,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN 
			NULLIF(TRIM(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))),'') + '-' + FORMAT((CASE 	
				WHEN ICGS.POLICY_NO IS NULL THEN  A.LOAN_DATE 
				WHEN CBM.BOUND_BY_REPRICE = 'Y' AND A.DUE_DATE >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
			END),'yyyy')
			ELSE ICGS.CONTRACT_ID
	END) AS CONTRACT_ID
	--,PFM.PORTFOLIO_GROUP
	/*,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN PFM.PORTFOLIO_GROUP
			ELSE ICGS.PORTFOLIO_GROUP
	END) AS PORTFOLIO_GROUP*/
	,CASE
      		WHEN ICG_FLAG = 'NEW BUSINESS' THEN
      			CASE
					WHEN PFM.PRODUCT_CD IS NOT NULL THEN
						CASE
							WHEN PFM.VFA_ELIGIBLE = 'N' THEN PFM.PORTFOLIO_GROUP
							WHEN PFM.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PFM.PORTFOLIO_GROUP), 1, LEN(TRIM(PFM.PORTFOLIO_GROUP))-3) + PFM.MEASUREMENT_MODEL
						END 
      			END
			ELSE ICGS.PORTFOLIO_GROUP
		END AS PORTFOLIO_GROUP
	,CAST(FORMAT((CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
			(CASE 	
				WHEN ICGS.POLICY_NO IS NULL THEN  A.LOAN_DATE 
				WHEN CBM.BOUND_BY_REPRICE = 'Y' AND A.DUE_DATE >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
			END)
			ELSE ICGS.CB_START_DT
	END),'yyyy') AS NUMERIC(4,0)) as COHORT_YEAR
	--,SC.SET_OF_CONTRACT
	,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN SC.SET_OF_CONTRACT
			ELSE ICGS.SET_OF_CONTRACT
	END) AS SET_OF_CONTRACT
	--,ICC.INSURANCE_CONTRACT_GROUP_ID
	,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN ICC.INSURANCE_CONTRACT_GROUP_ID
			ELSE ICGS.INSURANCE_CONTRACT_GROUP_ID
	END) AS INSURANCE_CONTRACT_GROUP_ID
	--,ICC.ICG_ID_PROPHET
	,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN ICC.ICG_ID_PROPHET
			ELSE ICGS.ICG_ID_PROPHET
	END) AS ICG_ID_PROPHET
	,CAST(FORMAT((CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
			(CASE 	
				WHEN ICGS.POLICY_NO IS NULL THEN  A.LOAN_DATE 
				WHEN CBM.BOUND_BY_REPRICE = 'Y' AND A.DUE_DATE >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
			END)
			ELSE ICGS.CB_START_DT
	END),'MM') AS NUMERIC(2,0)) as ENTRY_MONTH
	,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
			(CASE 	
				WHEN ICGS.POLICY_NO IS NULL THEN  A.LOAN_DATE 
				WHEN CBM.BOUND_BY_REPRICE = 'Y' AND A.DUE_DATE >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
			END)
			ELSE ICGS.CB_START_DT
	END) AS CB_START_DT
	--,PFM.MEASUREMENT_MODEL
	,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN PFM.MEASUREMENT_MODEL
			ELSE ICGS.MEASUREMENT_MODEL
	END) AS MEASUREMENT_MODEL
	--,SMT.INFORCE_FLAG
	,(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN SMT.INFORCE_FLAG
			ELSE ICGS.INFORCE_FLAG
	END) AS INFORCE_FLAG
	,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
				(CASE 
					WHEN BOUND_BY_REPRICE='N' AND BOUND_BY_TERMINATION_PROVISION = 'N' THEN A.DUE_DATE -- BEN_EXP_DATE (RISK_CESS_DATE) 
					WHEN BOUND_BY_REPRICE = 'Y' AND BOUND_BY_TERMINATION_PROVISION = 'N' THEN 
							dateadd(month,COALESCE(CAST(CBM.POINT_OF_BOUNDARY_REPRICE AS INTEGER),0),
							(CASE 	
							WHEN ICGS.POLICY_NO IS NULL THEN  A.LOAN_DATE 
							WHEN CBM.BOUND_BY_REPRICE = 'Y' AND A.DUE_DATE >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
							WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
							END))
					WHEN BOUND_BY_TERMINATION_PROVISION = 'Y' AND BOUND_BY_REPRICE = 'N' THEN 
							dateadd(month,COALESCE(CAST(CBM.POINT_OF_BOUNDARY_TERMINATION AS INTEGER),0),
							(CASE 	
							WHEN ICGS.POLICY_NO IS NULL THEN  A.LOAN_DATE 
							WHEN CBM.BOUND_BY_REPRICE = 'Y' AND A.DUE_DATE >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
							WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
							END))
				END)
			ELSE ICGS.COVERAGE_LEVEL_END_DATE
	END) AS COVERAGE_LEVEL_END_DATE
	--,CAST('IDR' AS VARCHAR(3)) AS CCY_CD
	,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN CAST('IDR' AS VARCHAR(3))
			ELSE ICGS.CCY_CD
	END) AS CCY_CD
	,(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN
			CAST((CASE 
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('INFORCE','CLAIM') THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IS NULL THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE = 'TERMINATED' THEN NULL
					WHEN claim.POLICY_NO IS NULL AND ICGS.STATUS_SOURCE IN ('CLAIM') THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NULL AND A.DUE_DATE >=  @V_START_DATE  THEN 'INFORCE'
					WHEN claim.POLICY_NO IS NULL AND A.DUE_DATE < @V_START_DATE THEN 'TERMINATED'
					END) AS VARCHAR(25))
			ELSE ICGS.STATUS_SOURCE
	END) AS STATUS_SOURCE
	--,A.DUE_DATE AS BEN_EXP_DATE
	,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN A.DUE_DATE
			ELSE ICGS.BEN_EXP_DATE
	END) AS BEN_EXP_DATE
	,ICG_FLAG
	,cast('PruAmanSya' as varchar(20)) as SUBSYSTEM
	,current_timestamp as CREATED_DATE
	,current_timestamp as UPDATED_DATE
	FROM STAG_ID.STAG_PRUSYARIAH_STAG_ETL4_POLICY A
	LEFT JOIN FOND_ID.FOND_PRUSYARIAH_ETL4_PRUAMAN_SYARIAH claim
	on (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))) ELSE 'N/A' END) = UPPER(TRIM(CAST(claim.POLICY_NO as VARCHAR(36))))  
	AND claim.SUN_CD='5111010000'
	LEFT JOIN STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_ICG_FLAG icg_flag 
	ON (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))) ELSE 'N/A' END) = UPPER(TRIM(icg_flag.POLICY_NO))
	LEFT JOIN (
		select a.*
		, row_number() over(partition by POLICY_NO 
		order by CB_START_DT desc, CB_END_DT desc) as idx 
		FROM FOND_ID.FOND_IFRS17_ICG_STORES a
		Where lower(trim(SUBSYSTEM)) = lower(trim('PruAmanSya'))
		AND PRODUCT_CD = BENEFIT_CD
	) ICGS
	ON (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))) ELSE 'N/A' END) = UPPER(TRIM(CAST(ICGS.POLICY_NO as VARCHAR(36)))) 
	AND ICGS.idx = 1
	LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_DUP dup 
	on (CASE WHEN NULLIF(TRIM(CAST(A.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(A.POLICY_ID AS VARCHAR(36)))) ELSE 'N/A' END) = UPPER(TRIM(CAST(dup.POLICY_ID AS VARCHAR(36))))
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_CB_MAPPING CBM ON CAST('PruAmanS' AS VARCHAR(30)) = CBM.PRODUCT_CD
	AND UPPER(TRIM(CAST('PruAmanSya' AS VARCHAR(20)))) = UPPER(TRIM(CBM.SYSTEM))
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING PFM
	on CAST('PruAmanS' AS VARCHAR(30)) = PFM.PRODUCT_CD AND CAST('IDR' AS VARCHAR(3)) = PFM.CCY_CD 
	AND UPPER(TRIM(CAST('PruAmanSya' AS VARCHAR(20)))) = UPPER(TRIM(PFM.SYSTEM))
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_SET_OF_CONTRACT SC
	ON CAST('PruAmanS' AS VARCHAR(30)) = SC.PRODUCT_CD AND CAST('IDR' AS VARCHAR(3)) = SC.CCY_CD
	AND UPPER(TRIM(CAST('PruAmanSya' AS VARCHAR(20)))) = UPPER(TRIM(SC.SYSTEM))
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG ICC
	ON --TRIM(PFM.PORTFOLIO_GROUP) = TRIM(ICC.PORTFOLIO_GROUP)
	(CASE
      		WHEN ICG_FLAG = 'NEW BUSINESS' THEN
      			CASE
					WHEN PFM.PRODUCT_CD IS NOT NULL THEN
						CASE
							WHEN PFM.VFA_ELIGIBLE = 'N' THEN PFM.PORTFOLIO_GROUP
							WHEN PFM.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PFM.PORTFOLIO_GROUP), 1, LEN(TRIM(PFM.PORTFOLIO_GROUP))-3) + PFM.MEASUREMENT_MODEL
						END 
      			END
			ELSE ICGS.PORTFOLIO_GROUP
		END) = TRIM(ICC.PORTFOLIO_GROUP)
	AND CAST(FORMAT((CASE 	
		WHEN ICGS.POLICY_NO IS NULL THEN  A.LOAN_DATE 
		WHEN ICGS.POLICY_NO IS NOT NULL AND A.DUE_DATE >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
	END),'yyyy') AS NUMERIC(4,0)) = CAST(ICC.COHORT_YEAR AS NUMERIC(4,0))
	AND TRIM(SC.SET_OF_CONTRACT) = TRIM(ICC.SET_OF_CONTRACT)
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE SMT on UPPER(TRIM((CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN
			CAST((CASE 
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IN ('INFORCE','CLAIM') THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE IS NULL THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NOT NULL AND ICGS.STATUS_SOURCE = 'TERMINATED' THEN NULL
					WHEN claim.POLICY_NO IS NULL AND ICGS.STATUS_SOURCE IN ('CLAIM') THEN 'CLAIM'
					WHEN claim.POLICY_NO IS NULL AND A.DUE_DATE >=  @V_START_DATE  THEN 'INFORCE'
					WHEN claim.POLICY_NO IS NULL AND A.DUE_DATE < @V_START_DATE THEN 'TERMINATED'
					END) AS VARCHAR(25))
			ELSE ICGS.STATUS_SOURCE
	END))) = UPPER(TRIM(SMT.STATUS_SOURCE))
	AND UPPER(TRIM(CAST('PruAmanSya' AS VARCHAR(20)))) = UPPER(TRIM(SMT.SYSTEM))
	WHERE dup.POLICY_ID is null
	;

	
	---------------------------------------------------
	--- Get ICG Stores only for non duplicate records
	---------------------------------------------------
	-- insert log process
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	= 'CREATE TABLE ifrs17_icg_stores_PRUAMAN_SYARIAH : ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;

	INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);



	--TRUNCATE TABLE if exists STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH;
	
	--INSERT INTO STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH 
	IF OBJECT_ID('STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH') IS NOT NULL DROP TABLE STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH;
	CREATE TABLE STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH  
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
	as
	SELECT  
	-- icg_stores column
	 ENTITY_ID
	,SYSTEM
	,POLICY_NO
	,PRODUCT_CD
	,BENEFIT_CD
	,CONTRACT_ID
	,PORTFOLIO_GROUP
	,COHORT_YEAR
	--,SC.SET_OF_CONTRACT
	,SET_OF_CONTRACT
	--,ICC.INSURANCE_CONTRACT_GROUP_ID
	,INSURANCE_CONTRACT_GROUP_ID
	--,ICC.ICG_ID_PROPHET
	,ICG_ID_PROPHET
	,ENTRY_MONTH
	,CB_START_DT
	,CASE 
			WHEN CB_START_DT > COVERAGE_LEVEL_END_DATE THEN CB_START_DT 
			ELSE COVERAGE_LEVEL_END_DATE 
		END AS CB_END_DT
	,MEASUREMENT_MODEL
	,INFORCE_FLAG
	,COVERAGE_LEVEL_END_DATE
	,CCY_CD
	,STATUS_SOURCE
	,BEN_EXP_DATE
	,ICG_FLAG
	,SUBSYSTEM
	,CREATED_DATE
	,UPDATED_DATE
	FROM tempdb.dbo.#TMP_IFRS17_ICG_STORES_PRUAMANS_TMP_1
	;

	--------------------------------------------------------------------
	--- Create Table for invalid ICG Stores  IFRS17
	--- will be change after get final structure
	--------------------------------------------------------------------
	-- insert log process
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	= 'CREATE VIEW  FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_INVALID: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;

	INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
	/*IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_INVALID') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_INVALID;
	CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_INVALID  
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
	as
	*/
	INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES_PRUAMAN_SYARIAH_INVALID 
	select 
	a.ENTITY_ID
	,a.SYSTEM
	,a.POLICY_NO
	,a.PRODUCT_CD
	,a.BENEFIT_CD
	,a.CONTRACT_ID
	,a.PORTFOLIO_GROUP
	,a.COHORT_YEAR
	,a.SET_OF_CONTRACT
	,a.INSURANCE_CONTRACT_GROUP_ID
	,a.ICG_ID_PROPHET
	,a.ENTRY_MONTH
	,CB_START_DT as CB_START_DT
	,(case when a.CB_END_DT IS NOT NULL AND a.BEN_EXP_DATE IS NOT NULL THEN (case when a.CB_END_DT <= a.BEN_EXP_DATE then a.CB_END_DT else a.BEN_EXP_DATE end) ELSE NULL end) as CB_END_DT
	,MEASUREMENT_MODEL 
	,INFORCE_FLAG
	,(case when a.COVERAGE_LEVEL_END_DATE IS NOT NULL AND a.BEN_EXP_DATE IS NOT NULL THEN (case when a.COVERAGE_LEVEL_END_DATE <= a.BEN_EXP_DATE then a.COVERAGE_LEVEL_END_DATE else a.BEN_EXP_DATE end) ELSE NULL end) as COVERAGE_LEVEL_END_DATE
	,CCY_CD
	,STATUS_SOURCE
	,BEN_EXP_DATE as BEN_EXP_DATE
	,SUBSYSTEM
	,CREATED_DATE
	,UPDATED_DATE
	,upper(
		(case when NULLIF(TRIM(a.POLICY_NO),'') is null then 'POLICY_NO,' else '' end)+
		(case when NULLIF(TRIM(a.PRODUCT_CD),'') is null then 'PRODUCT_CD,' else '' end)+
		(case when NULLIF(TRIM(a.BENEFIT_CD),'') is null then 'BENEFIT_CD,' else '' end)+
		(case when NULLIF(TRIM(a.CONTRACT_ID),'') is null then 'CONTRACT_ID,' else '' end)+
		(case when NULLIF(TRIM(a.PORTFOLIO_GROUP),'') is null then 'PORTFOLIO_GROUP,' else '' end)+
		(case when a.COHORT_YEAR is null then 'COHORT_YEAR,' else '' end)+
		(case when NULLIF(TRIM(a.SET_OF_CONTRACT),'') is null then 'SET_OF_CONTRACT,' else '' end)+
		(case when NULLIF(TRIM(a.INSURANCE_CONTRACT_GROUP_ID),'') is null then 'INSURANCE_CONTRACT_GROUP_ID,' else '' end)+
		(case when a.ICG_ID_PROPHET is null then 'ICG_ID_PROPHET,' else '' end)+
		(case when a.ENTRY_MONTH is null then 'ENTRY_MONTH,' else '' end)+
		(case when a.CB_START_DT is null then 'CB_START_DT,' else '' end)+
		(case when (case when a.CB_END_DT IS NOT NULL AND a.BEN_EXP_DATE IS NOT NULL THEN (case when a.CB_END_DT <= a.BEN_EXP_DATE then a.CB_END_DT else a.BEN_EXP_DATE end) ELSE NULL end) is null then 'CB_END_DT,' else '' end)+
		(case when NULLIF(TRIM(a.MEASUREMENT_MODEL),'') is null then 'MEASUREMENT_MODEL,' else '' end)+
		(case when NULLIF(TRIM(a.INFORCE_FLAG),'') is null then 'INFORCE_FLAG,' else '' end)+
		(case when (case when a.COVERAGE_LEVEL_END_DATE IS NOT NULL AND a.BEN_EXP_DATE IS NOT NULL THEN (case when a.COVERAGE_LEVEL_END_DATE <= a.BEN_EXP_DATE then a.COVERAGE_LEVEL_END_DATE else a.BEN_EXP_DATE end) ELSE NULL end) is null then 'COVERAGE_LEVEL_END_DATE,' else '' end)+
		(case when NULLIF(TRIM(a.CCY_CD),'') is null then 'CCY_CD,' else '' end)+
		(case when NULLIF(TRIM(a.STATUS_SOURCE),'') is null then 'STATUS_SOURCE,' else '' end) +
		(case when a.BEN_EXP_DATE is null then 'BEN_EXP_DATE,' else '' end) +
		(case when a.CB_START_DT > a.BEN_EXP_DATE then 'CB_START_DT > BEN_EXP_DATE,' else '' end)
	) as INVALID_DESC
	,@BATCH_MASTER_ID AS BATCH_MASTER_ID 
    ,@BATCH_RUN_ID AS BATCH_RUN_ID
    ,@JOB_MASTER_ID AS JOB_MASTER_ID
    ,@JOB_RUN_ID  AS JOB_RUN_ID
    ,@batchdatestr AS BATCHDATE
    ,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
	from STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH a
	where 
	(case 	
		when NULLIF(TRIM(POLICY_NO),'') is null then 'N'
		when NULLIF(TRIM(PRODUCT_CD),'') is null then 'N'
		when NULLIF(TRIM(BENEFIT_CD),'') is null then 'N'
		when NULLIF(TRIM(CONTRACT_ID),'') is null then 'N'
		when NULLIF(TRIM(PORTFOLIO_GROUP),'') is null then 'N'
		when COHORT_YEAR is null then 'N'
		when NULLIF(TRIM(SET_OF_CONTRACT),'') is null then 'N'
		when NULLIF(TRIM(INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
		when ICG_ID_PROPHET is null then 'N'
		when ENTRY_MONTH is null then 'N'
		when CB_START_DT is null then 'N'
		when CB_END_DT is null then 'N'
		when NULLIF(TRIM(MEASUREMENT_MODEL),'') is null then 'N'
		when NULLIF(TRIM(INFORCE_FLAG),'') is null then 'N'
		when COVERAGE_LEVEL_END_DATE is null then 'N'
		when NULLIF(TRIM(CCY_CD),'') is null then 'N'
		when NULLIF(TRIM(STATUS_SOURCE),'') is null then 'N'
		when BEN_EXP_DATE is null then 'N'
		when (CB_START_DT > BEN_EXP_DATE AND STATUS_SOURCE = 'INFORCE') then 'N'
		ELSE 'Y'
	end) = 'N'
	; 


	---------------------------------------------------
	--- Begin transaction
	---------------------------------------------------
		
	--BEGIN TRAN;
	--SET NOCOUNT ON
	
	---------------------------------------------------
	--- Update existing records to ICG Stores Tables for "new business"
	---------------------------------------------------
	-- insert log process
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	= 'update FOND_ID.FOND_IFRS17_ICG_STORES for new business : ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;

	INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	-- update existing records in icg stores for valid new business. update only INFORCE_FLAG='N'
	update FOND_ID.FOND_IFRS17_ICG_STORES 
	set INFORCE_FLAG = 'N', UPDATED_DATE=current_timestamp
	from STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH 
	where UPPER(TRIM(FOND_IFRS17_ICG_STORES.POLICY_NO)) = UPPER(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.POLICY_NO))
	AND STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.ICG_FLAG = 'NEW BUSINESS'
	AND lower(trim(FOND_IFRS17_ICG_STORES.SUBSYSTEM)) = lower(trim('PruAmanSya'))
	AND (case 	
		when NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.POLICY_NO),'') is null then 'N'
		when NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.PRODUCT_CD),'') is null then 'N'
		when NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.BENEFIT_CD),'') is null then 'N'
		when NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.CONTRACT_ID),'') is null then 'N'
		when NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.PORTFOLIO_GROUP),'') is null then 'N'
		when STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.COHORT_YEAR is null then 'N'
		when NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.SET_OF_CONTRACT),'') is null then 'N'
		when NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
		when STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.ICG_ID_PROPHET is null then 'N'
		when STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.ENTRY_MONTH is null then 'N'
		when STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.CB_START_DT is null then 'N'
		when STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.CB_END_DT is null then 'N'
		when NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.MEASUREMENT_MODEL),'') is null then 'N'
		when NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.INFORCE_FLAG),'') is null then 'N'
		when STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.COVERAGE_LEVEL_END_DATE is null then 'N'
		when NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.CCY_CD),'') is null then 'N'
		when NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.STATUS_SOURCE),'') is null then 'N'
		when STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.BEN_EXP_DATE is null then 'N'
		when (STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.CB_START_DT > STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.BEN_EXP_DATE AND STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.STATUS_SOURCE = 'INFORCE') then 'N'
		ELSE 'Y'
	end) = 'Y'
	;

	---------------------------------------------------
	--- Update existing records to ICG Stores Tables
	---------------------------------------------------
	-- insert log process
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	= 'update FOND_ID.FOND_IFRS17_ICG_STORES: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;

	INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	-- update existing records in icg stores.
	update FOND_ID.FOND_IFRS17_ICG_STORES 
	set STATUS_SOURCE = STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.STATUS_SOURCE, INFORCE_FLAG = STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.INFORCE_FLAG, UPDATED_DATE=current_timestamp
	from STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH 
	where UPPER(TRIM(FOND_IFRS17_ICG_STORES.POLICY_NO)) = UPPER(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.POLICY_NO))
	--AND FOND_IFRS17_ICG_STORES.BENEFIT_CD = STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.BENEFIT_CD
	AND lower(trim(FOND_IFRS17_ICG_STORES.SUBSYSTEM)) = lower(trim('PruAmanSya'))
	AND STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.ICG_FLAG = 'UPDATE EXISTING BUSINESS' 
	AND NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.INFORCE_FLAG),'') is not null 
	AND NULLIF(TRIM(STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.STATUS_SOURCE),'') is not null 
	AND FOND_IFRS17_ICG_STORES.CB_START_DT = STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.CB_START_DT
	AND FOND_IFRS17_ICG_STORES.CB_END_DT = STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH.CB_END_DT
	;

	---------------------------------------------------
	--- Insert new valid records to ICG Stores Tables
	---------------------------------------------------
	-- insert log process
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	= 'insert into FOND_ID.FOND_IFRS17_ICG_STORES for new business: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;

	INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	-- insert valid new records to icg stores
	INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES(
	ENTITY_ID
	,SYSTEM
	,POLICY_NO
	,PRODUCT_CD
	,BENEFIT_CD
	,CONTRACT_ID
	,PORTFOLIO_GROUP
	,COHORT_YEAR
	,SET_OF_CONTRACT
	,INSURANCE_CONTRACT_GROUP_ID
	,ICG_ID_PROPHET
	,ENTRY_MONTH
	,CB_START_DT
	,CB_END_DT
	,MEASUREMENT_MODEL
	,INFORCE_FLAG
	,COVERAGE_LEVEL_END_DATE
	,CCY_CD
	,STATUS_SOURCE
	,BEN_EXP_DATE
	,SUBSYSTEM
	,CREATED_DATE
	,UPDATED_DATE
	,BATCH_MASTER_ID
	,BATCH_RUN_ID
	,JOB_MASTER_ID
	,JOB_RUN_ID
	,BATCHDATE
	,ETL_PROCESS_DATE_TIME
	)
	SELECT 
	ENTITY_ID
	,SYSTEM
	,POLICY_NO
	,PRODUCT_CD
	,BENEFIT_CD
	,CONTRACT_ID
	,PORTFOLIO_GROUP
	,COHORT_YEAR
	,SET_OF_CONTRACT
	,INSURANCE_CONTRACT_GROUP_ID
	,ICG_ID_PROPHET
	,ENTRY_MONTH
	,CB_START_DT
	,(case when CB_END_DT <= BEN_EXP_DATE then CB_END_DT else BEN_EXP_DATE end)
	,MEASUREMENT_MODEL
	,INFORCE_FLAG
	,(case when COVERAGE_LEVEL_END_DATE <= BEN_EXP_DATE then COVERAGE_LEVEL_END_DATE else BEN_EXP_DATE end)
	,CCY_CD
	,STATUS_SOURCE
	,BEN_EXP_DATE
	,SUBSYSTEM
	,CREATED_DATE
	,UPDATED_DATE
	,@BATCH_MASTER_ID AS BATCH_MASTER_ID 
    ,@BATCH_RUN_ID AS BATCH_RUN_ID
    ,@JOB_MASTER_ID AS JOB_MASTER_ID
    ,@JOB_RUN_ID  AS JOB_RUN_ID
    ,@batchdatestr AS BATCHDATE
    ,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
	from STAG_ID.STAG_TMP_IFRS17_ICG_STORES_PRUAMAN_SYARIAH
	where ICG_FLAG =  'NEW BUSINESS'
	AND (case 	
		when NULLIF(TRIM(POLICY_NO),'') is null then 'N'
		when NULLIF(TRIM(PRODUCT_CD),'') is null then 'N'
		when NULLIF(TRIM(BENEFIT_CD),'') is null then 'N'
		when NULLIF(TRIM(CONTRACT_ID),'') is null then 'N'
		when NULLIF(TRIM(PORTFOLIO_GROUP),'') is null then 'N'
		when COHORT_YEAR is null then 'N'
		when NULLIF(TRIM(SET_OF_CONTRACT),'') is null then 'N'
		when NULLIF(TRIM(INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
		when ICG_ID_PROPHET is null then 'N'
		when ENTRY_MONTH is null then 'N'
		when CB_START_DT is null then 'N'
		when CB_END_DT is null then 'N'
		when NULLIF(TRIM(MEASUREMENT_MODEL),'') is null then 'N'
		when NULLIF(TRIM(INFORCE_FLAG),'') is null then 'N'
		when COVERAGE_LEVEL_END_DATE is null then 'N'
		when NULLIF(TRIM(CCY_CD),'') is null then 'N'
		when NULLIF(TRIM(STATUS_SOURCE),'') is null then 'N'
		when BEN_EXP_DATE is null then 'N'
		when CB_START_DT > BEN_EXP_DATE then 'N'
		ELSE 'Y'
	end) = 'Y'
	;



	--------------------------------------------------
	--- Create Temporary Table for MP Files based on valid records in ICG Stores
	---------------------------------------------------
	-- insert valid records
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	= 'create table FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN_SYARIAH: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;

	INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


	--DELETE FROM FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN_SYARIAH;
	--TRUNCATE table if exists FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN_SYARIAH;
	/*
	IF OBJECT_ID('FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN_SYARIAH') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN_SYARIAH;
	CREATE TABLE FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN_SYARIAH  
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_ID)
		 ,CLUSTERED INDEX(POLICY_ID)
		)
	as
	*/
	INSERT INTO FOND_ID.FOND_IFRS17_MPFILES_PRUAMAN_SYARIAH 
	SELECT
	-- existing fields
	-- get existing column 
	CAST(PRUAMANS.POLICY_ID AS VARCHAR(36)) AS POLICY_ID
	,PRUAMANS.CONTRACT_OWNER
	,PRUAMANS.CONTRACT_NUMBER
	,PRUAMANS.DISBURSTMENT_MONTH
	,PRUAMANS.SENT_BY
	,PRUAMANS.DELIVERY_DATE
	,PRUAMANS."PLAN"
	,PRUAMANS.LIFE_ASSURED
	,PRUAMANS."ADDRESS"
	,PRUAMANS.GENDER
	,PRUAMANS.ID_NUMBER
	,PRUAMANS.DATE_OF_BIRTH
	,PRUAMANS.NATIONALITY
	,PRUAMANS.BRANCH_NAME
	,PRUAMANS.LOAN_NUMBER
	,PRUAMANS.BENEFICIARY_NAME
	,PRUAMANS.BENEFICIARY_DATE_OF_BIRTH
	,PRUAMANS.RELATION_BETWEEN
	,PRUAMANS."STATUS"
	,PRUAMANS.INITIAL_LOAN
	,PRUAMANS.LAST_TOP_UP
	,PRUAMANS.TOTAL_LOAN
	,PRUAMANS.LOAN_DATE
	,PRUAMANS.DUE_DATE
	,PRUAMANS.PREMIUM_NETT
	,PRUAMANS.PREMIUM_GROSS
	,PRUAMANS.TENOR
	,PRUAMANS.DATE_TOP_UP
	,PRUAMANS.DATE_RESTRUCTURE
	,PRUAMANS.IS_ACTIVE
	,PRUAMANS.CREATED_BY
	,PRUAMANS.CREATED_DATE
	,PRUAMANS.MODIFIED_BY
	,PRUAMANS.MODIFIED_DATE
	,PRUAMANS.UJROH
	,PRUAMANS.IS_SHARIA
	-- additional fields
	,a.PRODUCT_CD
	,b.IFRS_ONEROUS_GRP
	,(case when cast(FORMAT(@V_START_DATE,'yyyy') as numeric(4,0)) = a.COHORT_YEAR then a.ENTRY_MONTH
			when a.COHORT_YEAR < 1997 then 13
			when a.COHORT_YEAR is not null then (a.COHORT_YEAR-1997) + 14
		end) as IFRS_CY_GRP
	,c.IFRS_PORT_GRP
	,c.IFRS_MEASURE_MODEL
	,a.COHORT_YEAR as BASIC_ENTRY_YEAR
	,a.ENTRY_MONTH as BASIC_ENTRY_MONTH
	,(CAST(FORMAT(a.CB_END_DT,'yyyy') AS NUMERIC(4,0))-CAST(FORMAT(a.CB_START_DT,'yyyy') AS NUMERIC(4,0)))*12
	+ (CAST(FORMAT(a.CB_END_DT,'MM') AS NUMERIC(2,0))-CAST(FORMAT(a.CB_START_DT,'MM') AS NUMERIC(2,0))) as IFRS_CB_TERM_M
	,(case when cast(FORMAT(@V_START_DATE,'yyyy') as numeric(4,0)) = a.COHORT_YEAR then a.ENTRY_MONTH when a.COHORT_YEAR is not null then 0 else null end) as MTHS_TO_SALE
	,a.INSURANCE_CONTRACT_GROUP_ID AS IFRS_ICG_ID
	,a.ICG_ID_PROPHET AS IFRS_ICG_ID_PROPHET
	,b.SUB_GROUP_ID
	,a.ENTITY_ID
	,a.CCY_CD
	,a.CB_START_DT
	,a.CB_END_DT
	,(case when cast(FORMAT(@V_START_DATE,'yyyy') as numeric(4,0)) = a.COHORT_YEAR then 
			NULLIF(TRIM(a.INSURANCE_CONTRACT_GROUP_ID),'')+'_'+NULLIF(UPPER(TRIM(FORMAT(a.CB_START_DT,'MMM'))),'') end) 
	as REL_INSURANCE_CONTRACT_GROUP_ID
	,a.STATUS_SOURCE
	,@BATCH_MASTER_ID AS BATCH_MASTER_ID 
    ,@BATCH_RUN_ID AS BATCH_RUN_ID
    ,@JOB_MASTER_ID AS JOB_MASTER_ID
    ,@JOB_RUN_ID  AS JOB_RUN_ID
    ,@batchdatestr AS BATCHDATE
    ,@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
	--,cast('PruAmanSya' as varchar(20)) as SUBSYSTEM
	--,current_timestamp as CREATED_DATE
	--,current_timestamp as UPDATED_DATE
	from STAG_ID.STAG_PRUSYARIAH_STAG_ETL4_POLICY PRUAMANS
	LEFT JOIN (
		select x.*
		, row_number() over(partition by POLICY_NO 
		order by CB_START_DT desc, CB_END_DT desc) as idx 
		FROM FOND_ID.FOND_IFRS17_ICG_STORES x
		where lower(trim(x.SUBSYSTEM)) = lower(trim('PruAmanSya'))
		AND PRODUCT_CD = BENEFIT_CD
	) a
	ON (CASE WHEN NULLIF(TRIM(CAST(PRUAMANS.POLICY_ID AS VARCHAR(36))),'') IS NOT NULL THEN UPPER(TRIM(CAST(PRUAMANS.POLICY_ID as VARCHAR(36)))) ELSE 'N/A' END) = UPPER(TRIM(CAST(a.POLICY_NO as VARCHAR(36)))) 
	AND a.idx = 1
	left join STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG b 
	on a.PORTFOLIO_GROUP = b.PORTFOLIO_GROUP
	and (CASE WHEN (cast(a.COHORT_YEAR as numeric(4,0))) <'2018' THEN '2018' ELSE (cast(a.COHORT_YEAR as numeric(4,0))) END) = cast(b.COHORT_YEAR as numeric(4,0))
	and a.SET_OF_CONTRACT = b.SET_OF_CONTRACT
	left join STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING c 
	on a.PRODUCT_CD = c.PRODUCT_CD AND a.CCY_CD = c.CCY_CD 
	AND UPPER(TRIM(CAST('PruAmanSya' AS VARCHAR(20)))) = UPPER(TRIM(c.SYSTEM))
	;

	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_END 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	='Finish ' + @V_FUNCTION_NAME + ' : ' +  convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;

	INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	--IF @@TRANCOUNT > 0  
	--	COMMIT TRAN;

END TRY
BEGIN CATCH
	    DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
		DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
		DECLARE @ErrorState AS INT = ERROR_STATE()

 		--IF @@TRANCOUNT > 0  
		--	ROLLBACK TRAN; 
		
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)
	
	END CATCH

END


