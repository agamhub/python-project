CREATE PROC [FOND_ID].[USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_OMNI] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@PRD_ID [INTEGER] AS
BEGIN	
	BEGIN TRY
			--declare variable
	DECLARE 
	@V_START			DATETIME,
	@V_END				DATETIME,
	@V_DURATION			DATETIME,
	@V_FUNCTION_NAME	VARCHAR(100),
	@V_DESCRIPTION		VARCHAR(100),
	@V_CMD				VARCHAR(100),
	@V_SEQNO			INTEGER,
	@V_PRD_ID			INTEGER,
	@V_CREATED_DATE		DATETIME,
	@V_START_DATE		DATE,
	@V_END_DATE			DATE,
	
	
	------START GET RUN ID DETAIL FROM ABC------
	@BATCH_MASTER_ID    VARCHAR(20) = 0,
	@BATCH_RUN_ID       VARCHAR(20) = 0,
	@JOB_MASTER_ID      VARCHAR(20) = 0,
	@JOB_RUN_ID         VARCHAR(20) = 0,
	@GMT_START_DTTM     VARCHAR(20) = GETDATE();

	EXEC STAG_ID.USP_GetRunIdReturn
			@JobName        = @JOBNAMESTR,
			@BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
			@BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
			@JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
			@JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
			@GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
	------END GET RUN ID DETAIL FROM ABC--------- 
  
	--------set variable----------------
	SET @V_FUNCTION_NAME = 'FOND_ID.USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_OMNI';
	SET @V_SEQNO = 1;
	SET @V_START_DATE = CONVERT(DATE, CONVERT(CHAR(10), @PRD_ID));
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('Start ', @V_FUNCTION_NAME, ' : ', @V_START_DATE)
	  	   
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	-----------------------------
	--- DROP ALL TEMPORARY TABLES
	-----------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('DROP ALL TEMPORARY TABLES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	--Drop temp object if exists
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_0', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_0;
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_1', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_1;
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_2', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_2;
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_INVALID', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_INVALID;

	--Drop permanent object if exists
	IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_DUP','U') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_DUP;
	IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_OMNI','U') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_OMNI;
	IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_INVALID','U') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_INVALID;
	
	--IF OBJECT_ID('FOND_ID.FOND_IFRS17_MPFILES_PROPTRDB','U') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_MPFILES_PROPTRDB;
	 TRUNCATE TABLE FOND_ID.FOND_IFRS17_MPFILES_OMNI;
	--TRUNCATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_INVALID;

	---------------------------------------------------------------------
	--- CREATE TABLE TO STORE DUPLICATE POLICY_NO IN THE SOURCE TABLE
	---------------------------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('CREATE TABLE TO STORE DUPLICATE POLICY_NUMBER IN THE SOURCE TABLE : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	
	CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_DUP
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NUMBER),
	  CLUSTERED INDEX(POLICY_NUMBER)
    )
	AS
	SELECT OMNI_REPORT_PROPHET_CUSTOMER.*
	FROM
	  (
		SELECT 
			*,
			PRODUCT_CODE AS PROD_CD
		FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER
	  ) OMNI_REPORT_PROPHET_CUSTOMER 
	  LEFT JOIN
	  (
		SELECT
			CERTIFICATE_MEMBER_CARD_ID,
			PRODUCT_CODE AS PROD_CD
		FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER
		GROUP BY CERTIFICATE_MEMBER_CARD_ID,
			PRODUCT_CODE
		HAVING COUNT(*) > 1
	  ) OMNI_REPORT_PROPHET_CUSTOMER_DUP
	  ON OMNI_REPORT_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID = OMNI_REPORT_PROPHET_CUSTOMER_DUP.CERTIFICATE_MEMBER_CARD_ID
	  AND OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD = OMNI_REPORT_PROPHET_CUSTOMER_DUP.PROD_CD
	  
	  WHERE OMNI_REPORT_PROPHET_CUSTOMER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NOT NULL
	  AND (OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD IS NOT NULL AND OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD <> '')
	;

	---------------------------------------------------------------------
	--- CREATE POLICY NUMBER THAT HAVE DIFFERENT PRODUCT AND BENEFIT CODE
	---------------------------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('CREATE POLICY NUMBER THAT HAVE DIFFERENT PRODUCT AND BENEFIT CODE: ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_0
	WITH
	(
		HEAP, DISTRIBUTION = ROUND_ROBIN
	)
	AS
	 SELECT DISTINCT OMNI_REPORT_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID AS POLICY_NO,MEMBER_STATUS AS STATUS_SOURCE 
		FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER OMNI_REPORT_PROPHET_CUSTOMER
		 LEFT JOIN
		 (
		 SELECT	
					POLICY_NO,
					PRODUCT_CD,
					BENEFIT_CD
					FROM FOND_ID.FOND_IFRS17_ICG_STORES
				WHERE UPPER(SUBSYSTEM) = 'OMNI'
				AND PRODUCT_CD=BENEFIT_CD
				AND STATUS_SOURCE <> 'INACTIVE'
		)ICGS_BASIC 
		ON OMNI_REPORT_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID = ICGS_BASIC.POLICY_NO
	WHERE 
		OMNI_REPORT_PROPHET_CUSTOMER.PRODUCT_CODE<>ICGS_BASIC.PRODUCT_CD OR OMNI_REPORT_PROPHET_CUSTOMER.PRODUCT_CODE <> ICGS_BASIC.BENEFIT_CD
	;

	--	--------------------------------------------------------------------------------------
--	--- UPDATE TABLE ICG STORES FOR POLICY NUMBER THAT HAVE DIFFERENT PRODUCT AND BENEFIT CODE
--	------------------------------------------------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('UPDATE TABLE ICG STORES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	
	UPDATE FOND_ID.FOND_IFRS17_ICG_STORES
      SET
        INFORCE_FLAG = STATUS_MAP.INFORCE_FLAG,
		STATUS_SOURCE = 'INACTIVE'
      FROM FOND_ID.FOND_IFRS17_ICG_STORES ICG_BASIC
      INNER JOIN tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_0 INACTIVE_POLICY
		ON ICG_BASIC.POLICY_NO = INACTIVE_POLICY.POLICY_NO
	  LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE AS STATUS_MAP  
		ON INACTIVE_POLICY.STATUS_SOURCE = STATUS_MAP.STATUS_SOURCE
		AND UPPER(STATUS_MAP.SYSTEM) = 'OMNI'
	WHERE UPPER(ICG_BASIC.SUBSYSTEM) = 'OMNI'
		AND INACTIVE_POLICY.POLICY_NO IS NULL
	;
	
	------------------------------------------------
	--- INSERT NEW BUSINESS TO ICG STORES TEMP TABLE
	--- THESE STEP WILL DIVIDE INTO 2 TEMP TABLE.
	------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT NEW BUSINESS TO ICG STORES TEMP TABLE 01: ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
--
--	-----------------------------------------------
--	--create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDB_TMP_1
--	-----------------------------------------------
	CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_1
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
	AS
	 SELECT 
	    'IAI' AS ENTITY_ID,
		'OMNI' AS SYSTEM,
		CAST(NULLIF(TRIM(OMNI_REPORT_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID), '') AS VARCHAR) AS POLICY_NO,
		OMNI_REPORT_PROPHET_CUSTOMER.PRODUCT_CODE AS PROD_CD,
        (NULLIF(TRIM(OMNI_REPORT_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID), '') + '-' + 
			FORMAT((
			CASE 
				WHEN ICG_STORES.POLICY_NO IS NULL THEN  CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.ISSUE_DATE)))
				WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.PAID_TO_DATE_LAST_PAYMENT_DATE)))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN DATEADD(DAY, 1, ICG_STORES.CB_END_DT)
			ELSE ICG_STORES.CB_START_DT END),'yyyy')) 
		AS CONTRACT_ID,
		CASE
      		WHEN ICG_STORES.POLICY_NO IS NULL THEN
      			CASE
					WHEN PORTFOLIO_MAP.PRODUCT_CD IS NOT NULL THEN
						CASE
							WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'N' THEN PORTFOLIO_MAP.PORTFOLIO_GROUP
							WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP), 1, LEN(TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP))-3) + PORTFOLIO_MAP.MEASUREMENT_MODEL
						END 
      			END
			ELSE ICG_STORES.PORTFOLIO_GROUP
		END AS PORTFOLIO_GROUP,
		DATEPART(YEAR, (
			CASE 
				WHEN ICG_STORES.POLICY_NO IS NULL THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.ISSUE_DATE)))
				WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.PAID_TO_DATE_LAST_PAYMENT_DATE)))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN DATEADD(DAY, 1, ICG_STORES.CB_END_DT)
			ELSE ICG_STORES.CB_START_DT END))  
		AS COHORT_YEAR,
	    SET_OF_CONTRACT.SET_OF_CONTRACT,
        ICG_CONFIG.INSURANCE_CONTRACT_GROUP_ID,
        ICG_CONFIG.ICG_ID_PROPHET,
		DATEPART(MONTH, (
			CASE
				WHEN ICG_STORES.POLICY_NO IS NULL THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.ISSUE_DATE)))
				WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.PAID_TO_DATE_LAST_PAYMENT_DATE)))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) 
					THEN DATEADD(DAY, 1, ICG_STORES.CB_END_DT)
				ELSE ICG_STORES.CB_START_DT END)) 
		AS ENTRY_MONTH,
		CASE
		      --WHEN ICG_STORES.POLICY_NO IS NULL THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.RISK_COMMENCEMENT_DATE_RCD)))
		      WHEN ICG_STORES.POLICY_NO IS NULL THEN 
		      	CASE 
		      		WHEN OMNI_REPORT_PROPHET_CUSTOMER.ISSUE_DATE < OMNI_REPORT_PROPHET_CUSTOMER.RISK_COMMENCEMENT_DATE_RCD 
		      			THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.ISSUE_DATE)))
		      		ELSE CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.RISK_COMMENCEMENT_DATE_RCD)))
		      	END 
			  WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.PAID_TO_DATE_LAST_PAYMENT_DATE)))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) 
				THEN DATEADD(DAY, 1, ICG_STORES.CB_END_DT)
		      ELSE ICG_STORES.CB_START_DT
		END
		AS CB_START_DT,
		PORTFOLIO_MAP.MEASUREMENT_MODEL,
        STATUS_MAP.INFORCE_FLAG,
        CASE
		      --WHEN ICG_STORES.POLICY_NO IS NULL THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.RISK_COMMENCEMENT_DATE_RCD)))
		      	WHEN ICG_STORES.POLICY_NO IS NULL THEN 
		      	CASE 
		      		WHEN OMNI_REPORT_PROPHET_CUSTOMER.ISSUE_DATE < OMNI_REPORT_PROPHET_CUSTOMER.RISK_COMMENCEMENT_DATE_RCD 
		      			THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.RISK_COMMENCEMENT_DATE_RCD)))
		      		ELSE CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.ISSUE_DATE)))
		      	END 
			  WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.PAID_TO_DATE_LAST_PAYMENT_DATE)))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN DATEADD(DAY, 1, ICG_STORES.CB_END_DT)
		      ELSE ICG_STORES.CB_START_DT
		END
		AS COVERAGE_LEVEL_START_DATE,
		OMNI_REPORT_PROPHET_CUSTOMER.BEN_EXP_DATE,
        OMNI_REPORT_PROPHET_CUSTOMER.CURRENCY AS CCY_CD,
        OMNI_REPORT_PROPHET_CUSTOMER.MEMBER_STATUS AS STATUS_SOURCE,
        OMNI_REPORT_PROPHET_CUSTOMER.PAID_TO_DATE_LAST_PAYMENT_DATE AS PAID_TO_DATE_LAST_PAYMENT_DATE,
        CB_MAP.BOUND_BY_REPRICE AS CURR_BOUND_BY_REPRICE,
		CB_MAP.POINT_OF_BOUNDARY_REPRICE AS CURR_POINT_OF_BOUNDARY_REPRICE,
        CB_MAP.BOUND_BY_TERMINATION_PROVISION AS CURR_BOUND_BY_TERMINATION_PROVISION,
		CB_MAP.POINT_OF_BOUNDARY_TERMINATION AS CURR_POINT_OF_BOUNDARY_TERMINATION,
        ICG_STORES.POLICY_NO AS CURR_POLICY_NO,
        ICG_STORES.CB_START_DT AS CURR_CB_START_DT,
        ICG_STORES.CB_END_DT AS CURR_CB_END_DT,
        ICG_STORES.STATUS_SOURCE AS CURR_STATUS_SOURCE,
        ICG_STORES.POLICY_NO AS FLAG_NEW_BUSSINESS
	    FROM
			(
	              SELECT *,
	                  PRODUCT_CODE AS PROD_CD,
                      MEMBER_STATUS STATUS_SOURCE,
                       CASE
                         --WHEN EXIT_DATE_OF_THE_PARTICIPANT_DUE_TO_RESIGNATION_OR_DEATH IS NULL THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.EXPIRY_DATE))) 
                         --WHEN EXPIRY_DATE IS NULL THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, EXIT_DATE_OF_THE_PARTICIPANT_DUE_TO_RESIGNATION_OR_DEATH)))
						 WHEN EXPIRY_DATE IS NULL THEN NULL
						 WHEN EXIT_DATE_OF_THE_PARTICIPANT_DUE_TO_RESIGNATION_OR_DEATH IS NOT NULL AND EXPIRY_DATE IS NOT NULL THEN 
                             CASE
							 WHEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, EXIT_DATE_OF_THE_PARTICIPANT_DUE_TO_RESIGNATION_OR_DEATH)))  < CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT,EXPIRY_DATE))) 
					 				THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, EXIT_DATE_OF_THE_PARTICIPANT_DUE_TO_RESIGNATION_OR_DEATH))) 
							ELSE
								CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, EXPIRY_DATE)))
							END 
	                    ELSE CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, EXPIRY_DATE))) 				 
                       END AS BEN_EXP_DATE
                       
	              FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER OMNI_REPORT_PROPHET_CUSTOMER
	        ) OMNI_REPORT_PROPHET_CUSTOMER
	            
		  LEFT JOIN
		    (
	        SELECT
				POLICY_NO,
				CB_START_DT,
				CB_END_DT,
				STATUS_SOURCE,
				PORTFOLIO_GROUP,
				SET_OF_CONTRACT,
				INSURANCE_CONTRACT_GROUP_ID,
				ICG_ID_PROPHET,
				CCY_CD,
				PRODUCT_CD,
				BENEFIT_CD,
				ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC, INFORCE_FLAG DESC) AS ROWNUM_POLICY_NO
			FROM FOND_ID.FOND_IFRS17_ICG_STORES
			WHERE UPPER(SUBSYSTEM) = 'OMNI'
			AND PRODUCT_CD=BENEFIT_CD
			) ICG_STORES 
				ON NULLIF(TRIM(OMNI_REPORT_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID), '') = ICG_STORES.POLICY_NO
				AND OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD=ICG_STORES.PRODUCT_CD
				--AND OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD=ICG_STORES.BENEFIT_CD
				AND ICG_STORES.ROWNUM_POLICY_NO = 1
	        LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING AS PORTFOLIO_MAP
                ON OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD = PORTFOLIO_MAP.PRODUCT_CD
                AND OMNI_REPORT_PROPHET_CUSTOMER.CURRENCY = PORTFOLIO_MAP.CCY_CD
                AND UPPER(PORTFOLIO_MAP.SYSTEM) = 'OMNI'
	        LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_SET_OF_CONTRACT AS SET_OF_CONTRACT
                ON OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD = SET_OF_CONTRACT.PRODUCT_CD
				AND OMNI_REPORT_PROPHET_CUSTOMER.CURRENCY = SET_OF_CONTRACT.CCY_CD
				AND UPPER(SET_OF_CONTRACT.SYSTEM) = 'OMNI'
			LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE AS STATUS_MAP  
                ON OMNI_REPORT_PROPHET_CUSTOMER.STATUS_SOURCE = STATUS_MAP.STATUS_SOURCE
                AND UPPER(STATUS_MAP.SYSTEM) = 'OMNI'
			LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_CB_MAPPING AS CB_MAP
				ON OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD = CB_MAP.PRODUCT_CD
                AND UPPER(CB_MAP.SYSTEM) = 'OMNI'
			LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG AS ICG_CONFIG
                ON DATEPART(YEAR, (
					CASE 
					WHEN ICG_STORES.POLICY_NO IS NULL THEN CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.ISSUE_DATE)))
					WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, CONVERT(DATE, CONVERT(CHAR(10), CONVERT(INT, OMNI_REPORT_PROPHET_CUSTOMER.PAID_TO_DATE_LAST_PAYMENT_DATE)))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN DATEADD(DAY, 1, ICG_STORES.CB_END_DT)
				ELSE ICG_STORES.CB_START_DT END)) = ICG_CONFIG.COHORT_YEAR
                AND (
	                CASE
			      		WHEN ICG_STORES.POLICY_NO IS NULL THEN
			      			CASE
								WHEN PORTFOLIO_MAP.PRODUCT_CD IS NOT NULL THEN
									CASE
										WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'N' THEN PORTFOLIO_MAP.PORTFOLIO_GROUP
										WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP), 1, LEN(TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP))-3) + PORTFOLIO_MAP.MEASUREMENT_MODEL
									END 
			      			END
						ELSE ICG_STORES.PORTFOLIO_GROUP
					END                
                ) = ICG_CONFIG.PORTFOLIO_GROUP
                AND SET_OF_CONTRACT.SET_OF_CONTRACT = ICG_CONFIG.SET_OF_CONTRACT
			LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_DUP AS OMNI_DUP
	            ON NULLIF(TRIM(OMNI_REPORT_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID),'') = NULLIF(TRIM(OMNI_DUP.CERTIFICATE_MEMBER_CARD_ID), '')
	            AND OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD = OMNI_DUP.PROD_CD
			LEFT JOIN tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_0 INVALID_ICG_STORES
				ON OMNI_REPORT_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID = INVALID_ICG_STORES.POLICY_NO
	          WHERE NULLIF(TRIM(OMNI_DUP.CERTIFICATE_MEMBER_CARD_ID), '') IS NULL
				AND INVALID_ICG_STORES.POLICY_NO IS NULL
		;
	
	------------------------------------------------
	--- INSERT NEW BUSINESS TO ICG STORES TEMP TABLE
	--- THESE STEP WILL DIVIDE INTO 2 TEMP TABLE.
	------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT NEW BUSINESS TO ICG STORES TEMP TABLE 02: ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_2
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
	AS
	SELECT *,
           	(CASE
		      WHEN CURR_BOUND_BY_REPRICE = 'N' AND CURR_BOUND_BY_TERMINATION_PROVISION = 'N' THEN BEN_EXP_DATE
	              WHEN CURR_BOUND_BY_REPRICE = 'Y' AND CURR_BOUND_BY_TERMINATION_PROVISION = 'N' THEN
                        CASE
                          WHEN CB_START_DT IS NULL OR BEN_EXP_DATE IS NULL THEN NULL
                          WHEN DATEADD(MONTH, COALESCE(CURR_POINT_OF_BOUNDARY_REPRICE, 0),(
	                           CASE
	                             WHEN CURR_POLICY_NO IS NULL THEN CB_START_DT
	                             WHEN (DATEADD(DAY, -1, OMNI_REPORT_PROPHET_CUSTOMER.PAID_TO_DATE_LAST_PAYMENT_DATE) > CURR_CB_END_DT
									 OR (CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > CURR_CB_END_DT)) THEN DATEADD(DAY, 1, CURR_CB_END_DT) 
                                     ELSE CURR_CB_START_DT
								 END
	                         )) <= BEN_EXP_DATE THEN
							  DATEADD(MONTH, COALESCE(CURR_POINT_OF_BOUNDARY_REPRICE, 0),(
	                           CASE
	                            WHEN CURR_POLICY_NO IS NULL THEN CB_START_DT
	                            WHEN (DATEADD(DAY, -1, OMNI_REPORT_PROPHET_CUSTOMER.PAID_TO_DATE_LAST_PAYMENT_DATE) > CURR_CB_END_DT
									 OR (CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > CURR_CB_END_DT)) THEN DATEADD(DAY, 1, CURR_CB_END_DT) 
                                     ELSE CURR_CB_START_DT
	                            END
	                         ))
                            ELSE BEN_EXP_DATE
                          END

	                WHEN CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND CURR_BOUND_BY_REPRICE = 'N' THEN
                          CASE
                            WHEN CB_START_DT IS NULL OR BEN_EXP_DATE IS NULL THEN NULL
                            WHEN DATEADD(MONTH, COALESCE(CURR_POINT_OF_BOUNDARY_TERMINATION, 0),(
	                           CASE
	                            WHEN CURR_POLICY_NO IS NULL THEN CB_START_DT
	                            WHEN (DATEADD(DAY, -1, OMNI_REPORT_PROPHET_CUSTOMER.PAID_TO_DATE_LAST_PAYMENT_DATE) > CURR_CB_END_DT
									 OR (CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > CURR_CB_END_DT)) THEN DATEADD(DAY, 1, CURR_CB_END_DT) 
                                     ELSE CURR_CB_START_DT
	                            END
	                           ))<= BEN_EXP_DATE THEN
                               DATEADD(MONTH, COALESCE(CURR_POINT_OF_BOUNDARY_TERMINATION, 0),(
	                           CASE
	                            WHEN CURR_POLICY_NO IS NULL THEN CB_START_DT
	                            WHEN (DATEADD(DAY, -1, OMNI_REPORT_PROPHET_CUSTOMER.PAID_TO_DATE_LAST_PAYMENT_DATE) > CURR_CB_END_DT
									 OR (CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > CURR_CB_END_DT)) THEN DATEADD(DAY, 1, CURR_CB_END_DT) 
                                     ELSE CURR_CB_START_DT
	                            END
	                           ))
                            ELSE BEN_EXP_DATE
                          END
	                ELSE CURR_CB_END_DT
		    END) AS COVERAGE_LEVEL_END_DATE

       FROM tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_1 AS OMNI_REPORT_PROPHET_CUSTOMER
	;
	
	-------------------------------------------------
	--Union 2 Temp Table and ingest the result to TMP_IFRS17_ICG_STORES_OMNI
	-------------------------------------------------
	
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT DATA TO TMP_IFRS17_ICG_STORES_OMNI: ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);


	CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_OMNI
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  CLUSTERED INDEX(POLICY_NO)
    )
	AS
	SELECT 
		ENTITY_ID,
		SYSTEM,
		POLICY_NO,
		PROD_CD,
        CONTRACT_ID,
		PORTFOLIO_GROUP,
		COHORT_YEAR,
	    SET_OF_CONTRACT,
        INSURANCE_CONTRACT_GROUP_ID,
        ICG_ID_PROPHET,
		ENTRY_MONTH,
		CB_START_DT,
		MEASUREMENT_MODEL,
        INFORCE_FLAG,
        COVERAGE_LEVEL_START_DATE,
		BEN_EXP_DATE,
        CCY_CD,
        STATUS_SOURCE,
        PAID_TO_DATE_LAST_PAYMENT_DATE,
        CURR_BOUND_BY_REPRICE,
		CURR_POINT_OF_BOUNDARY_REPRICE,
        CURR_BOUND_BY_TERMINATION_PROVISION,
		CURR_POINT_OF_BOUNDARY_TERMINATION,
        CURR_POLICY_NO,
        CURR_CB_START_DT,
        CURR_CB_END_DT,
        CURR_STATUS_SOURCE,
        FLAG_NEW_BUSSINESS,
		CB_END_DT,
		COVERAGE_LEVEL_END_DATE,
	    CASE
			WHEN (
			   CURR_POLICY_NO IS NULL
			   OR (
					COALESCE(STATUS_SOURCE, '') = 'INFORCE'
					AND
											  
					(
					   (CURR_BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY, -1, PAID_TO_DATE_LAST_PAYMENT_DATE) > CURR_CB_END_DT))
					   OR (CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > CURR_CB_END_DT)
					)
								  
					  
				  )
			 ) THEN 'INSERT'
		WHEN (
			   (COALESCE(STATUS_SOURCE, '') <> CURR_STATUS_SOURCE)
			   OR (COALESCE(STATUS_SOURCE, '') = CURR_STATUS_SOURCE AND CURR_STATUS_SOURCE = 'INFORCE' AND CB_END_DT <> CURR_CB_END_DT)
			   OR (CURR_BOUND_BY_REPRICE = 'N' AND CURR_BOUND_BY_TERMINATION_PROVISION = 'N' AND CURR_STATUS_SOURCE <> 'INFORCE')
			   OR (CURR_BOUND_BY_REPRICE= 'Y' AND (DATEADD(DAY, -1, PAID_TO_DATE_LAST_PAYMENT_DATE) <= CURR_CB_END_DT) AND CURR_STATUS_SOURCE <> 'INFORCE')
			 ) THEN 'UPDATE'
		ELSE 'NO UPDATE'
		END AS FLAG_INSERT_UPDATE
        FROM ( 
		SELECT 	*,
			CASE 
			WHEN CB_START_DT > COVERAGE_LEVEL_END_DATE THEN CB_START_DT 
			ELSE COVERAGE_LEVEL_END_DATE 
		END AS CB_END_DT
		FROM tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_2
		)A
	;
	
	
--	--------------------------------------------------------------
--	--- create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_INVALID
--	--------------------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_INVALID : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	
	CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_INVALID
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
    AS
	SELECT
          COALESCE(POLICY_NO, 'N/A') AS POLICY_NO
		  FROM STAG_ID.TMP_IFRS17_ICG_STORES_OMNI
		  WHERE FLAG_INSERT_UPDATE IN('INSERT', 'UPDATE')
		  AND
		   (
			 POLICY_NO IS NULL
			 OR PROD_CD IS NULL
			 OR CONTRACT_ID IS NULL
			 OR PORTFOLIO_GROUP IS NULL
			 OR COHORT_YEAR IS NULL
			 OR SET_OF_CONTRACT IS NULL
			 OR INSURANCE_CONTRACT_GROUP_ID IS NULL
			 OR ICG_ID_PROPHET IS NULL
			 OR ENTRY_MONTH IS NULL
			 OR CB_START_DT IS NULL
			 OR CB_END_DT IS NULL
			 OR MEASUREMENT_MODEL IS NULL
			 OR INFORCE_FLAG IS NULL
			 OR COVERAGE_LEVEL_END_DATE IS NULL
			 OR CCY_CD IS NULL
			 OR STATUS_SOURCE IS NULL
			 OR BEN_EXP_DATE IS NULL
			 OR (CB_START_DT > BEN_EXP_DATE AND STATUS_SOURCE = 'INFORCE')
		   )
	;
	
--	
--	---------------------------
--	--- UPDATE TABLE ICG STORES
--	---------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('UPDATE TABLE ICG STORES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	
	UPDATE FOND_IFRS17_ICG_STORES
      SET
        INFORCE_FLAG = (CASE
                          WHEN ICG_STORES_OMNI_TMP.FLAG_INSERT_UPDATE = 'INSERT' THEN 'N'
                      WHEN (ICG_STORES_OMNI_TMP.STATUS_SOURCE = FOND_IFRS17_ICG_STORES.STATUS_SOURCE AND FOND_IFRS17_ICG_STORES.STATUS_SOURCE = 'INFORCE' AND ICG_STORES_OMNI_TMP.CB_END_DT <> FOND_IFRS17_ICG_STORES.CB_END_DT AND ICG_STORES_OMNI_TMP.FLAG_INSERT_UPDATE = 'INSERT') THEN 'N'
                          ELSE ICG_STORES_OMNI_TMP.INFORCE_FLAG
                        END),
		STATUS_SOURCE = (CASE
                       WHEN ICG_STORES_OMNI_TMP.FLAG_INSERT_UPDATE = 'INSERT' THEN FOND_IFRS17_ICG_STORES.STATUS_SOURCE
                           ELSE ICG_STORES_OMNI_TMP.STATUS_SOURCE
                         END),
        UPDATED_DATE = CURRENT_TIMESTAMP
		FROM FOND_ID.FOND_IFRS17_ICG_STORES  FOND_IFRS17_ICG_STORES
		JOIN
    (
      SELECT
        POLICY_NO,
        PRODUCT_CD,
        CB_START_DT,
        CB_END_DT,
        ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_BASIC_POLICY
      FROM FOND_ID.FOND_IFRS17_ICG_STORES
      WHERE PRODUCT_CD = BENEFIT_CD
      AND UPPER(SYSTEM) = 'OMNI'
    ) AS LATEST_ICGS
    ON LATEST_ICGS.POLICY_NO = FOND_IFRS17_ICG_STORES.POLICY_NO
    AND LATEST_ICGS.PRODUCT_CD = FOND_IFRS17_ICG_STORES.PRODUCT_CD
    AND LATEST_ICGS.CB_START_DT = FOND_IFRS17_ICG_STORES.CB_START_DT
    AND LATEST_ICGS.CB_END_DT = FOND_IFRS17_ICG_STORES.CB_END_DT
    AND LATEST_ICGS.ROWNUM_BASIC_POLICY = 1
      JOIN STAG_ID.TMP_IFRS17_ICG_STORES_OMNI ICG_STORES_OMNI_TMP
	  ON ICG_STORES_OMNI_TMP.POLICY_NO = FOND_IFRS17_ICG_STORES.POLICY_NO
      LEFT JOIN tempdb.dbo.#TMP_IFRS17_ICG_STORES_OMNI_TMP_INVALID ICG_STORES_TMP_INVALID
      ON ICG_STORES_OMNI_TMP.POLICY_NO = ICG_STORES_TMP_INVALID.POLICY_NO
	WHERE ICG_STORES_OMNI_TMP.POLICY_NO = FOND_IFRS17_ICG_STORES.POLICY_NO
	AND UPPER(FOND_IFRS17_ICG_STORES.SUBSYSTEM) = 'OMNI'
      	AND ICG_STORES_OMNI_TMP.FLAG_INSERT_UPDATE IN('INSERT', 'UPDATE')
      	AND ICG_STORES_TMP_INVALID.POLICY_NO IS NULL

	;
	

--	---------------------------------------
--	--- INSERT NEW VALID DATA TO ICG_STORES
--	---------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT NEW VALID DATA TO ICG_STORES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	
	INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES
    SELECT
                ICG_STORES_TMP.ENTITY_ID,
                ICG_STORES_TMP.SYSTEM,
                ICG_STORES_TMP.POLICY_NO,
                ICG_STORES_TMP.PROD_CD AS PRODUCT_CD,
                ICG_STORES_TMP.PROD_CD AS BENEFIT_CD,
                ICG_STORES_TMP.CONTRACT_ID,
                ICG_STORES_TMP.PORTFOLIO_GROUP,
                ICG_STORES_TMP.COHORT_YEAR,
                ICG_STORES_TMP.SET_OF_CONTRACT,
                ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID,
                ICG_STORES_TMP.ICG_ID_PROPHET,
                ICG_STORES_TMP.ENTRY_MONTH,
                ICG_STORES_TMP.CB_START_DT,
                ICG_STORES_TMP.CB_END_DT,
                ICG_STORES_TMP.MEASUREMENT_MODEL,
                ICG_STORES_TMP.INFORCE_FLAG,
                ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE,
                ICG_STORES_TMP.CCY_CD,
                ICG_STORES_TMP.STATUS_SOURCE,
                ICG_STORES_TMP.BEN_EXP_DATE,
                CAST('OMNI' as VARCHAR(20)) AS SUBSYSTEM,
                CURRENT_TIMESTAMP AS CREATED_DATE,
                CURRENT_TIMESTAMP AS UPDATED_DATE,
                @BATCH_MASTER_ID AS BATCH_MASTER_ID,
		        @BATCH_RUN_ID AS BATCH_RUN_ID,
		      	@JOB_MASTER_ID AS JOB_MASTER_ID,
		      	@JOB_RUN_ID AS JOB_RUN_ID,
			  	@BATCHDATESTR AS BATCHDATE,
		      	@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
              FROM STAG_ID.TMP_IFRS17_ICG_STORES_OMNI ICG_STORES_TMP
              WHERE ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'INSERT'
	  AND ICG_STORES_TMP.POLICY_NO IS NOT NULL
	  AND ICG_STORES_TMP.PROD_CD IS NOT NULL
	  AND ICG_STORES_TMP.CONTRACT_ID IS NOT NULL
	  AND ICG_STORES_TMP.PORTFOLIO_GROUP IS NOT NULL
	  AND ICG_STORES_TMP.COHORT_YEAR IS NOT NULL
	  AND ICG_STORES_TMP.SET_OF_CONTRACT IS NOT NULL
	  AND ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID IS NOT NULL
	  AND ICG_STORES_TMP.ICG_ID_PROPHET IS NOT NULL
	  AND ICG_STORES_TMP.ENTRY_MONTH IS NOT NULL
	  AND ICG_STORES_TMP.CB_START_DT IS NOT NULL
	  AND ICG_STORES_TMP.CB_END_DT IS NOT NULL
	  AND ICG_STORES_TMP.MEASUREMENT_MODEL IS NOT NULL
	  AND ICG_STORES_TMP.INFORCE_FLAG IS NOT NULL
	  AND ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE IS NOT NULL
	  AND ICG_STORES_TMP.CCY_CD IS NOT NULL
	  AND ICG_STORES_TMP.STATUS_SOURCE IS NOT NULL
	  AND ICG_STORES_TMP.BEN_EXP_DATE IS NOT NULL
	  AND (ICG_STORES_TMP.CB_START_DT <= ICG_STORES_TMP.BEN_EXP_DATE OR ICG_STORES_TMP.STATUS_SOURCE <> 'INFORCE')
	;
--	
--	---------------------------------------------
--	--- INSERT INVALID DATA TO ICG_STORES_INVALID
--	---------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT INVALID DATA TO ICG_STORES_INVALID : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	
	CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_INVALID 
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  CLUSTERED INDEX(POLICY_NO)
    )
	AS
	  SELECT
		ICG_STORES_TMP.ENTITY_ID,
		ICG_STORES_TMP.SYSTEM,
		ICG_STORES_TMP.POLICY_NO,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.PRODUCT_CD ELSE ICG_STORES_TMP.PROD_CD END AS PRODUCT_CD,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.PRODUCT_CD ELSE ICG_STORES_TMP.PROD_CD END AS BENEFIT_CD,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.CONTRACT_ID ELSE ICG_STORES_TMP.CONTRACT_ID END AS CONTRACT_ID,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.PORTFOLIO_GROUP ELSE ICG_STORES_TMP.PORTFOLIO_GROUP END AS PORTFOLIO_GROUP,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.COHORT_YEAR ELSE ICG_STORES_TMP.COHORT_YEAR END AS COHORT_YEAR,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.SET_OF_CONTRACT ELSE ICG_STORES_TMP.SET_OF_CONTRACT END AS SET_OF_CONTRACT,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.INSURANCE_CONTRACT_GROUP_ID ELSE ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID END AS INSURANCE_CONTRACT_GROUP_ID,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.ICG_ID_PROPHET ELSE ICG_STORES_TMP.ICG_ID_PROPHET END AS ICG_ID_PROPHET,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.ENTRY_MONTH ELSE ICG_STORES_TMP.ENTRY_MONTH END AS ENTRY_MONTH,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.CB_START_DT ELSE ICG_STORES_TMP.CB_START_DT END AS CB_START_DT,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.CB_END_DT ELSE ICG_STORES_TMP.CB_END_DT END AS CB_END_DT,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.MEASUREMENT_MODEL ELSE ICG_STORES_TMP.MEASUREMENT_MODEL END AS MEASUREMENT_MODEL,
		ICG_STORES_TMP.INFORCE_FLAG AS INFORCE_FLAG,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.COVERAGE_LEVEL_END_DATE ELSE ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE END AS COVERAGE_LEVEL_END_DATE,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.CCY_CD ELSE ICG_STORES_TMP.CCY_CD END AS CCY_CD,
		ICG_STORES_TMP.STATUS_SOURCE AS STATUS_SOURCE,
		CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.BEN_EXP_DATE ELSE ICG_STORES_TMP.BEN_EXP_DATE END AS BEN_EXP_DATE,
		cast('OMNI' as VARCHAR(20)) AS SUBSYSTEM,
		CURRENT_TIMESTAMP AS CREATED_DATE,
		CURRENT_TIMESTAMP AS UPDATED_DATE,
		(
		CASE WHEN ICG_STORES_TMP.POLICY_NO IS NULL THEN 'POLICY_NO,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.PROD_CD IS NULL THEN 'PRODUCT_CD,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.PROD_CD IS NULL THEN 'BENEFIT_CD,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.CONTRACT_ID IS NULL THEN 'CONTRACT_ID,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.PORTFOLIO_GROUP IS NULL THEN 'PORTFOLIO_GROUP,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.COHORT_YEAR IS NULL THEN 'COHORT_YEAR,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.SET_OF_CONTRACT IS NULL THEN 'SET_OF_CONTRACT,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID IS NULL THEN 'INSURANCE_CONTRACT_GROUP_ID,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.ICG_ID_PROPHET IS NULL THEN 'ICG_ID_PROPHET,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.ENTRY_MONTH IS NULL THEN 'ENTRY_MONTH,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.CB_START_DT IS NULL THEN 'CB_START_DT,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.CB_END_DT IS NULL THEN 'CB_END_DT,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.MEASUREMENT_MODEL IS NULL THEN 'MEASUREMENT_MODEL,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.INFORCE_FLAG IS NULL THEN 'INFORCE_FLAG,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE IS NULL THEN 'COVERAGE_LEVEL_END_DATE,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.CCY_CD IS NULL THEN 'CCY_CD,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.STATUS_SOURCE IS NULL THEN 'STATUS_SOURCE,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.BEN_EXP_DATE IS NULL THEN 'BEN_EXP_DATE,' ELSE '' END +
		  CASE WHEN ICG_STORES_TMP.CB_START_DT > ICG_STORES_TMP.BEN_EXP_DATE THEN 'CB_START_DT > BEN_EXP_DATE,' ELSE '' END 
		) AS INVALID_DESC

	 FROM STAG_ID.TMP_IFRS17_ICG_STORES_OMNI ICG_STORES_TMP

	 LEFT JOIN
	 (
		  --VALID ICG_STORES
	  SELECT
		POLICY_NO,
		PRODUCT_CD,
		CONTRACT_ID,
		COHORT_YEAR,
		SET_OF_CONTRACT,
		PORTFOLIO_GROUP,
		INSURANCE_CONTRACT_GROUP_ID,
		ICG_ID_PROPHET,
		ENTRY_MONTH,
		CB_START_DT,
		CB_END_DT,
		MEASUREMENT_MODEL,
		COVERAGE_LEVEL_END_DATE,
		CCY_CD,
		BEN_EXP_DATE,
		ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
		FROM FOND_ID.FOND_IFRS17_ICG_STORES
		  WHERE UPPER(SUBSYSTEM) = 'OMNI'
			) ICG_STORES_VALID
			ON ICG_STORES_TMP.POLICY_NO = ICG_STORES_VALID.POLICY_NO
			AND ICG_STORES_VALID.ROWNUM_POLICY_NO = 1

		 WHERE ICG_STORES_TMP.FLAG_INSERT_UPDATE IN('INSERT', 'UPDATE')
		 AND
		   (
			 ICG_STORES_TMP.POLICY_NO IS NULL
			 OR ICG_STORES_TMP.PROD_CD IS NULL
			 OR ICG_STORES_TMP.CONTRACT_ID IS NULL
			 OR ICG_STORES_TMP.PORTFOLIO_GROUP IS NULL
			 OR ICG_STORES_TMP.COHORT_YEAR IS NULL
			 OR ICG_STORES_TMP.SET_OF_CONTRACT IS NULL
			 OR ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID IS NULL
			 OR ICG_STORES_TMP.ICG_ID_PROPHET IS NULL
			 OR ICG_STORES_TMP.ENTRY_MONTH IS NULL
			 OR ICG_STORES_TMP.CB_START_DT IS NULL
			 OR ICG_STORES_TMP.CB_END_DT IS NULL
			 OR ICG_STORES_TMP.MEASUREMENT_MODEL IS NULL
			 OR ICG_STORES_TMP.INFORCE_FLAG IS NULL
			 OR ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE IS NULL
			 OR ICG_STORES_TMP.CCY_CD IS NULL
			 OR ICG_STORES_TMP.STATUS_SOURCE IS NULL
			 OR ICG_STORES_TMP.BEN_EXP_DATE IS NULL
			 OR (ICG_STORES_TMP.CB_START_DT > ICG_STORES_TMP.BEN_EXP_DATE AND ICG_STORES_TMP.STATUS_SOURCE = 'INFORCE')
		   )
;

--	-------------------------------------
--	--- INSERT INTO MPFILES PROPTRDB
--	-------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT INTO MPFILES OMNI : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	
	INSERT INTO FOND_ID.FOND_IFRS17_MPFILES_OMNI
	
	SELECT
        OMNI_REPORT_PROPHET_CUSTOMER.AGE_ENTRY,
		OMNI_REPORT_PROPHET_CUSTOMER.AGENT_SERVICING,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_TOTAL,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_DEATH_GTL,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_CI,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_TERMINAL_ILLNESS,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_TPD,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_AD_RIDERS,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_AD_GPA,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_ADD,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_ACCIDENTAL_MEDICAL_REIMBURSEMENT_GTL,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_ACCIDENTAL_MEDICAL_REIMBURSEMENT_GPA,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_MEDICAL_INPATIENT,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_OUTPATIENT,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_OPTICAL,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_DENTAL,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_MATERNITY,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_PREVENTIVE,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_CI_ACCELERATION,
		OMNI_REPORT_PROPHET_CUSTOMER.APE_TPD_ACCELERATION,
		OMNI_REPORT_PROPHET_CUSTOMER.BILLING_CHANNEL,
		OMNI_REPORT_PROPHET_CUSTOMER.CITY_MEMBER,
		OMNI_REPORT_PROPHET_CUSTOMER.PROVINCE_MEMBER,
		OMNI_REPORT_PROPHET_CUSTOMER.COMMISSION,
		NULLIF(TRIM(OMNI_REPORT_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID), '') AS CERTIFICATE_MEMBER_CARD_ID,
		OMNI_REPORT_PROPHET_CUSTOMER.COMPANY_NAME,
		OMNI_REPORT_PROPHET_CUSTOMER.CO_PAYMENT_MEDICAL_INPATIENT,
		OMNI_REPORT_PROPHET_CUSTOMER.CO_PAYMENT_OUTPATIENT,
		OMNI_REPORT_PROPHET_CUSTOMER.CO_PAYMENT_OPTICAL,
		OMNI_REPORT_PROPHET_CUSTOMER.CO_PAYMENT_DENTAL,
		OMNI_REPORT_PROPHET_CUSTOMER.CO_PAYMENT_MATERNITY,
		OMNI_REPORT_PROPHET_CUSTOMER.CURRENCY,
		OMNI_REPORT_PROPHET_CUSTOMER.DATE_OF_BIRTH,
		OMNI_REPORT_PROPHET_CUSTOMER.EMPLOYEE_DEPENDENT_INDICATOR,
		OMNI_REPORT_PROPHET_CUSTOMER.EXIT_DATE_OF_THE_PARTICIPANT_DUE_TO_RESIGNATION_OR_DEATH,
		OMNI_REPORT_PROPHET_CUSTOMER.EXPIRY_DATE,
		OMNI_REPORT_PROPHET_CUSTOMER.ISSUE_DATE,
		OMNI_REPORT_PROPHET_CUSTOMER.JAKARTA_NON_JAKARTA,
		OMNI_REPORT_PROPHET_CUSTOMER.PAID_TO_DATE_LAST_PAYMENT_DATE,
		OMNI_REPORT_PROPHET_CUSTOMER.POLICY_NUMBER,
		OMNI_REPORT_PROPHET_CUSTOMER.MEMBER_STATUS,
		OMNI_REPORT_PROPHET_CUSTOMER.PRODUCT_SUMMARY,
		OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD,
		OMNI_REPORT_PROPHET_CUSTOMER.PRODUCT_DESCRIPTION,
		OMNI_REPORT_PROPHET_CUSTOMER.RISK_COMMENCEMENT_DATE_RCD,
		OMNI_REPORT_PROPHET_CUSTOMER.GENDER,
		OMNI_REPORT_PROPHET_CUSTOMER.SMOKING_STATUS,
		OMNI_REPORT_PROPHET_CUSTOMER.TOTAL_SUM_ASSURED,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_DEATH_GTL,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_CI,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_TERMINAL_ILLNESS,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_TPD,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_AD_RIDERS,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_AD_GPA,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_ADD,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_ACCIDENTAL_MEDICAL_REIMBURSEMENT_GTL,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_ACCIDENTAL_MEDICAL_REIMBURSEMENT_GPA,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_MEDICAL_INPATIENT,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_OUTPATIENT,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_OPTICAL,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_DENTAL,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_MATERNITY,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_PREVENTIVE,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_CI_ACCELERATION,
		OMNI_REPORT_PROPHET_CUSTOMER.SUM_ASSURED_TPD_ACCELERATION,
		OMNI_REPORT_PROPHET_CUSTOMER.HEADCOUNT_INDICATOR,
		OMNI_REPORT_PROPHET_CUSTOMER.ACTUAL_FCL_OFFERED_GTL,
		OMNI_REPORT_PROPHET_CUSTOMER.ACTUAL_FCL_OFFERED_GCI,
		OMNI_REPORT_PROPHET_CUSTOMER.ACTUAL_FCL_OFFERED_TPD,
		OMNI_REPORT_PROPHET_CUSTOMER.TREATY_FACULTATIVE,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_GTL,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_CI,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_TERMINAL_ILLNESS,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_TPD,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_AD_RIDERS,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_AD_GPA,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_ADD,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_ACCIDENTAL_MEDICAL_REIMBURSEMENT_GTL,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_ACCIDENTAL_MEDICAL_REIMBURSEMENT_GPA,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_MEDICAL_INPATIENT,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_OUTPATIENT,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_OPTICAL,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_DENTAL,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_MATERNITY,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_PREVENTIVE,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_CI_ACCELERATION,
		OMNI_REPORT_PROPHET_CUSTOMER.EXTRA_PREMIUM_TPD_ACCELERATION,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_PLAN,
		OMNI_REPORT_PROPHET_CUSTOMER.MEMBERSHIP_ID,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_CI_RIDER_CODE,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_TERMINAL_ILLNESS_RIDER_CODE,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_TPD_RIDER_CODE,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_AD_RIDER_CODE,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_ACCIDENTAL_MEDICAL_REIMBURSEMENT_RIDER_CODE,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_ADD_RIDER_CODE,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_OUTPATIENT_RIDER_CODE,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_OPTICAL_RIDER_CODE,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_DENTAL_RIDER_CODE,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_MATERNITY_RIDER_CODE,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_PREVENTIVE_RIDER_CODE,
		OMNI_REPORT_PROPHET_CUSTOMER.GROUP_MEDICAL_EVACUATION_RIDER_CODE,
		OMNI_REPORT_PROPHET_CUSTOMER.CITY_COMPANY_LEVEL,
		OMNI_REPORT_PROPHET_CUSTOMER.PROVINCE_COMPANY_LEVEL,
		OMNI_REPORT_PROPHET_CUSTOMER.BILLING_FREQUENCY,
		ICG_CONFIG.IFRS_ONEROUS_GRP,
        CASE
          WHEN DATEPART(YEAR, @V_START_DATE) = ICG_STORES_VALID.COHORT_YEAR THEN ICG_STORES_VALID.ENTRY_MONTH
          WHEN ICG_STORES_VALID.COHORT_YEAR < 1997 THEN 13
          ELSE (ICG_STORES_VALID.COHORT_YEAR - 1997) + 14
        END AS IFRS_CY_GRP,
        PORTFOLIO_MAP.IFRS_PORT_GRP,
        PORTFOLIO_MAP.IFRS_MEASURE_MODEL,
        ICG_STORES_VALID.COHORT_YEAR AS BASIC_ENTRY_YEAR,
        ICG_STORES_VALID.ENTRY_MONTH AS BASIC_ENTRY_MONTH,
        --(CAST(TO_CHAR(ICG_STORES_VALID.CB_END_DT,''YYYY'') AS NUMERIC(4,0))-CAST(TO_CHAR(ICG_STORES_VALID.CB_START_DT,''YYYY'') AS NUMERIC(4,0)))*12
        --+(CAST(TO_CHAR(ICG_STORES_VALID.CB_END_DT,''MM'') AS NUMERIC(2,0))-CAST(TO_CHAR(ICG_STORES_VALID.CB_START_DT,''MM'') AS NUMERIC(2,0))) AS IFRS_CB_TERM_M,
		DATEDIFF(MONTH, ICG_STORES_VALID.CB_START_DT, ICG_STORES_VALID.CB_END_DT) AS IFRS_CB_TERM_M,
        CASE
          WHEN DATEPART(YEAR, @V_START_DATE) = ICG_STORES_VALID.COHORT_YEAR THEN ICG_STORES_VALID.ENTRY_MONTH
          WHEN ICG_STORES_VALID.COHORT_YEAR IS NOT NULL THEN 0
          ELSE NULL
        END AS MTHS_TO_SALE,
        ICG_STORES_VALID.INSURANCE_CONTRACT_GROUP_ID AS IFRS_ICG_ID,
        ICG_STORES_VALID.ICG_ID_PROPHET AS IFRS_ICG_ID_PROPHET,
        ICG_CONFIG.SUB_GROUP_ID,
        ICG_STORES_VALID.ENTITY_ID AS ENTITY_ID,
--                    ICG_STORES_VALID.CCY_CD,
        ICG_STORES_VALID.CB_START_DT AS CB_START_DT,
        ICG_STORES_VALID.CB_END_DT AS CB_END_DT,
       	CASE WHEN DATEPART(YEAR, @V_START_DATE) = ICG_STORES_VALID.COHORT_YEAR THEN (ICG_STORES_VALID.INSURANCE_CONTRACT_GROUP_ID + '_' + UPPER(ICG_STORES_VALID.ENTRY_MONTH_MMM)) END AS REL_INSURANCE_CONTRACT_GROUP_ID,
		@BATCH_MASTER_ID AS BATCH_MASTER_ID,
		@BATCH_RUN_ID AS BATCH_RUN_ID,
		@JOB_MASTER_ID AS JOB_MASTER_ID,
		@JOB_RUN_ID AS JOB_RUN_ID,
		@BATCHDATESTR AS BATCHDATE,
		@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
		FROM
			(
			  SELECT *,
				PRODUCT_CODE AS PROD_CD

				FROM STAG_ID.STAG_OMNI_REPORT_PROPHET_CUSTOMER
			) OMNI_REPORT_PROPHET_CUSTOMER

--		  LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_OMNI_DUP OMNI_REPORT_PROPHET_CUSTOMER_DUP
--		  ON NULLIF(TRIM(OMNI_REPORT_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID), '') = OMNI_REPORT_PROPHET_CUSTOMER_DUP.CERTIFICATE_MEMBER_CARD_ID
--		  AND OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD = OMNI_REPORT_PROPHET_CUSTOMER_DUP.PROD_CD

		  LEFT JOIN
			(
			  --VALID ICG_STORES
		  SELECT
			ENTITY_ID,
			POLICY_NO,
			PRODUCT_CD,
			INSURANCE_CONTRACT_GROUP_ID,
			ICG_ID_PROPHET,
			COHORT_YEAR,
			ENTRY_MONTH,
			CCY_CD,
			CB_START_DT,
			CB_END_DT,
			CASE WHEN(ENTRY_MONTH =1) THEN 'JAN'
				WHEN(ENTRY_MONTH =2) THEN 'FEB'
				WHEN(ENTRY_MONTH =3) THEN 'MAR'
				WHEN(ENTRY_MONTH =4) THEN 'APR'
				WHEN(ENTRY_MONTH =5) THEN 'MAY'
				WHEN(ENTRY_MONTH =6) THEN 'JUN'
				WHEN(ENTRY_MONTH =7) THEN 'JUL'
				WHEN(ENTRY_MONTH =8) THEN 'AUG'
				WHEN(ENTRY_MONTH =9) THEN 'SEP'
				WHEN(ENTRY_MONTH =10) THEN 'OCT'
				WHEN(ENTRY_MONTH =11) THEN 'NOV'
				WHEN(ENTRY_MONTH =12) THEN 'DEC'
			END AS ENTRY_MONTH_MMM,
			ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
			FROM FOND_ID.FOND_IFRS17_ICG_STORES WHERE UPPER(SUBSYSTEM) = 'OMNI'
			) ICG_STORES_VALID
				ON NULLIF(TRIM(OMNI_REPORT_PROPHET_CUSTOMER.CERTIFICATE_MEMBER_CARD_ID), '') = ICG_STORES_VALID.POLICY_NO
				AND ICG_STORES_VALID.ROWNUM_POLICY_NO = 1

		  LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING PORTFOLIO_MAP
			ON ICG_STORES_VALID.PRODUCT_CD = PORTFOLIO_MAP.PRODUCT_CD
			AND ICG_STORES_VALID.CCY_CD = PORTFOLIO_MAP.CCY_CD
			AND UPPER(PORTFOLIO_MAP.SYSTEM) = 'OMNI'

		  LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_SET_OF_CONTRACT  SET_OF_CONTRACT
			ON ICG_STORES_VALID.PRODUCT_CD = SET_OF_CONTRACT.PRODUCT_CD
			AND ICG_STORES_VALID.CCY_CD = SET_OF_CONTRACT.CCY_CD
			AND UPPER(SET_OF_CONTRACT.SYSTEM) = 'OMNI'

		  LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG AS ICG_CONFIG
			ON (CASE WHEN (ICG_STORES_VALID.COHORT_YEAR) <'2018' THEN '2018' ELSE (ICG_STORES_VALID.COHORT_YEAR) END) = ICG_CONFIG.COHORT_YEAR
			AND PORTFOLIO_MAP.PORTFOLIO_GROUP = ICG_CONFIG.PORTFOLIO_GROUP
			AND SET_OF_CONTRACT.SET_OF_CONTRACT = ICG_CONFIG.SET_OF_CONTRACT

		  WHERE 
		  1=1
--		  OMNI_REPORT_PROPHET_CUSTOMER_DUP.CERTIFICATE_MEMBER_CARD_ID IS NULL
--		  AND (OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD IS NOT NULL AND OMNI_REPORT_PROPHET_CUSTOMER.PROD_CD <> '')
		  
		  ;
		  
		--store end step to log
	SET @V_END = CURRENT_TIMESTAMP;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = CONCAT('Finish ', @V_FUNCTION_NAME, ' : ', @V_END, ' Duration ', DATEDIFF(MINUTE, @V_START, @V_END));

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_END, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);		  

	END TRY

	BEGIN CATCH
	
		DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
		DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
		DECLARE @ErrorState AS INT = ERROR_STATE()
		
		--IF @@TRANCOUNT > 0  
		--	ROLLBACK TRAN; 
		
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		
		RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)
		
			
	END CATCH ;


END;

