CREATE PROC [FOND_ID].[USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PAYLIFE] @batchdatestr [NVARCHAR](10),@jobnamestr [NVARCHAR](2000),@prd_id [integer] AS
BEGIN
	------START GET RUN ID DETAIL FROM ABC------
    DECLARE @BATCH_MASTER_ID    VARCHAR(20) = 0;
    DECLARE @BATCH_RUN_ID    VARCHAR(20)  = 0;
    DECLARE @JOB_MASTER_ID    VARCHAR(20)  = 0;
    DECLARE @JOB_RUN_ID    VARCHAR(20)  = 0;
    DECLARE @GMT_START_DTTM    VARCHAR(20) = getdate();
	BEGIN TRY
	EXEC STAG_ID.USP_GetRunIdReturn
    @JobName = @jobnamestr
    ,@BATCH_MASTER_ID  = @BATCH_MASTER_ID OUTPUT
    ,@BATCH_RUN_ID   = @BATCH_RUN_ID OUTPUT
    ,@JOB_MASTER_ID  = @JOB_MASTER_ID OUTPUT
    ,@JOB_RUN_ID  = @JOB_RUN_ID OUTPUT
    ,@GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
    ------END GET RUN ID DETAIL FROM ABC------
    --declare variable
	DECLARE @V_START			datetime,
	        @V_END				datetime,
			@V_DURATION			datetime,
	        @V_FUNCTION_NAME	varchar(100),
			@V_DESCRIPTION		varchar(100),
	        @V_CMD				varchar(100),
			@V_SEQNO			integer,
	        @V_PRD_ID			integer,
			@V_CREATED_DATE		datetime,
	        @V_START_DATE		date,
	        @V_END_DATE			date;

	--set variable
	SET @V_FUNCTION_NAME = 'STAG_ID.STAG_IFRS17_FNC_MONTHLY_ICG_MPFILES_PAYLIFE';
	SET @V_SEQNO = 1;
	SET @V_START_DATE = CONVERT(DATE, CONVERT(CHAR(10), @prd_id));
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('Start ', @V_FUNCTION_NAME, ' : ', @V_START_DATE);

	--store initial step to log
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	-----------------------------
	--- DROP ALL TEMPORARY TABLES
	-----------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('DROP ALL TEMPORARY TABLES : ', @V_START);

	INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	--drop permanent object if exists
	IF OBJECT_ID('STAG_ID.STAG_TMP_GLISS_TBIILIFE_INSURED_FINAL_FIRST_UPLOAD', 'U') IS NOT NULL DROP TABLE STAG_ID.STAG_TMP_GLISS_TBIILIFE_INSURED_FINAL_FIRST_UPLOAD;
	IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_PAYLIFE_DUP', 'U') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PAYLIFE_DUP;
    IF OBJECT_ID('STAG_ID.STAG_TMP_PAYLIFE_GLISS_TBIILIFE_INSURED_FINAL_TERMINATED', 'U') IS NOT NULL DROP TABLE STAG_ID.STAG_TMP_PAYLIFE_GLISS_TBIILIFE_INSURED_FINAL_TERMINATED;
	IF OBJECT_ID('STAG_ID.STAG_TMP_ICG_STORES_PAYLIFE_TMP', 'U') IS NOT NULL DROP TABLE STAG_ID.STAG_TMP_ICG_STORES_PAYLIFE_TMP;
	TRUNCATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PAYLIFE_INVALID;
	TRUNCATE TABLE FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE;
	

	--IF OBJECT_ID('FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE', 'U') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE;
	--drop temp object if exists
	IF OBJECT_ID('tempdb.dbo.#TERMINATED_INSURED_ID', 'U') IS NOT NULL DROP TABLE #TERMINATED_INSURED_ID;
	IF OBJECT_ID('tempdb.dbo.#ICG_STORES_PAYLIFE_TMP', 'U') IS NOT NULL DROP TABLE #ICG_STORES_PAYLIFE_TMP;
	IF OBJECT_ID('tempdb.dbo.#ICG_STORES_PAYLIFE_TMP_2', 'U') IS NOT NULL DROP TABLE #ICG_STORES_PAYLIFE_TMP_2;
	IF OBJECT_ID('tempdb.dbo.#ICG_STORES_PAYLIFE_TMP_3', 'U') IS NOT NULL DROP TABLE #ICG_STORES_PAYLIFE_TMP_3;
	IF OBJECT_ID('tempdb.dbo.#ICG_STORES_PAYLIFE_TMP_INVALID', 'U') IS NOT NULL DROP TABLE #ICG_STORES_PAYLIFE_TMP_INVALID;
	
	----------------------------------------------------------
	--- INSERT TABLE TO GET FIRST UPLOAD_DATE FOR POLICY NUMBER IN GLISS_TBIILIFE_INSURED_FINAL
	----------------------------------------------------------
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION	= CONCAT('INSERT TABLE TO GET FIRST UPLOAD_DATE FOR POLICY NUMBER IN GLISS_TBIILIFE_INSURED_FINAL : ', @V_START);
	
	INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
    CREATE TABLE STAG_ID.STAG_TMP_GLISS_TBIILIFE_INSURED_FINAL_FIRST_UPLOAD
	WITH
	(
	  DISTRIBUTION = HASH(INSURED_ID),
	  HEAP
	) AS
    SELECT A.INSURED_ID, MIN(A.UPLOAD_DATE) as UPLOAD_DATE
	FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL A
	INNER JOIN (
	SELECT INSURED_ID
	FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL
	WHERE NULLIF(TRIM(INSURED_ID), '') IS NOT NULL
	AND UPLOAD_DATE = (SELECT MAX(UPLOAD_DATE) AS UPLOAD_DATE FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL)
	) B
	ON A.INSURED_ID = B.INSURED_ID
	GROUP BY A.INSURED_ID;
	
	----------------------------------------------------------
	--- INSERT TABLE TO KEEP DUPLICATE POLICY NUMBER IN GLISS_TBIILIFE_INSURED_FINAL
	----------------------------------------------------------
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION	= CONCAT('INSERT TABLE TO KEEP DUPLICATE POLICY NUMBER IN GLISS_TBIILIFE_INSURED_FINAL : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PAYLIFE_DUP
	WITH
	(
	  DISTRIBUTION = HASH(INSURED_ID),
	  HEAP
	) AS
	SELECT INSURED_ID, COMPANY_CODE, INSURED_NAME, INSURED_DOB, INSURED_KTP, INSURED_SEX, INSURED_PAYROLL_DATE, INSURED_TYPE,
	UPLOAD_DATE, UPLOAD_BY, CREATED_DATE, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE,
	ETL_PROCESS_DATE_TIME
	FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL
	WHERE INSURED_ID IN (
	SELECT INSURED_ID
	FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL
	WHERE NULLIF(TRIM(INSURED_ID), '') IS NOT NULL
	AND UPLOAD_DATE = (SELECT MAX(UPLOAD_DATE) AS UPLOAD_DATE FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL)
	GROUP BY INSURED_ID HAVING COUNT(*) > 1
	)
	AND UPLOAD_DATE = (SELECT MAX(UPLOAD_DATE) AS UPLOAD_DATE FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL);
	
    -----------------------------------------------
	--- CREATE TEMP TABLE FOR TERMINATED INSURED_ID
	-----------------------------------------------
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION	= CONCAT('CREATE TEMP TABLE FOR TERMINATED INSURED_ID : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	-------------------------------------------------
	--create temp table to list terminated insured_id
	-------------------------------------------------
	CREATE TABLE #TERMINATED_INSURED_ID
	WITH
	(
	  DISTRIBUTION = HASH(INSURED_ID),
	  HEAP
	)
	AS
	SELECT PREV_MONTH_GLISS.INSURED_ID
	FROM
      (
	    SELECT NULLIF(TRIM(INSURED_ID), '') AS INSURED_ID
		FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL
		WHERE UPLOAD_DATE = DATEADD(MONTH, -1, (SELECT MAX(CAST(UPLOAD_DATE AS DATE)) AS UPLOAD_DATE FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL))
      ) AS PREV_MONTH_GLISS

    LEFT JOIN
	  (
        SELECT NULLIF(TRIM(INSURED_ID), '') AS INSURED_ID
        FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL
        WHERE COALESCE(UPLOAD_DATE, (SELECT MAX(CAST(UPLOAD_DATE AS DATE)) AS UPLOAD_DATE FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL)) = (SELECT MAX(CAST(UPLOAD_DATE AS DATE)) AS UPLOAD_DATE FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL)
	  ) AS CURR_MONTH_GLISS
	ON UPPER(TRIM(PREV_MONTH_GLISS.INSURED_ID)) = UPPER(TRIM(CURR_MONTH_GLISS.INSURED_ID))

    WHERE NULLIF(TRIM(CURR_MONTH_GLISS.INSURED_ID), '') IS NULL;
	
	---------------------------------------------------------------------
	--INSERT table to store complete information of terminated insured_id
	---------------------------------------------------------------------
	CREATE TABLE STAG_ID.STAG_TMP_PAYLIFE_GLISS_TBIILIFE_INSURED_FINAL_TERMINATED
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	) AS
	SELECT
	ICG_STORES.ENTITY_ID,
	ICG_STORES.SYSTEM,
	ICG_STORES.POLICY_NO,
	ICG_STORES.PRODUCT_CD,
	ICG_STORES.BENEFIT_CD,
	ICG_STORES.CONTRACT_ID,
	ICG_STORES.PORTFOLIO_GROUP,
	ICG_STORES.COHORT_YEAR,
	ICG_STORES.SET_OF_CONTRACT,
	ICG_STORES.INSURANCE_CONTRACT_GROUP_ID,
	ICG_STORES.ICG_ID_PROPHET,
	ICG_STORES.ENTRY_MONTH,
	ICG_STORES.CB_START_DT,
	ICG_STORES.CB_END_DT,
	ICG_STORES.MEASUREMENT_MODEL,
	ICG_STORES.INFORCE_FLAG,
	ICG_STORES.COVERAGE_LEVEL_END_DATE,
	ICG_STORES.CCY_CD,
	CASE
	WHEN ETL4_PAYLIFE.POLICY_NO IS NOT NULL AND ICG_STORES.STATUS_SOURCE IN('INFORCE', 'CLAIM') THEN 'CLAIM'
	WHEN ETL4_PAYLIFE.POLICY_NO IS NULL AND ICG_STORES.STATUS_SOURCE = 'CLAIM' THEN 'CLAIM'
	WHEN ETL4_PAYLIFE.POLICY_NO IS NULL AND ICG_STORES.STATUS_SOURCE <> 'CLAIM' THEN 'TERMINATED'
	ELSE NULL
	END AS STATUS_SOURCE,
	ICG_STORES.BEN_EXP_DATE,
	CAST('PayLife' AS VARCHAR(20)) AS SUBSYSTEM,
	CURRENT_TIMESTAMP AS CREATED_DATE,
	CURRENT_TIMESTAMP AS UPDATED_DATE,
	'STATUS_SOURCE,' AS INVALID_DESC
	FROM #TERMINATED_INSURED_ID AS TERMINATED_INSURED_ID
	JOIN FOND_ID.FOND_IFRS17_ICG_STORES AS ICG_STORES
	ON UPPER(TRIM(TERMINATED_INSURED_ID.INSURED_ID)) = UPPER(TRIM(ICG_STORES.POLICY_NO))
	AND UPPER(ICG_STORES.SUBSYSTEM) = 'PAYLIFE'
	AND ICG_STORES.PRODUCT_CD = ICG_STORES.BENEFIT_CD
	LEFT JOIN
	(
	SELECT POLICY_NO AS POLICY_NO
	FROM FOND_ID.FOND_PAYLIFE_ETL4_PAYLIFE
	WHERE SUN_CD = '5111010000'
	) ETL4_PAYLIFE
	ON UPPER(TRIM(ICG_STORES.POLICY_NO)) = UPPER(TRIM(ETL4_PAYLIFE.POLICY_NO))
	WHERE UPPER(ICG_STORES.SUBSYSTEM) = 'PAYLIFE';

	------------------------------------------------
	--- INSERT NEW BUSINESS TO ICG STORES TEMP TABLE
	------------------------------------------------
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION	= CONCAT('INSERT NEW BUSINESS TO ICG STORES TEMP TABLE : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
	
	------------------------------------------
	--create temp table ICG_STORES_PAYLIFE_TMP
	------------------------------------------
	CREATE TABLE #ICG_STORES_PAYLIFE_TMP
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	) AS
	SELECT
	CAST('IAI' AS VARCHAR(4)) AS ENTITY_ID,
	CAST('PayLife' AS VARCHAR(20)) AS SYSTEM,
	GLISS_TBIILIFE_INSURED_FINAL.INSURED_ID AS POLICY_NO,
	CAST('PayLife' AS VARCHAR(20)) AS PROD_CD,
	CONCAT(GLISS_TBIILIFE_INSURED_FINAL.INSURED_ID, '-' , YEAR( 
	(
	CASE
	WHEN ICG_STORES.POLICY_NO IS NULL THEN CAST(FIRST_UPLOAD.UPLOAD_DATE AS DATE)
	WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY,-1,DATEADD(MONTH,1,CAST(GLISS_TBIILIFE_INSURED_FINAL.UPLOAD_DATE AS DATE))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN CAST(DATEADD(DAY,1,CAST(ICG_STORES.CB_END_DT AS DATE)) AS DATE)
	ELSE ICG_STORES.CB_START_DT
	END
	))) 
	AS CONTRACT_ID,
	--PORTFOLIO_MAP.PORTFOLIO_GROUP AS PORTFOLIO_GROUP,
	CASE
      		WHEN ICG_STORES.POLICY_NO IS NULL THEN
      			CASE
					WHEN PORTFOLIO_MAP.PRODUCT_CD IS NOT NULL THEN
						CASE
							WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'N' THEN PORTFOLIO_MAP.PORTFOLIO_GROUP
							WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP), 1, LEN(TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP))-3) + PORTFOLIO_MAP.MEASUREMENT_MODEL
						END 
      			END
			ELSE ICG_STORES.PORTFOLIO_GROUP
	END AS PORTFOLIO_GROUP,
	YEAR( 
	CASE
	WHEN ICG_STORES.POLICY_NO IS NULL THEN CAST(FIRST_UPLOAD.UPLOAD_DATE AS DATE)
	WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY,-1,DATEADD(MONTH,1,CAST(GLISS_TBIILIFE_INSURED_FINAL.UPLOAD_DATE AS DATE))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN CAST(DATEADD(DAY,1,CAST(ICG_STORES.CB_END_DT AS DATE)) AS DATE)
	ELSE ICG_STORES.CB_START_DT
	END) AS COHORT_YEAR,
	SET_OF_CONTRACT.SET_OF_CONTRACT,
	ICG_CONFIG.INSURANCE_CONTRACT_GROUP_ID,
	ICG_CONFIG.ICG_ID_PROPHET,
	MONTH(
	CASE
	WHEN ICG_STORES.POLICY_NO IS NULL THEN CAST(FIRST_UPLOAD.UPLOAD_DATE AS DATE)
	WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY,-1,DATEADD(MONTH,1,CAST(GLISS_TBIILIFE_INSURED_FINAL.UPLOAD_DATE AS DATE))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN CAST(DATEADD(DAY,1,CAST(ICG_STORES.CB_END_DT AS DATE)) AS DATE)
	ELSE ICG_STORES.CB_START_DT
	END) AS ENTRY_MONTH,
	(CASE
	WHEN ICG_STORES.POLICY_NO IS NULL THEN CAST(FIRST_UPLOAD.UPLOAD_DATE AS DATE)
	WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY,-1,DATEADD(MONTH,1,CAST(GLISS_TBIILIFE_INSURED_FINAL.UPLOAD_DATE AS DATE))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN CAST(DATEADD(DAY,1,CAST(ICG_STORES.CB_END_DT AS DATE)) AS DATE)
	ELSE ICG_STORES.CB_START_DT
	END) AS CB_START_DT,
	PORTFOLIO_MAP.MEASUREMENT_MODEL,
	STATUS_MAP.INFORCE_FLAG,
	(CASE
	WHEN ICG_STORES.POLICY_NO IS NULL THEN CAST(FIRST_UPLOAD.UPLOAD_DATE AS DATE)
	WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY,-1,DATEADD(MONTH,1,CAST(GLISS_TBIILIFE_INSURED_FINAL.UPLOAD_DATE AS DATE))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN CAST(DATEADD(DAY,1,CAST(ICG_STORES.CB_END_DT AS DATE)) AS DATE)
	ELSE ICG_STORES.CB_START_DT
	END) AS COVERAGE_LEVEL_START_DATE,
	CAST('IDR' AS VARCHAR(3)) AS CCY_CD,
	STATUS_MAP.STATUS_SOURCE,
	CAST(GLISS_TBIILIFE_INSURED_FINAL.UPLOAD_DATE AS DATE) AS CURR_PTDATE,
	GLISS_TBIILIFE_INSURED_FINAL.INSURED_DOB,
	CB_MAP.BOUND_BY_REPRICE AS CURR_BOUND_BY_REPRICE,
	CB_MAP.POINT_OF_BOUNDARY_REPRICE AS CURR_POINT_OF_BOUND_BY_REPRICE,
	CB_MAP.BOUND_BY_TERMINATION_PROVISION AS CURR_BOUND_BY_TERMINATION_PROVISION,
	CB_MAP.POINT_OF_BOUNDARY_TERMINATION AS CURR_POINT_OF_BOUNDARY_TERMINATION,
	ICG_STORES.POLICY_NO AS CURR_POLICY_NO,
	CAST(ICG_STORES.CB_START_DT AS DATE) AS CURR_CB_START_DT,
	CAST(ICG_STORES.CB_END_DT AS DATE) AS CURR_CB_END_DT,
	ICG_STORES.STATUS_SOURCE AS CURR_STATUS_SOURCE,
	ICG_STORES.BEN_EXP_DATE AS CURR_BEN_EXP_DATE
	FROM
	(
	SELECT
	NULLIF(TRIM(GLISS_TBIILIFE_INSURED_FINAL.INSURED_ID), '') AS INSURED_ID,
	UPPER(GLISS_TBIILIFE_INSURED_FINAL.INSURED_NAME) AS INSURED_NAME,
	GLISS_TBIILIFE_INSURED_FINAL.INSURED_DOB,
	GLISS_TBIILIFE_INSURED_FINAL.INSURED_TYPE,
	GLISS_TBIILIFE_INSURED_FINAL.UPLOAD_DATE,
	GLISS_TBIILIFE_INSURED_FINAL.COMPANY_CODE
	FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL AS GLISS_TBIILIFE_INSURED_FINAL
	LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_PAYLIFE_DUP AS DUP
	ON NULLIF(UPPER(TRIM(GLISS_TBIILIFE_INSURED_FINAL.INSURED_ID)), '') = NULLIF(UPPER(TRIM(DUP.INSURED_ID)), '')
	WHERE GLISS_TBIILIFE_INSURED_FINAL.UPLOAD_DATE = (SELECT MAX(UPLOAD_DATE) AS UPLOAD_DATE FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL)
	AND NULLIF(TRIM(DUP.INSURED_ID), '') IS NULL
	) AS GLISS_TBIILIFE_INSURED_FINAL

	LEFT JOIN
	(
	SELECT
	POLICY_NO,
	PRODUCT_CD,
	CB_START_DT,
	CB_END_DT,
	STATUS_SOURCE,
	BEN_EXP_DATE,
	PORTFOLIO_GROUP,
	ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
	FROM FOND_ID.FOND_IFRS17_ICG_STORES
	WHERE UPPER(SUBSYSTEM) = 'PAYLIFE'
	AND PRODUCT_CD = BENEFIT_CD
	) ICG_STORES
	ON UPPER(TRIM(GLISS_TBIILIFE_INSURED_FINAL.INSURED_ID)) = UPPER(TRIM(ICG_STORES.POLICY_NO))
	AND ICG_STORES.ROWNUM_POLICY_NO = 1

	LEFT JOIN STAG_ID.STAG_TMP_GLISS_TBIILIFE_INSURED_FINAL_FIRST_UPLOAD FIRST_UPLOAD
	ON UPPER(TRIM(GLISS_TBIILIFE_INSURED_FINAL.INSURED_ID)) = UPPER(TRIM(FIRST_UPLOAD.INSURED_ID))

	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING PORTFOLIO_MAP
	ON UPPER(TRIM(CAST(PORTFOLIO_MAP.PRODUCT_CD AS VARCHAR))) = 'PAYLIFE'
	AND PORTFOLIO_MAP.CCY_CD = 'IDR'
	AND UPPER(TRIM(CAST(PORTFOLIO_MAP.SYSTEM AS VARCHAR))) = 'PAYLIFE'

	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_SET_OF_CONTRACT SET_OF_CONTRACT
	ON UPPER(TRIM(CAST(SET_OF_CONTRACT.PRODUCT_CD AS VARCHAR))) = 'PAYLIFE'
	AND SET_OF_CONTRACT.CCY_CD = 'IDR'
	AND UPPER(TRIM(CAST(SET_OF_CONTRACT.SYSTEM AS VARCHAR))) = 'PAYLIFE'

	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_CB_MAPPING AS CB_MAP
	ON UPPER(TRIM(CAST(CB_MAP.PRODUCT_CD AS VARCHAR))) = 'PAYLIFE'
	AND UPPER(TRIM(CAST(CB_MAP.SYSTEM AS VARCHAR))) = 'PAYLIFE'

	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG AS ICG_CONFIG
	ON --PORTFOLIO_MAP.PORTFOLIO_GROUP = ICG_CONFIG.PORTFOLIO_GROUP
	(CASE
      		WHEN ICG_STORES.POLICY_NO IS NULL THEN
      			CASE
					WHEN PORTFOLIO_MAP.PRODUCT_CD IS NOT NULL THEN
						CASE
							WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'N' THEN PORTFOLIO_MAP.PORTFOLIO_GROUP
							WHEN PORTFOLIO_MAP.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP), 1, LEN(TRIM(PORTFOLIO_MAP.PORTFOLIO_GROUP))-3) + PORTFOLIO_MAP.MEASUREMENT_MODEL
						END 
      			END
			ELSE ICG_STORES.PORTFOLIO_GROUP
	END) = ICG_CONFIG.PORTFOLIO_GROUP
	AND SET_OF_CONTRACT.SET_OF_CONTRACT = ICG_CONFIG.SET_OF_CONTRACT
	AND ICG_CONFIG.COHORT_YEAR = YEAR( 
	CASE
	WHEN ICG_STORES.POLICY_NO IS NULL THEN CAST(FIRST_UPLOAD.UPLOAD_DATE AS DATE)
	WHEN (CB_MAP.BOUND_BY_REPRICE = 'Y' AND (DATEADD(DAY,-1,DATEADD(MONTH,1,CAST(GLISS_TBIILIFE_INSURED_FINAL.UPLOAD_DATE AS DATE))) > ICG_STORES.CB_END_DT)) OR (CB_MAP.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICG_STORES.CB_END_DT) THEN CAST(DATEADD(DAY,1,CAST(ICG_STORES.CB_END_DT AS DATE)) AS DATE)
	ELSE ICG_STORES.CB_START_DT
	END)

	LEFT JOIN
	(
	SELECT POLICY_NO AS POLICY_NO
	FROM FOND_ID.FOND_PAYLIFE_ETL4_PAYLIFE
	WHERE SUN_CD = '5111010000'
	) ETL4_PAYLIFE
	ON UPPER(TRIM(GLISS_TBIILIFE_INSURED_FINAL.INSURED_ID)) = UPPER(TRIM(ETL4_PAYLIFE.POLICY_NO))

	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE AS STATUS_MAP  
	ON UPPER(TRIM(CAST(STATUS_MAP.STATUS_SOURCE AS VARCHAR))) = (CASE
										WHEN ETL4_PAYLIFE.POLICY_NO IS NOT NULL AND (ICG_STORES.POLICY_NO IS NULL OR ICG_STORES.STATUS_SOURCE = 'INFORCE') THEN 'CLAIM'
										WHEN ETL4_PAYLIFE.POLICY_NO IS NULL AND (ICG_STORES.POLICY_NO IS NULL OR ICG_STORES.STATUS_SOURCE = 'INFORCE') THEN 'INFORCE'
										ELSE NULL
									  END) 
	AND UPPER(TRIM(CAST(STATUS_MAP.SYSTEM AS VARCHAR))) = 'PAYLIFE';
	
	--------------------------------------------
	--create temp table ICG_STORES_PAYLIFE_TMP_2
	--------------------------------------------
	
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION	= CONCAT('CREATE TABLE #ICG_STORES_PAYLIFE_TMP_2 : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	CREATE TABLE #ICG_STORES_PAYLIFE_TMP_2 WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
	AS
	SELECT *,
	CASE
	WHEN CURR_POLICY_NO IS NOT NULL THEN CURR_BEN_EXP_DATE
	WHEN CAST(DAY(INSURED_DOB) AS NUMERIC(2,0)) = CAST(DAY(CB_START_DT) AS NUMERIC(2,0)) THEN
	DATEADD(MONTH,CAST(MONTH(DATEADD(MONTH,60,CAST(INSURED_DOB AS DATE))) AS NUMERIC(4,0)) - CAST(MONTH(CB_START_DT) AS NUMERIC(4,0)),
	DATEADD(YEAR,CAST(YEAR(DATEADD(YEAR,60,CAST(INSURED_DOB AS DATE))) AS NUMERIC(4,0)) - CAST(YEAR(CB_START_DT) AS NUMERIC(4,0)),CAST(CB_START_DT AS DATE)))
	ELSE
	DATEADD(MONTH,1,DATEADD(MONTH,CAST(MONTH(DATEADD(MONTH,60,CAST(INSURED_DOB AS DATE))) AS NUMERIC(4,0)) - CAST(MONTH(CB_START_DT) AS NUMERIC(4,0)),
	DATEADD(YEAR,CAST(YEAR(DATEADD(YEAR,60,CAST(INSURED_DOB AS DATE))) AS NUMERIC(4,0)) - CAST(YEAR(CB_START_DT) AS NUMERIC(4,0)),CAST(CB_START_DT AS DATE))))
	END AS BEN_EXP_DATE
	FROM #ICG_STORES_PAYLIFE_TMP;
	
	--------------------------------------------
	--create temp table ICG_STORES_PAYLIFE_TMP_3
	--------------------------------------------
	CREATE TABLE #ICG_STORES_PAYLIFE_TMP_3
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
	AS
	SELECT *,
	CASE
	WHEN CURR_BOUND_BY_REPRICE = 'N' AND CURR_BOUND_BY_TERMINATION_PROVISION = 'N' THEN BEN_EXP_DATE
	WHEN CURR_BOUND_BY_REPRICE = 'Y' AND CURR_BOUND_BY_TERMINATION_PROVISION = 'N' THEN
	CASE
	WHEN CB_START_DT IS NULL OR BEN_EXP_DATE IS NULL THEN NULL
	WHEN DATEADD(MONTH, COALESCE(CURR_POINT_OF_BOUND_BY_REPRICE, 0), (CASE WHEN CURR_POLICY_NO IS NULL THEN CB_START_DT ELSE DATEADD(DAY, 1, CURR_CB_END_DT) END)) <= BEN_EXP_DATE
	THEN DATEADD(MONTH, COALESCE(CURR_POINT_OF_BOUND_BY_REPRICE, 0), (CASE WHEN CURR_POLICY_NO IS NULL THEN CB_START_DT ELSE DATEADD(DAY, 1, CURR_CB_END_DT) END))
	ELSE BEN_EXP_DATE
	END
	WHEN CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND CURR_BOUND_BY_REPRICE = 'N' THEN
	CASE
	WHEN CB_START_DT IS NULL OR BEN_EXP_DATE IS NULL THEN NULL
	WHEN DATEADD(MONTH, COALESCE(CURR_POINT_OF_BOUNDARY_TERMINATION, 0), (CASE WHEN CURR_POLICY_NO IS NULL THEN CB_START_DT ELSE DATEADD(DAY, 1, CURR_CB_END_DT) END)) <= BEN_EXP_DATE
	THEN DATEADD(MONTH, COALESCE(CURR_POINT_OF_BOUNDARY_TERMINATION, 0), (CASE WHEN CURR_POLICY_NO IS NULL THEN CB_START_DT ELSE DATEADD(DAY, 1, CURR_CB_END_DT) END))
	ELSE BEN_EXP_DATE
	END
	END AS COVERAGE_LEVEL_END_DATE
	FROM #ICG_STORES_PAYLIFE_TMP_2;
	
	--------------------------------------------
	--create temp table STAG_TMP_ICG_STORES_PAYLIFE_TMP
	--------------------------------------------
	
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION	= CONCAT('CREATE TABLE STAG_TMP_ICG_STORES_PAYLIFE_TMP : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	
	CREATE TABLE STAG_ID.STAG_TMP_ICG_STORES_PAYLIFE_TMP
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	) AS
	SELECT 
	ENTITY_ID,
	SYSTEM,
	POLICY_NO,
	PROD_CD,
	CONTRACT_ID,
	PORTFOLIO_GROUP,
	COHORT_YEAR,
	SET_OF_CONTRACT,
	INSURANCE_CONTRACT_GROUP_ID,
	ICG_ID_PROPHET,
	ENTRY_MONTH,
	CB_START_DT,
	MEASUREMENT_MODEL,
	INFORCE_FLAG,
	COVERAGE_LEVEL_START_DATE,
	CCY_CD,
	STATUS_SOURCE,
	CURR_PTDATE,
	INSURED_DOB,
	CURR_BOUND_BY_REPRICE,
	CURR_POINT_OF_BOUND_BY_REPRICE,
	CURR_BOUND_BY_TERMINATION_PROVISION,
	CURR_POINT_OF_BOUNDARY_TERMINATION,
	CURR_POLICY_NO,
	CURR_CB_START_DT,
	CURR_CB_END_DT,
	CURR_STATUS_SOURCE,
	CURR_BEN_EXP_DATE,
	BEN_EXP_DATE,
	COVERAGE_LEVEL_END_DATE,
	CB_END_DT,
	CASE
	WHEN (CURR_POLICY_NO IS NULL
	OR (COALESCE(STATUS_SOURCE, '') = 'INFORCE' AND ((CURR_BOUND_BY_REPRICE = 'Y' AND ((DATEADD(DAY, -1, DATEADD(MONTH, 1, CURR_PTDATE))) > CURR_CB_END_DT)) OR (CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > CURR_CB_END_DT)))
	) THEN 'INSERT'
	WHEN (
	COALESCE(STATUS_SOURCE, '') <> CURR_STATUS_SOURCE
	OR (COALESCE(STATUS_SOURCE, '') = CURR_STATUS_SOURCE AND CURR_STATUS_SOURCE = 'INFORCE' AND CB_END_DT <> CURR_CB_END_DT)
	OR (CURR_BOUND_BY_REPRICE = 'N' AND CURR_BOUND_BY_TERMINATION_PROVISION = 'N' AND CURR_STATUS_SOURCE <> 'INFORCE')
	OR (CURR_BOUND_BY_REPRICE= 'Y' AND ((DATEADD(DAY, -1, DATEADD(MONTH, 1, CURR_PTDATE))) <= CURR_CB_END_DT) AND CURR_STATUS_SOURCE <> 'INFORCE')
	) THEN 'UPDATE'
	ELSE 'NO UPDATE'
	END AS FLAG_INSERT_UPDATE
    FROM 
	(
	SELECT *, 
		CASE 
			WHEN CB_START_DT > COVERAGE_LEVEL_END_DATE THEN CB_START_DT 
			ELSE COVERAGE_LEVEL_END_DATE 
	END AS CB_END_DT
	FROM #ICG_STORES_PAYLIFE_TMP_3)A;
	
	---------------------------------------------------------
	--- INSERT INVALID DATA TO ICG_STORES_PAYLIFE_TMP_INVALID
	---------------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT INVALID DATA TO ICG_STORES_PAYLIFE_TMP_INVALID : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	
	CREATE TABLE #ICG_STORES_PAYLIFE_TMP_INVALID
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
    AS
	SELECT
	COALESCE(POLICY_NO, 'N/A') AS POLICY_NO,
	PROD_CD

	FROM STAG_ID.STAG_TMP_ICG_STORES_PAYLIFE_TMP

	WHERE FLAG_INSERT_UPDATE IN('INSERT', 'UPDATE')
	AND
	(
	POLICY_NO IS NULL
	OR PROD_CD IS NULL
	OR CONTRACT_ID IS NULL
	OR PORTFOLIO_GROUP IS NULL
	OR COHORT_YEAR IS NULL
	OR SET_OF_CONTRACT IS NULL
	OR INSURANCE_CONTRACT_GROUP_ID IS NULL
	OR ICG_ID_PROPHET IS NULL
	OR ENTRY_MONTH IS NULL
	OR CB_START_DT IS NULL
	OR CB_END_DT IS NULL
	OR MEASUREMENT_MODEL IS NULL
	OR INFORCE_FLAG IS NULL
	OR COVERAGE_LEVEL_END_DATE IS NULL
	OR CCY_CD IS NULL
	OR STATUS_SOURCE IS NULL
	OR BEN_EXP_DATE IS NULL
	OR (CB_START_DT > BEN_EXP_DATE AND STATUS_SOURCE = 'INFORCE')
	);

	---------------------------------------------------
	--- Begin transaction
	---------------------------------------------------
		
	--BEGIN TRAN;
	--SET NOCOUNT ON
		
	---------------------------
	--- UPDATE TABLE ICG STORES
	---------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('UPDATE TABLE ICG STORES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	UPDATE FOND_ID.FOND_IFRS17_ICG_STORES
	SET
	INFORCE_FLAG = (CASE
						WHEN IFRS17_ICG_STORES_PAYLIFE_TMP.FLAG_INSERT_UPDATE = 'INSERT' THEN 'N'
						WHEN (IFRS17_ICG_STORES_PAYLIFE_TMP.STATUS_SOURCE = 
						FOND_IFRS17_ICG_STORES.STATUS_SOURCE AND FOND_IFRS17_ICG_STORES.STATUS_SOURCE = 'INFORCE'  
						AND IFRS17_ICG_STORES_PAYLIFE_TMP.CB_END_DT <> 	FOND_IFRS17_ICG_STORES.CB_END_DT 
						AND FOND_IFRS17_ICG_STORES.CB_END_DT  < @V_START_DATE ) THEN 'N' --edited by GK 31 May 2022 user Adrian actuary
						ELSE IFRS17_ICG_STORES_PAYLIFE_TMP.INFORCE_FLAG
					END),
	STATUS_SOURCE = (CASE
						WHEN IFRS17_ICG_STORES_PAYLIFE_TMP.FLAG_INSERT_UPDATE = 'INSERT' 
						THEN FOND_IFRS17_ICG_STORES.STATUS_SOURCE
						ELSE IFRS17_ICG_STORES_PAYLIFE_TMP.STATUS_SOURCE
					END),
	UPDATED_DATE = CURRENT_TIMESTAMP
	
	FROM STAG_ID.STAG_TMP_ICG_STORES_PAYLIFE_TMP AS IFRS17_ICG_STORES_PAYLIFE_TMP
	LEFT JOIN #ICG_STORES_PAYLIFE_TMP_INVALID ICG_STORES_TMP_INVALID
	ON UPPER(TRIM(IFRS17_ICG_STORES_PAYLIFE_TMP.POLICY_NO)) = UPPER(TRIM(ICG_STORES_TMP_INVALID.POLICY_NO))
	AND IFRS17_ICG_STORES_PAYLIFE_TMP.PROD_CD = ICG_STORES_TMP_INVALID.PROD_CD
	WHERE UPPER(TRIM(IFRS17_ICG_STORES_PAYLIFE_TMP.POLICY_NO)) = UPPER(TRIM(FOND_IFRS17_ICG_STORES.POLICY_NO))
	AND UPPER(FOND_IFRS17_ICG_STORES.SUBSYSTEM) = 'PAYLIFE'
	AND FOND_IFRS17_ICG_STORES.PRODUCT_CD = FOND_IFRS17_ICG_STORES.BENEFIT_CD
	AND IFRS17_ICG_STORES_PAYLIFE_TMP.FLAG_INSERT_UPDATE IN ('INSERT','UPDATE')
	AND ICG_STORES_TMP_INVALID.POLICY_NO IS NULL;

	-----------------------------------------------------
	--- UPDATE TABLE ICG STORES FOR TERMINATED INSURED_ID
	-----------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('UPDATE TABLE ICG STORES FOR TERMINATED INSURED_ID : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	
	UPDATE FOND_ID.FOND_IFRS17_ICG_STORES
	SET
	INFORCE_FLAG = STATUS_MAP.INFORCE_FLAG,
	STATUS_SOURCE = STATUS_MAP.STATUS_SOURCE,
	UPDATED_DATE = CURRENT_TIMESTAMP
	FROM STAG_ID.STAG_TMP_PAYLIFE_GLISS_TBIILIFE_INSURED_FINAL_TERMINATED AS GLISS_TBIILIFE_INSURED_FINAL_TERMINATED
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE AS STATUS_MAP  
	ON UPPER(TRIM(CAST(STATUS_MAP.STATUS_SOURCE AS VARCHAR))) = UPPER(TRIM(CAST(GLISS_TBIILIFE_INSURED_FINAL_TERMINATED.STATUS_SOURCE AS VARCHAR)))
	WHERE UPPER(TRIM(GLISS_TBIILIFE_INSURED_FINAL_TERMINATED.POLICY_NO)) = UPPER(TRIM(FOND_IFRS17_ICG_STORES.POLICY_NO))
	AND UPPER(FOND_IFRS17_ICG_STORES.SUBSYSTEM) = 'PAYLIFE'
	AND FOND_IFRS17_ICG_STORES.PRODUCT_CD = FOND_IFRS17_ICG_STORES.BENEFIT_CD
	AND GLISS_TBIILIFE_INSURED_FINAL_TERMINATED.STATUS_SOURCE IS NOT NULL;
	
	---------------------------------------
	--- INSERT NEW VALID DATA TO ICG_STORES
	---------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT NEW VALID DATA TO ICG_STORES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES
	SELECT
	ICG_STORES_TMP.ENTITY_ID,
	ICG_STORES_TMP.SYSTEM,
	ICG_STORES_TMP.POLICY_NO,
	ICG_STORES_TMP.PROD_CD AS PRODUCT_CD,
	ICG_STORES_TMP.PROD_CD AS BENEFIT_CD,
	ICG_STORES_TMP.CONTRACT_ID,
	ICG_STORES_TMP.PORTFOLIO_GROUP,
	ICG_STORES_TMP.COHORT_YEAR,
	ICG_STORES_TMP.SET_OF_CONTRACT,
	ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID,
	ICG_STORES_TMP.ICG_ID_PROPHET,
	ICG_STORES_TMP.ENTRY_MONTH,
	ICG_STORES_TMP.CB_START_DT,
	ICG_STORES_TMP.CB_END_DT,
	ICG_STORES_TMP.MEASUREMENT_MODEL,
	ICG_STORES_TMP.INFORCE_FLAG,
	ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE,
	ICG_STORES_TMP.CCY_CD,
	ICG_STORES_TMP.STATUS_SOURCE,
	ICG_STORES_TMP.BEN_EXP_DATE,
	CAST('PayLife' AS VARCHAR) AS SUBSYSTEM,
	CURRENT_TIMESTAMP AS CREATED_DATE,
	CURRENT_TIMESTAMP AS UPDATED_DATE,
	@BATCH_MASTER_ID AS BATCH_MASTER_ID, 
    @BATCH_RUN_ID AS BATCH_RUN_ID,
    @JOB_MASTER_ID AS JOB_MASTER_ID,
    @JOB_RUN_ID  AS JOB_RUN_ID,
    @batchdatestr AS BATCHDATE,
    @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
	FROM STAG_ID.STAG_TMP_ICG_STORES_PAYLIFE_TMP ICG_STORES_TMP
	WHERE ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'INSERT'
	AND ICG_STORES_TMP.POLICY_NO IS NOT NULL
	AND ICG_STORES_TMP.PROD_CD IS NOT NULL
	AND ICG_STORES_TMP.CONTRACT_ID IS NOT NULL
	AND ICG_STORES_TMP.PORTFOLIO_GROUP IS NOT NULL
	AND ICG_STORES_TMP.COHORT_YEAR IS NOT NULL
	AND ICG_STORES_TMP.SET_OF_CONTRACT IS NOT NULL
	AND ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID IS NOT NULL
	AND ICG_STORES_TMP.ICG_ID_PROPHET IS NOT NULL
	AND ICG_STORES_TMP.ENTRY_MONTH IS NOT NULL
	AND ICG_STORES_TMP.CB_START_DT IS NOT NULL
	AND ICG_STORES_TMP.CB_END_DT IS NOT NULL
	AND ICG_STORES_TMP.MEASUREMENT_MODEL IS NOT NULL
	AND ICG_STORES_TMP.INFORCE_FLAG IS NOT NULL
	AND ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE IS NOT NULL
	AND ICG_STORES_TMP.CCY_CD IS NOT NULL
	AND ICG_STORES_TMP.STATUS_SOURCE IS NOT NULL
	AND ICG_STORES_TMP.BEN_EXP_DATE IS NOT NULL
	AND (ICG_STORES_TMP.CB_START_DT <= ICG_STORES_TMP.BEN_EXP_DATE OR ICG_STORES_TMP.STATUS_SOURCE <> 'INFORCE');

	---------------------------------------------
	--- INSERT INVALID DATA TO ICG_STORES_INVALID
	---------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT INVALID DATA TO ICG_STORES_INVALID : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	/*
	CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PAYLIFE_INVALID
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	) AS*/
	INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES_PAYLIFE_INVALID
	SELECT
	ICG_STORES_TMP.ENTITY_ID,
	ICG_STORES_TMP.SYSTEM,
	ICG_STORES_TMP.POLICY_NO,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.PRODUCT_CD ELSE ICG_STORES_TMP.PROD_CD END AS PRODUCT_CD,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.PRODUCT_CD ELSE ICG_STORES_TMP.PROD_CD END AS BENEFIT_CD,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.CONTRACT_ID ELSE ICG_STORES_TMP.CONTRACT_ID END AS CONTRACT_ID,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.PORTFOLIO_GROUP ELSE ICG_STORES_TMP.PORTFOLIO_GROUP END AS PORTFOLIO_GROUP,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.COHORT_YEAR ELSE ICG_STORES_TMP.COHORT_YEAR END AS COHORT_YEAR,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.SET_OF_CONTRACT ELSE ICG_STORES_TMP.SET_OF_CONTRACT END AS SET_OF_CONTRACT,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.INSURANCE_CONTRACT_GROUP_ID ELSE ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID END AS INSURANCE_CONTRACT_GROUP_ID,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.ICG_ID_PROPHET ELSE ICG_STORES_TMP.ICG_ID_PROPHET END AS ICG_ID_PROPHET,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.ENTRY_MONTH ELSE ICG_STORES_TMP.ENTRY_MONTH END AS ENTRY_MONTH,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.CB_START_DT ELSE ICG_STORES_TMP.CB_START_DT END AS CB_START_DT,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.CB_END_DT ELSE ICG_STORES_TMP.CB_END_DT END AS CB_END_DT,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.MEASUREMENT_MODEL ELSE ICG_STORES_TMP.MEASUREMENT_MODEL END AS MEASUREMENT_MODEL,
	ICG_STORES_TMP.INFORCE_FLAG AS INFORCE_FLAG,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.COVERAGE_LEVEL_END_DATE ELSE ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE END AS COVERAGE_LEVEL_END_DATE,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.CCY_CD ELSE ICG_STORES_TMP.CCY_CD END AS CCY_CD,
	ICG_STORES_TMP.STATUS_SOURCE AS STATUS_SOURCE,
	CASE WHEN ICG_STORES_TMP.FLAG_INSERT_UPDATE = 'UPDATE' THEN ICG_STORES_VALID.BEN_EXP_DATE ELSE ICG_STORES_TMP.BEN_EXP_DATE END AS BEN_EXP_DATE,
	CAST('PayLife' AS VARCHAR(20)) AS SUBSYSTEM,
	CURRENT_TIMESTAMP AS CREATED_DATE,
	CURRENT_TIMESTAMP AS UPDATED_DATE,

	CONCAT(
	CASE WHEN ICG_STORES_TMP.POLICY_NO IS NULL THEN 'POLICY_NO,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.PROD_CD IS NULL THEN 'PRODUCT_CD,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.PROD_CD IS NULL THEN 'BENEFIT_CD,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.CONTRACT_ID IS NULL THEN 'CONTRACT_ID,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.PORTFOLIO_GROUP IS NULL THEN 'PORTFOLIO_GROUP,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.COHORT_YEAR IS NULL THEN 'COHORT_YEAR,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.SET_OF_CONTRACT IS NULL THEN 'SET_OF_CONTRACT,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID IS NULL THEN 'INSURANCE_CONTRACT_GROUP_ID,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.ICG_ID_PROPHET IS NULL THEN 'ICG_ID_PROPHET,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.ENTRY_MONTH IS NULL THEN 'ENTRY_MONTH,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.CB_START_DT IS NULL THEN 'CB_START_DT,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.CB_END_DT IS NULL THEN 'CB_END_DT,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.MEASUREMENT_MODEL IS NULL THEN 'MEASUREMENT_MODEL,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.INFORCE_FLAG IS NULL THEN 'INFORCE_FLAG,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE IS NULL THEN 'COVERAGE_LEVEL_END_DATE,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.CCY_CD IS NULL THEN 'CCY_CD,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.STATUS_SOURCE IS NULL THEN 'STATUS_SOURCE,' ELSE '' END ,
	CASE WHEN ICG_STORES_TMP.BEN_EXP_DATE IS NULL THEN 'BEN_EXP_DATE,' ELSE '' END,
	CASE WHEN ICG_STORES_TMP.CB_START_DT > ICG_STORES_TMP.BEN_EXP_DATE THEN 'CB_START_DT > BEN_EXP_DATE,' ELSE '' END 
	) AS INVALID_DESC
				
	FROM STAG_ID.STAG_TMP_ICG_STORES_PAYLIFE_TMP ICG_STORES_TMP

	LEFT JOIN
	(
	--VALID ICG_STORES
	SELECT
	POLICY_NO,
	PRODUCT_CD,
	CONTRACT_ID,
	COHORT_YEAR,
	SET_OF_CONTRACT,
	PORTFOLIO_GROUP,
	INSURANCE_CONTRACT_GROUP_ID,
	ICG_ID_PROPHET,
	ENTRY_MONTH,
	CB_START_DT,
	CB_END_DT,
	MEASUREMENT_MODEL,
	COVERAGE_LEVEL_END_DATE,
	CCY_CD,
	BEN_EXP_DATE,
	ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
	FROM FOND_ID.FOND_IFRS17_ICG_STORES
	WHERE UPPER(SUBSYSTEM) = 'PAYLIFE'
	AND PRODUCT_CD = BENEFIT_CD
	) ICG_STORES_VALID
	ON UPPER(TRIM(ICG_STORES_TMP.POLICY_NO)) = UPPER(TRIM(ICG_STORES_VALID.POLICY_NO))
	AND ICG_STORES_TMP.PROD_CD = ICG_STORES_VALID.PRODUCT_CD
	AND ICG_STORES_VALID.ROWNUM_POLICY_NO = 1

	WHERE ICG_STORES_TMP.FLAG_INSERT_UPDATE IN('INSERT', 'UPDATE')
	AND
	(
	ICG_STORES_TMP.POLICY_NO IS NULL
	OR ICG_STORES_TMP.PROD_CD IS NULL
	OR ICG_STORES_TMP.CONTRACT_ID IS NULL
	OR ICG_STORES_TMP.PORTFOLIO_GROUP IS NULL
	OR ICG_STORES_TMP.COHORT_YEAR IS NULL
	OR ICG_STORES_TMP.SET_OF_CONTRACT IS NULL
	OR ICG_STORES_TMP.INSURANCE_CONTRACT_GROUP_ID IS NULL
	OR ICG_STORES_TMP.ICG_ID_PROPHET IS NULL
	OR ICG_STORES_TMP.ENTRY_MONTH IS NULL
	OR ICG_STORES_TMP.CB_START_DT IS NULL
	OR ICG_STORES_TMP.CB_END_DT IS NULL
	OR ICG_STORES_TMP.MEASUREMENT_MODEL IS NULL
	OR ICG_STORES_TMP.INFORCE_FLAG IS NULL
	OR ICG_STORES_TMP.COVERAGE_LEVEL_END_DATE IS NULL
	OR ICG_STORES_TMP.CCY_CD IS NULL
	OR ICG_STORES_TMP.STATUS_SOURCE IS NULL
	OR ICG_STORES_TMP.BEN_EXP_DATE IS NULL
	OR (ICG_STORES_TMP.CB_START_DT > ICG_STORES_TMP.BEN_EXP_DATE AND ICG_STORES_TMP.STATUS_SOURCE = 'INFORCE')
	)

	UNION ALL

	--process terminated policy_number
	SELECT
	ENTITY_ID,
	SYSTEM,
	POLICY_NO,
	PRODUCT_CD,
	BENEFIT_CD,
	CONTRACT_ID,
	PORTFOLIO_GROUP,
	COHORT_YEAR,
	SET_OF_CONTRACT,
	INSURANCE_CONTRACT_GROUP_ID,
	ICG_ID_PROPHET,
	ENTRY_MONTH,
	CB_START_DT,
	CB_END_DT,
	MEASUREMENT_MODEL,
	INFORCE_FLAG,
	COVERAGE_LEVEL_END_DATE,
	CCY_CD,
	STATUS_SOURCE,
	BEN_EXP_DATE,
	SUBSYSTEM,
	CURRENT_TIMESTAMP AS CREATED_DATE,
	CURRENT_TIMESTAMP AS UPDATED_DATE,
	INVALID_DESC
	FROM STAG_ID.STAG_TMP_PAYLIFE_GLISS_TBIILIFE_INSURED_FINAL_TERMINATED
	WHERE STATUS_SOURCE IS NULL
	UNION ALL
	--process blank upload_date
	SELECT
	CAST('IAI' AS VARCHAR(4)) AS ENTITY_ID,
	CAST('PayLife' AS VARCHAR(20)) AS SYSTEM,
	NULLIF(TRIM(POLICY_NO), '') AS POLICY_NO,
	CAST('PayLife' AS VARCHAR(20)) AS PRODUCT_CD,
	CAST('PayLife' AS VARCHAR(20)) AS BENEFIT_CD,
	NULL AS CONTRACT_ID,
	NULL AS PORTFOLIO_GROUP,
	NULL AS COHORT_YEAR,
	NULL AS SET_OF_CONTRACT,
	NULL AS INSURANCE_CONTRACT_GROUP_ID,
	NULL AS ICG_ID_PROPHET,
	NULL AS ENTRY_MONTH,
	NULL AS CB_START_DT,
	NULL AS CB_END_DT,
	NULL AS MEASUREMENT_MODEL,
	NULL AS INFORCE_FLAG,
	NULL AS COVERAGE_LEVEL_END_DATE,
	CAST('IDR' AS VARCHAR(3)) AS CCY_CD,
	NULL AS STATUS_SOURCE,
	NULL AS BEN_EXP_DATE,
	CAST('PayLife' AS VARCHAR(20)) AS SUBSYSTEM,
	CURRENT_TIMESTAMP AS CREATED_DATE,
	CURRENT_TIMESTAMP AS UPDATED_DATE,
	'UPLOAD_DATE.' AS INVALID_DESC
	FROM FOND_ID.FOND_PAYLIFE_ETL4_PAYLIFE
	WHERE BATCHDATE IS NULL 

	-------------------------------------------------------
	--- INSERT TABLE MPFILES PAYLIFE
	-------------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT TABLE MPFILES PAYLIFE : ', @V_START);

	
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	/*
	CREATE TABLE FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE
	WITH
	(
	  DISTRIBUTION = HASH(INSURED_ID),
	  HEAP
	) AS
	*/
	INSERT INTO FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE
	SELECT
	GLISS_TBIILIFE_INSURED_FINAL.INSURED_ID,
	GLISS_TBIILIFE_INSURED_FINAL.COMPANY_CODE,
	GLISS_TBIILIFE_INSURED_FINAL.INSURED_NAME,
	CAST(GLISS_TBIILIFE_INSURED_FINAL.INSURED_DOB AS DATE) AS INSURED_DOB,
	GLISS_TBIILIFE_INSURED_FINAL.INSURED_KTP,
	GLISS_TBIILIFE_INSURED_FINAL.INSURED_SEX,
	CAST(GLISS_TBIILIFE_INSURED_FINAL.INSURED_PAYROLL_DATE AS DATE) AS INSURED_PAYROLL_DATE,
	GLISS_TBIILIFE_INSURED_FINAL.INSURED_TYPE,
	CAST(GLISS_TBIILIFE_INSURED_FINAL.UPLOAD_DATE AS DATE) AS UPLOAD_DATE,
	GLISS_TBIILIFE_INSURED_FINAL.UPLOAD_BY,
	CAST(GLISS_TBIILIFE_INSURED_FINAL.CREATED_DATE AS DATE) AS CREATED_DATE,
	ICG_STORES_VALID.PRODUCT_CD,
	ICG_CONFIG.IFRS_ONEROUS_GRP,
	CASE
	WHEN YEAR(@V_START_DATE) = ICG_STORES_VALID.COHORT_YEAR THEN ICG_STORES_VALID.ENTRY_MONTH
	WHEN ICG_STORES_VALID.COHORT_YEAR < 1997 THEN 13
	ELSE (ICG_STORES_VALID.COHORT_YEAR - 1997) + 14
	END AS IFRS_CY_GRP,
	PORTFOLIO_MAP.IFRS_PORT_GRP,
	PORTFOLIO_MAP.IFRS_MEASURE_MODEL,
	ICG_STORES_VALID.COHORT_YEAR AS BASIC_ENTRY_YEAR,
	ICG_STORES_VALID.ENTRY_MONTH AS BASIC_ENTRY_MONTH,
	(CAST(YEAR(ICG_STORES_VALID.CB_END_DT) AS NUMERIC(4,0))-CAST(YEAR(ICG_STORES_VALID.CB_START_DT) AS NUMERIC(4,0)))*12
	+ (CAST(MONTH(ICG_STORES_VALID.CB_END_DT) AS NUMERIC(2,0))-CAST(MONTH(ICG_STORES_VALID.CB_START_DT) AS NUMERIC(2,0))) AS IFRS_CB_TERM_M,
	CASE
	WHEN YEAR(@V_START_DATE) = ICG_STORES_VALID.COHORT_YEAR THEN ICG_STORES_VALID.ENTRY_MONTH
	WHEN ICG_STORES_VALID.COHORT_YEAR IS NOT NULL THEN 0
	ELSE NULL
	END AS MTHS_TO_SALE,
	ICG_STORES_VALID.INSURANCE_CONTRACT_GROUP_ID AS IFRS_ICG_ID,
	ICG_STORES_VALID.ICG_ID_PROPHET AS IFRS_ICG_ID_PROPHET,
	ICG_CONFIG.SUB_GROUP_ID,
	ICG_STORES_VALID.ENTITY_ID AS ENTITY_ID,
	ICG_STORES_VALID.CCY_CD,
	ICG_STORES_VALID.CB_START_DT AS CB_START_DT,
	ICG_STORES_VALID.CB_END_DT AS CB_END_DT,
	CASE
	WHEN YEAR(@V_START_DATE) = ICG_STORES_VALID.COHORT_YEAR THEN CONCAT(ICG_STORES_VALID.INSURANCE_CONTRACT_GROUP_ID , '_', UPPER(CONVERT(char(3),DATENAME(MONTH,CAST(ICG_STORES_VALID.CB_START_DT AS DATE)))))
	END AS REL_INSURANCE_CONTRACT_GROUP_ID,
	ICG_STORES_VALID.STATUS_SOURCE,
	@BATCH_MASTER_ID AS BATCH_MASTER_ID, 
    @BATCH_RUN_ID AS BATCH_RUN_ID,
    @JOB_MASTER_ID AS JOB_MASTER_ID,
    @JOB_RUN_ID  AS JOB_RUN_ID,
    @batchdatestr AS BATCHDATE,
    @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
	FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL AS GLISS_TBIILIFE_INSURED_FINAL

	LEFT JOIN
	(
	--VALID ICG_STORES
	SELECT
	ENTITY_ID,
	POLICY_NO,
	PRODUCT_CD,
	INSURANCE_CONTRACT_GROUP_ID,
	ICG_ID_PROPHET,
	COHORT_YEAR,
	ENTRY_MONTH,
	CCY_CD,
	CB_START_DT,
	CB_END_DT,
	STATUS_SOURCE,
	ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
	FROM FOND_ID.FOND_IFRS17_ICG_STORES
	WHERE UPPER(SUBSYSTEM) = 'PAYLIFE'
	AND PRODUCT_CD = BENEFIT_CD
	) ICG_STORES_VALID
	ON NULLIF(UPPER(TRIM(CAST(GLISS_TBIILIFE_INSURED_FINAL.INSURED_ID AS VARCHAR))), '') = UPPER(TRIM(ICG_STORES_VALID.POLICY_NO))
	AND ICG_STORES_VALID.ROWNUM_POLICY_NO = 1
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING PORTFOLIO_MAP
	ON ICG_STORES_VALID.PRODUCT_CD = PORTFOLIO_MAP.PRODUCT_CD
	AND ICG_STORES_VALID.CCY_CD = PORTFOLIO_MAP.CCY_CD
	AND UPPER(TRIM(CAST(PORTFOLIO_MAP.SYSTEM AS VARCHAR))) = 'PAYLIFE'
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_SET_OF_CONTRACT SET_OF_CONTRACT
	ON ICG_STORES_VALID.PRODUCT_CD = SET_OF_CONTRACT.PRODUCT_CD
	AND ICG_STORES_VALID.CCY_CD = SET_OF_CONTRACT.CCY_CD
	AND UPPER(TRIM(CAST(SET_OF_CONTRACT.SYSTEM AS VARCHAR))) = 'PAYLIFE'
	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG AS ICG_CONFIG
	ON (CASE WHEN (ICG_STORES_VALID.COHORT_YEAR) <'2018' THEN '2018' ELSE (ICG_STORES_VALID.COHORT_YEAR) END) = ICG_CONFIG.COHORT_YEAR
	AND PORTFOLIO_MAP.PORTFOLIO_GROUP = ICG_CONFIG.PORTFOLIO_GROUP
	AND SET_OF_CONTRACT.SET_OF_CONTRACT = ICG_CONFIG.SET_OF_CONTRACT
	WHERE GLISS_TBIILIFE_INSURED_FINAL.UPLOAD_DATE = (SELECT MAX(UPLOAD_DATE) AS UPLOAD_DATE FROM STAG_ID.STAG_PAYLIFE_STAG_TBIILIFE_INSURED_FINAL)

	--store end step to log
	SET @V_END = CURRENT_TIMESTAMP;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = CONCAT('Finish ', @V_FUNCTION_NAME, ' : ', @V_END, ' Duration ', DATEDIFF(MINUTE, @V_START, @V_END));

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_END, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	--IF @@TRANCOUNT > 0  
	--	COMMIT TRAN;
	--------------------------------------------------------------------
	--- BACKUP MPFILES TABLE TO HISTORY TABLE
	--------------------------------------------------------------------
	-- insert log process
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	= 'BACKUP FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE TO FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE_HIS: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	
	DELETE FROM [FOND_ID].[FOND_IFRS17_MPFILES_PAYLIFE_HIS]
	WHERE CAST(BACKUP_BATCHDATE AS DATE) = EOMONTH(CONVERT(DATE, CONVERT(CHAR(10), @V_START_DATE)));

	INSERT INTO [FOND_ID].[FOND_IFRS17_MPFILES_PAYLIFE_HIS]
	SELECT A.*
	FROM (
		SELECT [INSURED_ID] ,[COMPANY_CODE] ,[INSURED_NAME] ,[INSURED_DOB] ,[INSURED_KTP] ,[INSURED_SEX] ,[INSURED_PAYROLL_DATE] ,[INSURED_TYPE] ,[UPLOAD_DATE] ,[UPLOAD_BY] ,[CREATED_DATE] ,[PRODUCT_CD] ,[IFRS_ONEROUS_GRP] ,[IFRS_CY_GRP] ,[IFRS_PORT_GRP] ,[IFRS_MEASURE_MODEL] ,[BASIC_ENTRY_YEAR] ,[BASIC_ENTRY_MONTH] ,[IFRS_CB_TERM_M] ,[MTHS_TO_SALE] ,[IFRS_ICG_ID] ,[IFRS_ICG_ID_PROPHET] ,[SUB_GROUP_ID] ,[ENTITY_ID] ,[CCY_CD] ,[CB_START_DT] ,[CB_END_DT] ,[REL_INSURANCE_CONTRACT_GROUP_ID] ,[STATUS_SOURCE],
		EOMONTH(CONVERT(DATE, CONVERT(CHAR(10), @V_START_DATE))) AS BACKUP_BATCHDATE,
		BATCH_MASTER_ID, 
		BATCH_RUN_ID,
		JOB_MASTER_ID,
		JOB_RUN_ID,
		BATCHDATE,
		ETL_PROCESS_DATE_TIME
		FROM [FOND_ID].[FOND_IFRS17_MPFILES_PAYLIFE]
	)A;

END TRY
	BEGIN CATCH
	    DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
		DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
		DECLARE @ErrorState AS INT = ERROR_STATE()

 		--IF @@TRANCOUNT > 0  
		--	ROLLBACK TRAN; 
		
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)
	
	END CATCH

END



