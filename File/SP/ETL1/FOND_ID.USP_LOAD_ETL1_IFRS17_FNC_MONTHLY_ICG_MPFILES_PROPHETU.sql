CREATE PROC [FOND_ID].[USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PROPHETU] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@P_PRD_ID [integer] AS
BEGIN
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_DURATION		datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = '[USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PROPHETU]';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	
	--- ABC Framework parameter
	DECLARE @BATCH_MASTER_ID    VARCHAR(20) = 0;
	DECLARE @BATCH_RUN_ID    VARCHAR(20)  = 0;
	DECLARE @JOB_MASTER_ID    VARCHAR(20)  = 0;
	DECLARE @JOB_RUN_ID    VARCHAR(20)  = 0;
	DECLARE @GMT_START_DTTM    VARCHAR(20) = getdate();
	
	BEGIN TRY
		---------------------------------------------------
		--- Setup ABC Framework Parameters
		---------------------------------------------------
		EXEC STAG_ID.USP_GetRunIdReturn
		@JobName = @JOBNAMESTR
		,@BATCH_MASTER_ID  = @BATCH_MASTER_ID OUTPUT
		,@BATCH_RUN_ID   = @BATCH_RUN_ID OUTPUT
		,@JOB_MASTER_ID  = @JOB_MASTER_ID OUTPUT
		,@JOB_RUN_ID  = @JOB_RUN_ID OUTPUT
		,@GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
		------END GET RUN ID DETAIL FROM ABC------
		
		
		SET @V_START_DATE	= convert(date, cast(@P_PRD_ID as varchar(8))); -- valuation extract date
		PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
		SET @V_START 	= convert(datetime,getDATE());

		SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
		PRINT	@V_DESCRIPTION;
		SET @V_SEQNO		= @V_SEQNO + 1;

		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		
		---------------------------------------------------
		--- Drop temp tables
		---------------------------------------------------
		IF OBJECT_ID('STAG_ID.TMP_IFRS17_PROPHETU_BENEFIT_EXPIRY') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_PROPHETU_BENEFIT_EXPIRY;
		IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_DUP') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_DUP ;
		IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_ICG_FLAG') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_ICG_FLAG;
		IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU;
		IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPHETU_TMP_1', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPHETU_TMP_1;

		
		
		--IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_INVALID') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_INVALID;
		--IF OBJECT_ID('FOND_ID.FOND_IFRS17_MPFILES_PROPHETU') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_MPFILES_PROPHETU;
		TRUNCATE TABLE FOND_ID.FOND_IFRS17_MPFILES_PROPHETU;
		TRUNCATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_INVALID;
		
		
		---------------------------------------------------
		--- Create Temporary Table for ICG Stores
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE TABLE TMP_IFRS17_PROPHETU_BENEFIT_EXPIRY : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
		-- get benefit expiry
		--drop table if exists STAG_ID.TMP_IFRS17_PROPHETU_BENEFIT_EXPIRY ;
		
		CREATE TABLE STAG_ID.TMP_IFRS17_PROPHETU_BENEFIT_EXPIRY  
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
		as
		select covrpf.CHDRNUM as POLICY_NO, 
		CONVERT(date, cast(RISK_CESS_DATE as varchar(8))) as BEN_EXP_DATE
		,zprupf.CNTTYPE
		,row_number() over(partition by covrpf.CHDRNUM,zprupf.CNTTYPE order by  CONVERT(date, cast(RISK_CESS_DATE as varchar(8))) desc) as IDX
		-- ABC Framework fields
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		from STAG_ID.STAG_LIFEASIA_COVRPF covrpf
		join STAG_ID.STAG_LIFEASIA_ZPRUPF_V2 zprupf
		on covrpf.CHDRNUM = zprupf.CHDRNUM 
		and trim(SUBSTRING(covrpf.CRTABLE,1,3)) = trim(zprupf.CNTTYPE) 
		where covrpf.VALIDFLAG = 1
		;

		
		---------------------------------------------------
		--- Check Duplicate records
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE  TABLE FOND_IFRS17_ICG_STORES_PROPHETU_DUP  : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	

		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
		-- check duplicate
		--drop table if exists FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_DUP ;
		
		CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_DUP  
		WITH
		(
		 DISTRIBUTION = HASH(CHDRNUM)
		 ,CLUSTERED INDEX(CHDRNUM)
		)
		as
		select 
		-- existing column from zprupf_v2
		ZPRUPF.SLSCNL
		,NULLIF(TRIM(ZPRUPF.CHDRNUM),'') AS CHDRNUM
		,ZPRUPF.CNTCURR
		,ZPRUPF.STATCODE
		,ZPRUPF.CNTTYPE
		,ZPRUPF.ANBCCD
		,ZPRUPF.SEX
		,ZPRUPF.MORTCLS
		,ZPRUPF.API
		,ZPRUPF.BILLFREQ
		,ZPRUPF.CRRCD
		,ZPRUPF.PRUSVR
		,ZPRUPF.SINGP
		,ZPRUPF.SUMINS
		,ZPRUPF.CRTABLECC
		,ZPRUPF.ANBCC
		,ZPRUPF.RCDCC
		,ZPRUPF.SUMINCC
		,ZPRUPF.RCESAGECC
		,ZPRUPF.CRTABLEAD
		,ZPRUPF.ANBAD
		,ZPRUPF.RCDAD
		,ZPRUPF.MORTCLSAD
		,ZPRUPF.SUMINAD
		,ZPRUPF.RCESAGEAD
		,ZPRUPF.CRTABLEADD
		,ZPRUPF.ANBADD
		,ZPRUPF.RCDADD
		,ZPRUPF.MORTCLSADD
		,ZPRUPF.SUMINADD
		,ZPRUPF.RCESAGEADD
		,ZPRUPF.CRTABLEHB
		,ZPRUPF.ANBHB
		,ZPRUPF.RCDHB
		,ZPRUPF.SUMINHB
		,ZPRUPF.RCESAGEHB
		,ZPRUPF.ANBWVR
		,ZPRUPF.CRTABLEWVR
		,ZPRUPF.RCDWVR
		,ZPRUPF.SUMINWVR
		,ZPRUPF.RCESAGEWVR
		,ZPRUPF.CRTABLESPO
		,ZPRUPF.ANBSPO
		,ZPRUPF.SEXTWO
		,ZPRUPF.RCDSPO
		,ZPRUPF.SUMINSPO
		,ZPRUPF.RCESDTE
		,ZPRUPF.HOISSDTE
		,ZPRUPF.TTLFUND
		,ZPRUPF.PRCF
		,ZPRUPF.PREF
		,ZPRUPF.PRFF
		,ZPRUPF.PRMF
		,ZPRUPF.PDMF
		,ZPRUPF.CHGDTE
		,ZPRUPF.PYRTRM
		,ZPRUPF.CURYRTUP
		,ZPRUPF.TOPUPLAST
		,ZPRUPF.PCESTRM
		,ZPRUPF.ANBCCP
		,ZPRUPF.RCDCCP
		,ZPRUPF.RCESAGECCP
		,ZPRUPF.SUMINCCP
		,ZPRUPF.CRTABLECCP
		,ZPRUPF.ALLOCIND
		,ZPRUPF.BILCHNL
		,ZPRUPF.WDRAMNT
		,ZPRUPF.CLNTNAME
		,ZPRUPF.LIFCNUM
		,ZPRUPF.AGNTNUM
		,ZPRUPF.UNITNUM
		,ZPRUPF.CRTABLHS
		,ZPRUPF.ANBHS
		,ZPRUPF.RCDHS
		,ZPRUPF.SUMINHS
		,ZPRUPF.RCESAGEHS
		,ZPRUPF.CRTABLLT
		,ZPRUPF.ANBLT
		,ZPRUPF.RCDLT
		,ZPRUPF.SUMINLT
		,ZPRUPF.RCESAGELT
		,ZPRUPF.CRTABL3LF
		,ZPRUPF.ANB3LF
		,ZPRUPF.SEX3LF
		,ZPRUPF.RCD3LF
		,ZPRUPF.SUMIN3LF
		,ZPRUPF.RCESDT3LF
		,ZPRUPF.PAAFLAG
		,ZPRUPF.PTDATE
		,ZPRUPF.WAIVERSTAT
		,ZPRUPF.CLAIMSAR
		,ZPRUPF.FPAYDATE
		,ZPRUPF.PRMP
		,ZPRUPF.TPDCLAIM
		,ZPRUPF.ADDR04CITY
		,ZPRUPF.ADDR05PROV
		,ZPRUPF.CRTABLECI
		,ZPRUPF.ANBCI
		,ZPRUPF.RCDCI
		,ZPRUPF.SUMINCI
		,ZPRUPF.RCESDTECI
		,ZPRUPF.CRTABLEMCC
		,ZPRUPF.ANBMCC
		,ZPRUPF.RCDMCC
		,ZPRUPF.SUMINMCC
		,ZPRUPF.RCESDTEMCC
		,ZPRUPF.PRODCDE
		,ZPRUPF.ANBESCC
		,ZPRUPF.RCDESCC
		,ZPRUPF.SUMINESCC
		,ZPRUPF.RCESDTEESCC
		,ZPRUPF.CLTBDAY
		,ZPRUPF.MEDPCLAS
		,ZPRUPF.ADMINCHG
		,ZPRUPF.COIDEBT
		,ZPRUPF.TOTCHGHS
		,ZPRUPF.TOTTPACOST
		,ZPRUPF.CODE
		,ZPRUPF.ZLONGDESC
		,ZPRUPF.RCESAGESO
		,ZPRUPF.RCESAGEPW
		,ZPRUPF.RCESAGEPWX
		,ZPRUPF.RCESAGECI
		,ZPRUPF.RCESAGEMC
		,ZPRUPF.RCESAGEEC
		,ZPRUPF.LSTTOPDATE
		,ZPRUPF.COWNNUM
		,ZPRUPF.CRTABLEJCC
		,ZPRUPF.ANBJCC
		,ZPRUPF.RCDJCC
		,ZPRUPF.SUMINJCC
		,ZPRUPF.RCESAGEJCC
		,ZPRUPF.SUMINPMC
		,ZPRUPF.PRGC
		,ZPRUPF.PDGC
		,ZPRUPF.PRUSTATCDE
		,ZPRUPF.CRTABLESAV
		,ZPRUPF.AGNTDLCODE
		,ZPRUPF.UMCODE
		,ZPRUPF.PREP
		,ZPRUPF.CLMTYP
		,ZPRUPF.PRIEF
		,ZPRUPF.EDUPAR1C
		,ZPRUPF.EDUP1SUM
		,ZPRUPF.EDUPAR2C
		,ZPRUPF.EDUP2SUM
		,ZPRUPF.CRTABL3LT
		,ZPRUPF.ANB3LT
		,ZPRUPF.RCD3LT
		,ZPRUPF.SUMIN3LT
		,ZPRUPF.RCESAGE3LT
		,ZPRUPF.NLGFLAG
		,ZPRUPF.REGIONFLG
		,ZPRUPF.PRVEF
		,ZPRUPF.PRAEF
		,ZPRUPF.ANBCCB
		,ZPRUPF.RCDCCB
		,ZPRUPF.RCESAGECCB
		,ZPRUPF.SUMINCCB
		,ZPRUPF.CRTABLECCB
		,ZPRUPF.PDIEF
		,ZPRUPF.MINIIND
		,ZPRUPF.PDGV
		,ZPRUPF.PDGM
		,ZPRUPF.CODE_CHC
		,ZPRUPF.AGE_ENTRY_CHC
		,ZPRUPF.CRRCD_CHC
		,ZPRUPF.PLANTYPE_CHC
		,ZPRUPF.AGE_END_CHC
		,ZPRUPF.CODE_DISABLE
		,ZPRUPF.AGE_ENTRY_DISABLE
		,ZPRUPF.CRRCD_DISABLE
		,ZPRUPF.SUMINS_DISABLE
		,ZPRUPF.AGE_END_DISABLE
		,ZPRUPF.PRGV
		,ZPRUPF.PRGM
		,ZPRUPF.TOTAL_FUND_BAV
		,ZPRUPF.PRCF_BAV
		,ZPRUPF.PREF_BAV
		,ZPRUPF.PRFF_BAV
		,ZPRUPF.PRGC_BAV
		,ZPRUPF.PRMF_BAV
		,ZPRUPF.PRMP_BAV
		,ZPRUPF.PRIE_BAV
		,ZPRUPF.PRAE_BAV
		,ZPRUPF.PRVE_BAV
		,ZPRUPF.PRGM_BAV
		,ZPRUPF.PRGV_BAV
		,ZPRUPF.PDFF_BAV
		,ZPRUPF.PDGC_BAV
		,ZPRUPF.PDGM_BAV
		,ZPRUPF.PDGV_BAV
		,ZPRUPF.PLEF_BAV
		,ZPRUPF.TOTAL_FUND_TPAV
		,ZPRUPF.PRCF_TPAV
		,ZPRUPF.PREF_TPAV
		,ZPRUPF.PRFF_TPAV
		,ZPRUPF.PRGC_TPAV
		,ZPRUPF.PRMF_TPAV
		,ZPRUPF.PRMP_TPAV
		,ZPRUPF.PRIE_TPAV
		,ZPRUPF.PRAE_TPAV
		,ZPRUPF.PRVE_TPAV
		,ZPRUPF.PRGM_TPAV
		,ZPRUPF.PRGV_TPAV
		,ZPRUPF.PDFF_TPAV
		,ZPRUPF.PDGC_TPAV
		,ZPRUPF.PDGM_TPAV
		,ZPRUPF.PDGV_TPAV
		,ZPRUPF.PLEF_TPAV
		,ZPRUPF.TOTAL_UNIT_ACT
		,ZPRUPF.PRCF_ACT
		,ZPRUPF.PREF_ACT
		,ZPRUPF.PRFF_ACT
		,ZPRUPF.PRGC_ACT
		,ZPRUPF.PRMF_ACT
		,ZPRUPF.PRMP_ACT
		,ZPRUPF.PRIE_ACT
		,ZPRUPF.PRAE_ACT
		,ZPRUPF.PRVE_ACT
		,ZPRUPF.PRGM_ACT
		,ZPRUPF.PRGV_ACT
		,ZPRUPF.PDFF_ACT
		,ZPRUPF.PDGC_ACT
		,ZPRUPF.PDGM_ACT
		,ZPRUPF.PDGV_ACT
		,ZPRUPF.PLEF_ACT
		,ZPRUPF.TOTAL_UNIT_PRV
		,ZPRUPF.PRCF_PRV
		,ZPRUPF.PREF_PRV
		,ZPRUPF.PRFF_PRV
		,ZPRUPF.PRGC_PRV
		,ZPRUPF.PRMF_PRV
		,ZPRUPF.PRMP_PRV
		,ZPRUPF.PRIE_PRV
		,ZPRUPF.PRAE_PRV
		,ZPRUPF.PRVE_PRV
		,ZPRUPF.PRGM_PRV
		,ZPRUPF.PRGV_PRV
		,ZPRUPF.PDFF_PRV
		,ZPRUPF.PDGC_PRV
		,ZPRUPF.PDGM_PRV
		,ZPRUPF.PDGV_PRV
		,ZPRUPF.PLEF_PRV
		,ZPRUPF.BASIC_PREMIUM_PREV
		,ZPRUPF.STFLAG
		,ZPRUPF.SIOFLAG
		,ZPRUPF.BILLCHNL_PRV
		,ZPRUPF.FUPCODE_FOR_PBC
		,ZPRUPF.REQUEST_DATE_FOR_PBC
		,ZPRUPF.PRNV
		,ZPRUPF.PPHPLUS_PLAN_TYPE
		,ZPRUPF.PDNV
		,ZPRUPF.PPHPLUS_CAMPAIGN_FLAG
		,ZPRUPF.CODE_PRUTOP_CCB61
		,ZPRUPF.AGE_ENTRY_PRUTOP_CCB61
		,ZPRUPF.CRRCD_PRUTOP_CCB61
		,ZPRUPF.CODE_PRUTOP_CCB34
		,ZPRUPF.AGE_ENTRY_PRUTOP_CCB34
		,ZPRUPF.CRRCD_PRUTOP_CCB34
		,ZPRUPF.CODE_PRUTOP_ESCC
		,ZPRUPF.AGE_ENTRY_PRUTOP_ESCC
		,ZPRUPF.CRRCD_PRUTOP_ESCC
		,ZPRUPF.PDGT
		,ZPRUPF.PSMA
		,ZPRUPF.PSMA_BAV
		,ZPRUPF.PSMA_TPAV
		,ZPRUPF.PSMA_ACT 
		,ZPRUPF.PSMA_PRV
		,ZPRUPF.STAT_SECT
		,ZPRUPF.RCESAGE 
		,ZPRUPF.FLAGS 
		,ZPRUPF.PDIF 
		,ZPRUPF.PRDP
	    ,ZPRUPF.PRDP_BAV
	    ,ZPRUPF.PRDP_TPAV
	    ,ZPRUPF.PRDP_BON
	    ,ZPRUPF.PRDP_PRV
	    ,ZPRUPF.PRBI
	    ,ZPRUPF.WP_FLAG
	    ,ZPRUPF.CAMP_CODE
		-- ABC Framework fields
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		from STAG_ID.STAG_LIFEASIA_ZPRUPF_V2 ZPRUPF
		where CHDRNUM in (select CHDRNUM from STAG_ID.STAG_LIFEASIA_ZPRUPF_V2 
		where NULLIF(TRIM(CHDRNUM),'') IS NOT NULL group by CHDRNUM having count(*) > 1)
		;  

		---------------------------------------------------
		--- Create Temporary Table for ICG Identification Process
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE TABLE TMP_IFRS17_ICG_STORES_PROPHETU_ICG_FLAG : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	


		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
		--drop table if exists STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_icg_flag;
		CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_ICG_FLAG 
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
		AS 
		SELECT distinct (CASE WHEN NULLIF(TRIM(A.CHDRNUM),'') IS NOT NULL THEN A.CHDRNUM ELSE 'N/A' END) AS POLICY_NO
		,(CASE WHEN UPPER(TRIM(A.STATCODE)) = 'IF' THEN   
				(CASE WHEN ICGS.POLICY_NO IS NULL THEN 'NEW BUSINESS'
					   WHEN CBM.BOUND_BY_REPRICE='N' AND CBM.BOUND_BY_TERMINATION_PROVISION = 'N' AND ICGS.STATUS_SOURCE <> 'IF' THEN 'UPDATE EXISTING BUSINESS'
					   WHEN CBM.BOUND_BY_REPRICE='N' AND CBM.BOUND_BY_TERMINATION_PROVISION = 'N' THEN 'NO UPDATE'
					   WHEN CBM.BOUND_BY_REPRICE = 'Y' AND dateadd(day,-1,CONVERT(date, cast(cast(A.PTDATE as integer) as varchar(8)))) >  ICGS.CB_END_DT THEN 'NEW BUSINESS' 
					   WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN 'NEW BUSINESS'
					   WHEN ICGS.STATUS_SOURCE <> 'IF' THEN 'UPDATE EXISTING BUSINESS'
					   ELSE 'NO UPDATE'
				END)
			   -- A.STATCODE <> 'IF'
			   WHEN ICGS.POLICY_NO IS NULL THEN 'NEW BUSINESS'
			   WHEN A.STATCODE IS NULL THEN 'UPDATE EXISTING BUSINESS'
			   WHEN LOWER(TRIM(A.STATCODE)) <> LOWER(TRIM(ICGS.STATUS_SOURCE)) THEN 'UPDATE EXISTING BUSINESS'
			   ELSE 'NO UPDATE'
		END) AS ICG_FLAG
		-- ABC Framework fields
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		FROM STAG_ID.STAG_LIFEASIA_ZPRUPF_V2 A
		LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_DUP dup 
		on (CASE WHEN NULLIF(TRIM(A.CHDRNUM),'') IS NOT NULL THEN A.CHDRNUM ELSE 'N/A' END) = dup.CHDRNUM
		LEFT JOIN (
			select a.*
			, row_number() over(partition by POLICY_NO 
			order by CB_START_DT desc, CB_END_DT desc, CREATED_DATE desc, UPDATED_DATE desc) as IDX 
			FROM FOND_ID.FOND_IFRS17_ICG_STORES a
			where lower(trim(SUBSYSTEM)) = lower(trim('Prophetu'))
			AND PRODUCT_CD = BENEFIT_CD
		) ICGS
		on (CASE WHEN NULLIF(TRIM(A.CHDRNUM),'') IS NOT NULL THEN A.CHDRNUM ELSE 'N/A' END) = ICGS.POLICY_NO AND ICGS.IDX = 1
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_CB_MAPPING CBM ON A.CNTTYPE = CBM.PRODUCT_CD
		AND UPPER(TRIM(CAST('Life Asia' AS VARCHAR(20)))) = UPPER(TRIM(CBM.SYSTEM))
		where dup.CHDRNUM is null
		;
	
		----------------------------------------------
		--create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPHETU_TMP_1
		-----------------------------------------------
		
		SET @V_SEQNO = @V_SEQNO + 1;
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('create temp table tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPHETU_TMP_1 : ', @V_START);

		INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, [DESCRIPTION])
		VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

		
		CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPHETU_TMP_1
		WITH
		(
		  DISTRIBUTION = HASH(POLICY_NO),
		  HEAP
		)
		AS
		SELECT  
		-- icg_stores column
		CAST('IAI' AS VARCHAR(4)) AS ENTITY_ID
		,CAST('Life Asia' AS VARCHAR(20)) AS SYSTEM
		,NULLIF(TRIM(A.CHDRNUM),'') AS POLICY_NO
		--,A.CNTTYPE AS PRODUCT_CD
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN A.CNTTYPE
			 ELSE ICGS.PRODUCT_CD
		END) AS PRODUCT_CD
		--,A.CNTTYPE AS BENEFIT_CD
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN A.CNTTYPE
			 ELSE ICGS.BENEFIT_CD
		END) AS BENEFIT_CD
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN 
				NULLIF(TRIM(A.CHDRNUM),'') + '-' + FORMAT((CASE 
					WHEN A.HOISSDTE = 99999999 THEN NULL
					WHEN ICGS.POLICY_NO IS NULL THEN CONVERT(date, cast(A.HOISSDTE as varchar(8))) 
					WHEN CBM.BOUND_BY_REPRICE = 'Y' AND dateadd(day,-1,CONVERT(date, cast(cast(A.PTDATE as integer) as varchar(8)))) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
					WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				END),'yyyy')
			   ELSE ICGS.CONTRACT_ID
		END) AS CONTRACT_ID
        ,(CASE
		    WHEN ICG_FLAG = 'NEW BUSINESS' THEN
			  CASE
	            WHEN PFM.PRODUCT_CD IS NOT NULL THEN
	              CASE
		            WHEN PFM.VFA_ELIGIBLE = 'N' THEN PFM.PORTFOLIO_GROUP
		             WHEN PFM.VFA_ELIGIBLE = 'Y' AND RIGHT(PFM.PORTFOLIO_GROUP,3) NOT IN ('VFA') THEN TRIM(PFM.PORTFOLIO_GROUP) + '_' +  
				      CASE
					    WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 0 THEN 'GMM'
						WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 1 THEN 'VFA'
					  END
			        WHEN PFM.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PFM.PORTFOLIO_GROUP), 1, LEN(TRIM(PFM.PORTFOLIO_GROUP))-3) +
			          CASE
			            WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 0 THEN 'GMM'
				        WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 1 THEN 'VFA'
			          END
		          END
			  END
		    ELSE ICGS.PORTFOLIO_GROUP
		  END) AS PORTFOLIO_GROUP
		,CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
			CAST(FORMAT((
			(CASE 	
					WHEN A.HOISSDTE = 99999999 THEN NULL
					WHEN ICGS.POLICY_NO IS NULL THEN CONVERT(date, cast(A.HOISSDTE as varchar(8))) 
					WHEN CBM.BOUND_BY_REPRICE = 'Y' AND dateadd(day,-1,CONVERT(date, cast(cast(A.PTDATE as integer) as varchar(8)))) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
					WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				END)
			 ),'yyyy') AS NUMERIC(4,0)) 
			ELSE ICGS.COHORT_YEAR
			END AS COHORT_YEAR
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN SC.SET_OF_CONTRACT
			 ELSE ICGS.SET_OF_CONTRACT
		END) AS SET_OF_CONTRACT
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN ICC.INSURANCE_CONTRACT_GROUP_ID
			 ELSE ICGS.INSURANCE_CONTRACT_GROUP_ID
		END) AS INSURANCE_CONTRACT_GROUP_ID
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN ICC.ICG_ID_PROPHET
			 ELSE ICGS.ICG_ID_PROPHET
		END) AS ICG_ID_PROPHET
		,CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
			CAST(FORMAT((
				(CASE 	
					WHEN A.HOISSDTE = 99999999 THEN NULL
					WHEN ICGS.POLICY_NO IS NULL THEN CONVERT(date, cast(A.HOISSDTE as varchar(8))) 
					WHEN CBM.BOUND_BY_REPRICE = 'Y' AND dateadd(day,-1,CONVERT(date, cast(cast(A.PTDATE as integer) as varchar(8)))) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
					WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				END)
			 ),'MM') AS NUMERIC(2,0)) 
		  ELSE ICGS.ENTRY_MONTH
		 END as ENTRY_MONTH
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
				(CASE 	
					WHEN ICGS.POLICY_NO IS NULL AND A.CRRCD > A.HOISSDTE  THEN CONVERT(date, cast(A.HOISSDTE as varchar(8))) 
					WHEN ICGS.POLICY_NO IS NULL THEN CONVERT(date, cast(A.CRRCD as varchar(8))) 
					WHEN CBM.BOUND_BY_REPRICE = 'Y' AND dateadd(day,-1,CONVERT(date, cast(cast(A.PTDATE as integer) as varchar(8)))) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
					WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				END)
			 ELSE ICGS.CB_START_DT
		END) AS CB_START_DT
		,(CASE
		    WHEN ICG_FLAG = 'NEW BUSINESS' THEN
			  CASE
	            WHEN PFM.PRODUCT_CD IS NOT NULL THEN
	              CASE
		            WHEN PFM.VFA_ELIGIBLE = 'N' THEN PFM.MEASUREMENT_MODEL
			        WHEN PFM.VFA_ELIGIBLE = 'Y' THEN
			          CASE
			            WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 0 THEN 'GMM'
				        WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 1 THEN 'VFA'
			          END
		          END
			  END
		    ELSE ICGS.MEASUREMENT_MODEL
		  END) AS MEASUREMENT_MODEL
		,(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN SMT.INFORCE_FLAG
			 ELSE ICGS.INFORCE_FLAG
		END) AS INFORCE_FLAG
		-- need confirmation and will be updated in the next iteration
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
			(CASE 
				WHEN BOUND_BY_REPRICE='N' AND BOUND_BY_TERMINATION_PROVISION = 'N' THEN BEXP.BEN_EXP_DATE -- BEN_EXP_DATE (RISK_CESS_DATE) 
				WHEN BOUND_BY_REPRICE = 'Y' AND BOUND_BY_TERMINATION_PROVISION = 'N' THEN 
					 dateadd(month,COALESCE(CAST(CBM.POINT_OF_BOUNDARY_REPRICE AS integer),0),
						(CASE 	
							WHEN ICGS.POLICY_NO IS NULL THEN CONVERT(date, cast(A.CRRCD as varchar(8))) 
							WHEN CBM.BOUND_BY_REPRICE = 'Y' AND dateadd(day,-1,CONVERT(date, cast(cast(A.PTDATE as integer) as varchar(8)))) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
							WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
						END))
				WHEN BOUND_BY_TERMINATION_PROVISION = 'Y' AND BOUND_BY_REPRICE = 'N'  THEN 
					 dateadd(month,COALESCE(CAST(CBM.POINT_OF_BOUNDARY_TERMINATION AS integer),0),
						 (CASE 	
							WHEN ICGS.POLICY_NO IS NULL THEN CONVERT(date, cast(A.CRRCD as varchar(8))) 
							WHEN CBM.BOUND_BY_REPRICE = 'Y' AND dateadd(day,-1,CONVERT(date, cast(cast(A.PTDATE as integer) as varchar(8)))) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
							WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
						 END))
			END)
			 ELSE ICGS.CB_END_DT
		END) AS COVERAGE_LEVEL_END_DATE
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN A.CNTCURR
			   ELSE ICGS.CCY_CD
		END) AS CCY_CD
		,(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN A.STATCODE
			   ELSE ICGS.STATUS_SOURCE
		END) AS STATUS_SOURCE
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN BEXP.BEN_EXP_DATE
				 ELSE ICGS.BEN_EXP_DATE
		END) AS BEN_EXP_DATE
		,ICG_FLAG
		,cast('Prophetu' as varchar(20)) as SUBSYSTEM
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN current_timestamp
	     ELSE ICGS.CREATED_DATE
		END) AS CREATED_DATE
		,(CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN current_timestamp
			 ELSE ICGS.UPDATED_DATE
		END) AS UPDATED_DATE
		-- ABC Framework fields
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		FROM STAG_ID.STAG_LIFEASIA_ZPRUPF_V2 A
		LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_DUP  dup 
		on (CASE WHEN NULLIF(TRIM(A.CHDRNUM),'') IS NOT NULL THEN A.CHDRNUM ELSE 'N/A' END) = dup.CHDRNUM
		LEFT JOIN STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_ICG_FLAG icg_flag 
		on (CASE WHEN NULLIF(TRIM(A.CHDRNUM),'') IS NOT NULL THEN A.CHDRNUM ELSE 'N/A' END) = icg_flag.POLICY_NO
		LEFT JOIN (
			select a.*
			, row_number() over(partition by POLICY_NO 
			order by CB_START_DT desc, CB_END_DT desc, CREATED_DATE desc, UPDATED_DATE desc) as IDX 
			FROM FOND_ID.FOND_IFRS17_ICG_STORES a
			where lower(trim(SUBSYSTEM)) = lower(trim('Prophetu'))
			AND PRODUCT_CD = BENEFIT_CD
		) ICGS
		on (CASE WHEN NULLIF(TRIM(A.CHDRNUM),'') IS NOT NULL THEN A.CHDRNUM ELSE 'N/A' END) = ICGS.POLICY_NO AND ICGS.IDX = 1
		LEFT JOIN STAG_ID.TMP_IFRS17_PROPHETU_BENEFIT_EXPIRY  BEXP 
		on (CASE WHEN NULLIF(TRIM(A.CHDRNUM),'') IS NOT NULL THEN A.CHDRNUM ELSE 'N/A' END) = BEXP.POLICY_NO AND A.CNTTYPE=BEXP.CNTTYPE AND BEXP.IDX=1
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_VFA_ELIGIBILITY AS VFA_ELIGIBILITY
        ON (CASE WHEN NULLIF(TRIM(A.CHDRNUM),'') IS NOT NULL THEN A.CHDRNUM ELSE 'N/A' END) = VFA_ELIGIBILITY.POLICY_NO
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_CB_MAPPING CBM ON A.CNTTYPE = CBM.PRODUCT_CD
		AND UPPER(TRIM(CAST('Life Asia' AS VARCHAR(20)))) = UPPER(TRIM(CBM.SYSTEM))
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING PFM
		on A.CNTTYPE = PFM.PRODUCT_CD AND A.CNTCURR = PFM.CCY_CD 
		AND UPPER(TRIM(CAST('Life Asia' AS VARCHAR(20)))) = UPPER(TRIM(PFM.SYSTEM))
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_SET_OF_CONTRACT SC
		ON A.CNTTYPE = SC.PRODUCT_CD AND A.CNTCURR = SC.CCY_CD
		AND UPPER(TRIM(CAST('Life Asia' AS VARCHAR(20)))) = UPPER(TRIM(SC.SYSTEM))
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG ICC
		ON (CASE
		    WHEN ICG_FLAG = 'NEW BUSINESS' THEN
			  CASE
	            WHEN PFM.PRODUCT_CD IS NOT NULL THEN
	              CASE
		            WHEN PFM.VFA_ELIGIBLE = 'N' THEN PFM.PORTFOLIO_GROUP
		             WHEN PFM.VFA_ELIGIBLE = 'Y' AND RIGHT(PFM.PORTFOLIO_GROUP,3) NOT IN ('VFA') THEN TRIM(PFM.PORTFOLIO_GROUP) + '_' +  
				      CASE
					    WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 0 THEN 'GMM'
						WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 1 THEN 'VFA'
					  END
			        WHEN PFM.VFA_ELIGIBLE = 'Y' THEN SUBSTRING(TRIM(PFM.PORTFOLIO_GROUP), 1, LEN(TRIM(PFM.PORTFOLIO_GROUP))-3) +
			          CASE
			            WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 0 THEN 'GMM'
				        WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 1 THEN 'VFA'
			          END
		          END
			  END
		    ELSE ICGS.PORTFOLIO_GROUP
		  END) = TRIM(ICC.PORTFOLIO_GROUP)
		AND (CASE
		    WHEN ICG_FLAG = 'NEW BUSINESS' THEN
			  CASE
	            WHEN PFM.PRODUCT_CD IS NOT NULL THEN
	              CASE
		            WHEN PFM.VFA_ELIGIBLE = 'N' THEN PFM.MEASUREMENT_MODEL
			        WHEN PFM.VFA_ELIGIBLE = 'Y' THEN
			          CASE
			            WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 0 THEN 'GMM'
				        WHEN VFA_ELIGIBILITY.POLICY_NO IS NOT NULL AND VFA_ELIGIBILITY.IFRS_MEASURE_MODEL = 1 THEN 'VFA'
			          END
		          END
			  END
		    ELSE ICGS.MEASUREMENT_MODEL
		  END) = TRIM(ICC.MEASUREMENT_MODEL)
		AND CAST(FORMAT((CASE WHEN ICG_FLAG = 'NEW BUSINESS' THEN
				(CASE 	
						WHEN A.HOISSDTE = 99999999 THEN NULL
						WHEN ICGS.POLICY_NO IS NULL THEN CONVERT(date, cast(A.HOISSDTE as varchar(8))) 
						WHEN CBM.BOUND_BY_REPRICE = 'Y' AND dateadd(day,-1,CONVERT(date, cast(cast(A.PTDATE as integer) as varchar(8)))) >  ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
						WHEN CBM.BOUND_BY_TERMINATION_PROVISION = 'Y' AND @V_START_DATE > ICGS.CB_END_DT THEN dateadd(day,1,ICGS.CB_END_DT)
				END)
			 ELSE ICGS.CB_START_DT
		END),'yyyy') AS NUMERIC(4,0)) = CAST(ICC.COHORT_YEAR AS NUMERIC(4,0))
		AND TRIM(SC.SET_OF_CONTRACT) = TRIM(ICC.SET_OF_CONTRACT)
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE SMT on 
		(CASE WHEN ICG_FLAG IN ('NEW BUSINESS','UPDATE EXISTING BUSINESS') THEN A.STATCODE
			   ELSE ICGS.STATUS_SOURCE
		END) = SMT.STATUS_SOURCE
		AND UPPER(TRIM(CAST('Life Asia' AS VARCHAR(20)))) = UPPER(TRIM(SMT.SYSTEM))

		WHERE dup.CHDRNUM IS NULL
		;

		
		---------------------------------------------------
		--- Get ICG Stores only for non duplicate records
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE TABLE ifrs17_icg_stores_prophetu : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
	
		-- drop table
		--drop TABLE if exists STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU;
		
		CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU 
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
		AS
		SELECT  
		ENTITY_ID
		,SYSTEM
		,POLICY_NO
		,PRODUCT_CD
		,BENEFIT_CD
		,CONTRACT_ID
        ,PORTFOLIO_GROUP
		,COHORT_YEAR
		,SET_OF_CONTRACT
		,INSURANCE_CONTRACT_GROUP_ID
		,ICG_ID_PROPHET
		,ENTRY_MONTH
		,CB_START_DT
		,CASE 
			WHEN CB_START_DT > COVERAGE_LEVEL_END_DATE THEN CB_START_DT 
			ELSE COVERAGE_LEVEL_END_DATE 
		END AS CB_END_DT
		,MEASUREMENT_MODEL
		,INFORCE_FLAG
		,COVERAGE_LEVEL_END_DATE
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE
		,ICG_FLAG
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		-- ABC Framework fields
		,BATCH_MASTER_ID 
		,BATCH_RUN_ID 
		,JOB_MASTER_ID
		,JOB_RUN_ID  
		,BATCHDATE
		,ETL_PROCESS_DATE_TIME 
		FROM tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPHETU_TMP_1
		;


		--------------------------------------------------------------------
		--- Create Table for invalid ICG Stores  IFRS17
		--------------------------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE VIEW  STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU_INVALID: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		--drop table if exists FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_INVALID;
		/*CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_INVALID 
		WITH
		(
		 DISTRIBUTION = HASH(POLICY_NO)
		 ,CLUSTERED INDEX(POLICY_NO)
		)
		as
		*/
		INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES_PROPHETU_INVALID
		select 
		a.ENTITY_ID
		,a.SYSTEM
		,a.POLICY_NO
		,a.PRODUCT_CD
		,a.BENEFIT_CD
		,a.CONTRACT_ID
		,a.PORTFOLIO_GROUP
		,a.COHORT_YEAR
		,a.SET_OF_CONTRACT
		,a.INSURANCE_CONTRACT_GROUP_ID
		,a.ICG_ID_PROPHET
		,a.ENTRY_MONTH
		,CB_START_DT as CB_START_DT
		,(case when a.CB_END_DT IS NOT NULL AND a.BEN_EXP_DATE IS NOT NULL THEN (case when a.CB_END_DT <= a.BEN_EXP_DATE then a.CB_END_DT else a.BEN_EXP_DATE end) ELSE NULL end) as CB_END_DT
		,MEASUREMENT_MODEL 
		,INFORCE_FLAG
		,(case when a.COVERAGE_LEVEL_END_DATE IS NOT NULL AND a.BEN_EXP_DATE IS NOT NULL THEN (case when a.COVERAGE_LEVEL_END_DATE <= a.BEN_EXP_DATE then a.COVERAGE_LEVEL_END_DATE else a.BEN_EXP_DATE end) ELSE NULL end) as COVERAGE_LEVEL_END_DATE
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE as BEN_EXP_DATE
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		,upper(
			(case when NULLIF(TRIM(a.POLICY_NO),'') is null then 'POLICY_NO,' else '' end)+
			(case when NULLIF(TRIM(a.PRODUCT_CD),'') is null then 'PRODUCT_CD,' else '' end)+
			(case when NULLIF(TRIM(a.BENEFIT_CD),'') is null then 'BENEFIT_CD,' else '' end)+
			(case when NULLIF(TRIM(a.CONTRACT_ID),'') is null then 'CONTRACT_ID,' else '' end)+
			(case when NULLIF(TRIM(a.PORTFOLIO_GROUP),'') is null then 'PORTFOLIO_GROUP,' else '' end)+
			(case when a.COHORT_YEAR is null then 'COHORT_YEAR,' else '' end)+
			(case when NULLIF(TRIM(a.SET_OF_CONTRACT),'') is null then 'SET_OF_CONTRACT,' else '' end)+
			(case when NULLIF(TRIM(a.INSURANCE_CONTRACT_GROUP_ID),'') is null then 'INSURANCE_CONTRACT_GROUP_ID,' else '' end)+
			(case when a.ICG_ID_PROPHET is null then 'ICG_ID_PROPHET,' else '' end)+
			(case when a.ENTRY_MONTH is null then 'ENTRY_MONTH,' else '' end)+
			(case when a.CB_START_DT is null then 'CB_START_DT,' else '' end)+
			(case when (case when a.CB_END_DT IS NOT NULL AND a.BEN_EXP_DATE IS NOT NULL THEN (case when a.CB_END_DT <= a.BEN_EXP_DATE then a.CB_END_DT else a.BEN_EXP_DATE end) ELSE NULL end) is null then 'CB_END_DT,' else '' end)+
			(case when NULLIF(TRIM(a.MEASUREMENT_MODEL),'') is null then 'MEASUREMENT_MODEL,' else '' end)+
			(case when NULLIF(TRIM(a.INFORCE_FLAG),'') is null then 'INFORCE_FLAG,' else '' end)+
			(case when (case when a.COVERAGE_LEVEL_END_DATE IS NOT NULL AND a.BEN_EXP_DATE IS NOT NULL THEN (case when a.COVERAGE_LEVEL_END_DATE <= a.BEN_EXP_DATE then a.COVERAGE_LEVEL_END_DATE else a.BEN_EXP_DATE end) ELSE NULL end) is null then 'COVERAGE_LEVEL_END_DATE,' else '' end)+
			(case when NULLIF(TRIM(a.CCY_CD),'') is null then 'CCY_CD,' else '' end)+
			(case when NULLIF(TRIM(a.STATUS_SOURCE),'') is null then 'STATUS_SOURCE,' else '' end) +
			(case when a.BEN_EXP_DATE is null then 'BEN_EXP_DATE,' else '' end) +
			(case when a.CB_START_DT > a.BEN_EXP_DATE then 'CB_START_DT > BEN_EXP_DATE,' else '' end)
		) as INVALID_DESC 
		-- ABC Framework fields
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		from STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU a
		where 
		(case 	
			when NULLIF(TRIM(POLICY_NO),'') is null then 'N'
			when NULLIF(TRIM(PRODUCT_CD),'') is null then 'N'
			when NULLIF(TRIM(BENEFIT_CD),'') is null then 'N'
			when NULLIF(TRIM(CONTRACT_ID),'') is null then 'N'
			when NULLIF(TRIM(PORTFOLIO_GROUP),'') is null then 'N'
			when COHORT_YEAR is null then 'N'
			when NULLIF(TRIM(SET_OF_CONTRACT),'') is null then 'N'
			when NULLIF(TRIM(INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
			when ICG_ID_PROPHET is null then 'N'
			when ENTRY_MONTH is null then 'N'
			when CB_START_DT is null then 'N'
			when CB_END_DT is null then 'N'
			when NULLIF(TRIM(MEASUREMENT_MODEL),'') is null then 'N'
			when NULLIF(TRIM(INFORCE_FLAG),'') is null then 'N'
			when COVERAGE_LEVEL_END_DATE is null then 'N'
			when NULLIF(TRIM(CCY_CD),'') is null then 'N'
			when NULLIF(TRIM(STATUS_SOURCE),'') is null then 'N'
			when BEN_EXP_DATE is null then 'N'
			when (CB_START_DT > BEN_EXP_DATE and STATUS_SOURCE = 'IF') then 'N'
			ELSE 'Y'
		end) = 'N'
		; 

		
		---------------------------------------------------
		--- Begin transaction
		---------------------------------------------------
		
		--BEGIN TRAN;
		--SET NOCOUNT ON
		
		---------------------------------------------------
		--- Update existing records to ICG Stores Tables for new business
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'update FOND_ID.FOND_IFRS17_ICG_STORES for new business : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- update existing records in icg stores for valid new business. update only INFORCE_FLAG='N'
		update FOND_ID.FOND_IFRS17_ICG_STORES 
		set INFORCE_FLAG = 'N'
		, UPDATED_DATE=current_timestamp
		from STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU 
		where FOND_IFRS17_ICG_STORES.POLICY_NO = TMP_IFRS17_ICG_STORES_PROPHETU.POLICY_NO
		AND TMP_IFRS17_ICG_STORES_PROPHETU.ICG_FLAG = 'NEW BUSINESS'
		AND FOND_IFRS17_ICG_STORES.PRODUCT_CD = TMP_IFRS17_ICG_STORES_PROPHETU.PRODUCT_CD
		AND FOND_IFRS17_ICG_STORES.BENEFIT_CD = TMP_IFRS17_ICG_STORES_PROPHETU.BENEFIT_CD	
		AND lower(trim(FOND_IFRS17_ICG_STORES.SUBSYSTEM)) = lower(trim('Prophetu'))
		AND (case 	
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.POLICY_NO),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.PRODUCT_CD),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.BENEFIT_CD),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.CONTRACT_ID),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.PORTFOLIO_GROUP),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU.COHORT_YEAR is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.SET_OF_CONTRACT),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU.ICG_ID_PROPHET is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU.ENTRY_MONTH is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU.CB_START_DT is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU.CB_END_DT is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.MEASUREMENT_MODEL),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.INFORCE_FLAG),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU.COVERAGE_LEVEL_END_DATE is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.CCY_CD),'') is null then 'N'
			when NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.STATUS_SOURCE),'') is null then 'N'
			when TMP_IFRS17_ICG_STORES_PROPHETU.BEN_EXP_DATE is null then 'N'
			when (TMP_IFRS17_ICG_STORES_PROPHETU.CB_START_DT > TMP_IFRS17_ICG_STORES_PROPHETU.BEN_EXP_DATE AND TMP_IFRS17_ICG_STORES_PROPHETU.STATUS_SOURCE = 'IF')then 'N'
			ELSE 'Y'
		end) = 'Y'
		;

		---------------------------------------------------
		--- Update existing records to ICG Stores Tables
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'update FOND_ID.FOND_IFRS17_ICG_STORES: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- update existing records in icg stores.
		update FOND_ID.FOND_IFRS17_ICG_STORES 
		set STATUS_SOURCE = TMP_IFRS17_ICG_STORES_PROPHETU.STATUS_SOURCE
		, INFORCE_FLAG = TMP_IFRS17_ICG_STORES_PROPHETU.INFORCE_FLAG
		, UPDATED_DATE=current_timestamp
		from STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU 
		where FOND_IFRS17_ICG_STORES.POLICY_NO = TMP_IFRS17_ICG_STORES_PROPHETU.POLICY_NO
		AND FOND_IFRS17_ICG_STORES.PRODUCT_CD = TMP_IFRS17_ICG_STORES_PROPHETU.PRODUCT_CD
		AND FOND_IFRS17_ICG_STORES.BENEFIT_CD = TMP_IFRS17_ICG_STORES_PROPHETU.BENEFIT_CD	
		AND FOND_IFRS17_ICG_STORES.CB_START_DT = TMP_IFRS17_ICG_STORES_PROPHETU.CB_START_DT
		AND FOND_IFRS17_ICG_STORES.CB_END_DT = TMP_IFRS17_ICG_STORES_PROPHETU.CB_END_DT
		AND FOND_IFRS17_ICG_STORES.CREATED_DATE = TMP_IFRS17_ICG_STORES_PROPHETU.CREATED_DATE
		AND FOND_IFRS17_ICG_STORES.UPDATED_DATE = TMP_IFRS17_ICG_STORES_PROPHETU.UPDATED_DATE
		AND TMP_IFRS17_ICG_STORES_PROPHETU.ICG_FLAG = 'UPDATE EXISTING BUSINESS' 
		AND lower(trim(FOND_IFRS17_ICG_STORES.SUBSYSTEM)) = lower(trim('Prophetu'))
		AND NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.INFORCE_FLAG),'') is not null 
		AND NULLIF(TRIM(TMP_IFRS17_ICG_STORES_PROPHETU.STATUS_SOURCE),'') is not null 
		;

		---------------------------------------------------
		--- Insert new valid records to ICG Stores Tables
		---------------------------------------------------
		-- insert log process
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'insert into FOND_ID.FOND_IFRS17_ICG_STORES for new business: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- insert valid new records to icg stores
		INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES(
		ENTITY_ID
		,SYSTEM
		,POLICY_NO
		,PRODUCT_CD
		,BENEFIT_CD
		,CONTRACT_ID
		,PORTFOLIO_GROUP
		,COHORT_YEAR
		,SET_OF_CONTRACT
		,INSURANCE_CONTRACT_GROUP_ID
		,ICG_ID_PROPHET
		,ENTRY_MONTH
		,CB_START_DT
		,CB_END_DT
		,MEASUREMENT_MODEL
		,INFORCE_FLAG
		,COVERAGE_LEVEL_END_DATE
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		-- ABC Framework fields
		,BATCH_MASTER_ID 
		,BATCH_RUN_ID 
		,JOB_MASTER_ID
		,JOB_RUN_ID  
		,BATCHDATE
		,ETL_PROCESS_DATE_TIME 
		)
		SELECT 
		ENTITY_ID
		,SYSTEM
		,POLICY_NO
		,PRODUCT_CD
		,BENEFIT_CD
		,CONTRACT_ID
		,PORTFOLIO_GROUP
		,COHORT_YEAR
		,SET_OF_CONTRACT
		,INSURANCE_CONTRACT_GROUP_ID
		,ICG_ID_PROPHET
		,ENTRY_MONTH
		,CB_START_DT
		,(case when CB_END_DT <= BEN_EXP_DATE then CB_END_DT else BEN_EXP_DATE end)
		,MEASUREMENT_MODEL
		,INFORCE_FLAG
		,(case when COVERAGE_LEVEL_END_DATE <= BEN_EXP_DATE then COVERAGE_LEVEL_END_DATE else BEN_EXP_DATE end)
		,CCY_CD
		,STATUS_SOURCE
		,BEN_EXP_DATE
		,SUBSYSTEM
		,CREATED_DATE
		,UPDATED_DATE
		-- ABC Framework fields
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		from STAG_ID.TMP_IFRS17_ICG_STORES_PROPHETU
		where ICG_FLAG =  'NEW BUSINESS'
		AND (case 	
			when NULLIF(TRIM(POLICY_NO),'') is null then 'N'
			when NULLIF(TRIM(PRODUCT_CD),'') is null then 'N'
			when NULLIF(TRIM(BENEFIT_CD),'') is null then 'N'
			when NULLIF(TRIM(CONTRACT_ID),'') is null then 'N'
			when NULLIF(TRIM(PORTFOLIO_GROUP),'') is null then 'N'
			when COHORT_YEAR is null then 'N'
			when NULLIF(TRIM(SET_OF_CONTRACT),'') is null then 'N'
			when NULLIF(TRIM(INSURANCE_CONTRACT_GROUP_ID),'') is null then 'N'
			when ICG_ID_PROPHET is null then 'N'
			when ENTRY_MONTH is null then 'N'
			when CB_START_DT is null then 'N'
			when CB_END_DT is null then 'N'
			when NULLIF(TRIM(MEASUREMENT_MODEL),'') is null then 'N'
			when NULLIF(TRIM(INFORCE_FLAG),'') is null then 'N'
			when COVERAGE_LEVEL_END_DATE is null then 'N'
			when NULLIF(TRIM(CCY_CD),'') is null then 'N'
			when NULLIF(TRIM(STATUS_SOURCE),'') is null then 'N'
			when BEN_EXP_DATE is null then 'N'
			when CB_START_DT > BEN_EXP_DATE then 'N'
			ELSE 'Y'
		end) = 'Y'
		;

		--------------------------------------------------
		--- Create Table for MP Files Report based on valid records in ICG Stores
		---------------------------------------------------
		-- insert valid records
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'create table FOND_ID.FOND_IFRS17_MPFILES_PROPHETU: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
		--drop table if exists FOND_ID.FOND_IFRS17_MPFILES_PROPHETU;
		/*CREATE TABLE FOND_ID.FOND_IFRS17_MPFILES_PROPHETU 
		WITH
		(
		 DISTRIBUTION = HASH(CHDRNUM)
		 ,CLUSTERED INDEX(CHDRNUM)
		)
		AS
		*/
		INSERT INTO FOND_ID.FOND_IFRS17_MPFILES_PROPHETU
		SELECT
		-- existing column from zprupf_v2
		ZPRUPF.SLSCNL
		,ZPRUPF.CHDRNUM
		,ZPRUPF.CNTCURR
		,ZPRUPF.STATCODE
		,ZPRUPF.CNTTYPE
		,ZPRUPF.ANBCCD
		,ZPRUPF.SEX
		,ZPRUPF.MORTCLS
		,ZPRUPF.API
		,ZPRUPF.BILLFREQ
		,ZPRUPF.CRRCD
		,ZPRUPF.PRUSVR
		,ZPRUPF.SINGP
		,ZPRUPF.SUMINS
		,ZPRUPF.CRTABLECC
		,ZPRUPF.ANBCC
		,ZPRUPF.RCDCC
		,ZPRUPF.SUMINCC
		,ZPRUPF.RCESAGECC
		,ZPRUPF.CRTABLEAD
		,ZPRUPF.ANBAD
		,ZPRUPF.RCDAD
		,ZPRUPF.MORTCLSAD
		,ZPRUPF.SUMINAD
		,ZPRUPF.RCESAGEAD
		,ZPRUPF.CRTABLEADD
		,ZPRUPF.ANBADD
		,ZPRUPF.RCDADD
		,ZPRUPF.MORTCLSADD
		,ZPRUPF.SUMINADD
		,ZPRUPF.RCESAGEADD
		,ZPRUPF.CRTABLEHB
		,ZPRUPF.ANBHB
		,ZPRUPF.RCDHB
		,ZPRUPF.SUMINHB
		,ZPRUPF.RCESAGEHB
		,ZPRUPF.ANBWVR
		,ZPRUPF.CRTABLEWVR
		,ZPRUPF.RCDWVR
		,ZPRUPF.SUMINWVR
		,ZPRUPF.RCESAGEWVR
		,ZPRUPF.CRTABLESPO
		,ZPRUPF.ANBSPO
		,ZPRUPF.SEXTWO
		,ZPRUPF.RCDSPO
		,ZPRUPF.SUMINSPO
		,ZPRUPF.RCESDTE
		,ZPRUPF.HOISSDTE
		,ZPRUPF.TTLFUND
		,ZPRUPF.PRCF
		,ZPRUPF.PREF
		,ZPRUPF.PRFF
		,ZPRUPF.PRMF
		,ZPRUPF.PDMF
		,ZPRUPF.CHGDTE
		,ZPRUPF.PYRTRM
		,ZPRUPF.CURYRTUP
		,ZPRUPF.TOPUPLAST
		,ZPRUPF.PCESTRM
		,ZPRUPF.ANBCCP
		,ZPRUPF.RCDCCP
		,ZPRUPF.RCESAGECCP
		,ZPRUPF.SUMINCCP
		,ZPRUPF.CRTABLECCP
		,ZPRUPF.ALLOCIND
		,ZPRUPF.BILCHNL
		,ZPRUPF.WDRAMNT
		,ZPRUPF.CLNTNAME
		,ZPRUPF.LIFCNUM
		,ZPRUPF.AGNTNUM
		,ZPRUPF.UNITNUM
		,ZPRUPF.CRTABLHS
		,ZPRUPF.ANBHS
		,ZPRUPF.RCDHS
		,ZPRUPF.SUMINHS
		,ZPRUPF.RCESAGEHS
		,ZPRUPF.CRTABLLT
		,ZPRUPF.ANBLT
		,ZPRUPF.RCDLT
		,ZPRUPF.SUMINLT
		,ZPRUPF.RCESAGELT
		,ZPRUPF.CRTABL3LF
		,ZPRUPF.ANB3LF
		,ZPRUPF.SEX3LF
		,ZPRUPF.RCD3LF
		,ZPRUPF.SUMIN3LF
		,ZPRUPF.RCESDT3LF
		,ZPRUPF.PAAFLAG
		,ZPRUPF.PTDATE
		,ZPRUPF.WAIVERSTAT
		,ZPRUPF.CLAIMSAR
		,ZPRUPF.FPAYDATE
		,ZPRUPF.PRMP
		,ZPRUPF.TPDCLAIM
		,ZPRUPF.ADDR04CITY
		,ZPRUPF.ADDR05PROV
		,ZPRUPF.CRTABLECI
		,ZPRUPF.ANBCI
		,ZPRUPF.RCDCI
		,ZPRUPF.SUMINCI
		,ZPRUPF.RCESDTECI
		,ZPRUPF.CRTABLEMCC
		,ZPRUPF.ANBMCC
		,ZPRUPF.RCDMCC
		,ZPRUPF.SUMINMCC
		,ZPRUPF.RCESDTEMCC
		,ZPRUPF.PRODCDE
		,ZPRUPF.ANBESCC
		,ZPRUPF.RCDESCC
		,ZPRUPF.SUMINESCC
		,ZPRUPF.RCESDTEESCC
		,ZPRUPF.CLTBDAY
		,ZPRUPF.MEDPCLAS
		,ZPRUPF.ADMINCHG
		,ZPRUPF.COIDEBT
		,ZPRUPF.TOTCHGHS
		,ZPRUPF.TOTTPACOST
		,ZPRUPF.CODE
		,ZPRUPF.ZLONGDESC
		,ZPRUPF.RCESAGESO
		,ZPRUPF.RCESAGEPW
		,ZPRUPF.RCESAGEPWX
		,ZPRUPF.RCESAGECI
		,ZPRUPF.RCESAGEMC
		,ZPRUPF.RCESAGEEC
		,ZPRUPF.LSTTOPDATE
		,ZPRUPF.COWNNUM
		,ZPRUPF.CRTABLEJCC
		,ZPRUPF.ANBJCC
		,ZPRUPF.RCDJCC
		,ZPRUPF.SUMINJCC
		,ZPRUPF.RCESAGEJCC
		,ZPRUPF.SUMINPMC
		,ZPRUPF.PRGC
		,ZPRUPF.PDGC
		,ZPRUPF.PRUSTATCDE
		,ZPRUPF.CRTABLESAV
		,ZPRUPF.AGNTDLCODE
		,ZPRUPF.UMCODE
		,ZPRUPF.PREP
		,ZPRUPF.CLMTYP
		,ZPRUPF.PRIEF
		,ZPRUPF.EDUPAR1C
		,ZPRUPF.EDUP1SUM
		,ZPRUPF.EDUPAR2C
		,ZPRUPF.EDUP2SUM
		,ZPRUPF.CRTABL3LT
		,ZPRUPF.ANB3LT
		,ZPRUPF.RCD3LT
		,ZPRUPF.SUMIN3LT
		,ZPRUPF.RCESAGE3LT
		,ZPRUPF.NLGFLAG
		,ZPRUPF.REGIONFLG
		,ZPRUPF.PRVEF
		,ZPRUPF.PRAEF
		,ZPRUPF.ANBCCB
		,ZPRUPF.RCDCCB
		,ZPRUPF.RCESAGECCB
		,ZPRUPF.SUMINCCB
		,ZPRUPF.CRTABLECCB
		,ZPRUPF.PDIEF
		,ZPRUPF.MINIIND
		,ZPRUPF.PDGV
		,ZPRUPF.PDGM
		,ZPRUPF.CODE_CHC
		,ZPRUPF.AGE_ENTRY_CHC
		,ZPRUPF.CRRCD_CHC
		,ZPRUPF.PLANTYPE_CHC
		,ZPRUPF.AGE_END_CHC
		,ZPRUPF.CODE_DISABLE
		,ZPRUPF.AGE_ENTRY_DISABLE
		,ZPRUPF.CRRCD_DISABLE
		,ZPRUPF.SUMINS_DISABLE
		,ZPRUPF.AGE_END_DISABLE
		,ZPRUPF.PRGV
		,ZPRUPF.PRGM
		,ZPRUPF.TOTAL_FUND_BAV
		,ZPRUPF.PRCF_BAV
		,ZPRUPF.PREF_BAV
		,ZPRUPF.PRFF_BAV
		,ZPRUPF.PRGC_BAV
		,ZPRUPF.PRMF_BAV
		,ZPRUPF.PRMP_BAV
		,ZPRUPF.PRIE_BAV
		,ZPRUPF.PRAE_BAV
		,ZPRUPF.PRVE_BAV
		,ZPRUPF.PRGM_BAV
		,ZPRUPF.PRGV_BAV
		,ZPRUPF.PDFF_BAV
		,ZPRUPF.PDGC_BAV
		,ZPRUPF.PDGM_BAV
		,ZPRUPF.PDGV_BAV
		,ZPRUPF.PLEF_BAV
		,ZPRUPF.TOTAL_FUND_TPAV
		,ZPRUPF.PRCF_TPAV
		,ZPRUPF.PREF_TPAV
		,ZPRUPF.PRFF_TPAV
		,ZPRUPF.PRGC_TPAV
		,ZPRUPF.PRMF_TPAV
		,ZPRUPF.PRMP_TPAV
		,ZPRUPF.PRIE_TPAV
		,ZPRUPF.PRAE_TPAV
		,ZPRUPF.PRVE_TPAV
		,ZPRUPF.PRGM_TPAV
		,ZPRUPF.PRGV_TPAV
		,ZPRUPF.PDFF_TPAV
		,ZPRUPF.PDGC_TPAV
		,ZPRUPF.PDGM_TPAV
		,ZPRUPF.PDGV_TPAV
		,ZPRUPF.PLEF_TPAV
		,ZPRUPF.TOTAL_UNIT_ACT
		,ZPRUPF.PRCF_ACT
		,ZPRUPF.PREF_ACT
		,ZPRUPF.PRFF_ACT
		,ZPRUPF.PRGC_ACT
		,ZPRUPF.PRMF_ACT
		,ZPRUPF.PRMP_ACT
		,ZPRUPF.PRIE_ACT
		,ZPRUPF.PRAE_ACT
		,ZPRUPF.PRVE_ACT
		,ZPRUPF.PRGM_ACT
		,ZPRUPF.PRGV_ACT
		,ZPRUPF.PDFF_ACT
		,ZPRUPF.PDGC_ACT
		,ZPRUPF.PDGM_ACT
		,ZPRUPF.PDGV_ACT
		,ZPRUPF.PLEF_ACT
		,ZPRUPF.TOTAL_UNIT_PRV
		,ZPRUPF.PRCF_PRV
		,ZPRUPF.PREF_PRV
		,ZPRUPF.PRFF_PRV
		,ZPRUPF.PRGC_PRV
		,ZPRUPF.PRMF_PRV
		,ZPRUPF.PRMP_PRV
		,ZPRUPF.PRIE_PRV
		,ZPRUPF.PRAE_PRV
		,ZPRUPF.PRVE_PRV
		,ZPRUPF.PRGM_PRV
		,ZPRUPF.PRGV_PRV
		,ZPRUPF.PDFF_PRV
		,ZPRUPF.PDGC_PRV
		,ZPRUPF.PDGM_PRV
		,ZPRUPF.PDGV_PRV
		,ZPRUPF.PLEF_PRV
		,ZPRUPF.BASIC_PREMIUM_PREV
		,ZPRUPF.STFLAG
		,ZPRUPF.SIOFLAG
		,ZPRUPF.BILLCHNL_PRV
		,ZPRUPF.FUPCODE_FOR_PBC
		,ZPRUPF.REQUEST_DATE_FOR_PBC
		,ZPRUPF.PRNV
		,ZPRUPF.PPHPLUS_PLAN_TYPE
		,ZPRUPF.PDNV
		,ZPRUPF.PPHPLUS_CAMPAIGN_FLAG
		,ZPRUPF.CODE_PRUTOP_CCB61
		,ZPRUPF.AGE_ENTRY_PRUTOP_CCB61
		,ZPRUPF.CRRCD_PRUTOP_CCB61
		,ZPRUPF.CODE_PRUTOP_CCB34
		,ZPRUPF.AGE_ENTRY_PRUTOP_CCB34
		,ZPRUPF.CRRCD_PRUTOP_CCB34
		,ZPRUPF.CODE_PRUTOP_ESCC
		,ZPRUPF.AGE_ENTRY_PRUTOP_ESCC
		,ZPRUPF.CRRCD_PRUTOP_ESCC
		,ZPRUPF.PDGT
		,ZPRUPF.PSMA
		,ZPRUPF.PSMA_BAV
		,ZPRUPF.PSMA_TPAV
		,ZPRUPF.PSMA_ACT 
		,ZPRUPF.PSMA_PRV
		,ZPRUPF.STAT_SECT
		,ZPRUPF.RCESAGE 
		,ZPRUPF.FLAGS 
		,ZPRUPF.PDIF 
		,ZPRUPF.PRDP
	    ,ZPRUPF.PRDP_BAV
	    ,ZPRUPF.PRDP_TPAV
	    ,ZPRUPF.PRDP_BON
	    ,ZPRUPF.PRDP_PRV
	    ,ZPRUPF.PRBI
	    ,ZPRUPF.WP_FLAG
	    ,ZPRUPF.CAMP_CODE
	-- additional ifrs17 fields
		,b.IFRS_ONEROUS_GRP
		,(case when cast(FORMAT(@V_START_DATE,'yyyy') as numeric(4,0)) = a.COHORT_YEAR then a.ENTRY_MONTH
			   when a.COHORT_YEAR < 1997 then 13
			   when a.COHORT_YEAR is not null then (a.COHORT_YEAR-1997) + 14
		 end) as IFRS_CY_GRP
		,d.IFRS_PORT_GRP
		, CASE
		    WHEN a.MEASUREMENT_MODEL = 'GMM' THEN 0
			WHEN a.MEASUREMENT_MODEL = 'VFA' THEN 1
		  END AS IFRS_MEASURE_MODEL
		,a.COHORT_YEAR as BASIC_ENTRY_YEAR
		,a.ENTRY_MONTH as BASIC_ENTRY_MONTH
		,(CAST(FORMAT(a.CB_END_DT,'yyyy') AS NUMERIC(4,0))-CAST(FORMAT(a.CB_START_DT,'yyyy') AS NUMERIC(4,0)))*12
		+ (CAST(FORMAT(a.CB_END_DT,'MM') AS NUMERIC(2,0))-CAST(FORMAT(a.CB_START_DT,'MM') AS NUMERIC(2,0))) as IFRS_CB_TERM_M
		,(case when cast(FORMAT(@V_START_DATE,'yyyy') as numeric(4,0)) = a.COHORT_YEAR then a.ENTRY_MONTH when a.COHORT_YEAR is not null then 0 else null end) as MTHS_TO_SALE
		,a.INSURANCE_CONTRACT_GROUP_ID AS IFRS_ICG_ID
		,a.ICG_ID_PROPHET AS IFRS_ICG_ID_PROPHET
		,b.SUB_GROUP_ID
		,a.ENTITY_ID
		,a.CB_START_DT
		,a.CB_END_DT
		,(case when cast(FORMAT(@V_START_DATE,'yyyy') as numeric(4,0)) = a.COHORT_YEAR then 
				NULLIF(TRIM(a.INSURANCE_CONTRACT_GROUP_ID),'')+'_'+NULLIF(TRIM(UPPER(a.ENTRY_MONTH_MMM)),'') end) 
		as REL_INSURANCE_CONTRACT_GROUP_ID
		-- ABC Framework fields
		,@BATCH_MASTER_ID as BATCH_MASTER_ID 
		,@BATCH_RUN_ID as BATCH_RUN_ID 
		,@JOB_MASTER_ID as JOB_MASTER_ID
		,@JOB_RUN_ID as JOB_RUN_ID  
		,@BATCHDATESTR as BATCHDATE
		,@GMT_START_DTTM as ETL_PROCESS_DATE_TIME 
		from STAG_ID.STAG_LIFEASIA_ZPRUPF_V2 ZPRUPF
		LEFT join (
			select x.*,
				CASE WHEN(ENTRY_MONTH =1) THEN 'JAN'
				WHEN(ENTRY_MONTH =2) THEN 'FEB'
				WHEN(ENTRY_MONTH =3) THEN 'MAR'
				WHEN(ENTRY_MONTH =4) THEN 'APR'
				WHEN(ENTRY_MONTH =5) THEN 'MAY'
				WHEN(ENTRY_MONTH =6) THEN 'JUN'
				WHEN(ENTRY_MONTH =7) THEN 'JUL'
				WHEN(ENTRY_MONTH =8) THEN 'AUG'
				WHEN(ENTRY_MONTH =9) THEN 'SEP'
				WHEN(ENTRY_MONTH =10) THEN 'OCT'
				WHEN(ENTRY_MONTH =11) THEN 'NOV'
				WHEN(ENTRY_MONTH =12) THEN 'DEC'
			 END AS ENTRY_MONTH_MMM
			, row_number() over(partition by POLICY_NO 
			order by CB_START_DT desc, CB_END_DT desc, CREATED_DATE desc, UPDATED_DATE desc) as IDX 
			FROM FOND_ID.FOND_IFRS17_ICG_STORES x
			where lower(trim(x.SUBSYSTEM)) = lower(trim('Prophetu'))
			AND PRODUCT_CD = BENEFIT_CD
		) a
		ON (CASE WHEN NULLIF(TRIM(ZPRUPF.CHDRNUM),'') IS NOT NULL THEN ZPRUPF.CHDRNUM ELSE 'N/A' END) = a.POLICY_NO AND a.IDX = 1
		left join STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG b 
		on a.PORTFOLIO_GROUP = b.PORTFOLIO_GROUP
		and a.MEASUREMENT_MODEL = b.MEASUREMENT_MODEL
		and (CASE WHEN (cast(a.COHORT_YEAR as numeric(4,0))) <'2006' THEN '2006' ELSE (cast(a.COHORT_YEAR as numeric(4,0))) END) = cast(b.COHORT_YEAR as numeric(4,0))
		and a.SET_OF_CONTRACT = b.SET_OF_CONTRACT

--		left join STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_MAPPING c 
--		on a.PRODUCT_CD = c.PRODUCT_CD 
--		AND a.CCY_CD = c.CCY_CD 
--		AND UPPER(TRIM(CAST('Life Asia' AS VARCHAR(20)))) = UPPER(TRIM(c.SYSTEM))

		left join STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_DETAILS d 
		on a.PORTFOLIO_GROUP = d.PORTFOLIO_GROUP 
		;

		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Finish ' + @V_FUNCTION_NAME + ' : ' +  convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
	
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		--IF @@TRANCOUNT > 0  
		--	COMMIT TRAN;

	END TRY

	BEGIN CATCH
 		--IF @@TRANCOUNT > 0  
		--	ROLLBACK TRAN;
		
		DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
		DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
		DECLARE @ErrorState AS INT = ERROR_STATE()
		
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;

		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)
	
	END CATCH


END;
