CREATE PROC [FOND_ID].[USP_IFRS17_PAYLIFE_AOM_5ABC] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@PRD_ID [INTEGER] AS

BEGIN
DECLARE @V_START			DATETIME,
		@V_END				DATETIME,
		@V_DURATION			DATETIME,
		@V_FUNCTION_NAME	VARCHAR(100),
		@V_DESCRIPTION		VARCHAR(100),
		@V_CMD				VARCHAR(100),
		@V_SEQNO			INTEGER,
		@V_PRD_ID			INTEGER,
		@V_CREATED_DATE		DATETIME,
		@V_START_DATE		DATE,
		@V_END_DATE			DATE,
------START GET RUN ID DETAIL FROM ABC------
 @BATCH_MASTER_ID    VARCHAR(20) = 0,
 @BATCH_RUN_ID       VARCHAR(20) = 0,
 @JOB_MASTER_ID      VARCHAR(20) = 0,
 @JOB_RUN_ID         VARCHAR(20) = 0,
 @GMT_START_DTTM     VARCHAR(20) = GETDATE();
 
EXEC STAG_ID.USP_GetRunIdReturn
  @JobName        = @JOBNAMESTR,
  @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
  @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
  @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
  @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
  @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
------END GET RUN ID DETAIL FROM ABC--------- 	

------set variable----------------
SET @BATCHDATESTR = CAST(EOMONTH(CAST(CONCAT(SUBSTRING(@BATCHDATESTR,0,5),'-',SUBSTRING(@BATCHDATESTR,5,2),'-01') AS DATE)) AS VARCHAR(10));
SET @PRD_ID = CONCAT(SUBSTRING(CAST(@PRD_ID AS VARCHAR),0,5),SUBSTRING(CAST(@PRD_ID AS VARCHAR),5,2),'01');

SET @V_FUNCTION_NAME = 'FOND_ID.USP_IFRS17_PAYLIFE_AOM_5ABC';
SET @V_SEQNO = 1;
SET @V_START_DATE = CONVERT(DATE, CONVERT(CHAR(10), @PRD_ID));
SET @V_START = CURRENT_TIMESTAMP;
SET @V_DESCRIPTION = CONCAT('Start ', @V_FUNCTION_NAME, ' : ', @V_START_DATE)

-----------------------------
	--- DROP ALL TEMPORARY TABLES
	-----------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('DROP ALL TEMPORARY TABLES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_PAYLIFE_AOM_5ABC_IND', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_PAYLIFE_AOM_5ABC_IND;

----------------------------------------------
--create temp table tempdb.dbo.#TMP_IFRS17_PAYLIFE_AOM_5ABC_IND
-----------------------------------------------
		
SET @V_SEQNO = @V_SEQNO + 1;
SET @V_START = CURRENT_TIMESTAMP;
SET @V_DESCRIPTION = CONCAT('create temp table tempdb.dbo.#TMP_IFRS17_PAYLIFE_AOM_5ABC_IND : ', @V_START);

INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, DESCRIPTION)
VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

--ENHANCED BY DYAH 24/06			
CREATE TABLE tempdb.dbo.#TMP_IFRS17_PAYLIFE_AOM_5ABC_IND
WITH
(
	DISTRIBUTION = HASH(INSURED_ID)
	,CLUSTERED INDEX(INSURED_ID)
)
as 
SELECT B.*, 
CASE WHEN YEAR(B.[CB_START_DT]) <= YEAR(CAST(@BATCHDATESTR AS DATE))-1 THEN 'SOP' ELSE 'EOP' END AS [IND]
FROM (SELECT A.*, ROW_NUMBER() OVER(PARTITION BY [INSURED_ID] ORDER BY (CASE WHEN YEAR(CB_START_DT) = YEAR(CAST(@BATCHDATESTR AS DATE)) AND INSURED_TYPE = 'New Business' THEN CB_START_DT ELSE INSURED_TYPE END)) AS [RN]
						FROM (SELECT [INSURED_ID], [CB_START_DT], INSURED_TYPE FROM FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE_HIS
								WHERE (BACKUP_BATCHDATE = CAST(CONCAT(YEAR(CAST(@BATCHDATESTR AS DATE))-1,'-12-31') AS DATE))
								OR (YEAR(BACKUP_BATCHDATE) = YEAR(CAST(@BATCHDATESTR AS DATE)) AND MONTH(BACKUP_BATCHDATE) = MONTH(CAST(@BATCHDATESTR AS DATE)))
								OR (BACKUP_BATCHDATE > CAST(CONCAT(YEAR(CAST(@BATCHDATESTR AS DATE))-1,'-12-31') AS DATE)
								AND BACKUP_BATCHDATE < CAST(@BATCHDATESTR AS DATE)
								AND INSURED_TYPE = 'New Business')) AS A) AS B
				WHERE B.[RN] = '1'


INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

BEGIN TRY
DROP TABLE [FOND_ID].[FOND_IFRS17_PAYLIFE_AOM_5ABC];
PRINT 'Table exist, dropping table..'
END TRY
BEGIN CATCH
	PRINT 'Table does not exists..'
END CATCH

BEGIN TRY
CREATE TABLE [FOND_ID].[FOND_IFRS17_PAYLIFE_AOM_5ABC]
WITH
	(
	  DISTRIBUTION = HASH(INSURED_ID),
	  HEAP
	) AS
SELECT DISTINCT
	 SOP.[INSURED_ID]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN SOP.[COMPANY_CODE] WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[COMPANY_CODE] END) AS [COMPANY_CODE]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN SOP.[INSURED_NAME] WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[INSURED_NAME] END) AS [INSURED_NAME]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN SOP.[INSURED_DOB] WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[INSURED_DOB] END) AS [INSURED_DOB]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN SOP.[INSURED_KTP] WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[INSURED_KTP] END) AS [INSURED_KTP]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN SOP.[INSURED_SEX] WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[INSURED_SEX] END) AS [INSURED_SEX]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN SOP.[INSURED_PAYROLL_DATE] WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[INSURED_PAYROLL_DATE] END) AS [INSURED_PAYROLL_DATE]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN SOP.[INSURED_TYPE] WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[INSURED_TYPE] END) AS [INSURED_TYPE]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN SOP.[UPLOAD_DATE] WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[UPLOAD_DATE] END) AS [UPLOAD_DATE]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN SOP.[UPLOAD_BY] WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[UPLOAD_BY] END) AS [UPLOAD_BY]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN SOP.[CREATED_DATE] WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[CREATED_DATE] END) AS [CREATED_DATE]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN SOP.[PRODUCT_CD] WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[PRODUCT_CD] END) AS [PRODUCT_CD] --Altered
	-- updated by dyah 31/05/2022
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[IFRS_ONEROUS_GRP] <> '' AND SOP.[IFRS_ONEROUS_GRP] IS NOT NULL) THEN SOP.[IFRS_ONEROUS_GRP] ELSE COALESCE(EOP.[IFRS_ONEROUS_GRP],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[IFRS_ONEROUS_GRP] END) AS [IFRS_ONEROUS_GRP]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[IFRS_CY_GRP] <> '' AND SOP.[IFRS_CY_GRP] IS NOT NULL) THEN SOP.[IFRS_CY_GRP] ELSE COALESCE(EOP.[IFRS_CY_GRP],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[IFRS_CY_GRP] END) AS [IFRS_CY_GRP]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[IFRS_PORT_GRP] <> '' AND SOP.[IFRS_PORT_GRP] IS NOT NULL) THEN SOP.[IFRS_PORT_GRP] ELSE COALESCE(EOP.[IFRS_PORT_GRP],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[IFRS_PORT_GRP] END) AS [IFRS_PORT_GRP]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[IFRS_MEASURE_MODEL] <> '' AND SOP.[IFRS_MEASURE_MODEL] IS NOT NULL) THEN SOP.[IFRS_MEASURE_MODEL] ELSE COALESCE(EOP.[IFRS_MEASURE_MODEL],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[IFRS_MEASURE_MODEL] END) AS [IFRS_MEASURE_MODEL]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[BASIC_ENTRY_YEAR] <> '' AND SOP.[BASIC_ENTRY_YEAR] IS NOT NULL) THEN SOP.[BASIC_ENTRY_YEAR] ELSE COALESCE(EOP.[BASIC_ENTRY_YEAR],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[BASIC_ENTRY_YEAR] END) AS [BASIC_ENTRY_YEAR]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[BASIC_ENTRY_MONTH] <> '' AND SOP.[BASIC_ENTRY_MONTH] IS NOT NULL) THEN SOP.[BASIC_ENTRY_MONTH] ELSE COALESCE(EOP.[BASIC_ENTRY_MONTH],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[BASIC_ENTRY_MONTH] END) AS [BASIC_ENTRY_MONTH]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[IFRS_CB_TERM_M] <> '' AND SOP.[IFRS_CB_TERM_M] IS NOT NULL) THEN SOP.[IFRS_CB_TERM_M] ELSE COALESCE(EOP.[IFRS_CB_TERM_M],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[IFRS_CB_TERM_M] END) AS [IFRS_CB_TERM_M]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[MTHS_TO_SALE] <> '' AND SOP.[MTHS_TO_SALE] IS NOT NULL) THEN SOP.[MTHS_TO_SALE] ELSE COALESCE(EOP.[MTHS_TO_SALE],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[MTHS_TO_SALE] END) AS [MTHS_TO_SALE]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[IFRS_ICG_ID] <> '' AND SOP.[IFRS_ICG_ID] IS NOT NULL) THEN SOP.[IFRS_ICG_ID] ELSE COALESCE(EOP.[IFRS_ICG_ID],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[IFRS_ICG_ID] END) AS [IFRS_ICG_ID]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[IFRS_ICG_ID_PROPHET] <> '' AND SOP.[IFRS_ICG_ID_PROPHET] IS NOT NULL) THEN SOP.[IFRS_ICG_ID_PROPHET] ELSE COALESCE(EOP.[IFRS_ICG_ID_PROPHET],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[IFRS_ICG_ID_PROPHET] END) AS [IFRS_ICG_ID_PROPHET]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[SUB_GROUP_ID] <> '' AND SOP.[SUB_GROUP_ID] IS NOT NULL) THEN SOP.[SUB_GROUP_ID] ELSE COALESCE(EOP.[SUB_GROUP_ID],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[SUB_GROUP_ID] END) AS [SUB_GROUP_ID]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[ENTITY_ID] <> '' AND SOP.[ENTITY_ID] IS NOT NULL) THEN SOP.[ENTITY_ID] ELSE COALESCE(EOP.[ENTITY_ID],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[ENTITY_ID] END) AS [ENTITY_ID]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[CCY_CD] <> '' AND SOP.[CCY_CD] IS NOT NULL) THEN SOP.[CCY_CD] ELSE COALESCE(EOP.[CCY_CD],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[CCY_CD] END) AS [CCY_CD]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[CB_START_DT] <> '' AND SOP.[CB_START_DT] IS NOT NULL) THEN SOP.[CB_START_DT] ELSE COALESCE(EOP.[CB_START_DT],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[CB_START_DT] END) AS [CB_START_DT]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[CB_END_DT] <> '' AND SOP.[CB_END_DT] IS NOT NULL) THEN SOP.[CB_END_DT] ELSE COALESCE(EOP.[CB_END_DT],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[CB_END_DT] END) AS [CB_END_DT]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN 
		CASE WHEN (SOP.[REL_INSURANCE_CONTRACT_GROUP_ID] <> '' AND SOP.[REL_INSURANCE_CONTRACT_GROUP_ID] IS NOT NULL) THEN SOP.[REL_INSURANCE_CONTRACT_GROUP_ID] ELSE COALESCE(EOP.[REL_INSURANCE_CONTRACT_GROUP_ID],'') END 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[REL_INSURANCE_CONTRACT_GROUP_ID] END) AS [REL_INSURANCE_CONTRACT_GROUP_ID]
	,(CASE WHEN INDICATOR.[IND] = 'SOP' THEN SOP.[STATUS_SOURCE] 
	  WHEN INDICATOR.[IND] = 'EOP' THEN EOP.[STATUS_SOURCE] END) AS [STATUS_SOURCE]
	,EOP_ICGSTORE.[STATUS_SOURCE] AS [STATCODE_EOP],
	@BATCH_MASTER_ID AS BATCH_MASTER_ID, 
	@BATCH_RUN_ID AS BATCH_RUN_ID,
	@JOB_MASTER_ID AS JOB_MASTER_ID,
	@JOB_RUN_ID  AS JOB_RUN_ID,
	@BATCHDATESTR AS BATCHDATE,
	@GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
FROM (
	SELECT * FROM (
		SELECT * , ROW_NUMBER() OVER(PARTITION BY [INSURED_ID] ORDER BY BACKUP_BATCHDATE ASC) AS ROW_NUMBER
		FROM FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE_HIS
		WHERE BACKUP_BATCHDATE >= CAST(CONCAT(YEAR(CAST(@BATCHDATESTR AS DATE))-1,'-12-31') AS DATE) 
		AND CONCAT( YEAR(BACKUP_BATCHDATE),SUBSTRING(CAST(BACKUP_BATCHDATE AS CHAR),6,2)) <= CONCAT(YEAR(CAST(@BATCHDATESTR AS DATE)),SUBSTRING(CAST(@BATCHDATESTR AS CHAR),6,2))
	)TMP WHERE TMP.ROW_NUMBER = 1
) AS SOP
LEFT JOIN (
  SELECT *
  FROM FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE_HIS
  WHERE YEAR(BACKUP_BATCHDATE) = YEAR(CAST(@BATCHDATESTR AS DATE)) AND MONTH(BACKUP_BATCHDATE) = MONTH(CAST(@BATCHDATESTR AS DATE))
) AS EOP ON SOP.[INSURED_ID] = EOP.[INSURED_ID]
LEFT JOIN (
	SELECT * FROM (
	  SELECT *, ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY BATCHDATE, CB_END_DT DESC) AS ROW_NUMBER
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  WHERE UPPER(SUBSYSTEM) = 'PAYLIFE' AND PRODUCT_CD = BENEFIT_CD
	)TMP WHERE ROW_NUMBER = 1
) AS EOP_ICGSTORE ON SOP.[INSURED_ID] = EOP_ICGSTORE.POLICY_NO
LEFT JOIN tempdb.dbo.#TMP_IFRS17_PAYLIFE_AOM_5ABC_IND INDICATOR
ON SOP.[INSURED_ID] = INDICATOR.[INSURED_ID]
WHERE SOP.INSURED_ID NOT IN 
(SELECT DISTINCT INSURED_ID
		FROM FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE_HIS
		WHERE BACKUP_BATCHDATE > CAST(CONCAT(YEAR(CAST(@BATCHDATESTR AS DATE))-1,'-12-31') AS DATE)
		AND BACKUP_BATCHDATE < CAST(@BATCHDATESTR AS DATE)
		AND INSURED_ID NOT IN 
		(SELECT DISTINCT INSURED_ID
		FROM FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE_HIS
		WHERE YEAR(BACKUP_BATCHDATE) = YEAR(CAST(@BATCHDATESTR AS DATE)) AND MONTH(BACKUP_BATCHDATE) = MONTH(CAST(@BATCHDATESTR AS DATE))
		UNION ALL
		SELECT DISTINCT INSURED_ID
		FROM FOND_ID.FOND_IFRS17_MPFILES_PAYLIFE_HIS
		WHERE BACKUP_BATCHDATE = CAST(CONCAT(YEAR(CAST(@BATCHDATESTR AS DATE))-1,'-12-31') AS DATE)))
;

END TRY
	BEGIN CATCH
	    DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
		DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
		DECLARE @ErrorState AS INT = ERROR_STATE()

 		--IF @@TRANCOUNT > 0  
		--	ROLLBACK TRAN; 
		
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)
	
	END CATCH

END

