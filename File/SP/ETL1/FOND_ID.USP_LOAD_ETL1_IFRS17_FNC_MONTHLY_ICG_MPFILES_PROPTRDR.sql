CREATE PROC [FOND_ID].[USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PROPTRDR] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@PRD_ID [INTEGER] AS

BEGIN TRY
    --declare variable
	DECLARE @V_START			DATETIME,
	        @V_END				DATETIME,
			@V_DURATION			DATETIME,
	        @V_FUNCTION_NAME	VARCHAR(100),
			@V_DESCRIPTION		VARCHAR(100),
	        @V_CMD				VARCHAR(100),
			@V_SEQNO			INTEGER,
	        @V_PRD_ID			INTEGER,
			@V_CREATED_DATE		DATETIME,
	        @V_START_DATE		DATE,
	        @V_END_DATE			DATE,
	------START GET RUN ID DETAIL FROM ABC------
            @BATCH_MASTER_ID    VARCHAR(20) = 0,
            @BATCH_RUN_ID       VARCHAR(20) = 0,
            @JOB_MASTER_ID      VARCHAR(20) = 0,
            @JOB_RUN_ID         VARCHAR(20) = 0,
            @GMT_START_DTTM     VARCHAR(20) = GETDATE();

	EXEC STAG_ID.USP_GetRunIdReturn
      @JobName         = @JOBNAMESTR,
      @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
      @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
      @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
      @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
      @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
    ------END GET RUN ID DETAIL FROM ABC------

	--set variable
	SET @V_FUNCTION_NAME = 'FOND_ID.USP_LOAD_ETL1_IFRS17_FNC_MONTHLY_ICG_MPFILES_PROPTRDR';
	SET @V_SEQNO = 1;
	SET @V_START_DATE = CONVERT(DATE, CONVERT(CHAR(10), @PRD_ID));
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('Start ', @V_FUNCTION_NAME, ' : ', @V_START_DATE);

	--store initial step to log
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	-----------------------------
	--- DROP ALL TEMPORARY TABLES
	-----------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('DROP ALL TEMPORARY TABLES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
    
	--drop temp object if exists
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDR_TMP_1', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDR_TMP_1;
	IF OBJECT_ID('tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDR_TMP_2', 'U') IS NOT NULL DROP TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDR_TMP_2;

	--drop permanent object if exists
	IF OBJECT_ID('FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDR_DUP','U') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDR_DUP;
	IF OBJECT_ID('STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDR','U') IS NOT NULL DROP TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDR;
	--IF OBJECT_ID('FOND_ID.FOND_IFRS17_MPFILES_PROPTRDR','U') IS NOT NULL DROP TABLE FOND_ID.FOND_IFRS17_MPFILES_PROPTRDR;

	DELETE FROM FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_INVALID WHERE UPPER(TRIM(SUBSYSTEM)) = 'PROPTRDR';
	TRUNCATE TABLE FOND_ID.FOND_IFRS17_MPFILES_PROPTRDR;

	---------------------------------------------------------------------
	--- CREATE TABLE TO STORE DUPLICATE POLICY_NO IN THE SOURCE TABLE
	---------------------------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('CREATE TABLE TO STORE DUPLICATE POLICY_NO IN THE SOURCE TABLE : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	CREATE TABLE FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDR_DUP
	WITH
	(
	  DISTRIBUTION = HASH(CHDRNUM),
	  CLUSTERED INDEX(CHDRNUM)
    )
	AS
	SELECT
	  NULLIF(TRIM(AC1108RDR.CHDRNUM), '') AS CHDRNUM,
      AC1108RDR.CRTABLE,
      AC1108RDR.ANBCCD,
      AC1108RDR.SEX,
      AC1108RDR.MORTCLS,
      AC1108RDR.PRMTRM01,
      AC1108RDR.RSKTRM01,
      AC1108RDR.PREMI01,
      AC1108RDR.BILLFREQ,
      AC1108RDR.SUMINS,
      AC1108RDR.TOTBNS,
      AC1108RDR.PTDATE,
      AC1108RDR.HOISSDTE,
      AC1108RDR.CRRCD,
      AC1108RDR.RCESDTE,
      AC1108RDR.CNTCURR,
      AC1108RDR.STATCODE,
      AC1108RDR.CURRFROM,
      AC1108RDR.ZLINSTPREM,
      AC1108RDR.CURBON,
      AC1108RDR.LASTBON,
      AC1108RDR.SLSCNL,
      AC1108RDR.BILLCHNL,
      AC1108RDR.WDRN,
      AC1108RDR.LSURNAME,
      AC1108RDR.CLTPHONE01,
      AC1108RDR.CLTPHONE02,
      AC1108RDR.LIFCNUM,
      AC1108RDR.AGNTNUM,
      AC1108RDR.LSURNAME01,
      AC1108RDR.DTEAPP,
      AC1108RDR.DTETRM,
      AC1108RDR.TSALESUNT,
      AC1108RDR.REPORTAG,
      AC1108RDR.LSURNAME02,
      AC1108RDR.REGION,
      AC1108RDR.PSTATCODE,
      AC1108RDR.CLAIMSAR,
      AC1108RDR.FUND,
      AC1108RDR.FPAYDATE,
      AC1108RDR.CLTADDR04,
      AC1108RDR.CLTADDR05,
      AC1108RDR.PYMT,
      AC1108RDR.SRCEBUS,
      AC1108RDR.REASONCD,
      AC1108RDR.LONGDESC,
      AC1108RDR.COWNNUM,
      AC1108RDR.TOTCLAIMS,
      AC1108RDR.STAT_SECT,
      @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME

	FROM STAG_ID.STAG_LIFEASIA_AC1108RDR AS AC1108RDR
	
	JOIN
	(
	  SELECT CHDRNUM, CRTABLE, LIFCNUM
	  FROM STAG_ID.STAG_LIFEASIA_AC1108RDR
	  WHERE NULLIF(TRIM(CHDRNUM), '') IS NOT NULL
	    OR NULLIF(TRIM(CRTABLE), '') IS NOT NULL
	    OR NULLIF(TRIM(LIFCNUM), '') IS NOT NULL
	  GROUP BY CHDRNUM, CRTABLE, LIFCNUM
	  HAVING COUNT(*) > 1
	) AS AC1108RDR_DUP
	ON AC1108RDR.CHDRNUM = AC1108RDR_DUP.CHDRNUM
    AND AC1108RDR.CRTABLE = AC1108RDR_DUP.CRTABLE
    AND AC1108RDR.LIFCNUM = AC1108RDR_DUP.LIFCNUM;

	------------------------------------------------
	--- INSERT NEW BUSINESS TO ICG STORES TEMP TABLE
	------------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT NEW BUSINESS TO ICG STORES TEMP TABLE : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	------------------------------------------------------------------
	--create temp table STAG_TEMP_IFRS17_ICG_STORES_PROPTRDR_TMP_1
	------------------------------------------------------------------
	CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDR_TMP_1
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
	AS
	SELECT
	  CAST('IAI' AS VARCHAR(25)) AS "ENTITY_ID",
      CAST('Life Asia' AS VARCHAR(20)) AS "SYSTEM",
      AC1108RDR.CHDRNUM AS POLICY_NO,
      ICG_STORES_BASIC.PRODUCT_CD,
      ICG_STORES_BASIC.CONTRACT_ID,
      ICG_STORES_BASIC.PORTFOLIO_GROUP,
      ICG_STORES_BASIC.COHORT_YEAR,
      ICG_STORES_BASIC.SET_OF_CONTRACT,
      ICG_STORES_BASIC.INSURANCE_CONTRACT_GROUP_ID,
      ICG_STORES_BASIC.ICG_ID_PROPHET,
	  ICG_STORES_BASIC.ENTRY_MONTH,
  	  ICG_STORES_BASIC.CB_START_DT,
      ICG_STORES_BASIC.CB_END_DT,
      ICG_STORES_BASIC.MEASUREMENT_MODEL,
      STATUS_MAP.INFORCE_FLAG,
      ICG_STORES_BASIC.COVERAGE_LEVEL_END_DATE,
      ICG_STORES_BASIC.CCY_CD,
      ICG_STORES_BASIC.STATUS_SOURCE AS STATUS_SOURCE_BASIC,
      AC1108RDR.STATCODE AS STATUS_SOURCE_RIDER,
      ICG_STORES_BASIC.BEN_EXP_DATE,
      CASE WHEN AC1108RDR.CHDRNUM IS NOT NULL OR AC1108RDR.LIFCNUM IS NOT NULL THEN AC1108RDR.CRTABLE END AS CRTABLE,
      LIFEPF.LIFE,
      PROPTRDB_TMP.FLAG_INSERT_UPDATE AS FLAG_INSERT_UPDATE_BASIC,
      CASE WHEN PROPTRDB_TMP.CURR_BOUND_BY_REPRICE = 'Y' OR PROPTRDB_TMP.CURR_BOUND_BY_TERMINATION_PROVISION = 'Y' THEN 'Y' ELSE 'N' END AS SHORTBOUND_FLAG

	FROM STAG_ID.STAG_LIFEASIA_AC1108RDR AS AC1108RDR
    
    LEFT JOIN (SELECT CHDRNUM, LIFCNUM, LIFE FROM STAG_ID.STAG_LIFEASIA_LIFEPF WHERE VALIDFLAG = 1 GROUP BY CHDRNUM, LIFCNUM, LIFE) AS LIFEPF
    ON AC1108RDR.CHDRNUM = LIFEPF.CHDRNUM
    AND AC1108RDR.LIFCNUM = LIFEPF.LIFCNUM

    LEFT JOIN 
    (
      SELECT *,
        ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
      
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  
	  WHERE UPPER(SUBSYSTEM) = 'PROPTRDB'
	  AND PRODUCT_CD = BENEFIT_CD
    ) ICG_STORES_BASIC
    ON NULLIF(TRIM(AC1108RDR.CHDRNUM), '') = ICG_STORES_BASIC.POLICY_NO
    AND ICG_STORES_BASIC.ROWNUM_POLICY_NO = 1

    LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE AS STATUS_MAP  
    ON AC1108RDR.STATCODE = STATUS_MAP.STATUS_SOURCE
    AND UPPER(TRIM(STATUS_MAP.SYSTEM)) = 'LIFE ASIA'

    LEFT JOIN STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDB AS PROPTRDB_TMP
    ON NULLIF(TRIM(AC1108RDR.CHDRNUM), '') = PROPTRDB_TMP.POLICY_NO

    LEFT JOIN FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDR_DUP AS AC1108RDR_DUP
    ON AC1108RDR.CHDRNUM = AC1108RDR_DUP.CHDRNUM
    AND AC1108RDR.CRTABLE = AC1108RDR_DUP.CRTABLE
    AND AC1108RDR.LIFCNUM = AC1108RDR_DUP.LIFCNUM

    WHERE AC1108RDR_DUP.CHDRNUM IS NULL;

	------------------------------------------------------------------
	--create temp table STAG_TEMP_IFRS17_ICG_STORES_PROPTRDR_TMP_2
	------------------------------------------------------------------
	CREATE TABLE tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDR_TMP_2
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  HEAP
	)
	AS
	SELECT
      ICG_STORES_PROPTRDR_TMP."ENTITY_ID",
      ICG_STORES_PROPTRDR_TMP."SYSTEM",
      ICG_STORES_PROPTRDR_TMP.POLICY_NO,
      ICG_STORES_PROPTRDR_TMP.PRODUCT_CD,
      ICG_STORES_PROPTRDR_TMP.CONTRACT_ID,
      ICG_STORES_PROPTRDR_TMP.PORTFOLIO_GROUP,
      ICG_STORES_PROPTRDR_TMP.COHORT_YEAR,
      ICG_STORES_PROPTRDR_TMP.SET_OF_CONTRACT,
      ICG_STORES_PROPTRDR_TMP.INSURANCE_CONTRACT_GROUP_ID,
      ICG_STORES_PROPTRDR_TMP.ICG_ID_PROPHET,
      ICG_STORES_PROPTRDR_TMP.ENTRY_MONTH,
      ICG_STORES_PROPTRDR_TMP.CB_START_DT,
      ICG_STORES_PROPTRDR_TMP.CB_END_DT,
      ICG_STORES_PROPTRDR_TMP.MEASUREMENT_MODEL,
      ICG_STORES_PROPTRDR_TMP.INFORCE_FLAG,
      ICG_STORES_PROPTRDR_TMP.COVERAGE_LEVEL_END_DATE,
      ICG_STORES_PROPTRDR_TMP.CCY_CD,
      ICG_STORES_PROPTRDR_TMP.STATUS_SOURCE_BASIC,
      ICG_STORES_PROPTRDR_TMP.STATUS_SOURCE_RIDER,
      ICG_STORES_PROPTRDR_TMP.BEN_EXP_DATE,
      ICG_STORES_PROPTRDR_TMP.CRTABLE,
      ICG_STORES_PROPTRDR_TMP.LIFE,
      ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_BASIC,
      ICG_STORES_PROPTRDR_TMP.SHORTBOUND_FLAG,
      CASE
        WHEN MULTI_RIDER.RIDER_CODE IS NOT NULL THEN (ICG_STORES_PROPTRDR_TMP.CRTABLE + ICG_STORES_PROPTRDR_TMP.LIFE)
        ELSE ICG_STORES_PROPTRDR_TMP.CRTABLE
      END AS BENEFIT_CD

    FROM tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDR_TMP_1 AS ICG_STORES_PROPTRDR_TMP

    LEFT JOIN STAG_ID.STAG_LIFEASIA_IFRS17_MULTINS_RIDER_CODES AS MULTI_RIDER
    ON TRIM(ICG_STORES_PROPTRDR_TMP.CRTABLE) = TRIM(MULTI_RIDER.RIDER_CODE);

	-------------------------------------------------
	--store the result to ICG_STORES_PROPTRDR_TMP
	-------------------------------------------------
	CREATE TABLE STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDR
	WITH
	(
	  DISTRIBUTION = HASH(POLICY_NO),
	  CLUSTERED INDEX(POLICY_NO)
    )
	AS
	SELECT
      ICG_STORES_PROPTRDR_TMP_2."ENTITY_ID",
      ICG_STORES_PROPTRDR_TMP_2."SYSTEM",
      ICG_STORES_PROPTRDR_TMP_2.POLICY_NO,
      ICG_STORES_PROPTRDR_TMP_2.PRODUCT_CD,
      ICG_STORES_PROPTRDR_TMP_2.CONTRACT_ID,
      ICG_STORES_PROPTRDR_TMP_2.PORTFOLIO_GROUP,
      ICG_STORES_PROPTRDR_TMP_2.COHORT_YEAR,
      ICG_STORES_PROPTRDR_TMP_2.SET_OF_CONTRACT,
      ICG_STORES_PROPTRDR_TMP_2.INSURANCE_CONTRACT_GROUP_ID,
      ICG_STORES_PROPTRDR_TMP_2.ICG_ID_PROPHET,
      ICG_STORES_PROPTRDR_TMP_2.ENTRY_MONTH,
      ICG_STORES_PROPTRDR_TMP_2.CB_START_DT,
      ICG_STORES_PROPTRDR_TMP_2.CB_END_DT,
      ICG_STORES_PROPTRDR_TMP_2.MEASUREMENT_MODEL,
      ICG_STORES_PROPTRDR_TMP_2.INFORCE_FLAG,
      ICG_STORES_PROPTRDR_TMP_2.COVERAGE_LEVEL_END_DATE,
      ICG_STORES_PROPTRDR_TMP_2.CCY_CD,
      ICG_STORES_PROPTRDR_TMP_2.STATUS_SOURCE_BASIC,
      ICG_STORES_PROPTRDR_TMP_2.STATUS_SOURCE_RIDER,
      ICG_STORES_PROPTRDR_TMP_2.BEN_EXP_DATE,
      ICG_STORES_PROPTRDR_TMP_2.CRTABLE,
      ICG_STORES_PROPTRDR_TMP_2.LIFE,
      ICG_STORES_PROPTRDR_TMP_2.FLAG_INSERT_UPDATE_BASIC,
      ICG_STORES_PROPTRDR_TMP_2.SHORTBOUND_FLAG,
	  ICG_STORES_PROPTRDR_TMP_2.BENEFIT_CD,
	  CASE
        WHEN ICG_STORES_PROPTRDR_TMP_2.FLAG_INSERT_UPDATE_BASIC = 'INSERT' AND ICG_STORES_PROPTRDR_TMP_2.SHORTBOUND_FLAG = 'Y' AND ICG_STORES.POLICY_NO IS NOT NULL AND ICG_STORES_PROPTRDR_TMP_2.STATUS_SOURCE_RIDER = 'IF' THEN 'INSERT'
        WHEN ICG_STORES_PROPTRDR_TMP_2.FLAG_INSERT_UPDATE_BASIC = 'INSERT' AND ICG_STORES_PROPTRDR_TMP_2.SHORTBOUND_FLAG = 'Y' AND ICG_STORES.POLICY_NO IS NOT NULL AND COALESCE(ICG_STORES_PROPTRDR_TMP_2.STATUS_SOURCE_RIDER, '') <> 'IF' THEN 'UPDATE'
        WHEN ICG_STORES.POLICY_NO IS NULL THEN 'INSERT'
        WHEN ICG_STORES_PROPTRDR_TMP_2.FLAG_INSERT_UPDATE_BASIC IN('UPDATE', 'NO UPDATE') AND ICG_STORES.POLICY_NO IS NOT NULL AND COALESCE(ICG_STORES_PROPTRDR_TMP_2.STATUS_SOURCE_RIDER, '') <> ICG_STORES.STATUS_SOURCE THEN 'UPDATE'
        ELSE 'NO UPDATE'
      END AS FLAG_INSERT_UPDATE_RIDER,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME

	FROM tempdb.dbo.#TMP_IFRS17_ICG_STORES_PROPTRDR_TMP_2 AS ICG_STORES_PROPTRDR_TMP_2

    LEFT JOIN 
    (
      SELECT
        POLICY_NO,
        PRODUCT_CD,
        BENEFIT_CD,
        STATUS_SOURCE,
        INFORCE_FLAG,
        ROW_NUMBER() OVER(PARTITION BY POLICY_NO, PRODUCT_CD, BENEFIT_CD ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
      
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  WHERE UPPER(SUBSYSTEM) = 'PROPTRDR'
    ) ICG_STORES
    ON ICG_STORES_PROPTRDR_TMP_2.POLICY_NO = ICG_STORES.POLICY_NO
    AND ICG_STORES_PROPTRDR_TMP_2.PRODUCT_CD = ICG_STORES.PRODUCT_CD
    AND ICG_STORES_PROPTRDR_TMP_2.BENEFIT_CD = ICG_STORES.BENEFIT_CD
    AND ICG_STORES.ROWNUM_POLICY_NO = 1;

	---------------------------------------------
	--- INSERT INVALID DATA TO ICG_STORES_INVALID
	---------------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT INVALID DATA TO ICG_STORES_INVALID : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_INVALID
	SELECT
      ICG_STORES_PROPTRDR_TMP."ENTITY_ID",
      ICG_STORES_PROPTRDR_TMP."SYSTEM",
      ICG_STORES_PROPTRDR_TMP.POLICY_NO,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.PRODUCT_CD IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.PRODUCT_CD
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.PRODUCT_CD ELSE ICG_STORES_PROPTRDR_TMP.PRODUCT_CD
      END AS PRODUCT_CD,
      CASE WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.BENEFIT_CD ELSE ICG_STORES_PROPTRDR_TMP.BENEFIT_CD END AS BENEFIT_CD,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.CONTRACT_ID IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.CONTRACT_ID
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.CONTRACT_ID ELSE ICG_STORES_PROPTRDR_TMP.CONTRACT_ID
      END AS CONTRACT_ID,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.PORTFOLIO_GROUP IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.PORTFOLIO_GROUP
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.PORTFOLIO_GROUP ELSE ICG_STORES_PROPTRDR_TMP.PORTFOLIO_GROUP
      END AS PORTFOLIO_GROUP,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.COHORT_YEAR IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.COHORT_YEAR
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.COHORT_YEAR ELSE ICG_STORES_PROPTRDR_TMP.COHORT_YEAR
      END AS COHORT_YEAR,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.SET_OF_CONTRACT IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.SET_OF_CONTRACT
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.SET_OF_CONTRACT ELSE ICG_STORES_PROPTRDR_TMP.SET_OF_CONTRACT
      END AS SET_OF_CONTRACT,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.INSURANCE_CONTRACT_GROUP_ID IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.INSURANCE_CONTRACT_GROUP_ID
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.INSURANCE_CONTRACT_GROUP_ID ELSE ICG_STORES_PROPTRDR_TMP.INSURANCE_CONTRACT_GROUP_ID
      END AS INSURANCE_CONTRACT_GROUP_ID,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.ICG_ID_PROPHET IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.ICG_ID_PROPHET
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.ICG_ID_PROPHET ELSE ICG_STORES_PROPTRDR_TMP.ICG_ID_PROPHET
      END AS ICG_ID_PROPHET,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.ENTRY_MONTH IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.ENTRY_MONTH
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.ENTRY_MONTH ELSE ICG_STORES_PROPTRDR_TMP.ENTRY_MONTH
      END AS ENTRY_MONTH,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.CB_START_DT IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.CB_START_DT
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.CB_START_DT ELSE ICG_STORES_PROPTRDR_TMP.CB_START_DT
      END AS CB_START_DT,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.CB_END_DT IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.CB_END_DT
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.CB_END_DT ELSE ICG_STORES_PROPTRDR_TMP.CB_END_DT
      END AS CB_END_DT,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.MEASUREMENT_MODEL IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.MEASUREMENT_MODEL
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.MEASUREMENT_MODEL ELSE ICG_STORES_PROPTRDR_TMP.MEASUREMENT_MODEL
      END AS MEASUREMENT_MODEL,
      ICG_STORES_PROPTRDR_TMP.INFORCE_FLAG,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.COVERAGE_LEVEL_END_DATE IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.COVERAGE_LEVEL_END_DATE
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.COVERAGE_LEVEL_END_DATE ELSE ICG_STORES_PROPTRDR_TMP.COVERAGE_LEVEL_END_DATE
      END AS COVERAGE_LEVEL_END_DATE,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.CCY_CD IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.CCY_CD
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.CCY_CD ELSE ICG_STORES_PROPTRDR_TMP.CCY_CD
      END AS CCY_CD,
      ICG_STORES_PROPTRDR_TMP.STATUS_SOURCE_RIDER,
      CASE WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL OR AC1108RDB.CHDRNUM IS NULL OR ICG_STORES_PROPTRDB_INVALID.BEN_EXP_DATE IS NOT NULL THEN ICG_STORES_PROPTRDB_INVALID.BEN_EXP_DATE
           WHEN ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'UPDATE' THEN ICG_STORES_VALID.BEN_EXP_DATE ELSE ICG_STORES_PROPTRDR_TMP.BEN_EXP_DATE
      END AS BEN_EXP_DATE,
      CAST('Proptrdr' AS VARCHAR(20)) AS SUBSYSTEM,
      CURRENT_TIMESTAMP AS CREATED_DATE,
      CURRENT_TIMESTAMP AS UPDATED_DATE,
      (
        CASE
          WHEN AC1108RDB_DUP.CHDRNUM IS NOT NULL THEN 'BASIC_DUPLICATE'
          WHEN AC1108RDB.CHDRNUM IS NULL THEN 'BASIC_NOT_EXIST'
          WHEN ICG_STORES_PROPTRDB_INVALID.POLICY_NO IS NOT NULL THEN 'BASIC_INVALID'
          ELSE
		    (
            CASE WHEN ICG_STORES_PROPTRDR_TMP.BENEFIT_CD IS NULL THEN 'BENEFIT_CD,' ELSE '' END +
            CASE WHEN ICG_STORES_PROPTRDR_TMP.INFORCE_FLAG IS NULL THEN 'INFORCE_FLAG,' ELSE '' END +
            CASE WHEN ICG_STORES_PROPTRDR_TMP.STATUS_SOURCE_RIDER IS NULL THEN 'STATUS_SOURCE,' ELSE '' END)
        END
      ) AS INVALID_DESC,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
                    
    FROM STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDR AS ICG_STORES_PROPTRDR_TMP

    LEFT JOIN (SELECT CHDRNUM FROM FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_DUP GROUP BY CHDRNUM) AS AC1108RDB_DUP
    ON ICG_STORES_PROPTRDR_TMP.POLICY_NO = NULLIF(TRIM(AC1108RDB_DUP.CHDRNUM), '')

    LEFT JOIN (SELECT * FROM FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_INVALID WHERE UPPER(TRIM(SUBSYSTEM)) = 'PROPTRDB') AS ICG_STORES_PROPTRDB_INVALID
    ON ICG_STORES_PROPTRDR_TMP.POLICY_NO = ICG_STORES_PROPTRDB_INVALID.POLICY_NO

    LEFT JOIN
    (
      SELECT
        POLICY_NO,
	    PRODUCT_CD,
	    BENEFIT_CD,
	    CONTRACT_ID,
	    COHORT_YEAR,
	    SET_OF_CONTRACT,
	    PORTFOLIO_GROUP,
	    INSURANCE_CONTRACT_GROUP_ID,
	    ICG_ID_PROPHET,
	    ENTRY_MONTH,
	    CB_START_DT,
	    CB_END_DT,
	    MEASUREMENT_MODEL,
	    COVERAGE_LEVEL_END_DATE,
	    CCY_CD,
	    BEN_EXP_DATE,
	    INFORCE_FLAG,
	    STATUS_SOURCE,
        ROW_NUMBER() OVER(PARTITION BY POLICY_NO, PRODUCT_CD, BENEFIT_CD ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_RIDER
     
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  
	  WHERE UPPER(SUBSYSTEM) = 'PROPTRDR'
	  AND PRODUCT_CD <> BENEFIT_CD
    ) ICG_STORES_VALID
    ON ICG_STORES_PROPTRDR_TMP.POLICY_NO = ICG_STORES_VALID.POLICY_NO
    AND ICG_STORES_PROPTRDR_TMP.PRODUCT_CD = ICG_STORES_VALID.PRODUCT_CD
    AND ICG_STORES_PROPTRDR_TMP.BENEFIT_CD = ICG_STORES_VALID.BENEFIT_CD
    AND ICG_STORES_VALID.ROWNUM_RIDER = 1

    LEFT JOIN (SELECT CHDRNUM FROM STAG_ID.STAG_LIFEASIA_AC1108RDB WHERE NULLIF(TRIM(CHDRNUM), '') IS NOT NULL GROUP BY CHDRNUM) AS AC1108RDB
    ON ICG_STORES_PROPTRDR_TMP.POLICY_NO = NULLIF(TRIM(AC1108RDB.CHDRNUM), '')

    WHERE
    (
      AC1108RDB_DUP.CHDRNUM IS NOT NULL --When basic is duplicate, all new riders is considered as invalid
      OR ICG_STORES_PROPTRDB_INVALID.POLICY_NO IS NOT NULL --When basic policy is invalid, all riders is considered as invalid as well.
      OR AC1108RDB.CHDRNUM IS NULL
      OR ICG_STORES_PROPTRDR_TMP.POLICY_NO IS NULL
      OR ICG_STORES_PROPTRDR_TMP.PRODUCT_CD IS NULL
      OR ICG_STORES_PROPTRDR_TMP.BENEFIT_CD IS NULL
      OR ICG_STORES_PROPTRDR_TMP.CONTRACT_ID IS NULL
      OR ICG_STORES_PROPTRDR_TMP.PORTFOLIO_GROUP IS NULL
      OR ICG_STORES_PROPTRDR_TMP.COHORT_YEAR IS NULL
      OR ICG_STORES_PROPTRDR_TMP.SET_OF_CONTRACT IS NULL
      OR ICG_STORES_PROPTRDR_TMP.INSURANCE_CONTRACT_GROUP_ID IS NULL
      OR ICG_STORES_PROPTRDR_TMP.ICG_ID_PROPHET IS NULL
      OR ICG_STORES_PROPTRDR_TMP.ENTRY_MONTH IS NULL
      OR ICG_STORES_PROPTRDR_TMP.CB_START_DT IS NULL
      OR ICG_STORES_PROPTRDR_TMP.CB_END_DT IS NULL
      OR ICG_STORES_PROPTRDR_TMP.MEASUREMENT_MODEL IS NULL
      OR ICG_STORES_PROPTRDR_TMP.INFORCE_FLAG IS NULL
      OR ICG_STORES_PROPTRDR_TMP.COVERAGE_LEVEL_END_DATE IS NULL
      OR ICG_STORES_PROPTRDR_TMP.CCY_CD IS NULL
      OR ICG_STORES_PROPTRDR_TMP.STATUS_SOURCE_RIDER IS NULL
      OR ICG_STORES_PROPTRDR_TMP.BEN_EXP_DATE IS NULL
	  OR (ICG_STORES_PROPTRDR_TMP.CB_START_DT > ICG_STORES_PROPTRDR_TMP.BEN_EXP_DATE AND ICG_STORES_PROPTRDR_TMP.STATUS_SOURCE_RIDER = 'IF' )
    );

	--BEGIN TRANSACTION;
	--SET NOCOUNT ON

	---------------------------
	--- UPDATE TABLE ICG STORES
	---------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('UPDATE TABLE ICG STORES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	UPDATE ICG_STORES
	SET
	  INFORCE_FLAG = (CASE
	                    WHEN IFRS17_ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'INSERT' THEN 'N'
	                    WHEN IFRS17_ICG_STORES_PROPTRDR_TMP.STATUS_SOURCE_RIDER = ICG_STORES.STATUS_SOURCE AND ICG_STORES.STATUS_SOURCE = 'IF' AND IFRS17_ICG_STORES_PROPTRDR_TMP.CB_END_DT <> ICG_STORES.CB_END_DT AND IFRS17_ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'INSERT' THEN 'N'
                        ELSE IFRS17_ICG_STORES_PROPTRDR_TMP.INFORCE_FLAG
                      END),
	  STATUS_SOURCE = (CASE
	                     WHEN IFRS17_ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'INSERT' THEN ICG_STORES.STATUS_SOURCE
	                     ELSE IFRS17_ICG_STORES_PROPTRDR_TMP.STATUS_SOURCE_RIDER
	                   END),
	  UPDATED_DATE = CURRENT_TIMESTAMP
	
	FROM FOND_ID.FOND_IFRS17_ICG_STORES AS ICG_STORES

	JOIN
	(
	  SELECT
	    POLICY_NO,
	    PRODUCT_CD,
		BENEFIT_CD,
	    CB_START_DT,
	    CB_END_DT,
	    ROW_NUMBER() OVER(PARTITION BY POLICY_NO, PRODUCT_CD, BENEFIT_CD ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_RIDER
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  WHERE UPPER(SUBSYSTEM) = 'PROPTRDR'
	  AND PRODUCT_CD <> BENEFIT_CD
	) AS LATEST_ICGS
	ON LATEST_ICGS.POLICY_NO = ICG_STORES.POLICY_NO
	AND LATEST_ICGS.PRODUCT_CD = ICG_STORES.PRODUCT_CD
	AND LATEST_ICGS.BENEFIT_CD = ICG_STORES.BENEFIT_CD
	AND LATEST_ICGS.CB_START_DT = ICG_STORES.CB_START_DT
	AND LATEST_ICGS.CB_END_DT = ICG_STORES.CB_END_DT
	AND LATEST_ICGS.ROWNUM_RIDER = 1
	
	JOIN STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDR AS IFRS17_ICG_STORES_PROPTRDR_TMP
	ON IFRS17_ICG_STORES_PROPTRDR_TMP.POLICY_NO = LATEST_ICGS.POLICY_NO
	AND IFRS17_ICG_STORES_PROPTRDR_TMP.BENEFIT_CD = LATEST_ICGS.BENEFIT_CD
	AND IFRS17_ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER IN('INSERT', 'UPDATE')

	LEFT JOIN 
    (
      SELECT *,
        ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
      
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  
	  WHERE UPPER(SUBSYSTEM) = 'PROPTRDB'
	  AND PRODUCT_CD = BENEFIT_CD
    ) ICG_STORES_BASIC
    ON IFRS17_ICG_STORES_PROPTRDR_TMP.POLICY_NO = ICG_STORES_BASIC.POLICY_NO
    AND ICG_STORES_BASIC.ROWNUM_POLICY_NO = 1

    LEFT JOIN (SELECT CHDRNUM FROM STAG_ID.STAG_LIFEASIA_AC1108RDB WHERE NULLIF(TRIM(CHDRNUM), '') IS NOT NULL GROUP BY CHDRNUM) AS AC1108RDB
    ON IFRS17_ICG_STORES_PROPTRDR_TMP.POLICY_NO = NULLIF(TRIM(AC1108RDB.CHDRNUM), '')

    LEFT JOIN (SELECT * FROM FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_INVALID WHERE UPPER(TRIM(SUBSYSTEM)) = 'PROPTRDB') AS ICG_STORES_PROPTRDB_INVALID
    ON IFRS17_ICG_STORES_PROPTRDR_TMP.POLICY_NO = ICG_STORES_PROPTRDB_INVALID.POLICY_NO
    
	WHERE UPPER(TRIM(ICG_STORES.SUBSYSTEM)) = 'PROPTRDR'
	AND IFRS17_ICG_STORES_PROPTRDR_TMP.POLICY_NO IS NOT NULL
	AND IFRS17_ICG_STORES_PROPTRDR_TMP.PRODUCT_CD IS NOT NULL
	AND IFRS17_ICG_STORES_PROPTRDR_TMP.BENEFIT_CD IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.CONTRACT_ID IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.PORTFOLIO_GROUP IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.COHORT_YEAR IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.SET_OF_CONTRACT IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.INSURANCE_CONTRACT_GROUP_ID IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.ICG_ID_PROPHET IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.ENTRY_MONTH IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.CB_START_DT IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.CB_END_DT IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.MEASUREMENT_MODEL IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.INFORCE_FLAG IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.COVERAGE_LEVEL_END_DATE IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.CCY_CD IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.STATUS_SOURCE_RIDER IS NOT NULL
    AND IFRS17_ICG_STORES_PROPTRDR_TMP.BEN_EXP_DATE IS NOT NULL
	AND (IFRS17_ICG_STORES_PROPTRDR_TMP.CB_START_DT < IFRS17_ICG_STORES_PROPTRDR_TMP.BEN_EXP_DATE or IFRS17_ICG_STORES_PROPTRDR_TMP.STATUS_SOURCE_RIDER <> 'IF')
	AND ICG_STORES_BASIC.POLICY_NO IS NOT NULL
	--ONLY PROCESS RIDERS WITH VALID BASIC:
    AND AC1108RDB.CHDRNUM IS NOT NULL AND ICG_STORES_PROPTRDB_INVALID.POLICY_NO IS NULL;

    ---------------------------------------
	--- INSERT NEW VALID DATA TO ICG_STORES
	---------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT NEW VALID DATA TO ICG_STORES : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	INSERT INTO FOND_ID.FOND_IFRS17_ICG_STORES
	(
	  "ENTITY_ID",
      "SYSTEM",
	  POLICY_NO,
	  PRODUCT_CD,
	  BENEFIT_CD,
	  CONTRACT_ID,
	  PORTFOLIO_GROUP,
	  COHORT_YEAR,
	  SET_OF_CONTRACT,
	  INSURANCE_CONTRACT_GROUP_ID,
	  ICG_ID_PROPHET,
	  ENTRY_MONTH,
	  CB_START_DT,
	  CB_END_DT,
	  MEASUREMENT_MODEL,
	  INFORCE_FLAG,
	  COVERAGE_LEVEL_END_DATE,
	  CCY_CD,
	  STATUS_SOURCE,
	  BEN_EXP_DATE,
	  SUBSYSTEM,
	  CREATED_DATE,
	  UPDATED_DATE,
	  BATCH_MASTER_ID,
      BATCH_RUN_ID,
      JOB_MASTER_ID,
      JOB_RUN_ID,
	  BATCHDATE,
      ETL_PROCESS_DATE_TIME
	)
    SELECT
      ICG_STORES_PROPTRDR_TMP."ENTITY_ID",
      ICG_STORES_PROPTRDR_TMP."SYSTEM",
      ICG_STORES_PROPTRDR_TMP.POLICY_NO,
      ICG_STORES_PROPTRDR_TMP.PRODUCT_CD,
      ICG_STORES_PROPTRDR_TMP.BENEFIT_CD,
      ICG_STORES_PROPTRDR_TMP.CONTRACT_ID,
      ICG_STORES_PROPTRDR_TMP.PORTFOLIO_GROUP,
      ICG_STORES_PROPTRDR_TMP.COHORT_YEAR,
      ICG_STORES_PROPTRDR_TMP.SET_OF_CONTRACT,
      ICG_STORES_PROPTRDR_TMP.INSURANCE_CONTRACT_GROUP_ID,
      ICG_STORES_PROPTRDR_TMP.ICG_ID_PROPHET,
      ICG_STORES_PROPTRDR_TMP.ENTRY_MONTH,
      ICG_STORES_PROPTRDR_TMP.CB_START_DT,
      ICG_STORES_PROPTRDR_TMP.CB_END_DT,
      ICG_STORES_PROPTRDR_TMP.MEASUREMENT_MODEL,
      ICG_STORES_PROPTRDR_TMP.INFORCE_FLAG,
      ICG_STORES_PROPTRDR_TMP.COVERAGE_LEVEL_END_DATE,
      ICG_STORES_PROPTRDR_TMP.CCY_CD,
      ICG_STORES_PROPTRDR_TMP.STATUS_SOURCE_RIDER,
      ICG_STORES_PROPTRDR_TMP.BEN_EXP_DATE,
      CAST('Proptrdr' AS VARCHAR(20)) AS SUBSYSTEM,
      CURRENT_TIMESTAMP AS CREATED_DATE,
      CURRENT_TIMESTAMP AS UPDATED_DATE,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
	  @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
    
	FROM STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDR AS ICG_STORES_PROPTRDR_TMP

	LEFT JOIN 
    (
      SELECT *,
        ROW_NUMBER() OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO
      
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  
	  WHERE UPPER(SUBSYSTEM) = 'PROPTRDB'
	  AND PRODUCT_CD = BENEFIT_CD
    ) ICG_STORES_BASIC
    ON ICG_STORES_PROPTRDR_TMP.POLICY_NO = ICG_STORES_BASIC.POLICY_NO
    AND ICG_STORES_BASIC.ROWNUM_POLICY_NO = 1

    LEFT JOIN (SELECT CHDRNUM FROM STAG_ID.STAG_LIFEASIA_AC1108RDB WHERE NULLIF(TRIM(CHDRNUM), '') IS NOT NULL GROUP BY CHDRNUM) AS AC1108RDB
    ON ICG_STORES_PROPTRDR_TMP.POLICY_NO = NULLIF(TRIM(AC1108RDB.CHDRNUM), '')

    LEFT JOIN (SELECT POLICY_NO FROM FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDB_INVALID WHERE UPPER(TRIM(SUBSYSTEM)) = 'PROPTRDB') AS ICG_STORES_PROPTRDB_INVALID
    ON ICG_STORES_PROPTRDR_TMP.POLICY_NO = ICG_STORES_PROPTRDB_INVALID.POLICY_NO
    
	WHERE ICG_STORES_PROPTRDR_TMP.FLAG_INSERT_UPDATE_RIDER = 'INSERT'
    AND ICG_STORES_PROPTRDR_TMP.POLICY_NO IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.PRODUCT_CD IS NOT NULL
	AND ICG_STORES_PROPTRDR_TMP.BENEFIT_CD IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.CONTRACT_ID IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.PORTFOLIO_GROUP IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.COHORT_YEAR IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.SET_OF_CONTRACT IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.INSURANCE_CONTRACT_GROUP_ID IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.ICG_ID_PROPHET IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.ENTRY_MONTH IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.CB_START_DT IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.CB_END_DT IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.MEASUREMENT_MODEL IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.INFORCE_FLAG IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.COVERAGE_LEVEL_END_DATE IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.CCY_CD IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.STATUS_SOURCE_RIDER IS NOT NULL
    AND ICG_STORES_PROPTRDR_TMP.BEN_EXP_DATE IS NOT NULL
	AND ICG_STORES_PROPTRDR_TMP.CB_START_DT < ICG_STORES_PROPTRDR_TMP.BEN_EXP_DATE
	AND ICG_STORES_BASIC.POLICY_NO IS NOT NULL
    --ONLY PROCESS RIDERS WITH VALID BASIC:
    AND AC1108RDB.CHDRNUM IS NOT NULL AND ICG_STORES_PROPTRDB_INVALID.POLICY_NO IS NULL;

	-------------------------
	--- UPDATE RIDER OUTFORCE
	-------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('UPDATE RIDER OUTFORCE : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	UPDATE ICG_STORES

	SET STATUS_SOURCE = STATUS_MAP.STATUS_SOURCE,
	    INFORCE_FLAG = STATUS_MAP.INFORCE_FLAG,
	    UPDATED_DATE = CURRENT_TIMESTAMP

	FROM FOND_ID.FOND_IFRS17_ICG_STORES AS ICG_STORES

	JOIN
	(
	  SELECT
	    POLICY_NO,
	    PRODUCT_CD,
	    BENEFIT_CD,
	    STATUS_SOURCE,
	    CB_START_DT,
	    CB_END_DT,
	    ROW_NUMBER() OVER(PARTITION BY POLICY_NO, PRODUCT_CD, BENEFIT_CD ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_RIDER
	  
	  FROM FOND_ID.FOND_IFRS17_ICG_STORES
	  
	  WHERE UPPER(SUBSYSTEM) = 'PROPTRDR'
	  AND PRODUCT_CD <> BENEFIT_CD
	  AND STATUS_SOURCE = 'IF'
	) LATEST_ICGS
	ON ICG_STORES.POLICY_NO = LATEST_ICGS.POLICY_NO
    AND ICG_STORES.PRODUCT_CD = LATEST_ICGS.PRODUCT_CD
	AND ICG_STORES.BENEFIT_CD = LATEST_ICGS.BENEFIT_CD
	AND ICG_STORES.CB_START_DT = LATEST_ICGS.CB_START_DT
	AND ICG_STORES.CB_END_DT = LATEST_ICGS.CB_END_DT
	AND LATEST_ICGS.ROWNUM_RIDER = 1

	LEFT JOIN
	(
	  SELECT
	    POLICY_NO,
	    PRODUCT_CD,
	    BENEFIT_CD
	  
	  FROM STAG_ID.TMP_IFRS17_ICG_STORES_PROPTRDR
	  
	  WHERE BENEFIT_CD IS NOT NULL
	) PROPTRDR_RIDER_TMP
	ON LATEST_ICGS.POLICY_NO = PROPTRDR_RIDER_TMP.POLICY_NO
	AND LATEST_ICGS.BENEFIT_CD = PROPTRDR_RIDER_TMP.BENEFIT_CD

	LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_STATUS_MAPPING_TABLE AS STATUS_MAP  
    ON STATUS_MAP.STATUS_SOURCE = 'OUTFORCE'
    AND UPPER(TRIM(STATUS_MAP.SYSTEM)) = 'LIFE ASIA'

	WHERE PROPTRDR_RIDER_TMP.POLICY_NO IS NULL;

	-------------------------------------
	--- INSERT INTO MPF PROPTRDR
	-------------------------------------
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_START = CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION = CONCAT('INSERT INTO MPF PROPTRDR : ', @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	INSERT INTO FOND_ID.FOND_IFRS17_MPFILES_PROPTRDR
	SELECT
      NULLIF(TRIM(AC1108RDR.CHDRNUM), '') AS CHDRNUM,
      AC1108RDR.CRTABLE,
      AC1108RDR.ANBCCD,
      AC1108RDR.SEX,
      AC1108RDR.MORTCLS,
      AC1108RDR.PRMTRM01,
      AC1108RDR.RSKTRM01,
      AC1108RDR.PREMI01,
      AC1108RDR.BILLFREQ,
      AC1108RDR.SUMINS,
      AC1108RDR.TOTBNS,
      AC1108RDR.PTDATE,
      AC1108RDR.HOISSDTE,
      AC1108RDR.CRRCD,
      AC1108RDR.RCESDTE,
      AC1108RDR.CNTCURR,
      AC1108RDR.STATCODE,
      AC1108RDR.CURRFROM,
      AC1108RDR.ZLINSTPREM,
      AC1108RDR.CURBON,
      AC1108RDR.LASTBON,
      AC1108RDR.SLSCNL,
      AC1108RDR.BILLCHNL,
      AC1108RDR.WDRN,
      AC1108RDR.LSURNAME,
      AC1108RDR.CLTPHONE01,
      AC1108RDR.CLTPHONE02,
      AC1108RDR.LIFCNUM,
      AC1108RDR.AGNTNUM,
      AC1108RDR.LSURNAME01,
      AC1108RDR.DTEAPP,
      AC1108RDR.DTETRM,
      AC1108RDR.TSALESUNT,
      AC1108RDR.REPORTAG,
      AC1108RDR.LSURNAME02,
      AC1108RDR.REGION,
      AC1108RDR.PSTATCODE,
      AC1108RDR.CLAIMSAR,
      AC1108RDR.FUND,
      AC1108RDR.FPAYDATE,
      AC1108RDR.CLTADDR04,
      AC1108RDR.CLTADDR05,
      AC1108RDR.PYMT,
      AC1108RDR.SRCEBUS,
      AC1108RDR.REASONCD,
      AC1108RDR.LONGDESC,
      AC1108RDR.COWNNUM,
      AC1108RDR.TOTCLAIMS,
      AC1108RDR.STAT_SECT,
      ICG_CONFIG.IFRS_ONEROUS_GRP,
      CASE
        WHEN DATEPART(YEAR, @V_START_DATE) = ICG_STORES_VALID.COHORT_YEAR THEN ICG_STORES_VALID.ENTRY_MONTH
        WHEN ICG_STORES_VALID.COHORT_YEAR < 1997 THEN 13
        ELSE (ICG_STORES_VALID.COHORT_YEAR - 1997) + 14
      END AS IFRS_CY_GRP,
      PORTFOLIO_DETAILS.IFRS_PORT_GRP,
      CASE
	    WHEN ICG_STORES_VALID.MEASUREMENT_MODEL = 'GMM' THEN 0
		WHEN ICG_STORES_VALID.MEASUREMENT_MODEL = 'VFA' THEN 1
	  END AS IFRS_MEASURE_MODEL,
      ICG_STORES_VALID.COHORT_YEAR AS BASIC_ENTRY_YEAR,
      ICG_STORES_VALID.ENTRY_MONTH AS BASIC_ENTRY_MONTH,
      DATEDIFF(MONTH, ICG_STORES_VALID.CB_START_DT, ICG_STORES_VALID.CB_END_DT) AS IFRS_CB_TERM_M,
      CASE
        WHEN DATEPART(YEAR, @V_START_DATE) = ICG_STORES_VALID.COHORT_YEAR THEN ICG_STORES_VALID.ENTRY_MONTH
        WHEN ICG_STORES_VALID.COHORT_YEAR IS NOT NULL THEN 0
        ELSE NULL
      END AS MTHS_TO_SALE,
      ICG_STORES_VALID.IFRS_ICG_ID,
      ICG_STORES_VALID.IFRS_ICG_ID_PROPHET,
      ICG_CONFIG.SUB_GROUP_ID,
      ICG_STORES_VALID.ENTITY_ID AS ENTITY_ID,
      ICG_STORES_VALID.CB_START_DT AS CB_START_DT,
      ICG_STORES_VALID.CB_END_DT AS CB_END_DT,
      CASE WHEN DATEPART(YEAR, @V_START_DATE) = ICG_STORES_VALID.COHORT_YEAR THEN (ICG_STORES_VALID.IFRS_ICG_ID + '_' + UPPER(ICG_STORES_VALID.ENTRY_MONTH_MMM)) END AS REL_INSURANCE_CONTRACT_GROUP_ID,
	  @BATCH_MASTER_ID AS BATCH_MASTER_ID,
      @BATCH_RUN_ID AS BATCH_RUN_ID,
      @JOB_MASTER_ID AS JOB_MASTER_ID,
      @JOB_RUN_ID AS JOB_RUN_ID,
      @BATCHDATESTR AS BATCHDATE,
      @GMT_START_DTTM AS ETL_PROCESS_DATE_TIME
                    
    FROM 
    (
      SELECT
        AC1108RDR.*,
        CASE
          WHEN MULTI_RIDER.RIDER_CODE IS NOT NULL THEN (AC1108RDR.CRTABLE + LIFEPF.LIFE)
          ELSE AC1108RDR.CRTABLE
        END AS BENEFIT_CD
      FROM STAG_ID.STAG_LIFEASIA_AC1108RDR AS AC1108RDR

      LEFT JOIN (SELECT CHDRNUM, LIFCNUM, LIFE FROM STAG_ID.STAG_LIFEASIA_LIFEPF WHERE VALIDFLAG = 1 GROUP BY CHDRNUM, LIFCNUM, LIFE) AS LIFEPF
      ON AC1108RDR.CHDRNUM = LIFEPF.CHDRNUM
      AND AC1108RDR.LIFCNUM = LIFEPF.LIFCNUM

      LEFT JOIN STAG_ID.STAG_LIFEASIA_IFRS17_MULTINS_RIDER_CODES AS MULTI_RIDER
      ON TRIM(AC1108RDR.CRTABLE) = TRIM(MULTI_RIDER.RIDER_CODE)
    ) AC1108RDR

    LEFT JOIN
    (
      --VALID ICG_STORES
	  SELECT
	    "ENTITY_ID",
	    POLICY_NO,
	    PRODUCT_CD,
	    BENEFIT_CD,
	    INSURANCE_CONTRACT_GROUP_ID AS IFRS_ICG_ID,
	    ICG_ID_PROPHET AS IFRS_ICG_ID_PROPHET,
	    COHORT_YEAR,
	    ENTRY_MONTH,
	    CCY_CD,
	    CB_START_DT,
	    CB_END_DT,
		MEASUREMENT_MODEL,
		PORTFOLIO_GROUP,
		CASE WHEN(ENTRY_MONTH =1) THEN 'JAN'
			WHEN(ENTRY_MONTH =2) THEN 'FEB'
			WHEN(ENTRY_MONTH =3) THEN 'MAR'
			WHEN(ENTRY_MONTH =4) THEN 'APR'
			WHEN(ENTRY_MONTH =5) THEN 'MAY'
			WHEN(ENTRY_MONTH =6) THEN 'JUN'
			WHEN(ENTRY_MONTH =7) THEN 'JUL'
			WHEN(ENTRY_MONTH =8) THEN 'AUG'
			WHEN(ENTRY_MONTH =9) THEN 'SEP'
			WHEN(ENTRY_MONTH =10) THEN 'OCT'
			WHEN(ENTRY_MONTH =11) THEN 'NOV'
			WHEN(ENTRY_MONTH =12) THEN 'DEC'
		 END AS ENTRY_MONTH_MMM,
	    ROW_NUMBER() OVER(PARTITION BY POLICY_NO, PRODUCT_CD, BENEFIT_CD ORDER BY CB_START_DT DESC, CB_END_DT DESC) AS ROWNUM_POLICY_NO

      FROM FOND_ID.FOND_IFRS17_ICG_STORES

	  WHERE UPPER(SUBSYSTEM) = 'PROPTRDR'
	  AND PRODUCT_CD <> BENEFIT_CD
    ) ICG_STORES_VALID
    ON NULLIF(TRIM(AC1108RDR.CHDRNUM), '') = ICG_STORES_VALID.POLICY_NO
    AND AC1108RDR.BENEFIT_CD = ICG_STORES_VALID.BENEFIT_CD
    AND ICG_STORES_VALID.ROWNUM_POLICY_NO = 1
 
    LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_SET_OF_CONTRACT AS SET_OF_CONTRACT
    ON ICG_STORES_VALID.PRODUCT_CD = SET_OF_CONTRACT.PRODUCT_CD
	AND ICG_STORES_VALID.CCY_CD = SET_OF_CONTRACT.CCY_CD
	AND UPPER(TRIM(SET_OF_CONTRACT.SYSTEM)) = 'LIFE ASIA'
        
    LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_ICG_CONFIG AS ICG_CONFIG
    ON  (CASE WHEN (ICG_STORES_VALID.COHORT_YEAR) <'2018' THEN '2018' ELSE (ICG_STORES_VALID.COHORT_YEAR) END) = ICG_CONFIG.COHORT_YEAR
	AND ICG_STORES_VALID.MEASUREMENT_MODEL = ICG_CONFIG.MEASUREMENT_MODEL
	AND ICG_STORES_VALID.PORTFOLIO_GROUP = ICG_CONFIG.PORTFOLIO_GROUP
    AND SET_OF_CONTRACT.SET_OF_CONTRACT = ICG_CONFIG.SET_OF_CONTRACT

    LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_PORTFOLIO_DETAILS AS PORTFOLIO_DETAILS
	ON ICG_STORES_VALID.PORTFOLIO_GROUP = PORTFOLIO_DETAILS.PORTFOLIO_GROUP 

	LEFT JOIN (SELECT * FROM
	(SELECT *, ROW_NUMBER() OVER(PARTITION BY CHDRNUM,CRTABLE,LIFCNUM ORDER BY CRRCD ASC) AS ROWNUM_CRRD
	FROM FOND_ID.FOND_IFRS17_ICG_STORES_PROPTRDR_DUP) TMP
	WHERE TMP.ROWNUM_CRRD = 1) REMOVE_DUP
	ON AC1108RDR.CHDRNUM = REMOVE_DUP.CHDRNUM
	AND COALESCE(AC1108RDR.CRTABLE,'') = COALESCE(REMOVE_DUP.CRTABLE,'')
	AND AC1108RDR.LIFCNUM = REMOVE_DUP.LIFCNUM
	AND AC1108RDR.CRRCD = REMOVE_DUP.CRRCD
	
	WHERE REMOVE_DUP.CHDRNUM IS NULL

	--store end step to log
	SET @V_END = CURRENT_TIMESTAMP;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = CONCAT('Finish ', @V_FUNCTION_NAME, ' : ', @V_END, ' Duration ', DATEDIFF(MINUTE, @V_START, @V_END));

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION")
	VALUES (@V_END, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);

	--IF @@TRANCOUNT > 0
	--	COMMIT TRANSACTION;

END TRY

BEGIN CATCH
	--IF @@TRANCOUNT > 0
	--	ROLLBACK TRANSACTION;
	
	DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
	DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
	DECLARE @ErrorState AS INT = ERROR_STATE()

	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= CONVERT(DATETIME,GETDATE());
	SET @V_END 	= CONVERT(DATETIME,GETDATE());
	SET @V_DESCRIPTION	='Error execution for function on ' + @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) + ' with Error Message : ' + ERROR_MESSAGE();

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION") VALUES(@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
	RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)
END CATCH;




