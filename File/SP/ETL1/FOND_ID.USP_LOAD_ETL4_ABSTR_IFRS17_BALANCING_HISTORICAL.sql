CREATE PROC [FOND_ID].[USP_LOAD_ETL4_ABSTR_IFRS17_BALANCING_HISTORICAL] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000) AS

BEGIN TRY

	DECLARE
	@V_FUNCTION_NAME	nvarchar(100),
	@V_DESCRIPTION		nvarchar(500),
	@V_CMD				nvarchar(4000),
	@V_SYSTEM_NAME		nvarchar(4000),
	@V_TABLE_HISTORICAL	nvarchar(4000),
	@V_SYSTEM			nvarchar(4000),
	@V_PERIOD			nvarchar(10),
	@V_SEQNO			integer,
	@V_START			datetime,
	
	------START GET RUN ID DETAIL FROM ABC------
    @BATCH_MASTER_ID    VARCHAR(20) = 0,
    @BATCH_RUN_ID       VARCHAR(20) = 0,
    @JOB_MASTER_ID      VARCHAR(20) = 0,
    @JOB_RUN_ID         VARCHAR(20) = 0,
    @GMT_START_DTTM     VARCHAR(19) = CONVERT(DATETIME2, GETDATE());

	EXEC STAG_ID.USP_GetRunIdReturn
    @JobName         = @JOBNAMESTR,
    @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
    @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
    @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
    @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
    @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
    ------END GET RUN ID DETAIL FROM ABC------
	
	SET @V_FUNCTION_NAME	= 'FOND_ID.USP_LOAD_ETL4_ABSTR_IFRS17_BALANCING_HISTORICAL';
	SET @V_SEQNO			= 0;
	SET @V_START 			= current_timestamp;
	SET @V_PERIOD			= LEFT(@BATCHDATESTR,4)+'0'+RIGHT(@BATCHDATESTR,2);
	----------------------------------------------------
	-- STEP 1: INITIALIZATION
	----------------------------------------------------
	SET @V_DESCRIPTION 	= 'Start '+ @V_FUNCTION_NAME +' PARAM PERIOD='+ convert(varchar(10), @V_PERIOD) +': '+ convert(varchar(20), @V_START);
	PRINT	'Start '+ @V_FUNCTION_NAME +': '+ convert(varchar(20), @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	BEGIN 
		SET @V_TABLE_HISTORICAL = 'FOND_ID.FOND_ETL4_ABSTR_IFRS17_BALANCING_HISTORICAL';
	END
	--- END OF STEP 1
		
	
	----------------------------------------------------
	-- STEP 2: INSERTING TABLE HISTORICAL
	----------------------------------------------------
	SET @V_START 		= current_timestamp;
	SET @V_SEQNO		= @V_SEQNO + 1;
	SET @V_DESCRIPTION 	= 'INSERT INTO '+@V_TABLE_HISTORICAL+' '+ CONVERT(VARCHAR(20),CURRENT_TIMESTAMP);
	PRINT	@V_DESCRIPTION;

	--- DELETE DATA WITH THE SAME PERIOD
	SET @V_CMD ='DELETE FROM '+@V_TABLE_HISTORICAL+' WHERE ACC_PERIOD = '+@V_PERIOD;
	EXEC (@V_CMD);

	SET @V_CMD =
	'INSERT INTO '+@V_TABLE_HISTORICAL+' 
	SELECT A.*,
		'''+@BATCH_MASTER_ID+''' [BATCH_MASTER_ID],
		'''+@BATCH_RUN_ID+''' [BATCH_RUN_ID],
		'''+@JOB_MASTER_ID+''' [JOB_MASTER_ID],
		'''+@JOB_RUN_ID+''' [JOB_RUN_ID],
		'''+@BATCHDATESTR+''' [BATCHDATE],
		'''+@GMT_START_DTTM+''' [ETL_PROCESS_DATE_TIME]
	FROM (
		SELECT ACCOUNT_CODE,FIELD2,ACC_PERIOD,TRANS_DATE,FIELD5,FIELD6,FIELD7,BASE_AMOUNT,DC,FIELD10,JOURNAL_TYPE,FIELD12,TRANS_REFERENCE,
			DESCRIPTION,FIELD15,FIELD16,DUE_DATE,FIELD18,CURR_CODE,FIELD20,TRANS_AMOUNT,FIELD22,T0,T1,T2,T3,T4,T5,T6,T7
		FROM FOND_ID.FOND_ADJUSTMENT_ABSTR_IFRS17_BALANCING
	) A
	';
	EXEC sp_executesql @V_CMD;

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	---------------------------------------------------------------
	-- STEP 3: FINISHING THE PROCESS
	---------------------------------------------------------------
	SET @V_START 		= current_timestamp;
	SET @V_SEQNO		= @V_SEQNO + 1;
	SET @V_DESCRIPTION 	= 'FINISH CALCULATE '+@V_FUNCTION_NAME+': '+ convert(varchar(20),current_timestamp);
	PRINT	@V_DESCRIPTION;
		
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		
		
END TRY

BEGIN CATCH
  DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
  DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
  DECLARE @ErrorState AS INT = ERROR_STATE()

  SET @V_SEQNO 	= @V_SEQNO + 1;
  SET @V_START 	= CONVERT(DATETIME,GETDATE());
  SET @V_DESCRIPTION	='Error execution for function on ' + @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) + ' with Error Message : ' + ERROR_MESSAGE();

  INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION") VALUES(@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
  RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)

  IF @@TRANCOUNT > 0
    ROLLBACK TRANSACTION;

END CATCH;

IF @@TRANCOUNT > 0
  COMMIT TRANSACTION;


