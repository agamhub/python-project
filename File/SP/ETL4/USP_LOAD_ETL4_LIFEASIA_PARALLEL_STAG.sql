CREATE PROC [FOND_ID].[USP_LOAD_ETL4_LIFEASIA_PARALLEL_STAG] @P_PRD_ID [INTEGER],@BATCH_NO [INT],@BATCH_SIZE [INT],@JOBNAMESTR [NVARCHAR](2000) AS


--DECLARE @P_PRD_ID [INTEGER],@BATCH_NO [INT],@BATCH_SIZE [INT],@JOBNAMESTR [NVARCHAR](2000) 

--set @P_PRD_ID = 20240101;
--SET @BATCH_NO = 1;
--SET @BATCH_SIZE = 1000 ;

  
BEGIN TRY
	DECLARE 
			@V_START			datetime,
			@V_END				datetime,
			@V_DURATION			datetime,
			@V_FUNCTION_NAME	varchar(100),
			@V_DESCRIPTION		varchar(500),
			@V_PARAM			nvarchar(4000),
			@V_SEQNO			integer,
			@V_CREATED_DATE		DATETIME,
	        @V_START_DATE		DATE,
	        @V_END_DATE			DATE,
			@V_CMD				NVARCHAR(max),
			@V_CMD_1			VARCHAR(max),
			@V_CMD_2			NVARCHAR(max),
			@V_CMD_3			VARCHAR(max),
			@V_CMD_4			VARCHAR(max),
			@V_CMD_5			VARCHAR(max),
			@V_CMD_6			VARCHAR(max),
			@V_CMD_7			VARCHAR(max),
			@V_CMD_8			VARCHAR(max),
			@TABLE_IN			varchar(100),
			@TABLE_IN_2			varchar(100),
			@TABLE_OUT			varchar(100),
			@TABLE_OUT_PREV		varchar(100),
			@TABLE_NAME			varchar(100),
			@IFRS17_YEAR		INTEGER = CAST(SUBSTRING (CAST (@P_PRD_ID AS VARCHAR) ,1,4) AS INT),
			@IFRS17_MONTH		INTEGER = CAST(SUBSTRING (CAST (@P_PRD_ID AS VARCHAR) ,5,2) AS INT),
			@BATCH_NUMBER		VARCHAR(5),
			@PRD_ID 			VARCHAR(8),
			@VOUCHERLIST_TABLE	varchar(100),
	
	--TEMPORARILY SET MANUAL 
	--SET @IFRS17_YEAR=2019;
	--SET @IFRS17_MONTH=11;
	--SET @IFRS17_YEAR		= cast(SUBSTRING (cast (@p_prd_id as varchar) ,1,4) as int);
	--SET @IFRS17_MONTH		= cast(SUBSTRING (cast (@p_prd_id as varchar) ,5,2) as int);
		
	------START GET RUN ID DETAIL FROM ABC------
     @BATCH_MASTER_ID    VARCHAR(20) = 0,
     @BATCH_RUN_ID       VARCHAR(20) = 0,
     @JOB_MASTER_ID      VARCHAR(20) = 0,
	 @JOB_RUN_ID         VARCHAR(20) = 0,
     @GMT_START_DTTM     VARCHAR(20) = CONVERT(DATETIME2, GETDATE()),
	 @BATCHDATE			 VARCHAR(20) = LEFT(@P_PRD_ID,6);
	 
	EXEC STAG_ID.USP_GetRunIdReturn
      @JobName        = @JOBNAMESTR,
      @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
      @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
      @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
      @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
      @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;

------END GET RUN ID DETAIL FROM ABC--------- 
PRINT 'Checkkk1';
	
------set variable----------------
	SET @BATCH_NUMBER		= CAST(@BATCH_NO AS VARCHAR);
	SET @V_FUNCTION_NAME	= 'FOND_ID.USP_LOAD_ETL4_LIFEASIA_PARALLEL_STAG_'+@BATCH_NUMBER+'';
	SET @V_SEQNO			= 1;
	SET @V_START_DATE		= CONVERT(DATE, CONVERT(CHAR(10), @P_PRD_ID));
	SET @V_START			= CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION		= CONCAT('Start Initiation - Creating #M_TABLE ', @V_FUNCTION_NAME, ' : ', @V_START_DATE);
	SET @PRD_ID				= CONVERT(CHAR(8),@P_PRD_ID);								 

-------store initial step to log---------
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	PRINT 'Checkkk2';

	
	-----To Limit Data Processed
	SET @TABLE_NAME = CONCAT('STAG_ID.STAG_LIFEASIA_ETL4_LIFEASIA_VOUCHER_LIST_',CAST(@IFRS17_YEAR AS VARCHAR(4)),STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR(2)),2,'0'));
	SET @VOUCHERLIST_TABLE = CONCAT('STAG_ID.TMP_VOUCHERNOLIST_',@BATCH_NUMBER);
	  
	DECLARE @MAX_BATCH INT;
	SET @V_CMD = N'SELECT TOP 1 @MAX_BATCH = CAST(CEILING(MAX(CUMULATIVE)/CAST(@BATCH_SIZE AS FLOAT)) AS INT) FROM '+@TABLE_NAME+'';
	SET @V_PARAM = N'@BATCH_SIZE INT, @MAX_BATCH INT OUTPUT';
	EXEC sp_executesql @V_CMD, @V_PARAM, @BATCH_SIZE=@BATCH_SIZE, @MAX_BATCH=@MAX_BATCH OUTPUT;
	
	DECLARE @RECORD_FROM INT = (SELECT @BATCH_SIZE * (@BATCH_NO-1));
	DECLARE @RECORD_TO INT = (SELECT CASE WHEN @BATCH_NO = @MAX_BATCH THEN 999999999 ELSE @BATCH_SIZE * @BATCH_NO END);

	--DECLARE @RECORD_FROM INT = 930;
	--DECLARE @RECORD_TO INT = 940;
	
	--EXEC('IF OBJECT_ID(''tempdb.dbo.#VOUCHERNOLIST_'+@BATCH_NUMBER+''', ''U'') IS NOT NULL DROP TABLE #VOUCHERNOLIST_'+@BATCH_NUMBER+'');
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_VOUCHERNOLIST_'+@BATCH_NUMBER+''', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_VOUCHERNOLIST_'+@BATCH_NUMBER+'');
	
	EXEC('SELECT * INTO '+@VOUCHERLIST_TABLE+' FROM '+@TABLE_NAME+'
	WHERE CUMULATIVE > '+@RECORD_FROM+' AND CUMULATIVE <= '+@RECORD_TO+'');
	--PRINT'SELECT * FROM #VOUCHERNOLIST';
	--EXEC('SELECT * FROM #VOUCHERNOLIST_'+@BATCH_NUMBER+'');

	
	-------------------------------------------------
	-- TUNNED LIFEASIA STEP 1 - FOUNDATION TABLE START
	-------------------------------------------------
	
	-- #T_TABLE (LIFEASIA - ACCOUNTING TRANSACTION TABLE - ACMV & RTRN, ADD ARCHIVED DATA IF REQUIRED - TRANSITION)

	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_T_TABLE'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T_TABLE');
	
	/*
	enhancement STAG_ID.TMP_'+@BATCH_NUMBER+'_T_TABLE:
	1. simplify query of TRANSACTION_DATE
	*/
	EXEC('		
		CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T_TABLE WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH(RRN)) AS
		SELECT CAST(''ACMV'' AS VARCHAR) MOVEMENT,
			RDOCNUM, 
			RLDGACCT, 
			SACSCODE, 
			SACSTYP, 
			BATCTRCDE, 
			TRANDESC, 
			ORIGCURR, 
			ORIGAMT, 
			ACCTAMT, 
			BATCCOY, 
			BATCBRN, 
			BATCACTYR, 
			BATCACTMN, 
			BATCBATCH,
			TRANNO, 
			GENLCOY, 
			POSTMONTH, 
			POSTYEAR, 
			GLCODE, 
			GLSIGN, 
			GENLCUR, 
			EFFDATE,
			RDOCPFX,
			RLDGPFX,
			TRANREF,
			RDOCCOY, 
			TAXCODE, 
			CAST(CASE WHEN TAXCODE = ''SY'' THEN ''PSY'' ELSE ''P01'' END AS VARCHAR) T7_CHECK,
			JRNSEQ,
			RLDGCOY, 
			ISNULL(RRN,9999999999) RRN,
			CAST(case 
				when ((substring(CAST(TRANSACTION_DATE AS VARCHAR),3,2) in (''01'',''03'',''05'',''07'',''08'',''10'',''12'')) and (substring(CAST(TRANSACTION_DATE AS VARCHAR),5,2) between ''01'' and ''31'')) 
					then (substring(CAST(BATCACTYR AS VARCHAR),1,2)+CAST(TRANSACTION_DATE AS VARCHAR))
				when ((substring(CAST(TRANSACTION_DATE AS VARCHAR),3,2) in (''04'',''06'',''09'',''11'')) and (substring(CAST(TRANSACTION_DATE AS VARCHAR),5,2) between ''01'' and ''30'')) 
					then (substring(CAST(BATCACTYR AS VARCHAR),1,2)+CAST(TRANSACTION_DATE AS VARCHAR))
				when ((substring(CAST(TRANSACTION_DATE AS VARCHAR),3,2) = ''02'') and (substring(CAST(TRANSACTION_DATE AS VARCHAR),5,2) between ''01'' and ''28'') or (substring(CAST(TRANSACTION_DATE AS VARCHAR),3,2) = ''02'' and cast((substring(CAST(BATCACTYR AS VARCHAR),1,2)+substring(CAST(TRANSACTION_DATE AS VARCHAR),1,2))as integer)%4 = 0 and substring(CAST(TRANSACTION_DATE AS VARCHAR),5,2) = ''29'')) 
					then (substring(CAST(BATCACTYR AS VARCHAR),1,2)+CAST(TRANSACTION_DATE AS VARCHAR))
				else (CAST(BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(BATCACTMN AS VARCHAR),2,''0'')+''28'') end as INTEGER) as TRANSACTION_DATE
			FROM STAG_ID.STAG_LIFEASIA_ACMVPF 
			WHERE BATCACTYR = '+@IFRS17_YEAR+' AND BATCACTMN = '+@IFRS17_MONTH+' 
				AND (CAST(BATCACTYR AS VARCHAR)
					+CAST(BATCACTMN AS VARCHAR)
					+CAST(BATCCOY AS VARCHAR)
					+CAST(BATCTRCDE AS VARCHAR)
					+CAST(BATCBATCH AS VARCHAR)
					+CAST(BATCBRN AS VARCHAR)) IN (SELECT VOUCHER_NO FROM '+@VOUCHERLIST_TABLE+')
			UNION ALL
		SELECT 
			CAST(''RTRN'' AS VARCHAR) MOVEMENT, 
			RDOCNUM, 
			RLDGACCT, 
			SACSCODE, 
			SACSTYP, 
			BATCTRCDE, 
			TRANDESC, 
			ORIGCCY ORIGCURR, 
			ORIGAMT, 
			ACCTAMT, 
			BATCCOY, 
			BATCBRN, 
			BATCACTYR, 
			BATCACTMN, 
			BATCBATCH,
			TRANNO, 
			GENLCOY, 
			POSTMONTH, 
			POSTYEAR, 
			GLCODE, 
			GLSIGN, 
			GENLCUR, 
			EFFDATE,
			RDOCPFX,
			RLDGPFX, 
			CAST('''' AS VARCHAR) AS TRANREF,
			RDOCCOY, 
			BANKCODE AS TAXCODE, 
			CAST(CASE WHEN RDOCPFX <> ''CH'' THEN ''P01'' ELSE '''' END AS VARCHAR) T7_CHECK,
			JRNSEQ,
			RLDGCOY, 
			ISNULL(NEW_RRN,9999999999) RRN,
			CAST(case 
				when ((substring(CAST(TRANDATE AS VARCHAR),5,2) in (''01'',''03'',''05'',''07'',''08'',''10'',''12'')) and (substring(CAST(TRANDATE AS VARCHAR),7,2) between ''01'' and ''31'')) 
					then CAST(TRANDATE AS VARCHAR)
				when ((substring(CAST(TRANDATE AS VARCHAR),5,2) in (''04'',''06'',''09'',''11'')) and (substring(CAST(TRANDATE AS VARCHAR),7,2) between ''01'' and ''30'')) 
					then CAST(TRANDATE AS VARCHAR)
				when ((substring(CAST(TRANDATE AS VARCHAR),5,2) = ''02'') and (substring(CAST(TRANDATE AS VARCHAR),7,2) between ''01'' and ''28'') or (substring(CAST(TRANDATE AS VARCHAR),5,2) = ''02'' and cast((substring(CAST(BATCACTYR AS VARCHAR),1,2)+substring(CAST(TRANDATE AS VARCHAR),1,2))as integer)%4 = 0 and substring(CAST(TRANDATE AS VARCHAR),7,2) = ''29'')) 
					then CAST(TRANDATE AS VARCHAR)
				else (CAST(BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(BATCACTMN AS VARCHAR),2,''0'')+''28'') end as INTEGER) as TRANSACTION_DATE
			FROM STAG_ID.STAG_LIFEASIA_RTRNPF_ETL4
			WHERE BATCACTYR = '+@IFRS17_YEAR+' AND BATCACTMN = '+@IFRS17_MONTH+' 
			AND (CAST(BATCACTYR AS VARCHAR)
				+CAST(BATCACTMN AS VARCHAR)
				+CAST(BATCCOY AS VARCHAR)
				+CAST(BATCTRCDE AS VARCHAR)
				+CAST(BATCBATCH AS VARCHAR)	
				+CAST(BATCBRN AS VARCHAR)) IN (SELECT VOUCHER_NO FROM '+@VOUCHERLIST_TABLE+')
		');

		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into STAG_ID.TMP_'+@BATCH_NUMBER+'_T_TABLE on : ', @V_START)
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT


	/* Truncate table process */
	--IF  @BATCH_NUMBER = '1'
	--BEGIN
		
--move to Batch01
/*	 --(2A) UPDATE SHARIA PAR BUILD ON FCT (NEED TO MAKE SURE ACTION COLUMN U OR I BASED ON FCORE)
    UPDATE STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG
    SET SOURCE_PARM_ID_1 = 'SH_LIC', VFA_CASHFLOW_SIGNAGE = '-1'
    FROM STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG A
    INNER JOIN (
        SELECT * FROM STAG_ID.STAG_CONFIG_ETL5_B71_CONFIG WHERE LIC_LRC_FLAG = 'LIC'
    ) B 
    ON A.SUN_CD = B.SUN_CD AND A.CASHFLOW_TYPE_L1 = B.CASHFLOW_TYPE_L1 AND A.CASHFLOW_TYPE_L2 = B.CASHFLOW_TYPE_L2
    WHERE A.FUND_CD LIKE '%ITYT%' AND A.FUND_CD LIKE '%ISYS%';
    

	--(2B) Update FCT FOND table
	IF OBJECT_ID('tempdb.dbo.#TEMP_FCT', 'U') IS NOT NULL DROP TABLE #TEMP_FCT;

	SELECT ENTITY_ID, SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3, CONTROL_ACCT_FLG, NEW_COA, CASHFLOW_TYPE_L1, CASHFLOW_TYPE_L2, VFA_CASHFLOW_TYPE, VFA_CASHFLOW_SIGNAGE,
	ACTION, USER_PROFILE, A.UPDATE_DT, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME
	INTO #TEMP_FCT
	FROM
	(
	SELECT *,
	CONCAT(ENTITY_ID, SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3, CONTROL_ACCT_FLG, NEW_COA, 
	COALESCE(CASHFLOW_TYPE_L1,''), COALESCE(CASHFLOW_TYPE_L2,''), COALESCE(VFA_CASHFLOW_TYPE,''), COALESCE(VFA_CASHFLOW_SIGNAGE,'')) AS [KEY]
	FROM
	(
	SELECT *, ROW_NUMBER() OVER(PARTITION BY ENTITY_ID, SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3 ORDER BY UPDATE_DT DESC) RNK
	FROM STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG
	) A WHERE RNK=1
	) A
	LEFT JOIN
	(SELECT CONCAT(ENTITY_ID, SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3, CONTROL_ACCT_FLG, NEW_COA, 
	COALESCE(CASHFLOW_TYPE_L1,''), COALESCE(CASHFLOW_TYPE_L2,''), COALESCE(VFA_CASHFLOW_TYPE,''), COALESCE(VFA_CASHFLOW_SIGNAGE,'')) AS [KEY], UPDATE_DT
	FROM FCORE_ID.FOND_FINANCE_CONFIG WHERE YEAR(EFF_TO_DT)=9999) B
	ON A.[KEY]=B.[KEY] WHERE (B.[KEY] IS NULL OR (B.[KEY] IS NOT NULL AND A.[ACTION]='D'));

	TRUNCATE TABLE FOND_ID.FOND_CONFIG_ABST_FINANCE_CONFIG;
	INSERT INTO FOND_ID.FOND_CONFIG_ABST_FINANCE_CONFIG 
    SELECT ENTITY_ID, SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3, CONTROL_ACCT_FLG, NEW_COA, 
    CASE WHEN TRIM(CASHFLOW_TYPE_L1) = '' THEN NULL ELSE CASHFLOW_TYPE_L1 END AS CASHFLOW_TYPE_L1, 
    CASE WHEN TRIM(CASHFLOW_TYPE_L2) = '' THEN NULL ELSE CASHFLOW_TYPE_L2 END AS CASHFLOW_TYPE_L2, 
    CASE WHEN TRIM(VFA_CASHFLOW_TYPE) = '' THEN NULL ELSE VFA_CASHFLOW_TYPE END AS VFA_CASHFLOW_TYPE,
	CASE WHEN TRIM(VFA_CASHFLOW_SIGNAGE) = '' THEN NULL ELSE VFA_CASHFLOW_SIGNAGE END AS VFA_CASHFLOW_SIGNAGE,
	[NEW_ACTION] ACTION, USER_PROFILE, UPDATE_DT, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME
	FROM (
	SELECT B.EFF_FROM_DT,A.*,
	CASE WHEN B.[KEY] IS NOT NULL AND A.UPDATE_DT>=B.EFF_FROM_DT AND A.[ACTION]<>'D' THEN 'U' ELSE [ACTION] END [NEW_ACTION]
	FROM #TEMP_FCT A
	LEFT JOIN 
	(SELECT CONCAT(ENTITY_ID, SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3) [KEY], UPDATE_DT, EFF_FROM_DT
	FROM FCORE_ID.FOND_FINANCE_CONFIG WHERE YEAR(EFF_TO_DT)=9999) B
	ON CONCAT(A.ENTITY_ID, A.SUN_CD, A.FUND_CD, A.PAS_NAME, A.SOURCE_PARM_ID_1, A.SOURCE_PARM_ID_2, A.SOURCE_PARM_ID_3) = B.[KEY]
	WHERE (A.UPDATE_DT>=B.UPDATE_DT) OR (B.EFF_FROM_DT IS NULL AND A.[ACTION]<>'D')
	) A;

	END
	*/
	/* Continue to logic */

	PRINT 'Create G_TABLE & COMMISSION_PAIRING on the first iteration';
 
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_G_TABLE'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_G_TABLE');
	
	EXEC('
		CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_G_TABLE WITH (DISTRIBUTION = ROUND_ROBIN) AS
		(
			SELECT 
				A.BATCCOY, A.BATCBRN, A.BATCACTYR, A.BATCACTMN, A.BATCTRCDE, A.BATCBATCH, 
				A.GENLCOY, A.GENLCUR, A.GENLCDE, 
				A.POSTMONTH, A.POSTYEAR, SUM(A.POSTAMT01) POSTAMT01A, SUM(A.POSTAMT02) POSTAMT02A, 
				A.ORIGCURR, A.APRVDATE,
				B.SHTDESC, B.ALTREF,
				B.GENLPFX
			FROM STAG_ID.STAG_LIFEASIA_GTRNPF A
			LEFT JOIN (SELECT GENLPFX, GENLCOY, GENLCUR, GENLCDE, SHTDESC, ALTREF, VALIDFLAG FROM STAG_ID.STAG_LIFEASIA_GENLPF WHERE VALIDFLAG <>''2'' AND TRIM(ISNULL(ALTREF,'''')) <> ''''
			AND POSTFLAG = ''P'' AND ALTREF LIKE ''%/%'') B ON A.GENLCOY = B.GENLCOY AND A.GENLCUR = B.GENLCUR AND A.GENLCDE = B.GENLCDE
			WHERE BATCACTYR = '+@IFRS17_YEAR+' AND BATCACTMN = '+@IFRS17_MONTH+' -- ENTER DATE FILTER HERE (YEAR & MONTH)
			AND A.APRVDATE IS NOT NULL AND B.ALTREF IS NOT NULL
				GROUP BY 
				A.BATCCOY, A.BATCBRN, A.BATCACTYR, A.BATCACTMN, A.BATCTRCDE, A.BATCBATCH, 
				A.GENLCOY, A.GENLCUR, A.GENLCDE, 
				A.POSTMONTH, A.POSTYEAR,
				A.ORIGCURR, A.APRVDATE, 
				B.SHTDESC, B.ALTREF,
				B.GENLPFX
		)');
	
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into STAG_ID.TMP_'+@BATCH_NUMBER+'_G_TABLE on : ', @V_START)
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT
		
		EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_COMMISSION_PAIRING'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_COMMISSION_PAIRING');
		EXEC('
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_COMMISSION_PAIRING WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH(RRN)) AS
			(
				SELECT RRN, MAX(PAIRING_ACCOUNT) PAIRING_ACCOUNT FROM STAG_ID.STAG_LIFEASIA_COMMISSION_PAIRING	
					WHERE BATCACTYR = '+@IFRS17_YEAR+' AND BATCACTMN = '+@IFRS17_MONTH+' 
					GROUP BY RRN
			)');
			SET @V_START = CURRENT_TIMESTAMP;
			SET @V_DESCRIPTION = CONCAT('Finish Insert Into STAG_ID.TMP_'+@BATCH_NUMBER+'_COMMISSION_PAIRING on : ', @V_START)
			RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT
			
		EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT');
		EXEC('
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT WITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH(FUND_CD)) AS
			SELECT ENTITY_ID, SUN_CD, PAS_NAME, FUND_CD, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3, CONTROL_ACCT_FLG, NEW_COA, CASHFLOW_TYPE_L1, CASHFLOW_TYPE_L2, VFA_CASHFLOW_TYPE,
			ACTION, USER_PROFILE, UPDATE_DT, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME FROM
			(
			SELECT *, ROW_NUMBER() OVER(PARTITION BY ENTITY_ID, SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3 ORDER BY ACTION DESC, UPDATE_DT DESC) RNK
			FROM STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG WHERE ACTION<>''D''
			) A WHERE RNK=1
			');

		
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE');
	
	EXEC('
		CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE WITH (DISTRIBUTION = HASH(RDOCNUM), HEAP) AS 
		WITH 
		ZGLEPF AS (
			SELECT 
				CAST(RDOCPFX AS VARCHAR)+CAST(RDOCCOY AS VARCHAR)
					+CAST(RDOCNUM AS VARCHAR)+CAST(JRNSEQ AS VARCHAR)
					+CAST(RLDGCOY AS VARCHAR)+CAST(RLDGACCT AS VARCHAR)
					+CAST(BATCCOY AS VARCHAR)+CAST(BATCBRN AS VARCHAR)
					+CAST(BATCACTYR AS VARCHAR)+CAST(BATCACTMN AS VARCHAR)
					+CAST(BATCTRCDE AS VARCHAR)+CAST(BATCBATCH AS VARCHAR)
					+CAST(GENLPFX AS VARCHAR)+CAST(GENLCOY AS VARCHAR)
					+CAST(GENLCUR AS VARCHAR)+CAST(TRIM(GLCODE) AS VARCHAR)
					+CAST(SACSCODE AS VARCHAR)+CAST(SACSTYP AS VARCHAR)
					+CAST(CAST(ORIGAMT AS NUMERIC(28,2)) AS VARCHAR)+CAST(ORIGCURR AS VARCHAR)
					+CAST(TRANNO AS VARCHAR)+CAST(POSTYEAR AS VARCHAR)
					+CAST(POSTMONTH AS VARCHAR)+CAST(EFFDATE AS VARCHAR) R_ID,
				ANLSCDXD01,ANLSCDXD02,ANLSCDXD03,CHDRNUM
				FROM STAG_ID.STAG_LIFEASIA_ZGLEPF
		)
		SELECT 
			A.*, 
			B.ALTREF, 
			B.SHTDESC, 
			B.APRVDATE, 
			(CAST(A.BATCACTYR AS VARCHAR)+CAST(A.BATCACTMN AS VARCHAR)+CAST(A.BATCCOY AS VARCHAR)+CAST(A.BATCTRCDE AS VARCHAR)+CAST(A.BATCBATCH AS VARCHAR)+CAST(A.BATCBRN AS VARCHAR)) AS VOUCHER_NO, 
			C.ANLSCDXD01,
			C.ANLSCDXD02,
			C.ANLSCDXD03, 
			CAST(C.CHDRNUM AS VARCHAR(8)) MISSING_POLICY_NO, 
			D.PAIRING_ACCOUNT
		FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_T_TABLE A 
		INNER JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_G_TABLE B ON A.BATCCOY = B.BATCCOY AND A.BATCBRN = B.BATCBRN AND A.BATCACTYR = B.BATCACTYR AND A.BATCACTMN = B.BATCACTMN AND A.BATCTRCDE = B.BATCTRCDE AND A.BATCBATCH = B.BATCBATCH AND A.GENLCOY = B.GENLCOY AND A.GENLCUR = B.GENLCUR AND TRIM(A.GLCODE) = TRIM(B.GENLCDE) AND A.ORIGCURR = B.ORIGCURR AND A.POSTMONTH = B.POSTMONTH AND A.POSTYEAR = B.POSTYEAR
		LEFT JOIN ZGLEPF C ON C.R_ID = CAST(A.RDOCPFX AS VARCHAR)+CAST(A.RDOCCOY AS VARCHAR)+CAST(A.RDOCNUM AS VARCHAR)+CAST(A.JRNSEQ AS VARCHAR)+CAST(A.RLDGCOY AS VARCHAR)+CAST(A.RLDGACCT AS VARCHAR)+CAST(A.BATCCOY AS VARCHAR)+CAST(A.BATCBRN AS VARCHAR)+CAST(A.BATCACTYR AS VARCHAR)+CAST(A.BATCACTMN AS VARCHAR)+CAST(A.BATCTRCDE AS VARCHAR)+CAST(A.BATCBATCH AS VARCHAR)+CAST(B.GENLPFX AS VARCHAR)+CAST(A.GENLCOY AS VARCHAR)+CAST(A.GENLCUR AS VARCHAR)+CAST(TRIM(A.GLCODE) AS VARCHAR)+CAST(A.SACSCODE AS VARCHAR)+CAST(A.SACSTYP AS VARCHAR)+CAST(A.ORIGAMT AS VARCHAR)+CAST(A.ORIGCURR AS VARCHAR)+CAST(A.TRANNO AS VARCHAR)+CAST(A.POSTYEAR AS VARCHAR)+CAST(A.POSTMONTH AS VARCHAR)+CAST(A.EFFDATE AS VARCHAR)
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_COMMISSION_PAIRING D on A.RRN = D.RRN and A.MOVEMENT= ''ACMV'''
		);
		
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE on					: ', @V_START)
		--PRINT @V_DESCRIPTION
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT
		
	------------------------------------------------
	-- LIFEASIA STEP 1 - FOUNDATION TABLE END
	--------------------------------------------------------------------------
	-- Error Log STEP 1 START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Creating STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT (Policy Mapping Function) '+ @V_FUNCTION_NAME + ' - STEP 2 at ' + convert(varchar(20),current_timestamp) + ' with Error Message STEP 1 (ifany): ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 1 END
	--------------------------
	
	
	DECLARE @TotalAllData AS INTEGER;
	SET @V_CMD = 'SELECT @TotalAllData = COUNT(1) FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE';
	SET @V_PARAM = N'@TotalAllData INT OUTPUT';
	EXEC sp_executesql @V_CMD, @V_PARAM, @TotalAllData=@TotalAllData OUTPUT;
	PRINT CONCAT('Total All Data												: ', @TotalAllData)
	
	
	

	-- Executing mapping policy function
	--Temporarily set manual
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT');
	
	SET @TABLE_OUT = 'STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT';
	SET @TABLE_IN= 'STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE';

	/*
	enhancement 'STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT':
	1. remove DISTINCT
	2. add derived column LIFE_COVERAGE_RIDER
	*/
	SET @V_CMD=(
		SELECT 'CREATE TABLE '+ @TABLE_OUT +' WITH ( DISTRIBUTION = HASH(RDOCNUM), HEAP ) AS SELECT A.*, '
		        +
		        (
		          SELECT 'CASE WHEN (MISSING_POLICY_NO IS NOT NULL OR MISSING_POLICY_NO <> '''') THEN MISSING_POLICY_NO '+STRING_AGG(POLICY_NO,' ')+' ELSE NULL END AS POLICY_NUMBER,'
		          FROM 
		            (
		              SELECT TOP 100
		        	    CASE WHEN (TRANREF = 'Y') THEN 'WHEN (TRANREF <> '''' AND TRANREF IS NOT NULL) AND ' ELSE 'WHEN ' END + 'SACSCODE+SACSTYP+BATCTRCDE IN ('''+TCODE_IN+''') THEN '+ THEN_CLAUSE AS POLICY_NO 
		        	  FROM
		        	    (
		        	      SELECT TRANREF, '' + STRING_AGG(CAST(SASCODE+SASTYPE+TCODE AS NVARCHAR(MAX) ),''',''') + '' AS TCODE_IN, THEN_CLAUSE
		        	  	  FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING
		        	  	  GROUP BY THEN_CLAUSE, TRANREF
		        	    ) X_POLICY_NO
		        	  ORDER BY TRANREF DESC
		            ) POLICY_NO_TABLE
	            ) -- POLICY NO SYNTAX
		        +' '+
		        (
				  SELECT 'CASE WHEN (MISSING_POLICY_NO IS NOT NULL OR MISSING_POLICY_NO <> '''')THEN ''P'' ' + STRING_AGG(POLICY_FLAG, ' ') + ' ELSE '
				  FROM 
		            (
					  SELECT TOP 100
		            	CASE WHEN (TRANREF = 'Y') THEN 'WHEN (TRANREF <> '''' AND TRANREF IS NOT NULL) AND ' ELSE 'WHEN ' END + 'SACSCODE+SACSTYP+BATCTRCDE IN ('''+TCODE_IN+''') THEN ''P''' AS POLICY_FLAG 
		              FROM
		            	(
						  SELECT TRANREF, '' + STRING_AGG(CAST(SASCODE+SASTYPE+TCODE AS NVARCHAR(MAX)), ''',''') + '' TCODE_IN, THEN_CLAUSE
						  FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING
						  GROUP BY THEN_CLAUSE, TRANREF
						) X_POLICY_FLAG
					  ORDER BY TRANREF DESC
		            ) POLICY_FLAG_TABLE
				) 
				+
				(
				  SELECT 'CASE '+STRING_AGG(POLICY_FLAG, ' ')
				  FROM 
		            (
					  SELECT TOP 100
		            	CASE WHEN (TRANREF = 'Y') THEN 'WHEN (TRANREF = '''' OR TRANREF IS NULL) AND ' ELSE 'WHEN' END +' SACSCODE+SACSTYP+BATCTRCDE IN ('''+SACSTCODE_IN+''') THEN ''O''' AS POLICY_FLAG 
		            	FROM
		                (
						  SELECT TRANREF, '' + STRING_AGG(CAST(SASCODE+SASTYPE+TCODE AS NVARCHAR(MAX)), ''',''') + '' SACSTCODE_IN
						  FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING_NONRELATED
						  GROUP BY TRANREF
						) X_POLICY_FLAG ORDER BY TRANREF DESC
		            ) POLICY_FLAG_TABLE
				)
		        +  'ELSE ''-'' END END AS POLICY_FLAG,'-- POLICY FLAG SYNTAX
		        + ' ' +
		        (
				  SELECT 'CASE WHEN (MISSING_POLICY_NO IS NOT NULL OR MISSING_POLICY_NO <> '''') THEN MISSING_POLICY_NO ' + STRING_AGG(NEW_RLDGACCT, ' ') + ' ELSE NULL END AS NEW_RLDGACCT'
				  FROM 
		            (
					  SELECT TOP 100
			            CASE WHEN (TRANREF = 'Y') THEN 'WHEN (TRANREF <> '''' AND TRANREF IS NOT NULL) AND ' ELSE 'WHEN ' END + 'SACSCODE+SACSTYP+BATCTRCDE IN ('''+TCODE_IN+''') THEN '+  THEN_ACCT AS NEW_RLDGACCT
					  FROM
			            (
						  SELECT TRANREF,  '' + STRING_AGG(CAST(SASCODE+SASTYPE+TCODE AS NVARCHAR(MAX)), ''',''') + '' TCODE_IN, THEN_ACCT
						  FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING
						  GROUP BY THEN_ACCT, TRANREF
						) X_NEW_RLDGACCT
					  ORDER BY TRANREF DESC
			       ) NEW_RLDGACCT_TABLE
				) -- ACCOUNT NO SYNTAX
				+
				', CASE WHEN SACSCODE+SACSTYP+BATCTRCDE=''SCIT204'' AND CHARINDEX(''/'',TRANDESC) > 0 THEN RIGHT(LEFT(TRANDESC,CHARINDEX(''/'',TRANDESC)-1),8) ELSE NULL END POLICY_SCIT204
				 , CASE WHEN LEN(TRIM(RLDGACCT))<14 THEN ''010100'' ELSE SUBSTRING(RLDGACCT,9,6) END AS LIFE_COVERAGE_RIDER
		        FROM '+@TABLE_IN+' A
				');

		PRINT @V_CMD;
		EXEC( @V_CMD );
	
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT on			: ', @V_START)
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT
	
	
	
	--------------------------
	-- Error Log STEP 2A START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'List new policy number specific for SCIT204 - STEP 3A at ' + convert(varchar(20),current_timestamp) + ' with Error Message STEP 3A (ifany): ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 2A END
	--------------------------
	/*
	enhancement #NEW_CHDRNUM_'+@BATCH_NUMBER+':
	1. remove DISTINCT
	*/
	EXEC('IF OBJECT_ID(''tempdb.dbo.#NEW_CHDRNUM_'+@BATCH_NUMBER+''', ''U'') IS NOT NULL DROP TABLE #NEW_CHDRNUM_'+@BATCH_NUMBER+'');
	EXEC('
	   SELECT NEW_POLICY_NO 
	   INTO #NEW_CHDRNUM_'+@BATCH_NUMBER+'
	   FROM
	     (
		   SELECT RIGHT(LEFT(TRANDESC,CHARINDEX(''/'',TRANDESC)-1),8) NEW_POLICY_NO
		   FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT
	       WHERE SACSCODE+SACSTYP+BATCTRCDE=''SCIT204'' AND CHARINDEX(''/'',TRANDESC) > 0
	     ) A
	   WHERE LEN(NEW_POLICY_NO)=8
	   GROUP BY NEW_POLICY_NO
	');
		
	--------------------------
	-- Error Log STEP 2 START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Creating STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 '+ @V_FUNCTION_NAME + ' - STEP 3 at ' + convert(varchar(20),current_timestamp) + ' with Error Message STEP 2 (ifany): ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 2 END
	--------------------------
	
	

	-- 2nd foundation table
	/*
	enhancement:
	1. remove DISTINCT
	2. create additional temp table TMP_M_TABLE_RESULT_UNION_NEW_CHDRNUM to replace filter condition in temp table _B, _C, _VALID_FLAG_NON_2, _VALID_FLAG_2
	3. create additional temp table TMP_M_TABLE_RESULT_UNION_NEW_CHDRNUM_2 to replace filter condition in temp table _VALID_FLAG_2
	4. change 'IN' in the filter condition to JOIN in temp table _B, _C,_VALID_FLAG_NON_2, _VALID_FLAG_2
	5. create additional temp table STAG_ID.TMP_'+@BATCH_NUMBER+'_N_BC. purpose: simplify join condition when creating DATA11 table
	*/
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1');
	SET @V_CMD = 
			N'
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT_UNION_NEW_CHDRNUM'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT_UNION_NEW_CHDRNUM;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT_UNION_NEW_CHDRNUM WITH (DISTRIBUTION = HASH(POLICY_NUMBER), HEAP) AS
			SELECT POLICY_NUMBER
			FROM
			  (
			    SELECT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT
			    UNION ALL
			    SELECT NEW_POLICY_NO AS POLICY_NUMBER FROM #NEW_CHDRNUM_'+@BATCH_NUMBER+'
			  ) A
			GROUP BY POLICY_NUMBER;

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT_UNION_NEW_CHDRNUM_2'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT_UNION_NEW_CHDRNUM_2;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT_UNION_NEW_CHDRNUM_2 WITH (DISTRIBUTION = HASH(POLICY_NUMBER), HEAP) AS
			SELECT POLICY_NUMBER
			FROM
			  (
			    SELECT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT
			    UNION ALL
			    SELECT NEW_POLICY_NO AS POLICY_NUMBER FROM #NEW_CHDRNUM_'+@BATCH_NUMBER+'
				UNION ALL
				SELECT RLDGACCT AS POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT WHERE POLICY_NUMBER IS NULL
			  ) A
			GROUP BY POLICY_NUMBER;
			'
		
		PRINT @V_CMD;
		--EXEC LongPrint @String = @V_CMD
		EXEC (@V_CMD);
	    
		SET @V_CMD = 
			N'
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_B'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_B;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_B WITH (DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT CHDRNUM, CNTTYPE, MAX(PTDATE) AS PTDATE, MAX(BILLFREQ) BILLFREQ, MAX(STATCODE) STATCODE, MAX(PSTATCODE) PSTATCODE -- TAMBAHIN PTDATE, PAKAI GROUP BY INSTEAD OF DISTINCT
				FROM STAG_ID.STAG_LIFEASIA_CHDRPF
				WHERE VALIDFLAG <> ''2'' AND CHDRNUM IN (SELECT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT_UNION_NEW_CHDRNUM)
				GROUP BY CHDRNUM, CNTTYPE
			);

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_C'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_C;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_C WITH (DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT CHDRNUM, CNTTYPE, MAX(PTDATE) AS PTDATE, MAX(BILLFREQ) BILLFREQ, MAX(STATCODE) STATCODE, MAX(PSTATCODE) PSTATCODE -- TAMBAHIN PTDATE, PAKAI GROUP BY INSTEAD OF DISTINCT
				FROM STAG_ID.STAG_LIFEASIA_CHDRPF
				WHERE VALIDFLAG = ''2'' AND CHDRNUM IN (SELECT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT_UNION_NEW_CHDRNUM)
				GROUP BY CHDRNUM, CNTTYPE
			);

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_N_BC'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_N_BC;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_N_BC WITH (DISTRIBUTION = HASH(CHDRNUM)) AS
	        (
			    SELECT CHDRNUM, CNTTYPE, PTDATE, BILLFREQ, STATCODE, PSTATCODE FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_B
	            
				UNION ALL
	            
				SELECT C.CHDRNUM, C.CNTTYPE, C.PTDATE, C.BILLFREQ, C.STATCODE, C.PSTATCODE
				FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_C AS C
			    LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_B AS B
			    ON C.CHDRNUM = B.CHDRNUM
			    WHERE B.CHDRNUM IS NULL
			);

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_NON_2'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_NON_2;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_NON_2 WITH (DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE, MAX(CRRCD) CRRCD 
				FROM STAG_ID.STAG_LIFEASIA_COVRPF AS COVRPF
				WHERE VALIDFLAG <> ''2'' AND CHDRNUM IN (SELECT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT_UNION_NEW_CHDRNUM)
				GROUP BY CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE
				
				UNION ALL
				
				SELECT CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE, NULL CRRCD 
				FROM STAG_ID.STAG_LIFEASIA_COVTPF 
				WHERE CHDRNUM NOT IN (SELECT CHDRNUM FROM STAG_ID.STAG_LIFEASIA_COVRPF WHERE VALIDFLAG <> ''2'')
				AND CHDRNUM IN (SELECT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT_UNION_NEW_CHDRNUM)
				GROUP BY CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE
			);

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2 WITH (DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE, MAX(CRRCD) CRRCD
				FROM STAG_ID.STAG_LIFEASIA_COVRPF 
				WHERE VALIDFLAG <> ''2'' 
				AND CHDRNUM IN (SELECT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT_UNION_NEW_CHDRNUM_2)
				GROUP BY CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE

				UNION ALL

				SELECT CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE, NULL CRRCD 
				FROM STAG_ID.STAG_LIFEASIA_COVTPF 
				WHERE CHDRNUM NOT IN (SELECT CHDRNUM FROM STAG_ID.STAG_LIFEASIA_COVRPF WHERE VALIDFLAG <> ''2'')
				AND CHDRNUM IN (SELECT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT_UNION_NEW_CHDRNUM_2)
				GROUP BY CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE
			);'

		PRINT @V_CMD;
		--EXEC LongPrint @String = @V_CMD
		EXEC (@V_CMD);
		
		/*
	    enhancement:
	    1. remove DISTINCT
		2. add derived column in temp table _ZRVHPF, _ZRVHPF_OTHER, _ZRVHPF_T301
		3. add temp table _ZRVHPF_REGP
	    */
		SET @V_CMD = 
			N'
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF WITH ( DISTRIBUTION = HASH(CHDRNUM)) AS
		    (
		    	SELECT
				  A.CLAIM_DATE, A.CHDRCOY, A.CHDRNUM, A.TRANNO, A.RGPYNUM,
				  CAST(CONCAT(A.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,A.RGPYNUM) AS VARCHAR(20)) CLAIM_NO,
				  CASE WHEN LEN(SUBSTRING(CONCAT(A.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,A.RGPYNUM),9,6)) <> 6 THEN ''010100'' ELSE SUBSTRING(CONCAT(A.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,A.RGPYNUM),9,6) END AS LIFECOVERAGERIDER
		    	FROM
		    	  (
		    	    SELECT CLAIM_DATE, CAST(CHDRCOY AS VARCHAR(30)) CHDRCOY, CAST(CHDRNUM AS VARCHAR(30)) CHDRNUM, CAST(TRANNO AS NUMERIC(5,0)) TRANNO, CAST(RGPYNUM AS VARCHAR(5)) RGPYNUM
		    	    FROM
		    	      (
		    		    SELECT EFFDATE CLAIM_DATE, CHDRCOY, STAG_ID.LPAD(CHDRNUM,8,''0'') CHDRNUM, TRANNO, STAG_ID.LPAD(RGPYNUM,4,''0'') RGPYNUM,
		    	          DENSE_RANK() OVER(PARTITION BY STAG_ID.LPAD(CHDRNUM,8,''0''), TRANNO, CHDRCOY ORDER BY EFFDATE DESC, RGPYNUM DESC) RNK
		    	        FROM STAG_ID.STAG_LIFEASIA_ZRVHPF
		    		  ) A
		    	    WHERE RNK = 1
		    		GROUP BY CLAIM_DATE, CHDRCOY, CHDRNUM, TRANNO, RGPYNUM
		    	  ) A
		    	LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2 B
		    	ON A.CHDRNUM = B.CHDRNUM	
		    );

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_REGP'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_REGP;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_REGP WITH ( DISTRIBUTION = HASH(CHDRNUM)) AS
			SELECT MAX(CLAIM_DATE) CLAIM_DATE, CHDRCOY, CHDRNUM, RGPYNUM, CLAIM_NO,
			  CASE WHEN LEN(SUBSTRING(CLAIM_NO,9,6)) <> 6 THEN ''010100'' ELSE SUBSTRING(CLAIM_NO,9,6) END AS LIFECOVERAGERIDER
			FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF
			GROUP BY CHDRCOY,CHDRNUM,RGPYNUM,CLAIM_NO;
			'
	EXEC (@V_CMD);

	SET @V_CMD = 
			N'
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_OTHER'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_OTHER;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_OTHER WITH ( DISTRIBUTION = HASH(CHDRNUM)) AS
		    (
		    	SELECT
				  A.CLAIM_DATE, A.CHDRCOY, A.CHDRNUM, A.TRANNO, A.RGPYNUM,
				  CAST(CONCAT(A.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,A.RGPYNUM) AS VARCHAR(20)) CLAIM_NO,
				  CASE WHEN LEN(SUBSTRING(CONCAT(A.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,A.RGPYNUM),9,6)) <> 6 THEN ''010100'' ELSE SUBSTRING(CONCAT(A.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,A.RGPYNUM),9,6) END AS LIFECOVERAGERIDER
		    	FROM
		    	  (
		    	    SELECT CLAIM_DATE, CAST(CHDRCOY AS VARCHAR(30)) CHDRCOY, CAST(CHDRNUM AS VARCHAR(30)) CHDRNUM, CAST(TRANNO AS NUMERIC(5,0)) TRANNO, CAST(RGPYNUM AS VARCHAR(5)) RGPYNUM
		    	    FROM
		    	      (
		    		    SELECT EFFDATE CLAIM_DATE, CHDRCOY, STAG_ID.LPAD(CHDRNUM,8,''0'') CHDRNUM, XTRANNO AS TRANNO, STAG_ID.LPAD(RGPYNUM,4,''0'') RGPYNUM,
		    	          DENSE_RANK() OVER(PARTITION BY STAG_ID.LPAD(CHDRNUM,8,''0''), XTRANNO, CHDRCOY ORDER BY EFFDATE DESC, RGPYNUM DESC) RNK
		    	        FROM STAG_ID.STAG_LIFEASIA_ZRVHPF
		    		  ) A
		    	    WHERE RNK = 1
		    		GROUP BY CLAIM_DATE, CHDRCOY, CHDRNUM, TRANNO, RGPYNUM
		    	  ) A
		    	LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2 B
		    	ON A.CHDRNUM = B.CHDRNUM	
		    );

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_T301'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_T301;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_T301 WITH ( DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT
				  A.CLAIM_DATE, A.CHDRCOY, A.CHDRNUM, A.RGPYNUM, 
				  CAST(CONCAT(A.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,A.RGPYNUM) AS VARCHAR(20)) CLAIM_NO,
				  CASE WHEN LEN(SUBSTRING(CONCAT(A.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,A.RGPYNUM),9,6)) <> 6 THEN ''010100'' ELSE SUBSTRING(CONCAT(A.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,A.RGPYNUM),9,6) END AS LIFECOVERAGERIDER
				FROM
				  (
				    SELECT MAX(EFFDATE) CLAIM_DATE, CAST(CHDRCOY AS VARCHAR(30)) CHDRCOY, CAST(STAG_ID.LPAD(CHDRNUM,8,''0'') AS VARCHAR(30)) CHDRNUM, CAST(STAG_ID.LPAD(CAST(RGPYNUM AS INTEGER),4,''0'') AS VARCHAR(10)) RGPYNUM 
				    FROM STAG_ID.STAG_LIFEASIA_ZRVHPF
					GROUP BY CHDRCOY, CHDRNUM, RGPYNUM
				  ) A
				LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2 B
				ON A.CHDRNUM = B.CHDRNUM
			);'
		EXEC (@V_CMD);
		
		/*
		enhancement:
		1. change join to subquery into filter condition in temp table _T0_4
		2. remove temp table _T0_2B1 because it's identic to temp table _T0_2A1
		*/
		SET @V_CMD = N'
		    IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_T7_RECLASS'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T7_RECLASS;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T7_RECLASS WITH ( DISTRIBUTION = HASH(ITEMITEM)) AS
			(
				SELECT ITEMITEM, -- SUBSTRING(GENAREA,1,12) ANALYSISCODEDESC, 
				  SUBSTRING(GENAREA,13,7) T7_REC_ACMV,
				  ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) AS RN
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF
				WHERE ITEMTABL = ''TG005'' AND SUBSTRING(GENAREA,1,12) = ''ANALYSYSCD08'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_T3616'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T3616;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T3616 WITH ( DISTRIBUTION = HASH(ITEMITEM)) AS
			(
				SELECT ITEMITEM, SUBSTRING(GENAREA,3,2) SL_PREFIX,
				  ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM, SUBSTRING(GENAREA,3,2) DESC) RN 
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF
				WHERE ITEMTABL = ''T3616'' AND ITEMPFX = ''IT''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_OMNI_PRODUCT'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_OMNI_PRODUCT;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_OMNI_PRODUCT WITH ( DISTRIBUTION = HASH(ITEMITEM)) AS
			(
				SELECT ITEMITEM, ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) RN
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF
				WHERE ITEMTABL = ''TG011'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_4'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_4;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_4 WITH ( DISTRIBUTION = HASH(ITEMITEM)) AS
			(
				SELECT A.ITEMITEM, SUBSTRING(A.GENAREA,1,7) T0_REPLACE, B.SHORTDESC COA,
				  ROW_NUMBER() OVER(PARTITION BY A.ITEMITEM, B.SHORTDESC ORDER BY B.SHORTDESC) AS RN 
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF AS A
				JOIN STAG_ID.STAG_LIFEASIA_DESCPF AS B
				ON A.ITEMITEM = B.DESCITEM
				AND B.DESCTABL = ''TG007'' AND B.DESCPFX = ''IT''
				WHERE A.ITEMTABL = ''TG007'' AND A.ITEMPFX=''IT'' AND A.VALIDFLAG = ''1''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2A1'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2A1;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2A1 WITH (  DISTRIBUTION = HASH(ITEMITEM)) AS
			(
				SELECT ITEMITEM, -- SUBSTRING(GENAREA,1,12) ANALYSISCODEDESC, 
				  SUBSTRING(GENAREA,13,7) T0_REPLACE,
				  ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) AS RN
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF
				WHERE ITEMTABL = ''TG005'' AND SUBSTRING(GENAREA,1,12) = ''ANALYSYSCD01'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_RTRN_T7'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_RTRN_T7;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_RTRN_T7 WITH ( DISTRIBUTION = HASH(ITEMITEM)) AS
			(
				SELECT ITEMITEM, -- SUBSTRING(GENAREA,1,12) ANALYSISCODEDESC, 
				  SUBSTRING(GENAREA,13,3) T7_REPLACE,
				  ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) AS RN
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF
				WHERE ITEMTABL = ''TG006'' AND SUBSTRING(GENAREA,1,12) = ''ANALYSYSCD08'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1''
			);';

    EXEC (@V_CMD);
	
	SET @V_CMD_2 = N'
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ENTITY_SPLIT'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ENTITY_SPLIT;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ENTITY_SPLIT WITH ( DISTRIBUTION = HASH(ITEMITEM)) AS
			(
				SELECT ITEMITEM,
				  CASE WHEN SUBSTRING(GENAREA,124,2) IN (''RS'',''SS'') THEN ''PSY'' ELSE ''P01'' END SY_FLG,
				  ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) RN 
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''T5687'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_CLMH'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_CLMH;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_CLMH WITH ( DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT MAX(CLAIM_DATE) CLAIM_DATE, CHDRNUM, TRANNO, CAST(CONCAT(A.CHDRNUM,''010100'',A.TRANNO,''T668'') AS VARCHAR(30)) CLAIM_NO
				FROM
				(
				  SELECT EFFDATE CLAIM_DATE, CAST(STAG_ID.LPAD(CHDRNUM,8,''0'') AS VARCHAR(8)) CHDRNUM, CAST(TRANNO AS NUMERIC(5,0)) TRANNO
				  FROM STAG_ID.STAG_LIFEASIA_ZRVHPF
				  GROUP BY EFFDATE, CAST(STAG_ID.LPAD(CHDRNUM,8,''0'') AS VARCHAR(8)), CAST(TRANNO AS NUMERIC(5,0))
				) A
				GROUP BY CHDRNUM, TRANNO, CAST(CONCAT(A.CHDRNUM,''010100'',A.TRANNO,''T668'') AS VARCHAR(30))
			);';

    EXEC (@V_CMD_2);

	/*
	enhancement:
	1. simplify query STAG_ID.TMP_'+@BATCH_NUMBER+'_PTRNPF
	2. add HEAP when creating table _PTRNPF
	3. remove temp table _T0_2B2 because its logic is similar to _T0_2A1
	*/
	SET @V_CMD = N'
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_RIDER_DESC'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_RIDER_DESC;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_RIDER_DESC WITH ( DISTRIBUTION = HASH(DESCITEM)) AS 
			( SELECT DESCITEM, LONGDESC FROM STAG_ID.STAG_LIFEASIA_DESCPF WHERE DESCTABL = ''T5687'' AND DESCCOY = ''2'');

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_PRODUCT_DESC'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PRODUCT_DESC;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PRODUCT_DESC WITH ( DISTRIBUTION = HASH(DESCITEM)) AS 
			( SELECT DESCITEM, LONGDESC FROM STAG_ID.STAG_LIFEASIA_DESCPF WHERE DESCTABL = ''T5688'' AND DESCCOY = ''2'');

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSCODE1'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSCODE1;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSCODE1 WITH ( DISTRIBUTION = HASH(DESCITEM)) AS 
			(
				SELECT DESCITEM, SHORTDESC, LONGDESC, ROWNUM
				FROM
				  (
				    SELECT ROW_NUMBER() OVER (PARTITION BY DESCITEM ORDER BY DESCCOY) ROWNUM,
					  DESCITEM, SHORTDESC, LONGDESC
					FROM STAG_ID.STAG_LIFEASIA_DESCPF
					WHERE DESCTABL = ''T3616''
				  ) A 
				WHERE ROWNUM = 1
			);

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSTYP1'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSTYP1;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSTYP1 WITH ( DISTRIBUTION = HASH(DESCITEM)) AS 
			(
				SELECT DESCITEM, SHORTDESC, LONGDESC, ROWNUM
				FROM
				  (
				    SELECT ROW_NUMBER() OVER (PARTITION BY DESCITEM ORDER BY DESCCOY) ROWNUM,
					  DESCITEM, SHORTDESC, LONGDESC
					FROM STAG_ID.STAG_LIFEASIA_DESCPF
					WHERE DESCTABL = ''T3695''
				  ) A 
				WHERE ROWNUM = 1
			)
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_PTRNPF'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PTRNPF;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PTRNPF WITH ( DISTRIBUTION = HASH(CHDRNUM)) AS 
			(
			   SELECT CHDRNUM, TRANNO, BATCTRCDE
			   FROM (SELECT CHDRNUM, TRANNO, BATCTRCDE FROM STAG_ID.STAG_LIFEASIA_PTRNPF WHERE BATCHDATE <=LEFT(CAST('''+@PRD_ID+''' as VARCHAR),6) GROUP BY CHDRNUM, TRANNO, BATCTRCDE HAVING COUNT(1) = 1) A
			   WHERE NOT EXISTS
			     (
				   SELECT CHDRNUM, TRANNO
				   FROM (SELECT CHDRNUM, TRANNO FROM (SELECT CHDRNUM, TRANNO, BATCTRCDE FROM STAG_ID.STAG_LIFEASIA_PTRNPF WHERE BATCHDATE <=LEFT(CAST('''+@PRD_ID+''' as VARCHAR),6) GROUP BY CHDRNUM, TRANNO, BATCTRCDE) B GROUP BY CHDRNUM, TRANNO HAVING COUNT(1) > 1) C
				   WHERE A.CHDRNUM = C.CHDRNUM AND A.TRANNO = C.TRANNO
				 )
				 
			   UNION ALL
			   
			   --DOUBLE CHDRNUM & TRANNO
			   SELECT CHDRNUM, TRANNO, BATCTRCDE
			   FROM
			     (
			       SELECT CHDRNUM, TRANNO, BATCTRCDE, RNK
				   FROM (SELECT CHDRNUM, TRANNO, BATCTRCDE, ROW_NUMBER() OVER(PARTITION BY CHDRNUM,TRANNO ORDER BY BATCTRCDE DESC) RNK FROM (SELECT CHDRNUM, TRANNO, BATCTRCDE FROM STAG_ID.STAG_LIFEASIA_PTRNPF WHERE BATCHDATE <=LEFT(CAST('''+@PRD_ID+''' as VARCHAR),6) GROUP BY CHDRNUM, TRANNO, BATCTRCDE) A) B
			       WHERE EXISTS
			         (
			   	       SELECT CHDRNUM, TRANNO
			   	       FROM (SELECT CHDRNUM, TRANNO FROM (SELECT CHDRNUM, TRANNO, BATCTRCDE FROM STAG_ID.STAG_LIFEASIA_PTRNPF WHERE BATCHDATE <=LEFT(CAST('''+@PRD_ID+''' as VARCHAR),6) GROUP BY CHDRNUM, TRANNO, BATCTRCDE) B GROUP BY CHDRNUM, TRANNO HAVING COUNT(1) > 1) C
			           WHERE B.CHDRNUM = C.CHDRNUM AND B.TRANNO = C.TRANNO
			   	     )
			     ) D
			   WHERE D.RNK=1
			)';
	EXEC (@V_CMD);

	/*
	enhancement:
	1. split the parameter into @V_CMD_2 and @V_CMD_3	
        2. replace join condition to N_BC to temp table STAG_ID.TMP_'+@BATCH_NUMBER+'_N_BC
	3. simplify business rule in join condition to _VALID_FLAG_NON_2
	*/
	SET @V_CMD_2 = N'
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 WITH ( DISTRIBUTION = HASH(POLICY_NO)) AS
			SELECT 
			-- T0 FLAG START
			CAST(CASE ' + (
		SELECT (
			SELECT 
				'WHEN (SUBSTRING(A.ALTREF,12,2) IN (''01'',''02'')) AND (E.CRTABLE+A.BATCTRCDE IN ('''+STRING_AGG(ITEMITEM_FLAG,''',''')+'''))' ITEMITEM_FLAG
				FROM 
				(
					SELECT TRIM(SUBSTRING(ITEMITEM,1,4))+TRIM(SUBSTRING(ITEMITEM,5,4)) ITEMITEM_FLAG
			        FROM STAG_ID.STAG_LIFEASIA_ITEMPF 
		            WHERE ITEMTABL = 'TG002' AND VALIDFLAG <> '2'  AND ITEMPFX='IT'
		            AND SUBSTRING(ITEMITEM,1,4)NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,1,4) <> '' AND SUBSTRING(ITEMITEM,1,4) IS NOT NULL
		            AND SUBSTRING(ITEMITEM,5,4)NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,5,4) <> '' AND SUBSTRING(ITEMITEM,5,4) IS NOT NULL
			        GROUP BY TRIM(SUBSTRING(ITEMITEM,1,4))+TRIM(SUBSTRING(ITEMITEM,5,4))
				) A
				)+'THEN (E.CRTABLE+A.BATCTRCDE) '+(
			SELECT 
				'WHEN (SUBSTRING(A.ALTREF,12,2) IN (''01'',''02'')) AND (E.CRTABLE IN ('''+STRING_AGG(CAST(ITEMITEM_FLAG AS NVARCHAR(MAX)),''',''')+'''))' ITEMITEM_FLAG 
				FROM 
				(
					SELECT TRIM(SUBSTRING(ITEMITEM,1,4)) ITEMITEM_FLAG
				    FROM STAG_ID.STAG_LIFEASIA_ITEMPF 
		     	    WHERE ITEMTABL = 'TG002' AND VALIDFLAG <> '2' AND ITEMPFX='IT'
		     	    AND SUBSTRING(ITEMITEM,1,4) NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,1,4) <> '' AND SUBSTRING(ITEMITEM,1,4) IS NOT NULL
		     	    AND SUBSTRING(ITEMITEM,5,4) LIKE '%*%' AND SUBSTRING(ITEMITEM,5,4) <> '' AND SUBSTRING(ITEMITEM,5,4) IS NOT NULL
				    GROUP BY TRIM(SUBSTRING(ITEMITEM,1,4))
				) A
				)+' THEN (E.CRTABLE+''****'') '+(
			SELECT 
				'WHEN (SUBSTRING(A.ALTREF,12,2) IN (''01'',''02'')) AND (A.BATCTRCDE  IN ('''+STRING_AGG(CAST(ITEMITEM_FLAG AS NVARCHAR(MAX)),''',''')+'''))' ITEMITEM_FLAG
				FROM 
				(
					SELECT TRIM(SUBSTRING(ITEMITEM,5,4)) ITEMITEM_FLAG
			        FROM STAG_ID.STAG_LIFEASIA_ITEMPF 
		            WHERE ITEMTABL = 'TG002' AND VALIDFLAG <> '2' AND ITEMPFX='IT'
		            AND SUBSTRING(ITEMITEM,1,4) LIKE '%*%' AND SUBSTRING(ITEMITEM,1,4) <> '' AND SUBSTRING(ITEMITEM,1,4) IS NOT NULL
		            AND SUBSTRING(ITEMITEM,5,4) NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,5,4) <> '' AND SUBSTRING(ITEMITEM,5,4) IS NOT NULL
			        GROUP BY TRIM(SUBSTRING(ITEMITEM,5,4))
				) A)
				+' THEN (''****''+A.BATCTRCDE) 
				WHEN (SUBSTRING(A.ALTREF,12,2) IN (''01'',''02'')) THEN (''********'') END AS VARCHAR) ITEMITEM_FLAG,'
				+'
			A.TAXCODE,
			A.MOVEMENT,
			')

	SET @V_CMD_3 = ('
			OMNI.ITEMITEM OMNI_PRODUCT_CD,
			CAST(A.ANLSCDXD01 as VARCHAR(7)) T0_0_REPLACE,
			T0_4.T0_REPLACE T0_4_REPLACE,
			T0_2A1.T0_REPLACE T0_2A1_REPLACE,
			T0_2B1.T0_REPLACE T0_2B1_REPLACE,
			T0_2B2.T0_REPLACE T0_2B2_REPLACE,
			T3616.SL_PREFIX,
		-- T0 FLAG END
			A.VOUCHER_NO,
			A.EFFDATE, 
			CASE WHEN LEN(TRIM(A.NEW_RLDGACCT))<14 THEN ''010100'' ELSE SUBSTRING(A.NEW_RLDGACCT,9,6) END AS LIFECOVERAGERIDER,
			CASE WHEN A.POLICY_FLAG = ''O'' THEN NULL ELSE E.CRTABLE END AS BENEFIT_CODE,
			A.BATCACTYR, A.BATCACTMN, A.APRVDATE, 
			A.TRANSACTION_DATE AS TRANS_DATE_ORI, 
			CASE WHEN SUBSTRING(CAST(A.TRANSACTION_DATE AS VARCHAR),1,6) <> CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),2,''0'')
				THEN CONVERT(VARCHAR,EOMONTH(CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),2,''0'')+''01''),112)
				ELSE CAST(A.TRANSACTION_DATE AS VARCHAR) END TRANS_DATE,
			CASE WHEN B.CNTTYPE IS NULL AND C.CNTTYPE IS NULL AND N_BC.CNTTYPE IS NOT NULL THEN A.POLICY_SCIT204 ELSE A.POLICY_NUMBER END AS POLICY_NO,
			ISNULL(ISNULL(B.CNTTYPE,C.CNTTYPE),N_BC.CNTTYPE) PRODUCT, 
			PRODUCT_DESC.LONGDESC AS PRODUCT_NAME,
			A.BATCBATCH, 
			D.CRTABLE AS RIDER_CODE, 
			RIDER_DESC.LONGDESC AS RIDER,
			CASE WHEN (B.PTDATE IS NULL AND C.PTDATE <> 0) THEN C.PTDATE
				 WHEN (B.PTDATE IS NULL AND C.PTDATE IS NULL AND N_BC.PTDATE <> 0) THEN N_BC.PTDATE
				 WHEN (B.PTDATE IS NULL AND C.PTDATE = 0) THEN A.EFFDATE
				 WHEN (B.PTDATE IS NULL AND C.PTDATE IS NULL AND N_BC.PTDATE = 0) THEN A.EFFDATE
				 WHEN (B.PTDATE = 0) THEN A.EFFDATE 
				 ELSE B.PTDATE END PTDATE,
			A.BATCTRCDE AS TRANS_CODE, 
			D.CRRCD AS CRRCD, 
			D.CRRCD AS CRRCD_DEFAULT, 
			ISNULL(ISNULL(B.BILLFREQ,C.BILLFREQ),N_BC.BILLFREQ) BILLFREQ,
			A.TRANDESC, A.SACSCODE, 
			SACSCODE1.LONGDESC AS SACSCODE_DESC, 
			A.SACSTYP, 
			SACSTYP1.LONGDESC AS SACSTYP_DESC, 
			A.GLCODE, A.SHTDESC AS GLCODE_DESC,A.RLDGACCT,A.RDOCNUM,A.TRANNO, 
			--DELETE SOON
			CASE WHEN CONCAT(A.SACSCODE,A.SACSTYP,A.BATCTRCDE)=''LEBMT542'' AND SUBSTRING(A.ALTREF,1,10)=''5111010000'' THEN ''5113010000''
				 WHEN CONCAT(A.SACSCODE,A.SACSTYP,A.BATCTRCDE)=''LESOTZ12'' AND SUBSTRING(A.ALTREF,1,10)=''5119030000'' THEN ''5114020000''
				 WHEN CONCAT(A.SACSCODE,A.SACSTYP,A.BATCTRCDE) IN (''LECVT512'',''LECVT513'',''LECVTI81'',''LECVTI86'') AND SUBSTRING(A.ALTREF,1,10)=''5114900000'' THEN ''5114010000''
				 WHEN CONCAT(A.SACSCODE,A.SACSTYP,A.BATCTRCDE)=''LEPWT510'' AND SUBSTRING(A.ALTREF,1,10)=''5114900000'' THEN ''5114020000''
			ELSE A.ALTREF END SUN_GLCODE, 
			A.ORIGCURR,A.RDOCPFX,A.RLDGPFX,A.TRANREF,A.POLICY_FLAG,A.GLSIGN,
			A.PAIRING_ACCOUNT,
			A.RRN,
			ENTITY_FLAG.SY_FLG,
			CASE 
				WHEN ACMV_T7.T7_REC_ACMV IS NOT NULL THEN ACMV_T7.T7_REC_ACMV 
				WHEN A.MOVEMENT = ''RTRN'' THEN 
					CASE WHEN RTRN_T7.T7_REPLACE IS NOT NULL 
					THEN RTRN_T7.T7_REPLACE ELSE ''P01'' 
					END
				ELSE A.T7_CHECK END T7,
			CASE WHEN GLSIGN = ''-'' THEN -1*ORIGAMT ELSE ORIGAMT END AS ORIG_AMT,
			CASE WHEN GLSIGN = ''-'' THEN -1*ACCTAMT ELSE ACCTAMT END AS ACCT_AMT,
			A.RDOCCOY,
			A.BATCCOY
		FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT A
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_B B ON A.POLICY_NUMBER = B.CHDRNUM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_C C ON A.POLICY_NUMBER = C.CHDRNUM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_N_BC AS N_BC ON A.POLICY_SCIT204 = N_BC.CHDRNUM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_NON_2 D ON ISNULL(ISNULL(B.CHDRNUM,C.CHDRNUM),N_BC.CHDRNUM) = D.CHDRNUM AND A.LIFE_COVERAGE_RIDER = D.LIFE+D.COVERAGE+D.RIDER
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2 E ON ISNULL(ISNULL(ISNULL(B.CHDRNUM,C.CHDRNUM),N_BC.CHDRNUM),A.RLDGACCT) = E.CHDRNUM AND ''010100'' = E.LIFE+E.COVERAGE+E.RIDER
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_RIDER_DESC RIDER_DESC ON D.CRTABLE = RIDER_DESC.DESCITEM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_PRODUCT_DESC PRODUCT_DESC ON ISNULL(ISNULL(B.CNTTYPE,C.CNTTYPE),N_BC.CNTTYPE) = PRODUCT_DESC.DESCITEM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSCODE1 SACSCODE1 ON A.SACSCODE = SACSCODE1.DESCITEM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSTYP1 SACSTYP1 ON A.SACSTYP = SACSTYP1.DESCITEM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_OMNI_PRODUCT OMNI ON OMNI.ITEMITEM = SUBSTRING(A.TRANREF,7,4) AND OMNI.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_4 T0_4 ON T0_4.COA = SUBSTRING(A.ALTREF,1,10) AND T0_4.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2A1 T0_2A1 ON T0_2A1.ITEMITEM = SUBSTRING(A.ALTREF,1,5)+''PSY'' AND T0_2A1.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2A1 T0_2B1 ON T0_2B1.ITEMITEM = SUBSTRING(A.ALTREF,1,5)+T7_CHECK AND T0_2B1.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_RTRN_T7 RTRN_T7 ON RTRN_T7.ITEMITEM = E.CRTABLE--+''010100'' 
			AND RTRN_T7.RN = 1 AND A.MOVEMENT = ''RTRN''--U/ DAPET ANALYSIS CODE 8
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_T7_RECLASS ACMV_T7 ON ACMV_T7.ITEMITEM = SUBSTRING(A.ALTREF,1,5)+T7_CHECK 
			AND ACMV_T7.RN = 1 AND A.MOVEMENT = ''ACMV'' --U/ RECLASS T7 ACMV
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2A1 T0_2B2 ON T0_2B2.ITEMITEM = SUBSTRING(A.ALTREF,1,5)+RTRN_T7.T7_REPLACE AND T0_2B2.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ENTITY_SPLIT ENTITY_FLAG ON ENTITY_FLAG.ITEMITEM = E.CRTABLE AND ENTITY_FLAG.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_T3616 T3616 ON T3616.ITEMITEM = A.SACSCODE AND T3616.RN = 1
		;'
		)
		
		PRINT @V_CMD_2;
		PRINT @V_CMD_3;
	    EXEC (@V_CMD_2+@V_CMD_3);
	
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 on										: ', @V_START)
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT

	--------------------------
	-- Error Log STEP 3A START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Update Z429 TRANREF for Claim & Cohort '+ @V_FUNCTION_NAME + ' - STEP 4A at ' + convert(varchar(20),current_timestamp) + ' with Error Message: ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 3A END
	--------------------------

	EXEC('IF OBJECT_ID(''tempdb.dbo.#GET_TRANREF_'+@BATCH_NUMBER+''', ''U'') IS NOT NULL DROP TABLE #GET_TRANREF_'+@BATCH_NUMBER+'');
	EXEC ('
	SELECT A.ITEMITEM_FLAG,A.TAXCODE,A.MOVEMENT,A.OMNI_PRODUCT_CD,A.T0_0_REPLACE,A.T0_4_REPLACE,A.T0_2A1_REPLACE,A.T0_2B1_REPLACE,A.T0_2B2_REPLACE,A.SL_PREFIX,A.VOUCHER_NO,A.EFFDATE,
	A.LIFECOVERAGERIDER,A.BENEFIT_CODE,A.BATCACTYR,A.BATCACTMN,A.APRVDATE,A.TRANS_DATE_ORI,A.TRANS_DATE,A.POLICY_NO,A.PRODUCT,A.PRODUCT_NAME,A.BATCBATCH,A.RIDER_CODE,A.RIDER,A.PTDATE,A.TRANS_CODE,
	A.CRRCD,A.CRRCD_DEFAULT,A.BILLFREQ,A.TRANDESC,A.SACSCODE,A.SACSCODE_DESC,A.SACSTYP,A.SACSTYP_DESC,A.GLCODE,A.GLCODE_DESC,A.RLDGACCT,A.RDOCNUM,A.TRANNO,A.SUN_GLCODE,A.ORIGCURR,A.RDOCPFX,A.RLDGPFX,
	B.TRANREF,A.POLICY_FLAG,A.GLSIGN,A.PAIRING_ACCOUNT,A.RRN,A.SY_FLG,A.T7,A.ORIG_AMT,A.ACCT_AMT,A.RDOCCOY,A.BATCCOY
	INTO #GET_TRANREF_'+@BATCH_NUMBER+'
	FROM (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 WHERE SACSCODE+SACSTYP+TRANS_CODE IN (''LERBZ432'',''LERBZ433'',''LERBZ429'')) A
	LEFT JOIN (SELECT RDOCNUM, TRANNO, TRANREF, TRANS_CODE, ORIG_AMT, ACCT_AMT FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 WHERE SACSCODE+SACSTYP+TRANS_CODE IN (''LEDOZ432'',''LEDOZ433'',''LEDOZ429'')) B
	ON A.RDOCNUM=B.RDOCNUM AND A.TRANNO=B.TRANNO AND A.TRANS_CODE=B.TRANS_CODE
	WHERE A.ORIG_AMT+B.ORIG_AMT=0 AND A.ACCT_AMT+B.ACCT_AMT=0
	');

	EXEC('DELETE FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 WHERE RRN IN (SELECT RRN FROM #GET_TRANREF_'+@BATCH_NUMBER+')');

	EXEC('INSERT INTO STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 SELECT * FROM #GET_TRANREF_'+@BATCH_NUMBER+'');
	
	--------------------------
	-- Error Log STEP 3 START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Creating STAG_ID.TMP_XX_DATA11 (Cohort Mapping) '+ @V_FUNCTION_NAME + ' - STEP 4 at ' + convert(varchar(20),current_timestamp) + ' with Error Message STEP 3 (ifany): ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 3 END
	--------------------------
	--[REVAMP]
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11');
	
	SET @TABLE_IN	= 'STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1';
    SET @TABLE_IN_2	= 'STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1_ADD_COLS';
    SET @TABLE_OUT_PREV	= 'STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11_PREV';
	SET @TABLE_OUT	= 'STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11';

	/*
	enhancement: create additional temp table STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1_ADD_COLS to add derived column PRODUCT_CD which is used in join condition when creating DATA11 table
	*/

	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1_ADD_COLS'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1_ADD_COLS');
	SET @V_CMD_2 = N'
			CREATE TABLE '+@TABLE_IN_2+' WITH ( DISTRIBUTION = HASH(POLICY_NO)) AS
	        SELECT *,
	               (CASE WHEN (BENEFIT_CODE IS NOT NULL AND BENEFIT_CODE <> '''') THEN BENEFIT_CODE ELSE PRODUCT END) AS PRODUCT_CD,
	        	   CASE WHEN LEN(TRIM(TRANDESC))>=18 AND SUBSTRING(TRIM(TRANDESC),15,4) LIKE ''[0-9][0-9][0-9][0-9]'' THEN CAST(TRIM(SUBSTRING(TRANDESC,15,4)) AS INT) ELSE 9999 END AS RGPYNUM
	        FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1;';
	EXEC (@V_CMD_2);
	

	/*
	enhancement:
	1. remove DISTINCT
	*/
	SET @V_CMD = ('
			--ICG_STORE AS
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ICG_STORE'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ICG_STORE;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ICG_STORE WITH ( CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH(POLICY_NUMBER)) AS
			(
				SELECT 
					POLICY_NO POLICY_NUMBER,
					CAST(CONVERT(VARCHAR,CAST(CB_START_DT AS DATE),112) AS INTEGER) CB_START_DATE,
					CAST(CONVERT(VARCHAR,CAST(CB_END_DT AS DATE),112) AS INTEGER) CB_END_DATE,
					ROW_NUMBER()OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC) RN 
				FROM FOND_ID.FOND_IFRS17_ICG_STORES
				WHERE SYSTEM = ''Life Asia'' AND PRODUCT_CD = BENEFIT_CD 
				AND POLICY_NO IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1)
			);
			
			--CLMHPF AS
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_CLMHPF'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_CLMHPF;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_CLMHPF WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT A.DTOFDEATH
					 , A.CHDRNUM
					 , A.LIFE 
					 --, A.EFFDATE 
					 , A.CHDRNUM+''010100''+CAST(A.TRANNO AS VARCHAR)+''T668'' AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM STAG_ID.STAG_LIFEASIA_CLMHPF A 
				INNER JOIN (SELECT MAX(TRANNO) TRANNO, CHDRNUM FROM STAG_ID.STAG_LIFEASIA_CLMHPF GROUP BY CHDRNUM) B ON A.TRANNO = B.TRANNO AND A.CHDRNUM = B.CHDRNUM
				WHERE A.CHDRNUM IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1)
			);
			
			--REGPPF AS 
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT 
					  A.CRTDATE
					, A.CHDRNUM
					, A.LIFE
					, A.COVERAGE
					, A.RIDER
					, STAG_ID.LPAD(A.RGPYNUM,4,''0'') RGPYNUM 
					, A.CHDRNUM+A.LIFE+A.COVERAGE+A.RIDER+STAG_ID.LPAD(A.RGPYNUM,4,''0'') AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM STAG_ID.STAG_LIFEASIA_REGPPF A 
				WHERE A.VALIDFLAG <>''2''
				AND A.CHDRNUM IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1)
				GROUP BY A.CRTDATE, A.CHDRNUM, A.LIFE, A.COVERAGE, A.RIDER, A.RGPYNUM
			);
			
			--REGPPF_WP AS
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_WP'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_WP;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_WP WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT
				      A.CHDRNUM
					, MAX(A.CRTDATE) CRTDATE 
					, A.CHDRNUM+''010100''+STAG_ID.LPAD(MAX(A.RGPYNUM),4,''0'') AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM STAG_ID.STAG_LIFEASIA_REGPPF A
				WHERE A.PAYREASON IN (''WP'',''CC'',''PD'') AND A.VALIDFLAG = ''1'' AND A.CHDRNUM IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1)
				GROUP BY A.CHDRNUM
			);		
		
			--REGPPF_C4 AS
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_C4'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_C4;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_C4 WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT
					  A.CHDRNUM
					, MAX(A.CRTDATE) CRTDATE 
					, A.CHDRNUM+''010100''+STAG_ID.LPAD(MAX(A.RGPYNUM),4,''0'') AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM STAG_ID.STAG_LIFEASIA_REGPPF A
				WHERE A.VALIDFLAG = ''1'' AND A.CHDRNUM IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
				GROUP BY A.CHDRNUM
			);

			--ZALTPF
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ZALTPF'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZALTPF;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZALTPF WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT A.CHDRNUM, A.ZRCVDT, A.ZALTNUM, SUBSTRING(B.TRANDESC,1,22) AS CLAIM_NO
				FROM
				  (
					SELECT A. CHDRNUM,A.ZRCVDT, A.ZALTNUM 
					FROM STAG_ID.STAG_LIFEASIA_ZALTPF A
					WHERE A.CHDRNUM IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
				  ) A 
				INNER JOIN  STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 B ON substring(B.TRANDESC,15,8) = A.ZALTNUM AND A.CHDRNUM= B.POLICY_NO
				GROUP BY A.CHDRNUM, A.ZRCVDT, A.ZALTNUM, SUBSTRING(B.TRANDESC,1,22)
			);')
		EXEC(@V_CMD);

		SET  @V_CMD_2 = ('
		    --REGPPF_TRANNO AS 
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT 
					  A.CHDRNUM
					, A.TRANNO
					, A.LIFE+A.COVERAGE+A.RIDER LIFECOVERAGERIDER
					, MIN(A.VALIDFLAG) VALIDFLAG
					, CASE WHEN MIN(A.VALIDFLAG) = ''1'' THEN MAX(A.CRTDATE) WHEN MIN(A.VALIDFLAG) = ''2'' THEN MAX(B.CRTDATE) END CRTDATE 
					, A.CHDRNUM+A.LIFE+A.COVERAGE+A.RIDER+STAG_ID.LPAD(MAX(A.RGPYNUM),4,''0'') AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM
					(
						SELECT 
							  CHDRCOY
							, CHDRNUM
							, LIFE
							, COVERAGE
							, RIDER
							, RGPYNUM
							, MIN(VALIDFLAG) VALIDFLAG
							, PLAN_SUFFIX,TRANNO
							, MAX(CRTDATE) CRTDATE 
						FROM STAG_ID.STAG_LIFEASIA_REGPPF 
						WHERE CHDRNUM IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
						GROUP BY CHDRCOY,CHDRNUM,LIFE,COVERAGE,RIDER,RGPYNUM,PLAN_SUFFIX,TRANNO
					) A
				LEFT JOIN
					(
						SELECT 
							  MAX(CRTDATE) CRTDATE
							, CHDRCOY
							, CHDRNUM
							, LIFE
							, COVERAGE
							, RIDER
							, RGPYNUM
							, VALIDFLAG
							, PLAN_SUFFIX 
						FROM STAG_ID.STAG_LIFEASIA_REGPPF 
						WHERE VALIDFLAG = ''1''
						AND CHDRNUM IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
						GROUP BY CHDRCOY,CHDRNUM,LIFE,COVERAGE,RIDER,RGPYNUM,VALIDFLAG,PLAN_SUFFIX
					) B
					ON A.CHDRCOY=B.CHDRCOY AND A.VALIDFLAG = ''2''
					AND A.CHDRNUM=B.CHDRNUM 
					AND A.LIFE=B.LIFE 
					AND A.COVERAGE=B.COVERAGE 
					AND A.RIDER=B.RIDER 
					AND A.RGPYNUM=B.RGPYNUM 
					AND A.PLAN_SUFFIX = B.PLAN_SUFFIX
				GROUP BY A.CHDRNUM, A.TRANNO, A.TRANNO,A.LIFE,A.COVERAGE,A.RIDER
			);
			
			--REGPPF_TRANNO_DEFAULT AS 
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO_DEFAULT'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO_DEFAULT;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO_DEFAULT WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT 
					  A.CHDRNUM
					, A.TRANNO
					, MIN(A.VALIDFLAG) VALIDFLAG
					, CASE WHEN MIN(A.VALIDFLAG) = ''1'' THEN MAX(A.CRTDATE) WHEN MIN(A.VALIDFLAG) = ''2'' THEN MAX(B.CRTDATE) END CRTDATE 
					, A.CHDRNUM
					  + CASE WHEN MIN(A.VALIDFLAG) = ''1'' THEN MAX(A.LIFE)+MAX(A.COVERAGE)+MAX(A.RIDER) WHEN MIN(A.VALIDFLAG) = ''2'' THEN MAX(B.LIFE)+MAX(B.COVERAGE)+MAX(B.RIDER) END
					  + STAG_ID.LPAD(MAX(A.RGPYNUM),4,''0'') AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM
					(
						SELECT 
							  CHDRCOY
							, CHDRNUM
							, LIFE
							, COVERAGE
							, RIDER
							, RGPYNUM
							, MIN(VALIDFLAG) VALIDFLAG
							, PLAN_SUFFIX
							, TRANNO
							, MAX(CRTDATE) CRTDATE 
						FROM STAG_ID.STAG_LIFEASIA_REGPPF 
						WHERE CHDRNUM IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
						GROUP BY CHDRCOY,CHDRNUM,LIFE,COVERAGE,RIDER,RGPYNUM,PLAN_SUFFIX,TRANNO
					) A
				LEFT JOIN
					(
						SELECT 
							  MAX(CRTDATE) CRTDATE
							, CHDRCOY
							, CHDRNUM
							, LIFE
							, COVERAGE
							, RIDER
							, RGPYNUM
							, VALIDFLAG
							, PLAN_SUFFIX 
						FROM STAG_ID.STAG_LIFEASIA_REGPPF 
						WHERE VALIDFLAG = ''1'' 
						AND CHDRNUM IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
						GROUP BY CHDRCOY,CHDRNUM,LIFE,COVERAGE,RIDER,RGPYNUM,VALIDFLAG,PLAN_SUFFIX
					) B
					ON A.CHDRCOY=B.CHDRCOY AND A.VALIDFLAG = ''2'' 
					AND A.CHDRNUM=B.CHDRNUM 
					AND A.LIFE=B.LIFE 
					AND A.COVERAGE=B.COVERAGE 
					AND A.RIDER=B.RIDER 
					AND A.RGPYNUM=B.RGPYNUM 
					AND A.PLAN_SUFFIX = B.PLAN_SUFFIX
				--WHERE A.CHDRNUM IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
				GROUP BY A.CHDRNUM, A.TRANNO
			);
			
			--REGPPF_RGPYNUM (NEW) AS 
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_RGPYNUM'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_RGPYNUM;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_RGPYNUM WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT DISTINCT 
					  A.CRTDATE
					, A.CHDRNUM
					, STAG_ID.LPAD(A.RGPYNUM,4,''0'') RGPYNUM 
					, A.CHDRNUM+A.LIFE+A.COVERAGE+A.RIDER+STAG_ID.LPAD(A.RGPYNUM,4,''0'') AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM STAG_ID.STAG_LIFEASIA_REGPPF A 
				WHERE A.VALIDFLAG <>''2''
				AND A.CHDRNUM IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )

			);

			--REGPPF_ZCLP (NEW) AS 
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_ZCLP'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_ZCLP;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_ZCLP WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT DISTINCT
					A.CHDRNUM,
					A.LIFE,
					A.COVERAGE,
					A.RIDER,
					STAG_ID.LPAD(A.RGPYNUM,4,''0'') RGPYNUM,
					CONCAT(B.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,STAG_ID.LPAD(B.RGPYNUM,4,''0'')) CLAIM_NO,
					B.CRTDATE 
				FROM (SELECT * FROM STAG_ID.STAG_LIFEASIA_ZCLPPF WHERE VALIDFLAG <> ''2'') A
				INNER JOIN (SELECT * FROM STAG_ID.STAG_LIFEASIA_REGPPF WHERE VALIDFLAG <> ''2'') B
				ON A.CHDRNUM=B.CHDRNUM AND A.RGPYNUM=B.RGPYNUM
				WHERE A.CHDRNUM IN (SELECT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
			);
		')
		PRINT @V_CMD_2;
		--EXEC LongPrint @String = @V_CMD
		EXEC (@V_CMD_2);

			  
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into STAG_ID.TMP_'+@BATCH_NUMBER+'_ICG_STORE, STAG_ID.TMP_'+@BATCH_NUMBER+'_CLMHPF, STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF on	: ', @V_START)
		--PRINT @V_DESCRIPTION
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT
		
	/*
	enhancement: create additional temp table STAG_ID.TMP_'+@BATCH_NUMBER+'_CHDRPF to simplify join condition when creating table DATA11
	*/
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_CHDRPF'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_CHDRPF');
	SET @V_CMD = ('CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_CHDRPF WITH (DISTRIBUTION = HASH(CHDRNUM)) AS
	               (
	                  SELECT CHDRNUM, STATCODE, PSTATCODE FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_B
	                  UNION ALL
	                  SELECT CHDRNUM, STATCODE, PSTATCODE FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_C WHERE CHDRNUM NOT IN (SELECT CHDRNUM FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_B)
	               );
				 ')
	EXEC (@V_CMD);
	
	/*
	enhancement:
	1. remove subquery TG002_OMNI & TG002_OMNI_1 because both have the same business rule. impact: replace the join condition to TG002_OMNI & TG002_OMNI_1 into TG002.
	2. create temp table #TMP_1_PROC_1_ADD_COLS to add PRODUCT_CD to simplify join condition to CB_MAPPING; and add RGPYNUM to simplify join condition to TMP_1_REGPPF
	3. simplify join condition tp CHDRPF by creating temp table 
	4. remove subquery when joining to table STAG_LIFEASIA_HPADPF and remove single quote when mentioning 99999999 because field HOISSDTE is numeric
	5. simplify join condition to temp table _ZRVHPF, _ZRVHPF_OTHER, _ZRVHPF_T301, _ZRVHPF_REGP
	*/

	EXEC('IF OBJECT_ID('''+@TABLE_OUT_PREV+''', ''U'') IS NOT NULL DROP TABLE '+@TABLE_OUT_PREV+';');
	SET @V_CMD = ('CREATE TABLE '+@TABLE_OUT_PREV+' WITH ( DISTRIBUTION = HASH(POLICY_NO), HEAP )  AS 
		WITH TG002 AS
		(
			SELECT 
			  ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) AS RN,
			  SUBSTRING(GENAREA,1,1) A, -- A (DIGIT PERTAMA) CONFIRMED
			  SUBSTRING(GENAREA,29,3) BBB, -- BBB (3 DIGIT BERIKUT) CONFIRMED
			  TRIM(SUBSTRING(GENAREA,64,3)) SGLPRD, -- PRODUCT SUNGL (3 DIGIT BERIKUT) CONFIRMED
			  TRIM(SUBSTRING(GENAREA,8,LEN(GENAREA))) LEGEND, -- ADDITIONAL ATTRIBUTE WILL NOT USE (IGNORE)
			  ITEMTABL,
			  ITEMITEM
			FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG002''
			AND VALIDFLAG <> ''2'' AND ITEMPFX=''IT''
		),
		PARAM_NONRELATED AS
		(
		    SELECT SASCODE,SASTYPE,TCODE, MAX(TRANREF) TRANREF
		    FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING_NONRELATED
		    GROUP BY SASCODE,SASTYPE,TCODE
		),
		COA_INSCOPE AS
		( SELECT IFRS_SUN_CD, IDENTIFIER FROM STAG_ID.STAG_LIFEASIA_IFRS17_COA_INSCOPE GROUP BY IFRS_SUN_CD, IDENTIFIER )
		')

	SET @V_CMD_2 = ('
		SELECT DISTINCT
			CAST( CASE 
				WHEN LEFT(PROC_1.SUN_GLCODE,10) IN (''1349903140'',''1423501030'') THEN ''ITYT000''
				WHEN (PROC_1.T0_0_REPLACE IS NOT NULL) THEN PROC_1.T0_0_REPLACE
				WHEN (PROC_1.SL_PREFIX NOT IN (''AG'',''CH'')) THEN ''0000000''
				WHEN (TG002.ITEMITEM IS NOT NULL AND PROC_1.OMNI_PRODUCT_CD IS NOT NULL AND (TG002.A+TG002.BBB NOT LIKE ''%[^A-Z0-9]%'' AND TG002.A+TG002.BBB <> ''    '') ) THEN TG002.A+TG002.BBB+''001''
				WHEN (TG002_OMNI_1.ITEMITEM IS NOT NULL AND PROC_1.OMNI_PRODUCT_CD IS NOT NULL AND (TG002_OMNI_1.A+TG002_OMNI_1.BBB NOT LIKE ''%[^A-Za-z0-9]%'' AND TG002_OMNI_1.A+TG002_OMNI_1.BBB <> ''    '') ) THEN TG002_OMNI_1.A+TG002_OMNI_1.BBB+''001''
				WHEN (TG002_OMNI.ITEMITEM IS NOT NULL AND PROC_1.OMNI_PRODUCT_CD IS NOT NULL AND (TG002_OMNI.A+TG002_OMNI.BBB NOT LIKE ''%[^A-Za-z0-9]%'' AND TG002_OMNI.A+TG002_OMNI.BBB <> ''    '') ) THEN TG002_OMNI.A+TG002_OMNI.BBB+''001''
				WHEN (TG002.ITEMITEM IS NOT NULL AND (TG002.A+TG002.BBB NOT LIKE ''%[^A-Za-z0-9]%'' AND TG002.A+TG002.BBB <> ''    '' AND ((PROC_1.T0_2A1_REPLACE IS NULL) OR (PROC_1.T0_2A1_REPLACE IS NOT NULL AND TG002.A+TG002.BBB <> ''ISYS'')))) THEN TG002.A+TG002.BBB+''000''
				WHEN (TG002.ITEMITEM IS NOT NULL AND PROC_1.T0_2A1_REPLACE IS NOT NULL AND (PROC_1.T0_2A1_REPLACE NOT LIKE ''%[^A-Za-z0-9]%'' AND PROC_1.T0_2A1_REPLACE NOT LIKE ''    %'')) THEN PROC_1.T0_2A1_REPLACE 
				WHEN (TG002.ITEMITEM IS NULL AND PROC_1.T0_2B1_REPLACE IS NOT NULL AND PROC_1.MOVEMENT=''ACMV'' AND (PROC_1.T0_2B1_REPLACE NOT LIKE ''%[^A-Za-z0-9]%'' AND PROC_1.T0_2B1_REPLACE NOT LIKE ''    %'')) THEN PROC_1.T0_2B1_REPLACE 
				WHEN (TG002.ITEMITEM IS NULL AND PROC_1.T0_2B2_REPLACE IS NOT NULL AND PROC_1.MOVEMENT=''RTRN'' AND (PROC_1.T0_2B2_REPLACE  NOT LIKE ''%[^A-Za-z0-9]%'' AND PROC_1.T0_2B2_REPLACE  NOT LIKE ''    %'')) THEN PROC_1.T0_2B2_REPLACE 
				WHEN (TG002.A+TG002.BBB =''    '' OR  TG002_OMNI_1.A+TG002_OMNI_1.BBB = ''    '' OR TG002_OMNI.A+TG002_OMNI.BBB = ''    '' OR (PROC_1.T0_2A1_REPLACE LIKE ''    %'') OR (PROC_1.T0_2B1_REPLACE LIKE ''    %'') OR (PROC_1.T0_2B2_REPLACE LIKE ''    %'')) THEN ''0000000''
				WHEN (TG002.A+TG002.BBB LIKE ''%[^A-Z0-9]%'' AND PROC_1.T0_4_REPLACE IS NOT NULL) THEN PROC_1.T0_4_REPLACE 
				ELSE ''0000LAS'' END AS VARCHAR) AS T0, 
			PROC_1.SUN_GLCODE ALTREF,
			PROC_1.TAXCODE,
			PROC_1.MOVEMENT,
			PROC_1.OMNI_PRODUCT_CD,
			PROC_1.SL_PREFIX,
			PROC_1.T0_0_REPLACE,
			PROC_1.T0_4_REPLACE, 
			TG002.A+TG002.BBB TG002_ABBB,	
			TG002_OMNI_1.A+TG002_OMNI_1.BBB TG002_OMNI_1_ABBB,
			TG002_OMNI.A+TG002_OMNI.BBB TG002_OMNI_ABBB,
			PROC_1.T0_2A1_REPLACE,
			PROC_1.T0_2B1_REPLACE,
			PROC_1.T0_2B2_REPLACE,
			TG002.ITEMITEM,'
				)
		SET @V_CMD_8 = ('
			CAST(CASE '
				+
				(
				    SELECT 'WHEN (SUBSTRING(PROC_1.SUN_GLCODE,1,4)+TG002.SGLPRD IN ('''+STRING_AGG(ITEMITEM_FLAG,''',''')+'''))' ITEMITEM_FLAG
                    FROM 
                      (
                      	SELECT TRIM(SUBSTRING(ITEMITEM,1,4))+TRIM(SUBSTRING(ITEMITEM,5,3)) ITEMITEM_FLAG
                      	FROM STAG_ID.STAG_LIFEASIA_ITEMPF 
                      	WHERE ITEMTABL = 'TG009' AND VALIDFLAG <> '2'  AND ITEMPFX='IT'
                      	AND SUBSTRING(ITEMITEM,1,4)NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,1,4) <> '' AND SUBSTRING(ITEMITEM,1,4) IS NOT NULL
                      	AND SUBSTRING(ITEMITEM,5,3)NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,5,3) <> '' AND SUBSTRING(ITEMITEM,5,3) IS NOT NULL
                      	GROUP BY TRIM(SUBSTRING(ITEMITEM,1,4))+TRIM(SUBSTRING(ITEMITEM,5,3))
                      ) A
				)
				+'THEN SUBSTRING(PROC_1.SUN_GLCODE,1,4)+TG002.SGLPRD '+
				(
				    SELECT 'WHEN (SUBSTRING(PROC_1.SUN_GLCODE,1,4)+''***'' IN ('''+STRING_AGG(ITEMITEM_FLAG,''',''')+'''))' ITEMITEM_FLAG
                    FROM 
                    (
                    	SELECT TRIM(SUBSTRING(ITEMITEM,1,4))+'***' ITEMITEM_FLAG
                    	FROM STAG_ID.STAG_LIFEASIA_ITEMPF 
                    	WHERE ITEMTABL = 'TG009' AND VALIDFLAG <> '2' AND ITEMPFX='IT'
                    	AND SUBSTRING(ITEMITEM,1,4)NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,1,4) <> '' AND SUBSTRING(ITEMITEM,1,4) IS NOT NULL
                    	AND SUBSTRING(ITEMITEM,5,3)LIKE '%*%' AND SUBSTRING(ITEMITEM,5,3) <> '' AND SUBSTRING(ITEMITEM,5,3) IS NOT NULL
                    	GROUP BY TRIM(SUBSTRING(ITEMITEM,1,4))
                    ) A
				)
				+'THEN (SUBSTRING(PROC_1.SUN_GLCODE,1,4)+''***'') 
				  ELSE NULL END AS VARCHAR) TG009_FLAG,'
				)
		SET @V_CMD_3 = ('
		--T0 RELATED END--
			PROC_1.APRVDATE,
			PROC_1.VOUCHER_NO,
			PROC_1.EFFDATE,
			PROC_1.TRANREF,
			PROC_1.POLICY_NO,
			CASE 
				WHEN (PROC_1.POLICY_FLAG =''P'' AND (PROC_1.POLICY_NO IS NULL OR TRIM(PROC_1.POLICY_NO) = '''') AND COA_INSCOPE.IFRS_SUN_CD IS NULL) THEN ''O''
				WHEN (PROC_1.POLICY_FLAG =''P'' AND PROC_1.PRODUCT IS NULL AND COA_INSCOPE.IFRS_SUN_CD IS NULL) THEN ''O''
				WHEN (PROC_1.POLICY_FLAG =''P'' AND COA_INSCOPE.IFRS_SUN_CD IS NOT NULL) THEN ''P''
				WHEN (PROC_1.POLICY_FLAG =''O'' AND COA_INSCOPE.IFRS_SUN_CD IS NOT NULL) THEN ''O''
				WHEN (PROC_1.POLICY_FLAG =''P'' AND COA_INSCOPE.IFRS_SUN_CD IS NULL) THEN ''P''
				ELSE PROC_1.POLICY_FLAG END POLICY_FLAG,
			PROC_1.PRODUCT,
			PROC_1.RIDER_CODE,
			PROC_1.BENEFIT_CODE,
			SUBSTRING(PROC_1.SUN_GLCODE,1,10) SUN_GLCODE,
			PROC_1.SACSCODE,
			PROC_1.SACSTYP,
			PROC_1.TRANS_CODE,
			PROC_1.TRANS_DATE,
			PROC_1.ORIGCURR,
			PROC_1.ORIG_AMT,
			PROC_1.ACCT_AMT,
			PROC_1.BATCACTYR,
			PROC_1.BATCACTMN BATCACTMN,
			PROC_1.RDOCNUM,
			PROC_1.RLDGACCT,
			PROC_1.TRANNO,
			CAST(''GJ'' AS VARCHAR) GLCODE,
			PROC_1.GLCODE GLCODE_ORI,
			PROC_1.TRANDESC,
			PROC_1.LIFECOVERAGERIDER,
			PROC_1.BILLFREQ,
			PROC_1.CRRCD_DEFAULT,
			PROC_1.PTDATE,
			')
		SET @V_CMD_7 = ('
		--###### COHORT_DT LOGIC
			CASE 
				'+ (
				     SELECT STRING_AGG(CAST(WHEN_CLAUSE AS NVARCHAR(MAX)),' ') WITHIN GROUP (ORDER BY PRIORITY)
					 FROM
				     (
					   SELECT PRIORITY,' WHEN COA_INSCOPE.IDENTIFIER = '+COHORT_IDENTIFIER+ 
					     CASE WHEN (COA <> '' AND COA IS NOT NULL) THEN ' AND SUBSTRING(PROC_1.SUN_GLCODE,1,10) IN '+ COA ELSE '' END +
					     CASE WHEN (SACSTRANS <> '' AND SACSTRANS IS NOT NULL) THEN ' AND PROC_1.SACSCODE+PROC_1.SACSTYP+PROC_1.TRANS_CODE IN '+ SACSTRANS ELSE '' END + 
					     CASE WHEN (SACS <> '' AND SACS IS NOT NULL) THEN ' AND PROC_1.SACSCODE+PROC_1.SACSTYP IN '+ SACS ELSE '' END + 
					     CASE WHEN (TRANS_CODE <> '' AND TRANS_CODE IS NOT NULL) THEN ' AND PROC_1.TRANS_CODE IN '+ TRANS_CODE ELSE '' END +
					     CASE WHEN (OTHERCLAUSE_1 <> '' AND OTHERCLAUSE_1 IS NOT NULL) THEN ' AND '+OTHERTABLE_1+'.'+OTHERCLAUSE_1 ELSE '' END + 
					     CASE WHEN (OTHERCLAUSE_2 <> '' AND OTHERCLAUSE_2 IS NOT NULL) THEN ' AND '+OTHERTABLE_2+'.'+OTHERCLAUSE_2 ELSE '' END + 
					     CASE WHEN (THEN_TABLE = 'MAIN') THEN ' AND PROC_1.'+THEN_RESULT+' IS NOT NULL THEN CAST(PROC_1.'+THEN_RESULT+' AS VARCHAR)'
						      WHEN (THEN_TABLE = '' OR THEN_TABLE IS NULL) THEN ' AND '+THEN_RESULT+' IS NOT NULL THEN CAST('+THEN_RESULT+' AS VARCHAR)'
					          ELSE ' AND '+THEN_TABLE+'.'+THEN_RESULT+' IS NOT NULL THEN CAST('+THEN_TABLE+'.'+THEN_RESULT+' AS VARCHAR)'
					     END AS WHEN_CLAUSE
				       FROM
				         (
						   SELECT PRIORITY, CONDITIONS, ''''+COHORT_IDENTIFIER+'''' COHORT_IDENTIFIER, 
				         	  '('''+STRING_AGG(CASE WHEN (COA <> '' AND COA IS NOT NULL) THEN CAST(COA AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' COA,
				         	  '('''+STRING_AGG(CASE WHEN ((SACSCODE+SACSTYPE) <> '' AND (SACSCODE+SACSTYPE) IS NOT NULL AND TRANS_CODE <> '' AND TRANS_CODE IS NOT NULL) THEN CAST((SACSCODE+SACSTYPE+TRANS_CODE) AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' SACSTRANS,
				         	  '('''+STRING_AGG(CASE WHEN ((SACSCODE+SACSTYPE) <> '' AND (SACSCODE+SACSTYPE) IS NOT NULL AND (TRANS_CODE = '' OR TRANS_CODE IS NULL)) THEN CAST((SACSCODE+SACSTYPE) AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' SACS,
				         	  '('''+STRING_AGG(CASE WHEN (((SACSCODE+SACSTYPE) = '' OR (SACSCODE+SACSTYPE) IS NULL) AND TRANS_CODE <> '' AND TRANS_CODE IS NOT NULL) THEN CAST(TRANS_CODE AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' TRANS_CODE,
				         	  CASE WHEN (OTHERCLAUSE_1 <> '' AND OTHERCLAUSE_1 IS NOT NULL) THEN OTHERCLAUSE_1 ELSE NULL END OTHERCLAUSE_1,
				         	  CASE WHEN OTHERTABLE_1 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_1 <> '' AND OTHERTABLE_1 IS NOT NULL) THEN OTHERTABLE_1 ELSE NULL END OTHERTABLE_1,
				         	  CASE WHEN (OTHERCLAUSE_2 <> '' AND OTHERCLAUSE_2 IS NOT NULL) THEN OTHERCLAUSE_2 ELSE NULL END OTHERCLAUSE_2,
				         	  CASE WHEN OTHERTABLE_2 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_2 <> '' AND OTHERTABLE_2 IS NOT NULL) THEN OTHERTABLE_2 ELSE NULL END OTHERTABLE_2,
				         	  THEN_RESULT,
				         	  THEN_TABLE
				         	FROM
							  (
							    SELECT DISTINCT
								  COHORT_IDENTIFIER, PRIORITY, CONDITIONS, COA, SACSCODE, SACSTYPE, TRANS_CODE, UPPER(OTHERCLAUSE_1) AS OTHERCLAUSE_1, UPPER(OTHERTABLE_1) AS OTHERTABLE_1, UPPER(OTHERCLAUSE_2) AS OTHERCLAUSE_2, UPPER(OTHERTABLE_2) AS OTHERTABLE_2,
								  REPLACE(REPLACE(UPPER(REPLACE(THEN_RESULT,'||','+')),'SUBSTRING(TRANS_DATE','SUBSTRING(CAST(TRANS_DATE AS VARCHAR)'),'SUBSTRING(CRRCD','SUBSTRING(CAST(CRRCD AS VARCHAR)') AS THEN_RESULT,
								  UPPER(THEN_TABLE) AS THEN_TABLE
								FROM STAG_ID.STAG_CONFIG_IFRS17_COHORT_MAPPING_TABLE
							  ) A
				            GROUP BY PRIORITY, CONDITIONS,COHORT_IDENTIFIER, 
				         	  CASE WHEN (OTHERCLAUSE_1 <> '' AND OTHERCLAUSE_1 IS NOT NULL) THEN OTHERCLAUSE_1 ELSE NULL END,
				         	  CASE WHEN OTHERTABLE_1 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_1 <> '' AND OTHERTABLE_1 IS NOT NULL) THEN OTHERTABLE_1 ELSE NULL END,
				         	  CASE WHEN (OTHERCLAUSE_2 <> '' AND OTHERCLAUSE_2 IS NOT NULL) THEN OTHERCLAUSE_2 ELSE NULL END,
				         	  CASE WHEN OTHERTABLE_2 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_2 <> '' AND OTHERTABLE_2 IS NOT NULL) THEN OTHERTABLE_2 ELSE NULL END,
				         	  THEN_RESULT,
				         	  THEN_TABLE
				         ) COHORT_MAPPING
					 ) AA
				   )
		        )
		SET @V_CMD_1 = (' WHEN (PROC_1.POLICY_FLAG =''O'') OR (PROC_1.POLICY_FLAG = ''P'' AND COA_INSCOPE.IFRS_SUN_CD IS NULL) THEN CAST (PROC_1.EFFDATE AS VARCHAR)
				          WHEN (COA_INSCOPE.IDENTIFIER = ''Claim'' AND PROC_1.TRANS_CODE = ''T301'' 
							AND ISDATE(
								CAST(
								CASE WHEN (RIGHT(PROC_1.TRANDESC,8) IS NULL OR RIGHT(PROC_1.TRANDESC,8) = '''') 
									THEN ''-'' ELSE STAG_ID.LPAD(SUBSTRING(RIGHT(PROC_1.TRANDESC,8),1,4),4,''0000'')+''-''+STAG_ID.LPAD(SUBSTRING(RIGHT(PROC_1.TRANDESC,8),5,2),2,''00'')+''-''+STAG_ID.LPAD(SUBSTRING(RIGHT(PROC_1.TRANDESC,8),7,2),2,''00'') END AS VARCHAR)
									) = 1) 
						  THEN RIGHT(PROC_1.TRANDESC,8)
				          --ELSE PROC_1.TRANS_DATE
				          END COHORT,
		')
		SET @V_CMD_4 = ('
		--###### CLAIM NO LOGIC
			CASE
				'+ (
				     SELECT STRING_AGG(CAST(WHEN_CLAUSE AS NVARCHAR(MAX)),' ') WITHIN GROUP (ORDER BY PRIORITY)
					 FROM
				       (
					     SELECT PRIORITY,' WHEN COA_INSCOPE.IDENTIFIER = '+COHORT_IDENTIFIER+ 
					       CASE WHEN (COA <> '' AND COA IS NOT NULL) THEN ' AND SUBSTRING(PROC_1.SUN_GLCODE,1,10) IN '+COA ELSE '' END + 
					       CASE WHEN (SACSTRANS <> '' AND SACSTRANS IS NOT NULL) THEN ' AND PROC_1.SACSCODE+PROC_1.SACSTYP+PROC_1.TRANS_CODE IN '+SACSTRANS ELSE '' END + 
					       CASE WHEN (SACS <> '' AND SACS IS NOT NULL) THEN ' AND PROC_1.SACSCODE+PROC_1.SACSTYP IN '+SACS ELSE '' END + 
					       CASE WHEN (TRANS_CODE <> '' AND TRANS_CODE IS NOT NULL) THEN ' AND PROC_1.TRANS_CODE IN '+TRANS_CODE ELSE '' END + 
					       CASE WHEN (OTHERCLAUSE_1 <> '' AND OTHERCLAUSE_1 IS NOT NULL) THEN ' AND '+OTHERTABLE_1+'.'+OTHERCLAUSE_1 ELSE '' END + 
					       CASE WHEN (OTHERCLAUSE_2 <> '' AND OTHERCLAUSE_2 IS NOT NULL) THEN ' AND '+OTHERTABLE_2+'.'+OTHERCLAUSE_2 ELSE '' END + 
					       CASE WHEN (THEN_TABLE = 'MAIN') THEN ' AND PROC_1.'+THEN_RESULT+' IS NOT NULL THEN CAST(PROC_1.'+THEN_RESULT+' AS VARCHAR)'
					            WHEN (THEN_TABLE = '' OR THEN_TABLE IS NULL) THEN ' AND '+THEN_RESULT+' IS NOT NULL THEN CAST('+THEN_RESULT+' AS VARCHAR)'
					       ELSE ' AND '+THEN_TABLE+'.'+THEN_RESULT+' IS NOT NULL THEN CAST('+THEN_TABLE+'.'+THEN_RESULT+' AS VARCHAR)'
					       END WHEN_CLAUSE
					     FROM
						   (
						     SELECT PRIORITY, CONDITIONS, ''''+COHORT_IDENTIFIER+'''' COHORT_IDENTIFIER, 
							   '('''+STRING_AGG(CASE WHEN (COA <> '' AND COA IS NOT NULL) THEN CAST(COA AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' COA,
					           '('''+STRING_AGG(CASE WHEN ((SACSCODE+SACSTYPE) <> '' AND (SACSCODE+SACSTYPE) IS NOT NULL AND TRANS_CODE <> '' AND TRANS_CODE IS NOT NULL) THEN CAST((SACSCODE+SACSTYPE+TRANS_CODE) AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' SACSTRANS,
					           '('''+STRING_AGG(CASE WHEN ((SACSCODE+SACSTYPE) <> '' AND (SACSCODE+SACSTYPE) IS NOT NULL AND (TRANS_CODE = '' OR TRANS_CODE IS NULL)) THEN CAST((SACSCODE+SACSTYPE) AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' SACS,
					           '('''+STRING_AGG(CASE WHEN (((SACSCODE+SACSTYPE) = '' OR (SACSCODE+SACSTYPE) IS NULL) AND TRANS_CODE <> '' AND TRANS_CODE IS NOT NULL) THEN CAST(TRANS_CODE AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' TRANS_CODE,
					           CASE WHEN (OTHERCLAUSE_1 <> '' AND OTHERCLAUSE_1 IS NOT NULL) THEN OTHERCLAUSE_1 ELSE NULL END OTHERCLAUSE_1,
					           CASE WHEN OTHERTABLE_1 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_1 <> '' AND OTHERTABLE_1 IS NOT NULL) THEN OTHERTABLE_1 ELSE NULL END OTHERTABLE_1,
					           CASE WHEN (OTHERCLAUSE_2 <> '' AND OTHERCLAUSE_2 IS NOT NULL) THEN OTHERCLAUSE_2 ELSE NULL END OTHERCLAUSE_2,
					           CASE WHEN OTHERTABLE_2 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_2 <> '' AND OTHERTABLE_2 IS NOT NULL) THEN OTHERTABLE_2 ELSE NULL END OTHERTABLE_2,
					           'CLAIM_NO' AS THEN_RESULT,
					           THEN_TABLE
					         FROM
							   (
							     SELECT DISTINCT COHORT_IDENTIFIER, PRIORITY, CONDITIONS, COA, SACSCODE, SACSTYPE, TRANS_CODE, UPPER(OTHERCLAUSE_1) AS OTHERCLAUSE_1, UPPER(OTHERTABLE_1) AS OTHERTABLE_1, UPPER(OTHERCLAUSE_2) AS OTHERCLAUSE_2, UPPER(OTHERTABLE_2) AS OTHERTABLE_2,
								   UPPER(REPLACE(THEN_RESULT,'||','+')) AS THEN_RESULT,
								   UPPER(THEN_TABLE) AS THEN_TABLE
								 FROM STAG_ID.STAG_CONFIG_IFRS17_COHORT_MAPPING_TABLE
					             WHERE COHORT_IDENTIFIER = 'Claim' AND (UPPER(THEN_TABLE) IS NOT NULL AND UPPER(THEN_TABLE) <>'MAIN' 
					             /*--MISSING COHORT
					             AND UPPER(THEN_TABLE) NOT LIKE 'ZRVHPF%'*/) -- ADDED FOR CLAIM NO
					           ) A 
				             GROUP BY PRIORITY, CONDITIONS,COHORT_IDENTIFIER, 
					           CASE WHEN (OTHERCLAUSE_1 <> '' AND OTHERCLAUSE_1 IS NOT NULL) THEN OTHERCLAUSE_1 ELSE NULL END,
					           CASE WHEN OTHERTABLE_1 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_1 <> '' AND OTHERTABLE_1 IS NOT NULL) THEN OTHERTABLE_1 ELSE NULL END,
					           CASE WHEN (OTHERCLAUSE_2 <> '' AND OTHERCLAUSE_2 IS NOT NULL) THEN OTHERCLAUSE_2 ELSE NULL END,
					           CASE WHEN OTHERTABLE_2 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_2 <> '' AND OTHERTABLE_2 IS NOT NULL) THEN OTHERTABLE_2 ELSE NULL END,
					           THEN_RESULT,
					           THEN_TABLE
					       ) COHORT_MAPPING
					   ) AA
				   )
				 + '  WHEN (COA_INSCOPE.IDENTIFIER = ''Claim'' AND PROC_1.TRANS_CODE = ''T301'' AND LEN(PROC_1.TRANDESC) = 26) THEN SUBSTRING(PROC_1.TRANDESC,1,18)
					  WHEN (COA_INSCOPE.IDENTIFIER = ''Claim'' AND PROC_1.TRANS_CODE = ''T301'' AND LEN(PROC_1.TRANDESC) = 30) THEN SUBSTRING(PROC_1.TRANDESC,1,22)
					  --WHEN COA_INSCOPE.IDENTIFIER = ''Claim''
					  --THEN CONCAT(PROC_1.POLICY_NO,PROC_1.LIFECOVERAGERIDER,''CLAIM'')
					  END CLAIM_NO,
					  PROC_1.PAIRING_ACCOUNT,
					  PROC_1.T7,
					  PROC_1.SY_FLG,'
		               )
		SET @V_CMD_5 = ('
					--Renewal Suspense Enhc 15-04-21
					CHDRPF.STATCODE, 
					CHDRPF.PSTATCODE,
					PTRNPF.BATCTRCDE AS ORI_TRCDE,
					--Renewal Suspense Enhc
					PROC_1.RRN,
					--ADD PTDATE DIFFERENCE (for loyalty bonus/ extra allocation)	
					ISNULL(DATEDIFF(MONTH,CONVERT(DATE,CAST(HPADPF.HOISSDTE AS VARCHAR),112),CONVERT(DATE,CONVERT(CHAR(10),'+@PRD_ID+'),112)),0) PTDATE_DIFF,
					CASE WHEN TRANS_CODE IN (''T204'',''T600'') AND TRANS_DATE_ORI <= HPADPF.HISSDTE THEN ''PS'' ELSE ''NON-PS'' END PROPOSAL_FLG
		FROM '+@TABLE_IN_2+' PROC_1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ICG_STORE ICG_STORE ON ICG_STORE.POLICY_NUMBER = PROC_1.POLICY_NO AND PROC_1.EFFDATE>=ICG_STORE.CB_START_DATE AND PROC_1.EFFDATE <= ICG_STORE.CB_END_DATE
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_CB_MAPPING CB_MAPPING ON PROC_1.PRODUCT_CD = CB_MAPPING.PRODUCT_CD and CB_MAPPING.SYSTEM = ''Life Asia''
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_CLMHPF CLMHPF ON CLMHPF.CHDRNUM = PROC_1.POLICY_NO AND SUBSTRING(PROC_1.LIFECOVERAGERIDER,1,2) = CLMHPF.LIFE -- AND CLMHPF.EFFDATE = PROC_1.EFFDATE
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF REGPPF ON REGPPF.CHDRNUM = PROC_1.POLICY_NO 
			AND REGPPF.LIFE+REGPPF.COVERAGE+REGPPF.RIDER = SUBSTRING(PROC_1.TRANDESC,9,6) AND SUBSTRING(PROC_1.TRANDESC,15,4) = REGPPF.RGPYNUM
		--NEW
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF REGPPF2 ON REGPPF2.CHDRNUM = PROC_1.POLICY_NO 
			AND REGPPF2.LIFE+REGPPF2.COVERAGE+REGPPF2.RIDER = SUBSTRING(PROC_1.TRANREF,9,6) AND SUBSTRING(PROC_1.TRANREF,15,4) = REGPPF2.RGPYNUM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_ZCLP REGPPF_ZCLP ON REGPPF_ZCLP.CHDRNUM = PROC_1.POLICY_NO 
			AND REGPPF_ZCLP.LIFE+REGPPF_ZCLP.COVERAGE+REGPPF_ZCLP.RIDER = SUBSTRING(PROC_1.TRANREF,9,6) AND SUBSTRING(PROC_1.TRANREF,15,4) = REGPPF_ZCLP.RGPYNUM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_RGPYNUM REGPPF_RGPYNUM ON REGPPF_RGPYNUM.CHDRNUM = PROC_1.POLICY_NO AND REGPPF_RGPYNUM.RGPYNUM = RIGHT(PROC_1.TRANREF,4)
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO REGPPF_TRANNO2 ON REGPPF_TRANNO2.CHDRNUM = PROC_1.POLICY_NO AND REGPPF_TRANNO2.TRANNO = PROC_1.TRANNO AND SUBSTRING(PROC_1.RLDGACCT,9,6) = REGPPF_TRANNO2.LIFECOVERAGERIDER
		--
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO REGPPF_TRANNO ON REGPPF_TRANNO.CHDRNUM = PROC_1.POLICY_NO AND REGPPF_TRANNO.TRANNO = PROC_1.TRANNO AND PROC_1.LIFECOVERAGERIDER = REGPPF_TRANNO.LIFECOVERAGERIDER
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO_DEFAULT REGPPF_TRANNO_DEFAULT ON REGPPF_TRANNO_DEFAULT.CHDRNUM = PROC_1.POLICY_NO AND REGPPF_TRANNO_DEFAULT.TRANNO = PROC_1.TRANNO
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_WP REGPPF_WP ON REGPPF_WP.CHDRNUM = PROC_1.POLICY_NO
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_C4 REGPPF_C4 ON REGPPF_C4.CHDRNUM = PROC_1.POLICY_NO
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF REGPPF3 ON REGPPF3.CHDRNUM = PROC_1.POLICY_NO AND CAST(REGPPF3.RGPYNUM AS INT) = PROC_1.RGPYNUM
	')
	SET @V_CMD_6 = ('
		LEFT JOIN COA_INSCOPE COA_INSCOPE ON COA_INSCOPE.IFRS_SUN_CD = SUBSTRING(SUN_GLCODE,1,10)
		LEFT JOIN PARAM_NONRELATED NONRELATED ON PROC_1.SACSCODE = NONRELATED.SASCODE AND PROC_1.SACSTYP = NONRELATED.SASTYPE AND PROC_1.TRANS_CODE = NONRELATED.TCODE
		LEFT JOIN TG002 AS TG002 ON PROC_1.ITEMITEM_FLAG = TG002.ITEMITEM AND TG002.RN = 1
		LEFT JOIN TG002 AS TG002_OMNI ON PROC_1.OMNI_PRODUCT_CD+''****'' = TG002_OMNI.ITEMITEM AND TG002_OMNI.RN = 1
		LEFT JOIN TG002 AS TG002_OMNI_1 ON PROC_1.OMNI_PRODUCT_CD+PROC_1.TRANS_CODE = TG002_OMNI_1.ITEMITEM AND TG002_OMNI_1.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_CHDRPF AS CHDRPF ON CHDRPF.CHDRNUM = PROC_1.POLICY_NO
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_PTRNPF PTRNPF ON PTRNPF.TRANNO = PROC_1.TRANNO AND PTRNPF.CHDRNUM = PROC_1.POLICY_NO
		LEFT JOIN STAG_ID.STAG_LIFEASIA_HPADPF AS HPADPF ON HPADPF.CHDRNUM = PROC_1.POLICY_NO AND HPADPF.HOISSDTE <> 99999999
		--MISSING COHORT
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF ZRVHPF
		    ON PROC_1.RDOCNUM = ZRVHPF.CHDRNUM AND PROC_1.TRANNO = ZRVHPF.TRANNO 
			AND ISNULL(NULLIF(TRIM(PROC_1.RDOCCOY),''''),PROC_1.BATCCOY) = ZRVHPF.CHDRCOY 
			AND PROC_1.LIFECOVERAGERIDER = ZRVHPF.LIFECOVERAGERIDER
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_OTHER ZRVHPF_OTHER
		    ON PROC_1.RDOCNUM = ZRVHPF_OTHER.CHDRNUM AND PROC_1.TRANNO = ZRVHPF_OTHER.TRANNO 
			AND ISNULL(NULLIF(TRIM(PROC_1.RDOCCOY),''''),PROC_1.BATCCOY) = ZRVHPF_OTHER.CHDRCOY
			AND PROC_1.LIFECOVERAGERIDER = ZRVHPF_OTHER.LIFECOVERAGERIDER
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_T301 ZRVHPF_T301
		    ON PROC_1.RDOCNUM = ZRVHPF_T301.CHDRNUM AND SUBSTRING(PROC_1.TRANDESC,15,4) = ZRVHPF_T301.RGPYNUM 
			AND ISNULL(NULLIF(TRIM(PROC_1.RDOCCOY),''''),PROC_1.BATCCOY) = ZRVHPF_T301.CHDRCOY
			AND PROC_1.LIFECOVERAGERIDER = ZRVHPF_T301.LIFECOVERAGERIDER
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_CLMH ZRVHPF_CLMH ON PROC_1.RDOCNUM = ZRVHPF_CLMH.CHDRNUM AND PROC_1.TRANNO = ZRVHPF_CLMH.TRANNO
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_REGP AS ZRVHPF_REGP
		    ON ZRVHPF_REGP.CHDRNUM = PROC_1.POLICY_NO 
			AND ZRVHPF_REGP.LIFECOVERAGERIDER = SUBSTRING(PROC_1.TRANDESC,9,6) 
			AND SUBSTRING(PROC_1.TRANDESC,15,4) = ZRVHPF_REGP.RGPYNUM	
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ZALTPF ZALTPF
		    ON ZALTPF.CHDRNUM = PROC_1.POLICY_NO
			AND SUBSTRING(PROC_1.TRANDESC,15,8) = ZALTPF.ZALTNUM
		;'
	)
	PRINT @V_CMD
	PRINT @V_CMD_2;
	PRINT @V_CMD_8;
	PRINT @V_CMD_3;
	PRINT @V_CMD_7;
	PRINT @V_CMD_1;
	PRINT @V_CMD_4;
	PRINT @V_CMD_5;
	PRINT @V_CMD_6;
	EXEC (@V_CMD+@V_CMD_2+@V_CMD_8+@V_CMD_3+@V_CMD_7+@V_CMD_1+@V_CMD_4+@V_CMD_5+@V_CMD_6);

	SET @V_CMD =
	('
	CREATE TABLE '+@TABLE_OUT+' WITH ( DISTRIBUTION = HASH(POLICY_NO)) AS
	SELECT T0,ALTREF,TAXCODE,MOVEMENT,OMNI_PRODUCT_CD,SL_PREFIX,T0_0_REPLACE,T0_4_REPLACE,TG002_ABBB,TG002_OMNI_1_ABBB,TG002_OMNI_ABBB,T0_2A1_REPLACE,T0_2B1_REPLACE,T0_2B2_REPLACE,ITEMITEM,TG009_FLAG,CAST(STAG_ID.LPAD(ROW_NUMBER()OVER(ORDER BY (SELECT NULL)),12,''0'') AS VARCHAR) ROWID, APRVDATE,VOUCHER_NO,EFFDATE,TRANREF,POLICY_NO,POLICY_FLAG,PRODUCT,RIDER_CODE,BENEFIT_CODE,SUN_GLCODE,SACSCODE,SACSTYP,TRANS_CODE,TRANS_DATE,ORIGCURR,ORIG_AMT,ACCT_AMT,BATCACTYR,BATCACTMN,RDOCNUM,RLDGACCT,TRANNO,GLCODE,GLCODE_ORI,TRANDESC,LIFECOVERAGERIDER,BILLFREQ,CRRCD_DEFAULT,PTDATE,COHORT,CLAIM_NO,PAIRING_ACCOUNT,T7,SY_FLG,STATCODE,PSTATCODE,ORI_TRCDE,RRN,PTDATE_DIFF,PROPOSAL_FLG
	FROM '+@TABLE_OUT_PREV+';
	')
	EXEC(@V_CMD);

	
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into ', @TABLE_OUT,' on										: ', @V_START)
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT

	--------------------------
	-- Error Log STEP 4 START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Creating DATA11 TABARU (T0 Tabaru Syariah split) '+ @V_FUNCTION_NAME + ' - STEP 5 at ' + convert(varchar(20),current_timestamp) + ' with Error Message STEP 4 (ifany): ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 4 END
	--------------------------
	
	
	------------------------------------------------------------
	-- SUB-STEP 4.1 - Tabaru Split - START
	------------------------------------------------------------

	EXEC('	IF OBJECT_ID(''STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TG009'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TG009;
			CREATE TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TG009 WITH ( CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH(ITEMITEM) ) AS
			SELECT ITEMTABL, ITEMITEM, SUBSTRING(GENAREA,1,10) ''HEADERALTREF'',
				SUBSTRING(GENAREA,11,5) ''SINGLEP1'', SUBSTRING(GENAREA,16,5) ''SINGLEP2'',
				SUBSTRING(GENAREA,36,5) ''REGULERP1'', SUBSTRING(GENAREA,41,5) ''REGULERP2'',
				SUBSTRING(GENAREA,171,5) ''REGULERT71'',
				SUBSTRING(GENAREA,196,5) ''SINGLET71''
			FROM
			  ( SELECT ROW_NUMBER() OVER (PARTITION BY ITEMITEM ORDER BY ITEMCOY) ROWNUM, ITEMTABL, ITEMITEM, GENAREA
				FROM [STAG_ID].[STAG_LIFEASIA_ITEMPF]
				WHERE ITEMTABL = ''TG009'' AND VALIDFLAG = ''1''
			  ) S
			WHERE ROWNUM = 1
		');

	EXEC('	IF OBJECT_ID(''STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TG002'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TG002;
			CREATE TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TG002 WITH ( CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH(ITEMITEM) ) AS
			SELECT ITEMTABL, ITEMITEM, SUBSTRING(GENAREA,64,7) ''CD02''
			FROM
			  (
				SELECT ROW_NUMBER() OVER (PARTITION BY ITEMITEM ORDER BY ITEMCOY) ROWNUM, ITEMTABL, ITEMITEM, GENAREA
				FROM [STAG_ID].[STAG_LIFEASIA_ITEMPF]
				WHERE ITEMTABL = ''TG002''
			  ) A
			WHERE ROWNUM = 1			
		');

	EXEC('	IF OBJECT_ID(''STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TG008'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TG008;
			CREATE TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TG008 WITH ( CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH(DESCITEM) ) AS
			SELECT DESCITEM, LONGDESC FROM [STAG_ID].[STAG_LIFEASIA_DESCPF] WHERE DESCTABL = ''TG008''
		');

	EXEC('	IF OBJECT_ID(''STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TABARUSPLIT'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TABARUSPLIT;
			CREATE TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TABARUSPLIT WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			SELECT D.LONGDESC, C.SINGLEP1, C.SINGLEP2, C.REGULERP1, C.REGULERP2, C.REGULERT71, C.SINGLET71, B.CD02, 
				CASE WHEN UPPER(D.LONGDESC) = ''REGULAR'' THEN CASE WHEN UPPER(C.REGULERT71) = ''PSY'' THEN C.REGULERP1/10000.0 * A.ORIG_AMT ELSE REGULERP2/10000.0 * A.ORIG_AMT END
					 ELSE CASE WHEN UPPER(C.SINGLET71) = ''PSY'' THEN C.SINGLEP1/10000.0 * A.ORIG_AMT ELSE SINGLEP2/10000.0 * A.ORIG_AMT END
				END AS ORIG_AMT_SPLIT,
				CASE WHEN UPPER(D.LONGDESC) = ''REGULAR'' THEN CASE WHEN UPPER(C.REGULERT71) = ''PSY'' THEN C.REGULERP1/10000.0 * A.ACCT_AMT ELSE REGULERP2/10000.0 * A.ACCT_AMT END
					 ELSE CASE WHEN UPPER(C.SINGLET71) = ''PSY'' THEN C.SINGLEP1/10000.0 * A.ACCT_AMT ELSE SINGLEP2/10000.0 * A.ACCT_AMT END
				END AS ACCT_AMT_SPLIT,
				A.* 
			FROM (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 WHERE T0 IN (''ISYS000'',''ITYT000'')) A
			LEFT JOIN STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TG002 B ON CONCAT(A.RIDER_CODE,RIGHT(A.ITEMITEM,4))=B.ITEMITEM
			JOIN STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TG009 C ON SUBSTRING(A.ALTREF,1,4)+B.CD02 = C.ITEMITEM AND LEFT(A.ALTREF,10)=C.HEADERALTREF
			JOIN STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TG008 D ON B.CD02 = D.DESCITEM 
		');

	EXEC('	IF OBJECT_ID(''STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_PSY'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_PSY;
			CREATE TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_PSY WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			SELECT
				ROUND(ORIG_AMT_SPLIT,2) ORIG_AMT_S,
				ROUND(ACCT_AMT_SPLIT,2) ACCT_AMT_S,
				''ISYS000'' NEW_T0,
				''PSY'' NEW_T7,
				*
			FROM STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TABARUSPLIT
			WHERE (UPPER(LONGDESC)=''REGULAR'' AND REGULERT71=''PSY'') OR (UPPER(LONGDESC)<>''REGULAR'' AND SINGLET71=''PSY'')
		');

	EXEC('	IF OBJECT_ID(''STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TBR'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TBR;
			CREATE TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TBR WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			SELECT 
				ROUND(ORIG_AMT_SPLIT,2) ORIG_AMT_S,
				ROUND(ACCT_AMT_SPLIT,2) ACCT_AMT_S,
				''ITYT000'' NEW_T0,
				''TBR'' NEW_T7,
				*
			FROM STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TABARUSPLIT
			WHERE (UPPER(LONGDESC)=''REGULAR'' AND REGULERT71<>''PSY'') OR (UPPER(LONGDESC)<>''REGULAR'' AND SINGLET71<>''PSY'')
		');

	EXEC('	IF OBJECT_ID(''STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_PSY_FIN'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_PSY_FIN;
			SELECT
				ROUND(ORIG_AMT-ORIG_AMT_S,2) ORIG_AMT_S, ROUND(ACCT_AMT-ACCT_AMT_S,2) ACCT_AMT_S, ''ITYT000'' NEW_T0, ''TBR'' NEW_T7, LONGDESC, SINGLEP1, SINGLEP2, REGULERP1, REGULERP2, REGULERT71, SINGLET71, CD02, ORIG_AMT_SPLIT, ACCT_AMT_SPLIT, 
				T0, ALTREF, TAXCODE, MOVEMENT, OMNI_PRODUCT_CD, SL_PREFIX, T0_0_REPLACE, T0_4_REPLACE, TG002_ABBB,	 TG002_OMNI_1_ABBB, TG002_OMNI_ABBB, T0_2A1_REPLACE, T0_2B1_REPLACE, T0_2B2_REPLACE, ITEMITEM, TG009_FLAG, ROWID, 
				APRVDATE, VOUCHER_NO, EFFDATE, TRANREF, POLICY_NO, POLICY_FLAG, PRODUCT, RIDER_CODE, BENEFIT_CODE, SUN_GLCODE, SACSCODE, SACSTYP, TRANS_CODE, TRANS_DATE, ORIGCURR, ORIG_AMT, ACCT_AMT, BATCACTYR, BATCACTMN, RDOCNUM, 
				RLDGACCT, TRANNO, GLCODE, GLCODE_ORI, TRANDESC, LIFECOVERAGERIDER, BILLFREQ, CRRCD_DEFAULT, PTDATE, COHORT, CLAIM_NO, PAIRING_ACCOUNT, T7, SY_FLG, STATCODE, PSTATCODE, ORI_TRCDE, RRN, PTDATE_DIFF, PROPOSAL_FLG
			INTO STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_PSY_FIN
			FROM STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_PSY
			UNION ALL
			SELECT * FROM STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_PSY 
		');

	EXEC('	IF OBJECT_ID(''STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TBR_FIN'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TBR_FIN;
			SELECT
				ROUND(ORIG_AMT-ORIG_AMT_S,2) ORIG_AMT_S, ROUND(ACCT_AMT-ACCT_AMT_S,2) ACCT_AMT_S, ''ISYS000'' NEW_T0, ''PSY'' NEW_T7, LONGDESC, SINGLEP1, SINGLEP2, REGULERP1, REGULERP2, REGULERT71, SINGLET71, CD02, ORIG_AMT_SPLIT, ACCT_AMT_SPLIT, 
				T0, ALTREF, TAXCODE, MOVEMENT, OMNI_PRODUCT_CD, SL_PREFIX, T0_0_REPLACE, T0_4_REPLACE, TG002_ABBB,	 TG002_OMNI_1_ABBB, TG002_OMNI_ABBB, T0_2A1_REPLACE, T0_2B1_REPLACE, T0_2B2_REPLACE, ITEMITEM, TG009_FLAG, ROWID, 
				APRVDATE, VOUCHER_NO, EFFDATE, TRANREF, POLICY_NO, POLICY_FLAG, PRODUCT, RIDER_CODE, BENEFIT_CODE, SUN_GLCODE, SACSCODE, SACSTYP, TRANS_CODE, TRANS_DATE, ORIGCURR, ORIG_AMT, ACCT_AMT, BATCACTYR, BATCACTMN, RDOCNUM, 
				RLDGACCT, TRANNO, GLCODE, GLCODE_ORI, TRANDESC, LIFECOVERAGERIDER, BILLFREQ, CRRCD_DEFAULT, PTDATE, COHORT, CLAIM_NO, PAIRING_ACCOUNT, T7, SY_FLG, STATCODE, PSTATCODE, ORI_TRCDE, RRN, PTDATE_DIFF, PROPOSAL_FLG
			INTO STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TBR_FIN
			FROM STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TBR
			UNION ALL
			SELECT * FROM STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TBR
		');

	EXEC('	IF OBJECT_ID(''STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_UNIONTBRPSY'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_UNIONTBRPSY;
			CREATE TABLE STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_UNIONTBRPSY WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			SELECT 
				A.NEW_T0 T0,
				A.ALTREF,
				A.TAXCODE,
				A.MOVEMENT,
				A.OMNI_PRODUCT_CD,
				A.SL_PREFIX,
				A.T0_0_REPLACE,
				A.T0_4_REPLACE, 
				A.TG002_ABBB,	
				A.TG002_OMNI_1_ABBB,
				A.TG002_OMNI_ABBB,
				A.T0_2A1_REPLACE,
				A.T0_2B1_REPLACE,
				A.T0_2B2_REPLACE,
				A.ITEMITEM,
				A.TG009_FLAG,
				A.ROWID,
				A.APRVDATE,
				A.VOUCHER_NO,
				A.EFFDATE,
				A.TRANREF,
				A.POLICY_NO,
				A.POLICY_FLAG,
				A.PRODUCT,
				A.RIDER_CODE,
				A.BENEFIT_CODE,
				A.SUN_GLCODE,
				A.SACSCODE,
				A.SACSTYP,
				A.TRANS_CODE,
				A.TRANS_DATE,
				A.ORIGCURR,
				A.ORIG_AMT_S ORIG_AMT,
				A.ACCT_AMT_S ACCT_AMT,
				A.BATCACTYR,
				A.BATCACTMN,
				A.RDOCNUM,
				A.RLDGACCT,
				A.TRANNO,
				A.GLCODE,
				A.GLCODE_ORI,
				A.TRANDESC,
				A.LIFECOVERAGERIDER,
				A.COHORT,
				A.CLAIM_NO,
				A.BILLFREQ,
				A.CRRCD_DEFAULT,
				A.PTDATE,
				A.PAIRING_ACCOUNT,
				A.NEW_T7 T7,
				A.SY_FLG,
				A.STATCODE, 
				A.PSTATCODE, 
				A.ORI_TRCDE, 
				A.RRN, 
				A.PTDATE_DIFF,
				''1'' ROWTABARUID,
				A.PROPOSAL_FLG
			FROM STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_PSY_FIN A
			
			UNION ALL
			
			SELECT 
				A.NEW_T0 T0,
				A.ALTREF,
				A.TAXCODE,
				A.MOVEMENT,
				A.OMNI_PRODUCT_CD,
				A.SL_PREFIX,
				A.T0_0_REPLACE,
				A.T0_4_REPLACE, 
				A.TG002_ABBB,	
				A.TG002_OMNI_1_ABBB,
				A.TG002_OMNI_ABBB,
				A.T0_2A1_REPLACE,
				A.T0_2B1_REPLACE,
				A.T0_2B2_REPLACE,
				A.ITEMITEM,
				A.TG009_FLAG,
				A.ROWID,
				A.APRVDATE,
				A.VOUCHER_NO,
				A.EFFDATE,
				A.TRANREF,
				A.POLICY_NO,
				A.POLICY_FLAG,
				A.PRODUCT,
				A.RIDER_CODE,
				A.BENEFIT_CODE,
				A.SUN_GLCODE,
				A.SACSCODE,
				A.SACSTYP,
				A.TRANS_CODE,
				A.TRANS_DATE,
				A.ORIGCURR,
				A.ORIG_AMT_S ORIG_AMT,
				A.ACCT_AMT_S ACCT_AMT,
				A.BATCACTYR,
				A.BATCACTMN,
				A.RDOCNUM,
				A.RLDGACCT,
				A.TRANNO,
				A.GLCODE,
				A.GLCODE_ORI,
				A.TRANDESC,
				A.LIFECOVERAGERIDER,
				A.COHORT,
				A.CLAIM_NO,
				A.BILLFREQ,
				A.CRRCD_DEFAULT,
				A.PTDATE,
				A.PAIRING_ACCOUNT,
				A.NEW_T7 T7,
				A.SY_FLG,
				A.STATCODE, 
				A.PSTATCODE, 
				A.ORI_TRCDE, 
				A.RRN, 
				A.PTDATE_DIFF,
				''2'' ROWTABARUID,
				A.PROPOSAL_FLG
			FROM STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TBR_FIN A
		');
	
	EXEC('IF OBJECT_ID(''tempdb.dbo.#SPLITDIFF_'+@BATCH_NUMBER+''', ''U'') IS NOT NULL DROP TABLE #SPLITDIFF_'+@BATCH_NUMBER+'');
	EXEC('SELECT *, ORIG_AMT_SPLIT-ORIG_AMT_ORI SPLIT_ORIG_DIFF, ACCT_AMT_SPLIT-ACCT_AMT_ORI SPLIT_ACCT_DIFF 
		  INTO #SPLITDIFF_'+@BATCH_NUMBER+'
	      FROM (SELECT RRN RRN_SPLIT, SUM(ORIG_AMT) ORIG_AMT_SPLIT, SUM(ACCT_AMT) ACCT_AMT_SPLIT FROM STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_UNIONTBRPSY GROUP BY RRN) A
	      JOIN (SELECT RRN RRN_ORI, SUM(ORIG_AMT) ORIG_AMT_ORI, SUM(ACCT_AMT) ACCT_AMT_ORI FROM STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_TABARUSPLIT GROUP BY RRN) B
	      ON A.RRN_SPLIT=B.RRN_ORI
	');

	EXEC('IF OBJECT_ID(''FOND_ID.FOND_LIFEASIA_ETL4_TEMP_DATA11_TABARU_BATCH'+@BATCH_NUMBER+''',''U'') IS NOT NULL DROP TABLE FOND_ID.FOND_LIFEASIA_ETL4_TEMP_DATA11_TABARU_BATCH'+@BATCH_NUMBER+'');
	SET @V_CMD = N'
	CREATE TABLE FOND_ID.FOND_LIFEASIA_ETL4_TEMP_DATA11_TABARU_BATCH'+@BATCH_NUMBER+' WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
	SELECT 
		B.T0,
		B.ALTREF,
		B.TAXCODE,
		B.MOVEMENT,
		B.OMNI_PRODUCT_CD,
		B.SL_PREFIX,
		B.T0_0_REPLACE,
		B.T0_4_REPLACE, 
		B.TG002_ABBB,	
		B.TG002_OMNI_1_ABBB,
		B.TG002_OMNI_ABBB,
		B.T0_2A1_REPLACE,
		B.T0_2B1_REPLACE,
		B.T0_2B2_REPLACE,
		B.ITEMITEM,
		B.TG009_FLAG,
		CAST(B.ROWID AS VARCHAR(1000)) AS ROWID,
		B.APRVDATE,
		B.VOUCHER_NO,
		B.EFFDATE,
		B.TRANREF,
		B.POLICY_NO,
		B.POLICY_FLAG,
		B.PRODUCT,
		B.RIDER_CODE,
		B.BENEFIT_CODE,
		B.SUN_GLCODE,
		B.SACSCODE,
		B.SACSTYP,
		B.TRANS_CODE,
		B.TRANS_DATE,
		B.ORIGCURR,
		B.ORIG_AMT-ISNULL(A.SPLIT_ORIG_DIFF,0) ORIG_AMT,
		B.ACCT_AMT-ISNULL(A.SPLIT_ACCT_DIFF,0) ACCT_AMT,
		B.BATCACTYR,
		B.BATCACTMN,
		B.RDOCNUM,
		B.RLDGACCT,
		B.TRANNO,
		B.GLCODE,
		B.GLCODE_ORI,
		B.TRANDESC,
		B.LIFECOVERAGERIDER,
		B.BILLFREQ,
		B.CRRCD_DEFAULT,
		B.PTDATE,
		B.COHORT,
		B.CLAIM_NO,
		B.PAIRING_ACCOUNT,
		B.T7,
		B.SY_FLG,
		B.STATCODE, 
		B.PSTATCODE,
		B.ORI_TRCDE,
		RRN,
		B.PTDATE_DIFF,
		B.PROPOSAL_FLG
		FROM #SPLITDIFF_'+@BATCH_NUMBER+' A
		RIGHT JOIN (SELECT * FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY RRN ORDER BY T7) RNK FROM STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_UNIONTBRPSY) B WHERE RNK=1) B
		ON A.RRN_SPLIT=B.RRN
	
	UNION ALL
	
	SELECT 
		B.T0,
		B.ALTREF,
		B.TAXCODE,
		B.MOVEMENT,
		B.OMNI_PRODUCT_CD,
		B.SL_PREFIX,
		B.T0_0_REPLACE,
		B.T0_4_REPLACE, 
		B.TG002_ABBB,	
		B.TG002_OMNI_1_ABBB,
		B.TG002_OMNI_ABBB,
		B.T0_2A1_REPLACE,
		B.T0_2B1_REPLACE,
		B.T0_2B2_REPLACE,
		B.ITEMITEM,
		B.TG009_FLAG,
		CAST(B.ROWID AS VARCHAR(1000)) AS ROWID,
		B.APRVDATE,
		B.VOUCHER_NO,
		B.EFFDATE,
		B.TRANREF,
		B.POLICY_NO,
		B.POLICY_FLAG,
		B.PRODUCT,
		B.RIDER_CODE,
		B.BENEFIT_CODE,
		B.SUN_GLCODE,
		B.SACSCODE,
		B.SACSTYP,
		B.TRANS_CODE,
		B.TRANS_DATE,
		B.ORIGCURR,
		B.ORIG_AMT,
		B.ACCT_AMT,
		B.BATCACTYR,
		B.BATCACTMN,
		B.RDOCNUM,
		B.RLDGACCT,
		B.TRANNO,
		B.GLCODE,
		B.GLCODE_ORI,
		B.TRANDESC,
		B.LIFECOVERAGERIDER,
		B.BILLFREQ,
		B.CRRCD_DEFAULT,
		B.PTDATE,
		B.COHORT,
		B.CLAIM_NO,
		B.PAIRING_ACCOUNT,
		B.T7,
		B.SY_FLG,
		B.STATCODE, 
		B.PSTATCODE,
		B.ORI_TRCDE,
		RRN,
		B.PTDATE_DIFF,
		B.PROPOSAL_FLG
		FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY RRN ORDER BY T7) RNK FROM STAG_ID.TMP_TBR_'+@BATCH_NUMBER+'_UNIONTBRPSY) B
		WHERE B.RNK <> 1
	';
	PRINT @V_CMD;
	EXEC (@V_CMD);
	

		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into FOND_ID.FOND_LIFEASIA_ETL4_TEMP_DATA11_TABARU_BATCH'+@BATCH_NUMBER+' on		: ', @V_START)
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT
		
	------------------------------------------------------------
	-- SUB-STEP 4.1 - Tabaru Split - END
	------------------------------------------------------------
	
	--------------------------
	-- Error Log STEP 4.1 START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Creating VALID TABLE '+ @V_FUNCTION_NAME + ' - STEP 5 at ' + convert(varchar(20),current_timestamp) + ' with Error Message Tabaru (ifany): ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 4.1 END
	--------------------------
	
	------------------------------------------------------------
	-- SUB-STEP 4.2 - 5% Validation For Extra Allocation - START
	------------------------------------------------------------
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ALLOCATION_NORMAL'',''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ALLOCATION_NORMAL');
	EXEC('
	CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ALLOCATION_NORMAL WITH ( DISTRIBUTION = HASH(POLICY_NO), HEAP ) AS
	SELECT 
		POLICY_NO,
		PRODUCT,
		SUM(ORIG_AMT) ORIG_AMT,
		ORI_TRCDE,
		SACSCODE,
		SACSTYP,
		SUBSTRING(SUN_GLCODE,1,10) AS SUN_CD,
		TRANREF
	FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11
	WHERE ORI_TRCDE IN (''B522'') AND SUBSTRING(SUN_GLCODE,1,10)=''4170100000''
	AND PRODUCT=''U2V'' AND SACSCODE+SACSTYP=''LEIN'' AND TRIM(GLCODE_ORI) LIKE''41201NU2V%''
	GROUP BY POLICY_NO,PRODUCT,ORI_TRCDE,SACSCODE,SACSTYP,SUBSTRING(SUN_GLCODE,1,10),TRANREF
	');


	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_EA_FLAG'',''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_EA_FLAG');
	EXEC('
	CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_EA_FLAG WITH ( DISTRIBUTION = HASH(EA_FLG), HEAP ) AS
	SELECT RRN,MAX(EA_FLG) EA_FLG 
	FROM
	  (
	    SELECT CASE WHEN IS_5PCT = 0.05 THEN 1 ELSE 0 END EA_FLG,*
		FROM
	      (
			SELECT ABS(CONVERT(DECIMAL(28,6),ISNULL(B.ORIG_AMT,0)/(NULLIF(A.ORIG_AMT-(B.ORIG_AMT),0)))) AS IS_5PCT,A.ORIG_AMT ORIG_AMT_AN,B.*
			FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_ALLOCATION_NORMAL A 
			LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 B ON A.POLICY_NO = B.POLICY_NO AND A.TRANREF = B.TRANREF
			WHERE SUBSTRING(B.SUN_GLCODE,1,10)=''4112310030'' AND B.ORI_TRCDE = ''B522'' AND B.SACSCODE+B.SACSTYP = ''LENI''
	      ) C
	  ) C
	GROUP BY RRN
	');
	
	
	------------------------------------------------------------
	-- SUB-STEP 4.3 - WOP Enhancement 1 - START
	------------------------------------------------------------
	/*
	--(1) TPD
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_TPD'',''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_TPD');
	EXEC('
	CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_TPD WITH ( DISTRIBUTION = HASH(TPD_FLG), HEAP ) AS
	SELECT A.RRN, 1 AS TPD_FLG
	FROM
	(SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 WHERE ORI_TRCDE IN (''T515'',''T516'') AND SACSCODE+SACSTYP=''LEWP'') A
	JOIN
	(SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 WHERE SUBSTRING(SUN_GLCODE,1,10)=''5112010000'') B
	ON A.RDOCNUM=B.RDOCNUM AND A.ORI_TRCDE=B.ORI_TRCDE AND A.ACCT_AMT+B.ACCT_AMT=0
	');
	*/

	--(2) PEP
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_PEP'',''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_PEP');
	EXEC('
	CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_PEP WITH ( DISTRIBUTION = HASH(PEP_FLG), HEAP ) AS
	SELECT A.RRN, A.RDOCNUM, A.CLAIM_NO, SUBSTRING(A.SUN_GLCODE,1,10) SUN_CD, A.SACSCODE, A.SACSTYP, 1 AS PEP_FLG
	FROM (SELECT RRN, RDOCNUM, CLAIM_NO, SUN_GLCODE, SACSCODE, SACSTYP, ORI_TRCDE, ACCT_AMT FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 WHERE ORI_TRCDE IN (''T515'',''T516'',''T518'') AND SACSCODE+SACSTYP=''LEEP'' AND SUBSTRING(SUN_GLCODE,1,10)=''3141990000'') A
	JOIN (SELECT RDOCNUM, ORI_TRCDE, ACCT_AMT FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 WHERE ORI_TRCDE IN (''T515'',''T516'',''T518'') AND SACSCODE+SACSTYP=''LERB'' AND SUBSTRING(SUN_GLCODE,1,10)=''5119999000'') B
	ON A.RDOCNUM=B.RDOCNUM AND A.ORI_TRCDE=B.ORI_TRCDE AND A.ACCT_AMT+B.ACCT_AMT=0
	');

	--(3) Waiver
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_WV'',''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_WV');
	EXEC('
	CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_WV WITH ( DISTRIBUTION = HASH(WV_FLG), HEAP ) AS
	SELECT A.RRN, A.RDOCNUM, A.CLAIM_NO, SUBSTRING(A.SUN_GLCODE,1,10) SUN_CD, A.SACSCODE, A.SACSTYP, 1 AS WV_FLG
	FROM (SELECT RRN, RDOCNUM, CLAIM_NO, SUN_GLCODE, SACSCODE, SACSTYP, ORI_TRCDE, ACCT_AMT FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 WHERE ORI_TRCDE IN (''T515'',''T516'',''T518'') AND SACSCODE+SACSTYP=''LEWP'' AND SUBSTRING(SUN_GLCODE,1,10)=''3141990000'') A
	JOIN (SELECT RDOCNUM, ORI_TRCDE, ACCT_AMT FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 WHERE ORI_TRCDE IN (''T515'',''T516'',''T518'') AND SACSCODE+SACSTYP=''LEWV'' AND SUBSTRING(SUN_GLCODE,1,10)=''5119030000'') B
	ON A.RDOCNUM=B.RDOCNUM AND A.ORI_TRCDE=B.ORI_TRCDE AND A.ACCT_AMT+B.ACCT_AMT=0
	');

	--(4) CI
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI'',''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI');
	EXEC('
	CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI WITH ( DISTRIBUTION = HASH(CI_FLG), HEAP ) AS
	SELECT A.RRN, A.RDOCNUM, A.CLAIM_NO, SUBSTRING(A.SUN_GLCODE,1,10) SUN_CD, A.SACSCODE, A.SACSTYP, 1 AS CI_FLG
	FROM (SELECT RRN, RDOCNUM, CLAIM_NO, SUN_GLCODE, SACSCODE, SACSTYP, ORI_TRCDE, ACCT_AMT FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 WHERE ORI_TRCDE IN (''T515'',''T516'',''B516'',''T518'') AND SACSCODE+SACSTYP=''LEDO'' AND SUBSTRING(SUN_GLCODE,1,10)=''3141990000'') A
	JOIN (SELECT RDOCNUM, ORI_TRCDE, ACCT_AMT, GLCODE_ORI FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 WHERE ORI_TRCDE IN (''T515'',''T516'',''B516'',''T518'') AND SACSCODE+SACSTYP=''LERB'' AND SUBSTRING(SUN_GLCODE,1,10)=''5119030000'') B
	ON A.RDOCNUM=B.RDOCNUM AND A.ORI_TRCDE=B.ORI_TRCDE AND A.ACCT_AMT+B.ACCT_AMT=0
	WHERE RIGHT(B.GLCODE_ORI,4) IN (''I1DR'', ''I1ER'')
	');


	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI_LEG2'',''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI_LEG2');
	EXEC('
	CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI_LEG2 WITH ( DISTRIBUTION = HASH(CI_FLG), HEAP ) AS
	SELECT B.RRN, 1 AS CI_FLG
	FROM (SELECT RDOCNUM, ORI_TRCDE, ACCT_AMT, TRANNO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 WHERE RRN IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI)) A
	JOIN (SELECT RRN, RDOCNUM, ORI_TRCDE, ACCT_AMT, TRANNO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 WHERE ORI_TRCDE IN (''B516'') AND SACSCODE+SACSTYP=''LEDO'' AND SUBSTRING(SUN_GLCODE,1,10)=''3141990000'') B
	ON A.RDOCNUM=B.RDOCNUM AND A.ORI_TRCDE=B.ORI_TRCDE AND A.ACCT_AMT+B.ACCT_AMT=0 AND A.TRANNO=B.TRANNO
	');
	
	--FOR WOP CI B516 TRANSACTION IN THE SAME/DIFFERENT PERIOD
	--(1) Create historical table to store which RDOCNUM & CLAIM NUMBER that consist of WOP CI
	IF OBJECT_ID('STAG_ID.STAG_LIFEASIA_ETL4_WOP_CI_HISTORICAL','U') IS NULL
	BEGIN
		CREATE TABLE STAG_ID.STAG_LIFEASIA_ETL4_WOP_CI_HISTORICAL (
			RDOCNUM [nvarchar](36) NOT NULL,
			CLAIM_NO [nvarchar](40) NOT NULL,
			SUN_CD [nvarchar](30) NOT NULL,
			SACSCODE [nvarchar](5),
			SACSTYP [nvarchar](5)
		);
	END

	--(2) Combine the newest list with previous list
	EXEC('IF OBJECT_ID(''tempdb.dbo.#TEMP_CI_HISTORICAL_'+@BATCH_NUMBER+''', ''U'') IS NOT NULL DROP TABLE #TEMP_CI_HISTORICAL_'+@BATCH_NUMBER+'');
	EXEC('SELECT RDOCNUM, CLAIM_NO, SUN_CD, SACSCODE, SACSTYP
	      INTO #TEMP_CI_HISTORICAL_'+@BATCH_NUMBER+'
		  FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI
		  GROUP BY RDOCNUM, CLAIM_NO, SUN_CD, SACSCODE, SACSTYP
		  
		  UNION ALL
		  
		  SELECT RDOCNUM, CLAIM_NO, SUN_CD, SACSCODE, SACSTYP FROM STAG_ID.STAG_LIFEASIA_ETL4_WOP_CI_HISTORICAL');

	--(3) Put the new list in the historical table, by making sure the record is unique
	EXEC('INSERT INTO STAG_ID.STAG_LIFEASIA_ETL4_WOP_CI_HISTORICAL SELECT RDOCNUM, CLAIM_NO, SUN_CD, SACSCODE, SACSTYP FROM #TEMP_CI_HISTORICAL_'+@BATCH_NUMBER+' GROUP BY RDOCNUM, CLAIM_NO, SUN_CD, SACSCODE, SACSTYP');

	--(4) Find WOP CI records that match with RDOCNUM & CLAIM NUMBER in historical table, and fit the SUN_CD, SACSCODE, SACSTYP, ORIGINAL TCODE configurations
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI_LEG3'',''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI_LEG3');
	EXEC('
	CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI_LEG3 WITH ( DISTRIBUTION = HASH(CI_FLG), HEAP ) AS
	SELECT A.RRN, 1 AS CI_FLG
	FROM (SELECT RRN, RDOCNUM, CLAIM_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 WHERE ORI_TRCDE IN (''T515'',''T516'',''B516'',''T518'') AND SUBSTRING(SUN_GLCODE,1,10)=''3141990000'' AND SACSCODE+SACSTYP=''LEDO'') A
	JOIN STAG_ID.STAG_LIFEASIA_ETL4_WOP_CI_HISTORICAL B
	ON A.RDOCNUM=B.RDOCNUM AND A.CLAIM_NO=B.CLAIM_NO
	WHERE A.RRN NOT IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI UNION ALL SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI_LEG2) 
	');

	------------------------------------------------------------
	-- SUB-STEP 4.2 - 5% Validation For Extra Allocation - END
	------------------------------------------------------------

	--------------------------
	-- Error Log STEP 4.2 START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Finish create Extra Alloc validation tbl - STEP 4.2 at ' + convert(varchar(20),current_timestamp) + ' with Error Message (if any): ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 4.2 END
	--------------------------
	
	------------------------------------------------------------
	-- SUB-STEP 4.3 - Merge table Policy Loan - START
	------------------------------------------------------------
	
	DECLARE @ACCT_PERIOD BIGINT=CONCAT(@IFRS17_YEAR,STAG_ID.LPAD(@IFRS17_MONTH,3,'0'));

	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_PL'',''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PL');
	EXEC('
	CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PL WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP ) AS
	SELECT [T0], SUN_CODE [ALTREF], CAST(NULL AS VARCHAR) [TAXCODE], ''ACMV PL'' [MOVEMENT], CAST(NULL AS VARCHAR) [OMNI_PRODUCT_CD], CAST(NULL AS VARCHAR) [SL_PREFIX], CAST(NULL AS VARCHAR) [T0_0_REPLACE], CAST(NULL AS VARCHAR) [T0_4_REPLACE], CAST(NULL AS VARCHAR) [TG002_ABBB], CAST(NULL AS VARCHAR) [TG002_OMNI_1_ABBB], CAST(NULL AS VARCHAR) [TG002_OMNI_ABBB],
	CAST(NULL AS VARCHAR) [T0_2A1_REPLACE], CAST(NULL AS VARCHAR) [T0_2B1_REPLACE], CAST(NULL AS VARCHAR) [T0_2B2_REPLACE], CAST(NULL AS VARCHAR) [ITEMITEM], CAST(NULL AS VARCHAR) [TG009_FLAG], CAST(NULL AS VARCHAR) [ROWID], CONVERT(VARCHAR, COHORT_DATE, 112) [APRVDATE], VOUCHER_NUMBER [VOUCHER_NO], CONVERT(VARCHAR, COHORT_DATE, 112) [EFFDATE], 
	CAST(NULL AS VARCHAR) [TRANREF], POLICY_NUMBER [POLICY_NO], POLICY_IDENTIFIER [POLICY_FLAG], PRODUCT_CODE [PRODUCT], BENEFIT_CODE [RIDER_CODE], [BENEFIT_CODE], SUN_CODE [SUN_GLCODE], CAST(NULL AS VARCHAR) [SACSCODE], CAST(NULL AS VARCHAR) [SACSTYP], CAST(NULL AS VARCHAR) [TRANS_CODE], 
	CONVERT(VARCHAR, COHORT_DATE, 112) [TRANS_DATE], ORIGINAL_CURRENCY [ORIGCURR], AMOUNT_ORG_CCY [ORIG_AMT], AMOUNT_RPT_CCY [ACCT_AMT], YEAR(TRANSACTION_DATE) [BATCACTYR], MONTH(TRANSACTION_DATE) [BATCACTMN], 
	POLICY_NUMBER [RDOCNUM], POLICY_NUMBER [RLDGACCT], 0 [TRANNO], JOURNAL_CODE [GLCODE], CAST(NULL AS VARCHAR) [GLCODE_ORI], CAST(NULL AS VARCHAR) [TRANDESC], ''010100'' [LIFECOVERAGERIDER], CAST(NULL AS VARCHAR) [BILLFREQ], CONVERT(VARCHAR, COHORT_DATE, 112) [CRRCD_DEFAULT], 
	CONVERT(VARCHAR, COHORT_DATE, 112) [PTDATE], CONVERT(VARCHAR, COHORT_DATE, 112) [COHORT], CAST(NULL AS VARCHAR) [CLAIM_NO], CAST(NULL AS VARCHAR) [PAIRING_ACCOUNT], ''P01'' [T7], ''P01'' [SY_FLG], CAST(NULL AS VARCHAR) [STATCODE], CAST(NULL AS VARCHAR) [PSTATCODE], CAST(NULL AS VARCHAR) [ORI_TRCDE], 
	CAST(NULL AS VARCHAR) [RRN], CAST(NULL AS VARCHAR) [PTDATE_DIFF], CAST(NULL AS VARCHAR) [PROPOSAL_FLG]
	FROM [STAG_ID].[STAG_LIFEASIA_POLICY_LOAN]
	WHERE ACCOUNTING_PERIOD='+ @ACCT_PERIOD +' AND VOUCHER_NUMBER IN (SELECT VOUCHER_NO FROM '+@VOUCHERLIST_TABLE+')
	');

	--------------------------
	-- Error Log STEP 4.3 END
	--------------------------

	
END TRY


BEGIN CATCH 
 
		DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
		DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
		DECLARE @ErrorState AS INT = ERROR_STATE() 

		SET @V_START = current_timestamp;
		SET @V_SEQNO = @V_SEQNO + 1;
		SET @V_DESCRIPTION = @ErrorMessage

		INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)

END CATCH;
