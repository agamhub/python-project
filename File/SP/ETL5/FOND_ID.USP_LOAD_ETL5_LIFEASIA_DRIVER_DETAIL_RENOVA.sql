CREATE PROC [FOND_ID].[USP_LOAD_ETL5_LIFEASIA_DRIVER_DETAIL_RENOVA] @batch [NVARCHAR](100),@JOBNAMESTR [NVARCHAR](2000) AS
BEGIN 
	--DECLARE @batch [nvarchar](30);
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.FOND_ETL5_LIFEASIA_DRIVER_DETAIL_RENOVA';
	DECLARE @V_TABLE1 		NVARCHAR(2000);
	DECLARE @V_TABLE2 		NVARCHAR(2000);
	DECLARE @SCHEMA      NVARCHAR(MAX)
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @drivername NVARCHAR(15);
	SET @drivername = 'RENOVA';
	DECLARE @V_DRIVER_PERIOD VARCHAR(10); 
	SET @V_DRIVER_PERIOD =SUBSTRING(CAST(@batch AS VARCHAR),1,6);
 
	------START GET RUN ID DETAIL FROM ABC------
	DECLARE 
	@BATCH_MASTER_ID  VARCHAR(20) = 0,
	@BATCH_RUN_ID    VARCHAR(20) = 0,
	@JOB_MASTER_ID   VARCHAR(20) = 0,
	@JOB_RUN_ID     VARCHAR(20) = 0,
	@GMT_START_DTTM   VARCHAR(19) = CONVERT(DATETIME2, GETDATE());

	EXEC STAG_ID.USP_GetRunIdReturn
	@JobName     = @JOBNAMESTR,
	@BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	@BATCH_RUN_ID  = @BATCH_RUN_ID OUTPUT,
	@JOB_MASTER_ID  = @JOB_MASTER_ID OUTPUT,
	@JOB_RUN_ID   = @JOB_RUN_ID OUTPUT,
	@GMT_START_DTTM = @GMT_START_DTTM OUTPUT;
	------END GET RUN ID DETAIL FROM ABC------

	BEGIN TRY

		SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
		PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
		SET @V_START 	= convert(datetime,getDATE());

		SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
		PRINT	@V_DESCRIPTION;
		SET @V_SEQNO		= @V_SEQNO + 1;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
		---------------------------- DROP TEMPORARY TABLE ------------------------------
		IF OBJECT_ID('tempdb..#etl5_las_renova_driver') IS NOT NULL
		BEGIN
			DROP TABLE #etl5_las_renova_driver
		END;
		

		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'SELECT INTO TEMPORARY TABLE etl5_las_ape_driver : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		 


		---------------------------- INSERT INTO TEMPORARY TABLE ------------------------------
		WITH ITEMITEM AS (
		SELECT ITEMITEM,SUBSTRING(GENAREA , CHARINDEX(' ', GENAREA ) +123, 2) as SYARIAH_FLAG 
		from STAG_ID.STAG_LIFEASIA_ITEMPF
   		where ITEMTABL = 'T5687'
		)
		
		,T0 as (
		select distinct * from (
		SELECT ITEMITEM,
		case when SYARIAH_FLAG in ('RS','SS') then 'ITYT000' else '0000000' end T0
		FROM ITEMITEM ) a
		)
		
		, renova as (
		select 
		CAST(PROCESSINTERVAL AS VARCHAR(6)) AS PROCESSINTERVAL
		,RCD
		,CAST(POLICYNO AS VARCHAR(8)) AS POLICY_NO
		,BENEFITGROUPID
		,LAC
		,TREATYID 
		,b.T0 FUND_CODE
		,CHANNEL
		,AMOUNT
		,SAR
		,count(POLICYNO) as POLICY_COUNT_VALUE 
		--select *
		from (select * from STAG_ID.STAG_RENOVA_RENOVA_PREMIUM 
		WHERE SUBSTRING(CAST(PROCESSINTERVAL AS VARCHAR),1,6) = SUBSTRING(CAST(@batch AS VARCHAR),1,6)) a
		--limit 10
		left join T0 b on SUBSTRING(a.LAC,len(a.LAC)-3,8) = b.ITEMITEM
		group by RCD,POLICYNO,PROCESSINTERVAL,BENEFITGROUPID,LAC,TREATYID,b.T0,CHANNEL,AMOUNT,SAR
		)
		
		SELECT * 
		into #etl5_las_renova_driver
		FROM renova
		---------------------------- TO Handle rerun process ------------------------------
		BEGIN TRANSACTION;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'DELETE DATA FROM FOND_ID.[FOND_ETL5_LIFEASIA_DRIVER_DETAIL_RENOVA] : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	 

		 --SELECT * into FOND_ID.FOND_ETL5_LIFEASIA_DRIVER_DETAIL_RENOVA_BKP FROM FOND_ID.FOND_ETL5_LIFEASIA_DRIVER_DETAIL_RENOVA
	
		DELETE FROM FOND_ID.FOND_ETL5_LIFEASIA_DRIVER_DETAIL_RENOVA 
		WHERE PROCESSINTERVAL =  left(@batch,6)

		---------------------------- TO Handle rerun process ------------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'INSERT INTO TABLE FOND_ID.[FOND_ETL5_LIFEASIA_DRIVER_DETAIL_RENOVA] : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


		INSERT INTO [FOND_ID].[FOND_ETL5_LIFEASIA_DRIVER_DETAIL_RENOVA]
		SELECT PROCESSINTERVAL,
				RCD,
				POLICY_NO,
				BENEFITGROUPID,
				LAC,
				TREATYID,
				FUND_CODE,
				CHANNEL,
				AMOUNT,
				SAR,
				POLICY_COUNT_VALUE,
				@BATCH_MASTER_ID AS BATCH_MASTER_IDL,
				@BATCH_RUN_ID AS BATCH_RUN_ID,
				@JOB_MASTER_ID AS JOB_MASTER_ID,
				@JOB_RUN_ID AS JOB_RUN_ID,
				SUBSTRING( CAST(@batch AS VARCHAR),1,6) BATCHDATE,
				GETDATE() ETL_PROCESS_DATE_TIME 
		FROM #etl5_las_renova_driver
		;
	
		---------------------------- ETL5 LOGGING ----------------------------      
       	
		DECLARE @V_TOTAL_ROWS integer = 0;
		DECLARE @V_PERIOD nvarchar(10);
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM #etl5_las_renova_driver) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'FOND_ID.FOND_ETL5_LIFEASIA_DRIVER_DETAIL_RENOVA'
		,@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);
		

		IF @@TRANCOUNT > 0
        COMMIT;


		---------------------------- DROP TEMPORARY TABLE ------------------------------  
		IF OBJECT_ID('tempdb..#etl5_las_renova_driver') IS NOT NULL
		BEGIN
			DROP TABLE #etl5_las_renova_driver
		END;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
                ROLLBACK;
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
END;

