CREATE PROC [FOND_ID].[USP_LOAD_ETL5_IBNR_PRE_ALLOCATED] @batch [NVARCHAR](100),@JOBNAMESTR [NVARCHAR](2000) AS
BEGIN 
	--DECLARE @batch [nvarchar](30);
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.FOND_ETL5_IBNR_PRE_ALLOCATED';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @drivername NVARCHAR(15);
	SET @drivername = 'IBNR_PRE_ALLCT';

	------START GET RUN ID DETAIL FROM ABC------
	DECLARE 
	@BATCH_MASTER_ID  VARCHAR(20) = 0,
	@BATCH_RUN_ID    VARCHAR(20) = 0,
	@JOB_MASTER_ID   VARCHAR(20) = 0,
	@JOB_RUN_ID     VARCHAR(20) = 0,
	@GMT_START_DTTM   VARCHAR(19) = CONVERT(DATETIME2, GETDATE());

	EXEC STAG_ID.USP_GetRunIdReturn
	@JobName     = @JOBNAMESTR,
	@BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	@BATCH_RUN_ID  = @BATCH_RUN_ID OUTPUT,
	@JOB_MASTER_ID  = @JOB_MASTER_ID OUTPUT,
	@JOB_RUN_ID   = @JOB_RUN_ID OUTPUT,
	@GMT_START_DTTM = @GMT_START_DTTM OUTPUT;
	------END GET RUN ID DETAIL FROM ABC------
 
 

BEGIN TRY
		SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
		PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
		SET @V_START 	= convert(datetime,getDATE());

		SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
		PRINT	@V_DESCRIPTION;
		SET @V_SEQNO		= @V_SEQNO + 1;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
		---------------------------- DROP TEMPORARY TABLE ------------------------------
		IF OBJECT_ID('tempdb..#A') IS NOT NULL
		BEGIN
			DROP TABLE #A
		END;
		IF OBJECT_ID('tempdb..#B') IS NOT NULL
		BEGIN
			DROP TABLE #B
		END;
		IF OBJECT_ID('tempdb..#B_2') IS NOT NULL
		BEGIN
			DROP TABLE #B_2
		END;
		IF OBJECT_ID('tempdb..#C') IS NOT NULL
		BEGIN
			DROP TABLE #C
		END;
		IF OBJECT_ID('tempdb..#D') IS NOT NULL
		BEGIN
			DROP TABLE #D
		END;
		IF OBJECT_ID('tempdb..#ALLOCATION') IS NOT NULL
		BEGIN
			DROP TABLE #ALLOCATION
		END;
		IF OBJECT_ID('tempdb..#IBNR_CONVENT') IS NOT NULL
		BEGIN
			DROP TABLE #IBNR_CONVENT
		END;
		IF OBJECT_ID('tempdb..#IBNR_SHAR') IS NOT NULL
		BEGIN
			DROP TABLE #IBNR_SHAR
		END;
		IF OBJECT_ID('tempdb..#IBNR') IS NOT NULL
		BEGIN
			DROP TABLE #IBNR
		END;
		IF OBJECT_ID('tempdb..#IBNR_PRE_ALLOCATED_1') IS NOT NULL
		BEGIN
			DROP TABLE #IBNR_PRE_ALLOCATED_1
		END;

		IF OBJECT_ID('tempdb..#IBNR_PRE_ALLOCATED_2') IS NOT NULL
		BEGIN
			DROP TABLE #IBNR_PRE_ALLOCATED_2
		END;
		IF OBJECT_ID('tempdb..#IBNR_PRE_ALLOCATED_3') IS NOT NULL
		BEGIN
			DROP TABLE #IBNR_PRE_ALLOCATED_3
		END;

		IF OBJECT_ID('tempdb..#FINANCE_CONFIG') IS NOT NULL
		BEGIN
			DROP TABLE #FINANCE_CONFIG
		END;

		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'SELECT INTO TEMPORARY TABLE IBNR_PRE_ALLOCATED_3 : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		 

		-----------------------------Source Patching
		exec [FOND_ID].[IBNR_PREALLOCATED_SUM_ASSURED_DATA_PATCHING] @batch 
		---------------------------- INSERT INTO TEMPORARY TABLE ------------------------------
--DECLARE @batch [nvarchar](30);
--SET @batch = '20210101';
		-- DROP TABLE #A
		SELECT DISTINCT A.* 
		INTO #A
		--INTO FOND_ID.FOND_ETL5_ARIF_A
		FROM (
		SELECT BATCHDATE,JOURNAL_NO,PRODUCT_CATEGORY,AMOUNT_YTD,ACCOUNT_CODE_BS, PRODUCT, SUM(PER_SUM_ASSURED) PER_SUM_ASSURED,INSURANCE_CONTRACT_GROUP_ID,CCY_CD  
		FROM (
		select distinct
		a.POLICY_NUMBER,
		a.PRODUCT_CD,
		a.BENEFIT_CD,
		a.PER_SUM_ASSURED,
		a.CCY_CD,
		a.BATCHDATE,
		a.RISK_TYPE,
		--case when a.INSURANCE_CONTRACT_GROUP_ID not in (select distinct INSURANCE_CONTRACT_GROUP_ID from FOND_ID.FOND_IFRS17_ICG_STORES) then b.INSURANCE_CONTRACT_GROUP_ID else a.INSURANCE_CONTRACT_GROUP_ID end as  INSURANCE_CONTRACT_GROUP_ID
		a.INSURANCE_CONTRACT_GROUP_ID
		 FROM 
		(select 
		n.POLICY_NUMBER,
		n.PRODUCT_CD,
		n.BENEFIT_CD,
		n.PER_SUM_ASSURED,
		n.CCY_CD,
		n.BATCHDATE,
		n.RISK_TYPE,
		n.INSURANCE_CONTRACT_GROUP_ID
--		 ,m.INSURANCE_CONTRACT_GROUP_ID ICG_CHECKER 
		from 
		STAG_ID.STAG_PREALLOC_ETL5_STAG_SUM_ASSURED_PRE_ALLOCATED n
		where INSURANCE_CONTRACT_GROUP_ID is not null and RISK_TYPE is not null
--		LEFT JOIN (select INSURANCE_CONTRACT_GROUP_ID from FOND_ID.FOND_IFRS17_ICG_STORES) m on n.INSURANCE_CONTRACT_GROUP_ID=m.INSURANCE_CONTRACT_GROUP_ID
		) a
		INNER JOIN (select POLICY_NO,PRODUCT_CD,BENEFIT_CD,INSURANCE_CONTRACT_GROUP_ID from FOND_ID.FOND_IFRS17_ICG_STORES group by POLICY_NO,PRODUCT_CD,BENEFIT_CD,INSURANCE_CONTRACT_GROUP_ID) b on 
		a.POLICY_NUMBER=b.POLICY_NO
		and a.PRODUCT_CD=b.PRODUCT_CD
		and a.BENEFIT_CD=b.BENEFIT_CD
		and a.INSURANCE_CONTRACT_GROUP_ID = b.INSURANCE_CONTRACT_GROUP_ID
		) ICG_ID
		JOIN (
		            SELECT
		            A.PRODUCT_CATEGORY, A.UPLOAD_DATE,
		            CASE WHEN  A.PRODUCT = B.PRODUCT_IBNR THEN B.RISK_TYPE
		            ELSE A.PRODUCT
		            END PRODUCT,
		            ACCOUNT_CODE_BS, AMOUNT_YTD, JOURNAL_NO
		            FROM STAG_ID.STAG_CONFIG_STAG_ETL5_IBNR_PRE_ALLOCATED A
					LEFT JOIN (SELECT PRODUCT_IBNR, RISK_TYPE FROM STAG_ID.STAG_CONFIG_ETL5_IBNR_RISK_TYPE_MAPPING GROUP BY PRODUCT_IBNR, RISK_TYPE ) B ON A.PRODUCT = B.PRODUCT_IBNR 
		        WHERE SUBSTRING(UPLOAD_DATE,1,6) BETWEEN 
		        (YEAR(DATEADD(month, -1,CONVERT(date,@batch))) * 100 + 0 + MONTH(DATEADD(month, -1,CONVERT(date, @batch)))) 
				AND 
				YEAR(DATEADD(month, 0,CONVERT(date,@batch))) * 100 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch)))
		)AMOUNT_YTD ON ICG_ID.RISK_TYPE = AMOUNT_YTD.PRODUCT AND SUBSTRING(AMOUNT_YTD.UPLOAD_DATE,1,6) = ICG_ID.BATCHDATE
		WHERE BATCHDATE BETWEEN 
		(YEAR(DATEADD(month, -1,CONVERT(date,@batch))) * 100 + 0 + MONTH(DATEADD(month, -1,CONVERT(date, @batch)))) 
				AND 
		YEAR(DATEADD(month, 0,CONVERT(date,@batch))) * 100 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch)))
		GROUP BY PRODUCT_CATEGORY, PRODUCT,INSURANCE_CONTRACT_GROUP_ID,BATCHDATE,JOURNAL_NO,CCY_CD,AMOUNT_YTD,ACCOUNT_CODE_BS) A
		;
		
		--DECLARE @batch [nvarchar](30);
		--SET @batch = '20191101';
		--SELECT YEAR(DATEADD(month, 0,CONVERT(date,@batch))) * 100 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch)))
		-- DROP TABLE FOND_ID.FOND_ETL5_ARIF_B
		SELECT A.*,B.AMOUNT_YTD AMT_PREV,B.PER_SUM_ASSURED SAR_PREV 
		--INTO FOND_ID.FOND_ETL5_ARIF_B
		INTO #B
		FROM (
		SELECT PRODUCT_CATEGORY,PRODUCT,JOURNAL_NO,BATCHDATE,INSURANCE_CONTRACT_GROUP_ID,AMOUNT_YTD,SUM(PER_SUM_ASSURED) PER_SUM_ASSURED  
		FROM #A
		WHERE SUBSTRING(BATCHDATE,1,6) = YEAR(DATEADD(month, 0,CONVERT(date,@batch))) * 100 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch)))
		GROUP BY PRODUCT_CATEGORY,PRODUCT,JOURNAL_NO,BATCHDATE,INSURANCE_CONTRACT_GROUP_ID,AMOUNT_YTD
		) A LEFT JOIN
		(
		SELECT PRODUCT_CATEGORY,PRODUCT,JOURNAL_NO,BATCHDATE,INSURANCE_CONTRACT_GROUP_ID,AMOUNT_YTD,SUM(PER_SUM_ASSURED) PER_SUM_ASSURED  
		FROM #A
		WHERE SUBSTRING(BATCHDATE,1,6) = YEAR(DATEADD(month, -1,CONVERT(date,@batch))) * 100 + 0 + MONTH(DATEADD(month, -1,CONVERT(date, @batch)))
		GROUP BY PRODUCT_CATEGORY,PRODUCT,JOURNAL_NO,BATCHDATE,INSURANCE_CONTRACT_GROUP_ID,AMOUNT_YTD
		) B ON A.PRODUCT_CATEGORY = B.PRODUCT_CATEGORY AND A.PRODUCT = B.PRODUCT AND A.INSURANCE_CONTRACT_GROUP_ID = B.INSURANCE_CONTRACT_GROUP_ID
		
		;
		
	
		--DROP TABLE FOND_ID.FOND_ETL5_ARIF_ALLOCATION
		SELECT A.*,A.ALLOCATION_CURR - A.ALLOCATION_PREV MOVEMENT
		INTO #ALLOCATION
		FROM (
		SELECT A.* 
		,A.PER_SUM_ASSURED/A.SAR_CURR_PROD WEIGHT_CURR
		,COALESCE(A.SAR_PREV/A.SAR_PREV_PROD,0) WEIGHT_PREV
		,A.AMOUNT_YTD*(A.PER_SUM_ASSURED/A.SAR_CURR_PROD) ALLOCATION_CURR
		,COALESCE(A.AMT_PREV*(A.SAR_PREV/A.SAR_PREV_PROD),0) ALLOCATION_PREV
		--,COALESCE((A.AMOUNT_YTD*(A.PER_SUM_ASSURED/A.SAR_CURR_PROD)) - (A.AMT_PREV*(A.SAR_PREV/A.SAR_PREV_PROD)),0) MOVEMENT
		FROM (
		SELECT A.PRODUCT_CATEGORY,A.PRODUCT,A.JOURNAL_NO,A.BATCHDATE
		,A.INSURANCE_CONTRACT_GROUP_ID,A.AMOUNT_YTD,cast(A.PER_SUM_ASSURED as float) PER_SUM_ASSURED,A.AMT_PREV
		,cast(A.SAR_PREV as float) SAR_PREV,SUM(A.SAR_CURR_PROD) SAR_CURR_PROD,SUM(A.SAR_PREV_PROD) SAR_PREV_PROD
		FROM (
		SELECT A.*,B.SAR_CURR SAR_CURR_PROD,COALESCE(B.SAR_PREV,0) SAR_PREV_PROD
		FROM (SELECT * FROM #B) A
		LEFT JOIN (SELECT PRODUCT_CATEGORY, PRODUCT,JOURNAL_NO,AMOUNT_YTD,AMT_PREV,SUM(cast(PER_SUM_ASSURED as bigint)) SAR_CURR,SUM(cast(SAR_PREV as bigint)) SAR_PREV 
		FROM #B 
		GROUP BY PRODUCT_CATEGORY, PRODUCT,JOURNAL_NO,AMOUNT_YTD,AMT_PREV
		) B ON A.PRODUCT_CATEGORY = B.PRODUCT_CATEGORY AND A.PRODUCT = B.PRODUCT
		) A GROUP BY A.PRODUCT_CATEGORY,A.PRODUCT,A.JOURNAL_NO,A.BATCHDATE
		,A.INSURANCE_CONTRACT_GROUP_ID,A.AMOUNT_YTD,A.PER_SUM_ASSURED,A.AMT_PREV,A.SAR_PREV) A
		--ORDER BY A.PRODUCT_CATEGORY,A.PRODUCT,A.INSURANCE_CONTRACT_GROUP_ID
		) A
		;
	
		-- DROP TABLE FOND_ID.FOND_ETL5_ARIF_C
		SELECT A.PRODUCT_CATEGORY,A.PRODUCT,A.JOURNAL_NO,A.BATCHDATE,A.INSURANCE_CONTRACT_GROUP_ID,COALESCE(A.MOVEMENT,0) WEIGHTED_IBNR_CONV
		,COALESCE(B.MOVEMENT,0) WEIGHTED_IBNR_SHAR  
		INTO #C
		FROM (
		SELECT * FROM #ALLOCATION WHERE PRODUCT_CATEGORY = 'Conventional') A
		LEFT JOIN (
		SELECT * FROM #ALLOCATION WHERE PRODUCT_CATEGORY = 'Syariah'
		) B ON A.INSURANCE_CONTRACT_GROUP_ID = B.INSURANCE_CONTRACT_GROUP_ID AND A.PRODUCT = B.PRODUCT AND A.BATCHDATE = B.BATCHDATE
		;

		--CREATE TEMP TABLE #FINANCE_CONFIG
		SELECT
		  SQ_FINANCE_CONFIG.SUN_CD, 
		  SQ_FINANCE_CONFIG.NEW_COA,
		  SQ_FINANCE_CONFIG.CASHFLOW_TYPE_L2
		INTO #FINANCE_CONFIG
		FROM
		  (
		    SELECT
              ALL_CONFIG.SUN_CD,
              CASE WHEN DUPL.SUN_CD IS NOT NULL AND SUNGL4.SUN_CD IS NOT NULL THEN SUNGL4.NEW_COA ELSE ALL_CONFIG.NEW_COA END AS NEW_COA,
              CASE WHEN DUPL.SUN_CD IS NOT NULL AND SUNGL4.SUN_CD IS NOT NULL THEN SUNGL4.CASHFLOW_TYPE_L2 ELSE ALL_CONFIG.CASHFLOW_TYPE_L2 END AS CASHFLOW_TYPE_L2
            FROM STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG AS ALL_CONFIG
            LEFT JOIN (SELECT BATCHDATE, SUN_CD FROM STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG where ACTION<>'D' GROUP BY BATCHDATE, SUN_CD HAVING COUNT(*) > 1) AS DUPL
              ON ALL_CONFIG.BATCHDATE = DUPL.BATCHDATE
		      AND ALL_CONFIG.SUN_CD = DUPL.SUN_CD
            LEFT JOIN (SELECT BATCHDATE, SUN_CD, NEW_COA, CASHFLOW_TYPE_L2 FROM STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG WHERE PAS_NAME = 'SUNGL4' and ACTION<>'D' GROUP BY BATCHDATE, SUN_CD,    NEW_COA,  CASHFLOW_TYPE_L2) AS SUNGL4
              ON ALL_CONFIG.BATCHDATE = SUNGL4.BATCHDATE
		      AND ALL_CONFIG.SUN_CD = SUNGL4.SUN_CD
		    WHERE ALL_CONFIG.BATCHDATE = LEFT(@batch, 6) and ALL_CONFIG.ACTION<>'D'
		  ) AS SQ_FINANCE_CONFIG
		GROUP BY
		  SQ_FINANCE_CONFIG.SUN_CD, 
		  SQ_FINANCE_CONFIG.NEW_COA,
		  SQ_FINANCE_CONFIG.CASHFLOW_TYPE_L2;
	
		
		--DECLARE @batch [nvarchar](30);
		--SET @batch = '20191101';
		--SELECT * FROM #IBNR_CONVENT
		-- DROP TABLE #IBNR_CONVENT
		SELECT A.* --INTO #IBNR_CONVENT 
		INTO #IBNR_CONVENT
		FROM (
		SELECT A.ACCT_PERIOD
		,A.TRANS_DATE
		,A.ORG_CCY
		,A.RPT_CCY
		,A.AMT_ORIG_CCY
		,A.AMT_RPT_CCY
		,A.ICG_ID
		,A.POL_NO
		,A.BENF_CD
		,A.PROD_CD
		,A.TREATY_ID
		,A.TREATY_IDENTIFIER
		,A.FUND_CD
		,A.CHANNEL_CD
		,A.TXN_TYPE
		,A.ENTITY_ID
		,A.ACCT_CD
		,B.NEW_COA NEW_COA
		,B.CASHFLOW_TYPE_L2 CASHFLOW_TYPE_L2
		,A.D_C
		,A.JRNAL_NO
		,A.ANAL_T0
		,A.ANAL_T1
		,A.ANAL_T2
		,A.ANAL_T3
		,A.ANAL_T4
		,A.ANAL_T5
		,A.ANAL_T6
		,A.ANAL_T7
		,A.ANAL_T8
		,A.JRNAL_TYPE FROM (
		SELECT DISTINCT 'IAI' AS ENTITY_ID
		,SUBSTRING(CAST(@batch AS VARCHAR),1,4)+'0'+SUBSTRING(CAST(@batch AS VARCHAR),5,2) ACCT_PERIOD
		,EOMONTH(CAST(@batch AS VARCHAR)) AS TRANS_DATE
		,'IDR' ORG_CCY,'IDR' RPT_CCY, WEIGHTED_IBNR_CONV AMT_ORIG_CCY, WEIGHTED_IBNR_CONV AMT_RPT_CCY,INSURANCE_CONTRACT_GROUP_ID ICG_ID
		,'' POL_NO,'' BENF_CD,'' PROD_CD,'' TREATY_ID,'' TREATY_IDENTIFIER,'ITLS000' FUND_CD,'' CHANNEL_CD
		,'IBNR CONV' TXN_TYPE,'5139040000' ACCT_CD
		,'' NEW_COA,'' CASHFLOW_TYPE_L2,CASE WHEN WEIGHTED_IBNR_CONV < 0 THEN 'CR' ELSE 'DR' END AS D_C,JOURNAL_NO JRNAL_NO
		,'' ANAL_T0,'' ANAL_T1,'' ANAL_T2,'' ANAL_T3,'' ANAL_T4,'' ANAL_T5,'' ANAL_T6,'' ANAL_T7,'' ANAL_T8
		,'ADJ2' JRNAL_TYPE
		-- SELECT *
		FROM #C WHERE INSURANCE_CONTRACT_GROUP_ID IS NOT NULL) A
		LEFT JOIN #FINANCE_CONFIG AS B ON A.ACCT_CD = B.SUN_CD
		--WHERE ICG_ID = 'IAI_PROCONULUSD_2019_19'
		) A
		;
		
		---- IBNR SHARIA
		-- DROP TABLE #IBNR_SHAR
		--DECLARE @batch [nvarchar](30);
		--SET @batch = '20191101';
		-- SELECT * FROM #IBNR_SHAR
		SELECT A.* --INTO #IBNR_SHAR 
		INTO #IBNR_SHAR
		FROM (
		SELECT A.ACCT_PERIOD,A.TRANS_DATE,A.ORG_CCY,A.RPT_CCY,A.AMT_ORIG_CCY,A.AMT_RPT_CCY,A.ICG_ID
		,A.POL_NO,A.BENF_CD,A.PROD_CD,A.TREATY_ID,A.TREATY_IDENTIFIER,A.FUND_CD,A.CHANNEL_CD,A.TXN_TYPE,A.ENTITY_ID
		,A.ACCT_CD,A.NEW_COA NEW_COA,A.CASHFLOW_TYPE_L2 CASHFLOW_TYPE_L2,A.D_C,B.JOURNAL_NO,A.ANAL_T0,A.ANAL_T1
		,A.ANAL_T2,A.ANAL_T3,A.ANAL_T4,A.ANAL_T5,A.ANAL_T6,A.ANAL_T7,A.ANAL_T8,A.JRNAL_TYPE
		FROM (
		SELECT A.ACCT_PERIOD,A.TRANS_DATE,A.ORG_CCY,A.RPT_CCY,A.AMT_ORIG_CCY,A.AMT_RPT_CCY,A.ICG_ID
		,A.POL_NO,A.BENF_CD,A.PROD_CD,A.TREATY_ID,A.TREATY_IDENTIFIER,A.FUND_CD,A.CHANNEL_CD,A.TXN_TYPE,A.ENTITY_ID
		,A.ACCT_CD,B.NEW_COA NEW_COA,B.CASHFLOW_TYPE_L2 CASHFLOW_TYPE_L2,A.D_C,A.JRNAL_NO,A.ANAL_T0,A.ANAL_T1
		,A.ANAL_T2,A.ANAL_T3,A.ANAL_T4,A.ANAL_T5,A.ANAL_T6,A.ANAL_T7,A.ANAL_T8,A.JRNAL_TYPE 
		FROM (
		SELECT DISTINCT 'IAI' AS ENTITY_ID
		,SUBSTRING(CAST(@batch AS VARCHAR),1,4)+'0'+SUBSTRING(CAST(@batch AS VARCHAR),5,2) ACCT_PERIOD
		,EOMONTH(CAST(@batch AS VARCHAR)) AS TRANS_DATE
		,'IDR' ORG_CCY,'IDR' RPT_CCY, WEIGHTED_IBNR_SHAR AMT_ORIG_CCY, WEIGHTED_IBNR_SHAR AMT_RPT_CCY,INSURANCE_CONTRACT_GROUP_ID ICG_ID
		,'' POL_NO,'' BENF_CD,'' PROD_CD,'' TREATY_ID,'' TREATY_IDENTIFIER,'ITYT000' FUND_CD,'' CHANNEL_CD
		,'IBNR SHAR' TXN_TYPE,'5139040000' ACCT_CD
		,'' NEW_COA,'' CASHFLOW_TYPE_L2,CASE WHEN WEIGHTED_IBNR_SHAR < 0 THEN 'CR' ELSE 'DR' END AS D_C, JOURNAL_NO JRNAL_NO
		,'' ANAL_T0,'' ANAL_T1,'' ANAL_T2,'' ANAL_T3,'' ANAL_T4,'' ANAL_T5,'' ANAL_T6,'' ANAL_T7,'' ANAL_T8
		,'ADJ2' JRNAL_TYPE
		FROM #C WHERE INSURANCE_CONTRACT_GROUP_ID IS NOT NULL) A
		LEFT JOIN #FINANCE_CONFIG AS B ON A.ACCT_CD = B.SUN_CD
		) A LEFT JOIN (SELECT DISTINCT PRODUCT_CATEGORY,UPLOAD_DATE,JOURNAL_NO FROM STAG_ID.STAG_CONFIG_STAG_ETL5_IBNR_PRE_ALLOCATED
		WHERE SUBSTRING(UPLOAD_DATE,1,6) = SUBSTRING(CAST(@batch AS VARCHAR),1,6) AND PRODUCT_CATEGORY = 'Syariah'
		) B ON SUBSTRING(A.ACCT_PERIOD,1,4)+SUBSTRING(A.ACCT_PERIOD,6,2) = SUBSTRING(B.UPLOAD_DATE,1,6)
		) A
		;
		
		
		-- DROP TABLE #IBNR
		-- SELECT DISTINCT JRNAL_NO FROM #IBNR
		SELECT A.* --INTO #IBNR 
		INTO #IBNR
		FROM (
		SELECT * FROM #IBNR_CONVENT
		UNION
		SELECT * FROM #IBNR_SHAR) A
		;
		
		-- DROP TABLE FOND_ID.FOND_ETL5_IBNR_PRE_ALLOCATED_1
		SELECT A.* 
		INTO #IBNR_PRE_ALLOCATED_1
		FROM (
		SELECT ACCT_PERIOD,TRANS_DATE,ORG_CCY,RPT_CCY,AMT_ORIG_CCY,AMT_RPT_CCY,ICG_ID,POL_NO,BENF_CD,PROD_CD
				,TREATY_ID,TREATY_IDENTIFIER,FUND_CD,CHANNEL_CD,TXN_TYPE,ENTITY_ID
				,ACCT_CD,NEW_COA,CASHFLOW_TYPE_L2
				,D_C,JRNAL_NO,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7
				,ANAL_T8,JRNAL_TYPE FROM #IBNR
				WHERE D_C = 'DR' AND AMT_ORIG_CCY != 0
		UNION 
		SELECT A.ACCT_PERIOD,A.TRANS_DATE,A.ORG_CCY,A.RPT_CCY,A.AMT_ORIG_CCY,A.AMT_RPT_CCY
				,A.ICG_ID,A.POL_NO,A.BENF_CD,A.PROD_CD
				,A.TREATY_ID,A.TREATY_IDENTIFIER,A.FUND_CD,A.CHANNEL_CD,A.TXN_TYPE,A.ENTITY_ID
				,A.ACCT_CD,B.NEW_COA NEW_COA,B.CASHFLOW_TYPE_L2 CASHFLOW_TYPE_L2
				,A.D_C,A.JRNAL_NO,A.ANAL_T0,A.ANAL_T1,A.ANAL_T2,A.ANAL_T3,A.ANAL_T4,A.ANAL_T5,A.ANAL_T6,A.ANAL_T7
				,A.ANAL_T8,A.JRNAL_TYPE FROM (SELECT 
				A.ACCT_PERIOD,A.TRANS_DATE,A.ORG_CCY,A.RPT_CCY,A.AMT_ORIG_CCY *-1 AMT_ORIG_CCY,A.AMT_RPT_CCY *-1 AMT_RPT_CCY
				,A.ICG_ID,A.POL_NO,A.BENF_CD,A.PROD_CD
				,A.TREATY_ID,A.TREATY_IDENTIFIER,A.FUND_CD,A.CHANNEL_CD,A.TXN_TYPE,A.ENTITY_ID
				,'3141904000' ACCT_CD,A.NEW_COA,A.CASHFLOW_TYPE_L2
				,'CR 'D_C,A.JRNAL_NO,A.ANAL_T0,A.ANAL_T1,A.ANAL_T2,A.ANAL_T3,A.ANAL_T4,A.ANAL_T5,A.ANAL_T6,A.ANAL_T7
				,A.ANAL_T8,A.JRNAL_TYPE
				FROM #IBNR A
				WHERE D_C = 'DR' AND AMT_ORIG_CCY != 0) A
				LEFT JOIN #FINANCE_CONFIG AS B ON A.ACCT_CD = B.SUN_CD
		) A
		;
		
		--DROP TABLE FOND_ID.FOND_ETL5_IBNR_PRE_ALLOCATED_2
		SELECT A.* 
		INTO #IBNR_PRE_ALLOCATED_2
		FROM (
		SELECT ACCT_PERIOD,TRANS_DATE,ORG_CCY,RPT_CCY,AMT_ORIG_CCY,AMT_RPT_CCY,ICG_ID,POL_NO,BENF_CD,PROD_CD
				,TREATY_ID,TREATY_IDENTIFIER,FUND_CD,CHANNEL_CD,TXN_TYPE,ENTITY_ID
				,ACCT_CD,NEW_COA,CASHFLOW_TYPE_L2
				,D_C,JRNAL_NO,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7
				,ANAL_T8,JRNAL_TYPE FROM #IBNR
				WHERE D_C = 'CR' AND AMT_ORIG_CCY != 0
		UNION 
		SELECT A.ACCT_PERIOD,A.TRANS_DATE,A.ORG_CCY,A.RPT_CCY,A.AMT_ORIG_CCY,A.AMT_RPT_CCY
				,A.ICG_ID,A.POL_NO,A.BENF_CD,A.PROD_CD
				,A.TREATY_ID,A.TREATY_IDENTIFIER,A.FUND_CD,A.CHANNEL_CD,A.TXN_TYPE,A.ENTITY_ID
				,A.ACCT_CD,B.NEW_COA NEW_COA,B.CASHFLOW_TYPE_L2 CASHFLOW_TYPE_L2
				,A.D_C,A.JRNAL_NO,A.ANAL_T0,A.ANAL_T1,A.ANAL_T2,A.ANAL_T3,A.ANAL_T4,A.ANAL_T5,A.ANAL_T6,A.ANAL_T7
				,A.ANAL_T8,A.JRNAL_TYPE FROM (SELECT 
				A.ACCT_PERIOD,A.TRANS_DATE,A.ORG_CCY,A.RPT_CCY,A.AMT_ORIG_CCY * -1 AMT_ORIG_CCY,A.AMT_RPT_CCY * -1 AMT_RPT_CCY
				,A.ICG_ID,A.POL_NO,A.BENF_CD,A.PROD_CD
				,A.TREATY_ID,A.TREATY_IDENTIFIER,A.FUND_CD,A.CHANNEL_CD,A.TXN_TYPE,A.ENTITY_ID
				,'3141904000' ACCT_CD,A.NEW_COA,A.CASHFLOW_TYPE_L2
				,'DR 'D_C,A.JRNAL_NO,A.ANAL_T0,A.ANAL_T1,A.ANAL_T2,A.ANAL_T3,A.ANAL_T4,A.ANAL_T5,A.ANAL_T6,A.ANAL_T7
				,A.ANAL_T8,A.JRNAL_TYPE
				FROM #IBNR A
				WHERE D_C = 'CR' AND AMT_ORIG_CCY != 0) A
				LEFT JOIN #FINANCE_CONFIG AS B ON A.ACCT_CD = B.SUN_CD
		) A	
		;
		
		
		-- DROP TABLE FOND_ID.FOND_ETL5_IBNR_PRE_ALLOCATED_3
		-- SELECT * FROM #IBNR_PRE_ALLOCATED_3
		SELECT A.* 
		INTO #IBNR_PRE_ALLOCATED_3
		FROM (
		SELECT * FROM #IBNR_PRE_ALLOCATED_1
		UNION
		SELECT * FROM #IBNR_PRE_ALLOCATED_2
		UNION 
		SELECT DISTINCT * FROM #IBNR WHERE AMT_ORIG_CCY = 0
		) A
		;
	
	
		
		---------------------------- TO Handle rerun process ------------------------------
		BEGIN TRANSACTION;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'DELETE DATA FROM FOND_ID.[FOND_ETL5_IBNR_PRE_ALLOCATED] : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	 

		-- SELECT DISTINCT * FROM FOND_ID.FOND_ETL5_IBNR_PRE_ALLOCATED
		-- SELECT YEAR(DATEADD(month, 0,CONVERT(date, '20190101'))) * 100 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, '20190101')))
		--DECLARE @batch [nvarchar](30);
		--SET @batch = '20191101';
		DELETE FROM FOND_ID.FOND_ETL5_IBNR_PRE_ALLOCATED 
		WHERE ACCT_PERIOD =  YEAR(DATEADD(month, 0,CONVERT(date, @batch))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch)));

		 ---------------------------- TO Handle rerun process ------------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'INSERT INTO TABLE FOND_ID.[FOND_ETL5_IBNR_PRE_ALLOCATED] : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		--DECLARE @batch [nvarchar](30);
		--SET @batch = '20191101';
		INSERT INTO FOND_ID.FOND_ETL5_IBNR_PRE_ALLOCATED 
		(ENTITY_ID, ACCT_PERIOD, TRANS_DATE, ORG_CCY, RPT_CCY, AMT_ORIG_CCY, AMT_RPT_CCY, ICG_ID, POL_NO, BENF_CD, PROD_CD, TREATY_ID, TREATY_IDENTIFIER, FUND_CD, CHANNEL_CD, TXN_TYPE, ACCT_CD, NEW_COA, CASHFLOW_TYPE_L2, D_C, JRNAL_NO, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, JRNAL_TYPE, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
		SELECT DISTINCT CAST(A.ENTITY_ID AS VARCHAR(25)) ENTITY_ID
						,CAST(A.ACCT_PERIOD AS VARCHAR(30)) ACCT_PERIOD
						,CAST(A.TRANS_DATE AS DATE) TRANS_DATE
						,CAST(A.ORG_CCY AS VARCHAR(3)) ORG_CCY
						,CAST(A.RPT_CCY AS VARCHAR(3)) RPT_CCY
						,CAST(A.AMT_ORIG_CCY AS NUMERIC(28,6)) AMT_ORIG_CCY
						,CAST(A.AMT_RPT_CCY AS NUMERIC(28,6)) AMT_RPT_CCY
						,CAST(A.ICG_ID AS VARCHAR(40)) ICG_ID
						,CAST(A.POL_NO AS VARCHAR(36)) POL_NO
						,CAST(A.BENF_CD AS VARCHAR(30)) BENF_CD
						,CAST(A.PROD_CD AS VARCHAR(30)) PROD_CD
						,case when A.TREATY_ID ='' or A.TREATY_ID is null then null else CAST(A.TREATY_ID AS VARCHAR(30)) end  as TREATY_ID
						,case when A.TREATY_IDENTIFIER ='' or A.TREATY_IDENTIFIER is null then null else CAST(A.TREATY_IDENTIFIER AS VARCHAR(30)) end as TREATY_IDENTIFIER
						,CAST(A.FUND_CD AS VARCHAR(15)) FUND_CD
						,CAST(A.CHANNEL_CD AS VARCHAR(15)) CHANNEL_CD
						,CAST(A.TXN_TYPE AS VARCHAR(50)) TXN_TYPE
						,CAST(A.ACCT_CD AS VARCHAR(16)) ACCT_CD
						,CAST(A.NEW_COA AS VARCHAR(16)) NEW_COA
						,CAST(A.CASHFLOW_TYPE_L2 AS VARCHAR(65)) CASHFLOW_TYPE_L2
						,CAST(A.D_C AS VARCHAR(2)) D_C
						,CAST(A.JRNAL_NO AS VARCHAR(30)) JRNAL_NO
						,CAST(A.FUND_CD AS VARCHAR(15)) ANAL_T0
						,CAST(A.ANAL_T1 AS VARCHAR(15)) ANAL_T1
						,CAST(A.ANAL_T2 AS VARCHAR(15)) ANAL_T2
						,CAST(A.ANAL_T3 AS VARCHAR(15)) ANAL_T3
						,CAST(A.ANAL_T4 AS VARCHAR(15)) ANAL_T4
						,CAST(A.ANAL_T5 AS VARCHAR(15)) ANAL_T5
						,CAST(A.ANAL_T6 AS VARCHAR(15)) ANAL_T6
						,CAST(A.ANAL_T7 AS VARCHAR(15)) ANAL_T7
						,CAST(A.ANAL_T8 AS VARCHAR(15)) ANAL_T8
						,CAST(A.JRNAL_TYPE AS VARCHAR(4)) JRNAL_TYPE
						,@BATCH_MASTER_ID AS BATCH_MASTER_ID
						,@BATCH_RUN_ID AS BATCH_RUN_ID
						,@JOB_MASTER_ID AS JOB_MASTER_ID
						,@JOB_RUN_ID AS JOB_RUN_ID
						,SUBSTRING( CAST(@batch AS VARCHAR),1,6) BATCHDATE
						,GETDATE() ETL_PROCESS_DATE_TIME
		--INTO FOND_ID.FOND_ETL5_IBNR_PRE_ALLOCATED_TEMP				
		FROM #IBNR_PRE_ALLOCATED_3 A
		;
--	DECLARE @batch [nvarchar](30);
--	SET @batch = '20190101';
	    --------------------------delete passtrough
	    delete from FOND_ID.FOND_PRE_ALLOC_PASS_THROUGH_EXTRACT  where BATCHDATE=SUBSTRING( CAST(@batch AS VARCHAR),1,6) and TXN_TYPE like '%IBNR%'
		--------------------------insert to passtrhough
		insert into FOND_ID.FOND_PRE_ALLOC_PASS_THROUGH_EXTRACT
		(ENTITY_ID,ACCT_PERIOD,TRANS_DATE,ORG_CCY,RPT_CCY,AMT_ORIG_CCY,AMT_RPT_CCY,ICG_ID,POL_NO,BENF_CD,PROD_CD,TREATY_ID,TREATY_IDENTIFIER,FUND_CD,CHANNEL_CD,TXN_TYPE,ACCT_CD,NEW_COA,CASHFLOW_TYPE_L2,D_C,JRNAL_NO,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,JRNAL_TYPE,BATCH_MASTER_ID,BATCH_RUN_ID,JOB_MASTER_ID,JOB_RUN_ID,BATCHDATE,ETL_PROCESS_DATE_TIME)
		select
		ENTITY_ID,ACCT_PERIOD,TRANS_DATE,ORG_CCY,RPT_CCY,AMT_ORIG_CCY,AMT_RPT_CCY,ICG_ID,POL_NO,BENF_CD,PROD_CD,TREATY_ID,TREATY_IDENTIFIER,FUND_CD,CHANNEL_CD,TXN_TYPE,ACCT_CD,NEW_COA,CASHFLOW_TYPE_L2,D_C,JRNAL_NO,FUND_CD as ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,JRNAL_TYPE,BATCH_MASTER_ID,BATCH_RUN_ID,JOB_MASTER_ID,JOB_RUN_ID,BATCHDATE,ETL_PROCESS_DATE_TIME
		from FOND_ID.FOND_ETL5_IBNR_PRE_ALLOCATED where BATCHDATE=SUBSTRING( CAST(@batch AS VARCHAR),1,6)
		---------------------------- ETL5 LOGGING ----------------------------      
       	
		DECLARE @V_TOTAL_ROWS integer = 0;
		DECLARE @V_PERIOD nvarchar(10);
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM #IBNR_PRE_ALLOCATED_3) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'FOND_ID.FOND_ETL5_IBNR_PRE_ALLOCATED'
		,@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);
		

		IF @@TRANCOUNT > 0
        COMMIT;


		---------------------------- DROP TEMPORARY TABLE ------------------------------  
		IF OBJECT_ID('tempdb..#IBNR_PRE_ALLOCATED_3') IS NOT NULL
		BEGIN
			DROP TABLE #IBNR_PRE_ALLOCATED_3
		END;

END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
                ROLLBACK;
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
END;

