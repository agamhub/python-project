CREATE PROC [FOND_ID].[USP_LOAD_ETL5_IAI_LOCAL_FX_OVERRIDE] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000) AS
BEGIN
	--- ABC Framework parameter
	DECLARE @BATCH_MASTER_ID    VARCHAR(20) = 0;
	DECLARE @BATCH_RUN_ID    VARCHAR(20)  = 0;
	DECLARE @JOB_MASTER_ID    VARCHAR(20)  = 0;
	DECLARE @JOB_RUN_ID    VARCHAR(20)  = 0;
	DECLARE @GMT_START_DTTM    VARCHAR(20) = getdate();

	---------------------------------------------------
	--- Setup ABC Framework Parameters
	---------------------------------------------------
	EXEC STAG_ID.USP_GetRunIdReturn
	@JobName = @JOBNAMESTR
	,@BATCH_MASTER_ID  = @BATCH_MASTER_ID OUTPUT
	,@BATCH_RUN_ID   = @BATCH_RUN_ID OUTPUT
	,@JOB_MASTER_ID  = @JOB_MASTER_ID OUTPUT
	,@JOB_RUN_ID  = @JOB_RUN_ID OUTPUT
	,@GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;


	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.USP_LOAD_ETL5_IAI_LOCAL_FX_OVERRIDE';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_START_DATE	date;
	DECLARE @batch NVARCHAR(6) = convert(nvarchar,@BATCHDATESTR,112)

	BEGIN TRY
		
		------------------------------START PROCEDURE------------------------------------
		SET @V_START_DATE	= convert(date, cast(@BATCHDATESTR as varchar)); -- valuation extract date
		PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
		SET @V_START 	= convert(datetime,getDATE());

		SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
		PRINT	@V_DESCRIPTION;
		SET @V_SEQNO		= @V_SEQNO + 1;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
		---------------------------- DROP TEMPORARY TABLE ------------------------------
		IF OBJECT_ID('tempdb..#TEMP_RATE_MTD_YTD') IS NOT NULL
		BEGIN
			DROP TABLE #TEMP_RATE_MTD_YTD
		END;

		---------------------------START LOG INSERT INTO TEMPORARY TABLE -------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'START INSERT INTO TEMPORARY TABLE RATE MTD YTD : ' + @batch + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		 

		---------------------------START INSERT INTO TEMPORARY TABLE -------------------------------------------------
		SELECT 
			COALESCE(SUBSTRING(BATCHDATE,1,6) , 'YTD') AS BATCHDATE,
			ROUND(SUM(ROUND(MTD_RATE,0))/ COUNT(1), 0) as RATE
		INTO #TEMP_RATE_MTD_YTD
		FROM(
				SELECT SUBSTRING(BATCHDATE,1,6) BATCHDATE, ROUND(SUM(ROUND(AVG_SUBKURS,0))/ COUNT(1), 0) MTD_RATE
				FROM STAG_ID.STAG_WS_BIRATE_KURSDAILY_VW 
				WHERE SUBSTRING(BATCHDATE,1,4) = SUBSTRING(@batch,1,4) and LEFT(BATCHDATE,6) <= LEFT(@batch,6) 
				AND MTS_SUBKURS='USD' AND KURSTYPE='LOKAL' 
				GROUP BY SUBSTRING(BATCHDATE,1,6)
		)X GROUP BY ROLLUP (SUBSTRING(BATCHDATE,1,6)) ;


		---------------------------LOG FINISH INSERT INTO TEMPORARY TABLE -------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'FINISH INSERT INTO TEMPORARY TABLE RATE MTD YTD : ' + @batch + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	


		---------------------------LOG START DELETE EXISTING BATCHDATE FROM TABLE -------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'DELETE EXISTING BATCHDATE FROM TABLE : ' + @batch + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

		-------------------------- DELETE EXISTING BATCHDATE FROM TABLE ----------------------------

		DELETE FROM FOND_ID.FOND_ETL5_IAI_LOCAL_FX_OVERRIDE WHERE BATCHDATE = @batch;

		---------------------------LOG FINISH DELETE EXISTING BATCHDATE FROM TABLE -------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'FINISH DELETE EXISTING BATCHDATE FROM TABLE : ' + @batch + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
		
		---------------------------LOG START INSERT INTO TABLE -------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'START INSERT INTO TABLE : ' + @batch + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	


		-------------------------- INSERT INTO TABLE ---------------------------------
		INSERT INTO FOND_ID.FOND_ETL5_IAI_LOCAL_FX_OVERRIDE 
		SELECT 
			DENSE_RANK() OVER(ORDER BY QUOTE_DT, DATA_POINT, DATASERIES_NAME) DATASERIES_ID, *, 
			@BATCH_MASTER_ID AS BATCH_MASTER_ID,
			@BATCH_RUN_ID AS BATCH_RUN_ID,
			@JOB_MASTER_ID AS JOB_MASTER_ID,
			@JOB_RUN_ID AS JOB_RUN_ID,
			@batch as BATCHDATE,
			getdate() ETL_PROCESS_DATE_TIME
		FROM (
			SELECT 
				'IDR_USD_FX_SPOT' DATASERIES_NAME, 'LAST' DATA_POINT, 'IDR_USD_FX_SPOT' RATE_CONV_NAME, 'IAI' SRC_VENDOR_NAME, 'IDR' CCY_CD, NULL DESCRIPTION, CONVERT(VARCHAR(10), TGL_SUBKURS, 101) QUOTE_DT, CASE WHEN CONVERT(VARCHAR(10), TGL_SUBKURS) = EOMONTH(CONVERT(VARCHAR(10), TGL_SUBKURS)) THEN CONVERT(VARCHAR(10), TGL_SUBKURS, 101) ELSE CONVERT(VARCHAR(10), (DATEADD(DAY, 1, TGL_SUBKURS)), 101) END EFF_DT, CAST(ROUND(AVG_SUBKURS,0) AS NUMERIC) EXCHG_RATE_VAL, 'DAILY' FX_FLG
			FROM STAG_ID.STAG_WS_BIRATE_KURSDAILY_VW 
			WHERE SUBSTRING(BATCHDATE,1,6) = @batch
			AND MTS_SUBKURS='USD' AND KURSTYPE='LOKAL'
			UNION ALL
			SELECT
				'IDR_USD_FX_MTD_AVG' DATASERIES_NAME, 'LAST_MTD_AVG' DATA_POINT, 'IDR_USD_FX_MTD_AVG' RATE_CONV_NAME, 'IAI' SRC_VENDOR_NAME, 'IDR' CCY_CD, NULL DESCRIPTION, CONVERT(VARCHAR(10), EOMONTH(TGL_SUBKURS), 101) QUOTE_DT, CONVERT(VARCHAR(10), EOMONTH(TGL_SUBKURS), 101) EFF_DT, CAST(B.RATE AS NUMERIC) EXCHG_RATE_VAL, 'MTD' FX_FLG
			FROM (SELECT TOP 1 * FROM STAG_ID.STAG_WS_BIRATE_KURSDAILY_VW WHERE SUBSTRING(BATCHDATE,1,6) = @batch AND MTS_SUBKURS='USD' AND KURSTYPE='LOKAL' ) A
			LEFT JOIN #TEMP_RATE_MTD_YTD B ON 1=1 AND SUBSTRING(B.BATCHDATE,1,6) = @batch
			UNION ALL
			SELECT
				'IDR_USD_FX_YTD_AVG' DATASERIES_NAME, 'LAST_YTD_AVG' DATA_POINT, 'IDR_USD_FX_YTD_AVG' RATE_CONV_NAME, 'IAI' SRC_VENDOR_NAME, 'IDR' CCY_CD, NULL DESCRIPTION, CONVERT(VARCHAR(10), EOMONTH(TGL_SUBKURS), 101) QUOTE_DT, CONVERT(VARCHAR(10), EOMONTH(TGL_SUBKURS), 101) EFF_DT, CAST(B.RATE AS NUMERIC) EXCHG_RATE_VAL, 'YTD' FX_FLG
			FROM (SELECT TOP 1 * FROM STAG_ID.STAG_WS_BIRATE_KURSDAILY_VW WHERE SUBSTRING(BATCHDATE,1,6) = @batch AND MTS_SUBKURS='USD' AND KURSTYPE='LOKAL' ) A
			LEFT JOIN #TEMP_RATE_MTD_YTD B ON 1=1 AND B.BATCHDATE = 'YTD'
		) ALL_DATA;

		---------------------------LOG FINISH INSERT INTO TABLE -------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'FINISH INSERT INTO TABLE : ' + @batch + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
                ROLLBACK;
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
END;
