CREATE PROC [FOND_ID].[USP_LOAD_ETL5_DRIVER_MASTER] @batch [NVARCHAR](100),@JOBNAMESTR [NVARCHAR](2000) AS
BEGIN 
--	DECLARE @batch [nvarchar](30)='20190101'
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.FOND_ETL5_DRIVER_MASTER';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @drivername NVARCHAR(15);
	SET @drivername = 'DRIVERMASTER';

	------ START ABC ------
	DECLARE
    @BATCH_MASTER_ID    VARCHAR(20) = 0,
    @BATCH_RUN_ID       VARCHAR(20) = 0,
    @JOB_MASTER_ID      VARCHAR(20) = 0,
    @JOB_RUN_ID         VARCHAR(20) = 0,
    @GMT_START_DTTM     VARCHAR(20) = GETDATE();
	
	EXEC STAG_ID.USP_GetRunIdReturn
	  @JobName        = @JOBNAMESTR,
	  @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	  @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
	  @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
	  @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
	  @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
	------END GET RUN ID DETAIL FROM ABC--------- 

 

BEGIN TRY
		SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
		PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
		SET @V_START 	= convert(datetime,getDATE());

		SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
		PRINT	@V_DESCRIPTION;
		SET @V_SEQNO		= @V_SEQNO + 1;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
		---------------------------- DROP TEMPORARY TABLE ------------------------------
		IF OBJECT_ID('tempdb..#etl5_driver_master') IS NOT NULL
		BEGIN
			DROP TABLE #etl5_driver_master
		END;
		IF OBJECT_ID('tempdb..#FOND_ETL5_DRIVER_MASTER_TEMP') IS NOT NULL
		BEGIN
			DROP TABLE #FOND_ETL5_DRIVER_MASTER_TEMP
		END;
		IF OBJECT_ID('tempdb..#labeldata') IS NOT NULL
		BEGIN
			DROP TABLE #labeldata
		END;
		IF OBJECT_ID('tempdb..#cleandata') IS NOT NULL
		BEGIN
			DROP TABLE #cleandata
		END;
		IF OBJECT_ID('tempdb..#invaliddata') IS NOT NULL
		BEGIN
			DROP TABLE #invaliddata
		END;
	
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'SELECT INTO TEMPORARY TABLE etl5_driver_master : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		 


		---------------------------- INSERT INTO TEMPORARY TABLE ------------------------------
--		DECLARE @batch [nvarchar](30);
--		SET @batch = '20210201'; --select EOMONTH(@batch)
--	
		SELECT * 
		INTO #etl5_driver_master
		FROM (
		--NOP
		SELECT [ENTITY_ID]  COLLATE DATABASE_DEFAULT AS ENTITY_ID
		      ,[DRIVER_SOURCE]  COLLATE DATABASE_DEFAULT AS DRIVER_SOURCE
		      ,[DRIVER_PERIOD]  COLLATE DATABASE_DEFAULT AS DRIVER_PERIOD
		      ,[POL_NO]  COLLATE DATABASE_DEFAULT AS POL_NO
		      ,[BENF_CD]  COLLATE DATABASE_DEFAULT AS BENF_CD
		      ,[PROD_CD]  COLLATE DATABASE_DEFAULT AS PROD_CD
		      ,TREATY_CD  COLLATE DATABASE_DEFAULT AS TREATYID
		      ,[FUND]  COLLATE DATABASE_DEFAULT AS FUND
		      ,[ALLOCATION_DRIVER]  COLLATE DATABASE_DEFAULT AS ALLOCATION_DRIVER
		      ,[DRIVER_AMOUNT]
		      ,[BATCH_MASTER_ID]
		      ,[BATCH_RUN_ID]
		      ,[JOB_MASTER_ID]
		      ,[JOB_RUN_ID]
		      ,[BATCHDATE] COLLATE DATABASE_DEFAULT AS BATCHDATE 
		      ,[ETL_PROCESS_DATE_TIME]
		  FROM [FOND_ID].[FOND_ETL5_NOP_DRIVER_DETAIL]
		WHERE  [DRIVER_PERIOD] = YEAR(DATEADD(month, 0,CONVERT(date, @batch))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch)))
		
		UNION ALL
		
		--ACCOUNTVALUE
		SELECT [ENTITY_ID]  COLLATE DATABASE_DEFAULT AS ENTITY_ID
		      ,[DRIVER_SOURCE]  COLLATE DATABASE_DEFAULT AS DRIVER_SOURCE
		      ,[DRIVER_PERIOD]  COLLATE DATABASE_DEFAULT AS DRIVER_PERIOD
		      ,[POL_NO]  COLLATE DATABASE_DEFAULT AS POL_NO
		      ,[BENF_CD]  COLLATE DATABASE_DEFAULT AS BENF_CD
		      ,[PROD_CD]  COLLATE DATABASE_DEFAULT AS PROD_CD
		      ,''  COLLATE DATABASE_DEFAULT AS TREATYID
		      ,[FUND]  COLLATE DATABASE_DEFAULT AS FUND
		      ,[ALLOCATION_DRIVER]  COLLATE DATABASE_DEFAULT AS ALLOCATION_DRIVER
		      ,case when [DRIVER_AMOUNT] is null then 0 else [DRIVER_AMOUNT] end [DRIVER_AMOUNT]
		      ,[BATCH_MASTER_ID]
		      ,[BATCH_RUN_ID]
		      ,[JOB_MASTER_ID]
		      ,[JOB_RUN_ID]
		      ,[BATCHDATE]
		      ,[ETL_PROCESS_DATE_TIME]
		FROM [FOND_ID].[FOND_ETL5_PER_ACCOUNT_VALUE_DRIVER_DETAIL]
		WHERE  [DRIVER_PERIOD] = YEAR(DATEADD(month, 0,CONVERT(date, @batch))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch)))
		
		UNION ALL
		
		--PERSISTENCY
		SELECT [ENTITY_ID]  COLLATE DATABASE_DEFAULT AS ENTITY_ID
		      ,[DRIVER_SOURCE]  COLLATE DATABASE_DEFAULT AS DRIVER_SOURCE
		      ,[DRIVER_PERIOD]  COLLATE DATABASE_DEFAULT AS DRIVER_PERIOD
		      ,[POL_NO]  COLLATE DATABASE_DEFAULT AS POL_NO
		      ,[BENF_CD]  COLLATE DATABASE_DEFAULT AS BENF_CD
		      ,[PROD_CD]  COLLATE DATABASE_DEFAULT AS PROD_CD
		      ,'' COLLATE DATABASE_DEFAULT AS TREATYID
		      ,[FUND]  COLLATE DATABASE_DEFAULT AS FUND
		      ,[ALLOCATION_DRIVER]  COLLATE DATABASE_DEFAULT AS ALLOCATION_DRIVER
		      ,case when [DRIVER_AMOUNT] is null then 0 else [DRIVER_AMOUNT] end [DRIVER_AMOUNT]
		      ,[BATCH_MASTER_ID]
		      ,[BATCH_RUN_ID]
		      ,[JOB_MASTER_ID]
		      ,[JOB_RUN_ID]
		      ,[BATCHDATE]
		      ,[ETL_PROCESS_DATE_TIME]
		  FROM [FOND_ID].[FOND_ETL5_PERSISTENCY_COMMISSION_DRIVER_DETAIL]
		WHERE  [DRIVER_PERIOD] = YEAR(DATEADD(month, 0,CONVERT(date, @batch))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch)))
		
		UNION ALL
		
		--RENEWAL PREMIUM
		SELECT [ENTITY_ID]  COLLATE DATABASE_DEFAULT AS ENTITY_ID
		      ,[DRIVER_SOURCE]  COLLATE DATABASE_DEFAULT AS DRIVER_SOURCE
		      ,[DRIVER_PERIOD]  COLLATE DATABASE_DEFAULT AS DRIVER_PERIOD
		      ,[POL_NO]  COLLATE DATABASE_DEFAULT AS POL_NO
		      ,[BENF_CD]  COLLATE DATABASE_DEFAULT AS BENF_CD
		      ,[PROD_CD]  COLLATE DATABASE_DEFAULT AS PROD_CD
		      ,'' COLLATE DATABASE_DEFAULT AS TREATYID
		      ,[FUND]  COLLATE DATABASE_DEFAULT AS FUND
		      ,[ALLOCATION_DRIVER]  COLLATE DATABASE_DEFAULT AS ALLOCATION_DRIVER
		      ,case when [DRIVER_AMOUNT] is null then 0 else [DRIVER_AMOUNT] end [DRIVER_AMOUNT]
		      ,[BATCH_MASTER_ID]
		      ,[BATCH_RUN_ID]
		      ,[JOB_MASTER_ID]
		      ,[JOB_RUN_ID]
		      ,[BATCHDATE] COLLATE DATABASE_DEFAULT AS BATCHDATE 
		      ,[ETL_PROCESS_DATE_TIME]
		  FROM [FOND_ID].[FOND_ETL5_RENEWAL_PREMIUM_DRIVER_DETAIL]
		WHERE  [DRIVER_PERIOD] = YEAR(DATEADD(month, 0,CONVERT(date, @batch))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch)))
		
		UNION ALL
		
		--FYP
		SELECT [ENTITY_ID]  COLLATE DATABASE_DEFAULT AS ENTITY_ID
		      ,[DRIVER_SOURCE]  COLLATE DATABASE_DEFAULT AS DRIVER_SOURCE
		      ,[DRIVER_PERIOD]  COLLATE DATABASE_DEFAULT AS DRIVER_PERIOD
		      ,[POL_NO]  COLLATE DATABASE_DEFAULT AS POL_NO
		      ,[BENF_CD]  COLLATE DATABASE_DEFAULT AS BENF_CD
		      ,[PROD_CD]  COLLATE DATABASE_DEFAULT AS PROD_CD
		      ,''  COLLATE DATABASE_DEFAULT AS TREATYID
		      ,[FUND]  COLLATE DATABASE_DEFAULT AS FUND
		      ,[ALLOCATION_DRIVER]  COLLATE DATABASE_DEFAULT AS ALLOCATION_DRIVER
		      ,case when [DRIVER_AMOUNT] is null then 0 else [DRIVER_AMOUNT] end [DRIVER_AMOUNT]
		      ,[BATCH_MASTER_ID]
		      ,[BATCH_RUN_ID]
		      ,[JOB_MASTER_ID]
		      ,[JOB_RUN_ID]
		      ,[BATCHDATE] COLLATE DATABASE_DEFAULT AS BATCHDATE 
		      ,[ETL_PROCESS_DATE_TIME]
		FROM [FOND_ID].[FOND_ETL5_FYP_DRIVER_DETAIL]
		WHERE  [DRIVER_PERIOD] = YEAR(DATEADD(month, 0,CONVERT(date, @batch))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch)))
		)a
		;
--		DECLARE @batch [nvarchar](30);
--		SET @batch = '20210201'; --select EOMONTH(@batch)
		---labeling Driver master by ICG
		select distinct a.*,b.STATUS_SOURCE,b.INFORCE_FLAG,b.lbl,b.PRODUCT_CD PRODUCT_CD_ICG,b.BENEFIT_CD BENEFIT_CD_ICG,d.PRODUCT_CD PRODUCT_CD_RIICG,d.BENEFIT_CD BENEFIT_CD_RIICG,d.TREATY_ID TREATY_ID_RIICG,b.CB_START_DT,b.CB_END_DT,EOMONTH(@batch) PERIOD_CHECK,d.RI_ICG_CHECKER
		into  #labeldata
		FROM  #etl5_driver_master a
		left join (
		select *,'icg' as lbl from   
		    (
		    select *,ROW_NUMBER() OVER (PARTITION BY POLICY_NO ORDER BY CREATED_DATE DESC) AS rn,ROW_NUMBER() OVER (PARTITION BY POLICY_NO ORDER BY CB_END_DT DESC) as rncb 
		    from FOND_ID.FOND_IFRS17_ICG_STORES
		    where UPPER(STATUS_SOURCE) in ('IF','INFORCE')
		    and UPPER(INFORCE_FLAG) ='Y'
--		    and BENEFIT_CODE =PRODUCT_CODE 
			and BENEFIT_CD=PRODUCT_CD
		    ) c	
		where c.rn = 1 and c.rncb=1
		) b  
		on REPLACE( a.POL_NO,' ','') COLLATE DATABASE_DEFAULT =REPLACE( b.POLICY_NO,' ','') COLLATE DATABASE_DEFAULT
		left join ( 
			select * from (
			select l.POLICY_NO, l.BENEFIT_CD, l.PRODUCT_CD,l.TREATY_ID,'Policy is exist in RI ICG' RI_ICG_CHECKER,row_number() over (partition by l.POLICY_NO order by l.BENEFIT_CD, l.PRODUCT_CD ) rn
			from  FCORE_ID.FOND_RI_ICG_STORE_UC l 
			inner join [FOND_ID].[FOND_ETL5_RENOVA_DRIVER_DETAIL] m on l.POLICY_NO=m.POL_NO and m.TREATY_CD=l.TREATY_ID ) k 
			where rn=1
		) d 
		on REPLACE( a.POL_NO,' ','') COLLATE DATABASE_DEFAULT =REPLACE( d.POLICY_NO,' ','') COLLATE DATABASE_DEFAULT 
	
		---get all data that is tag by ICG
		SELECT distinct * into #cleandata 
		from (select distinct *,case when PERIOD_CHECK>=CB_START_DT and PERIOD_CHECK<CB_END_DT then 'valid' else 'invalid' end CB_CHECKER from  #labeldata where (lbl='icg' or RI_ICG_CHECKER is not null) 	
		) d where CB_CHECKER='valid' and FUND IS NOT NULL and BENF_CD is not null
		and (case when ALLOCATION_DRIVER not in ('REINSURANCE','NOP_RI') then CAST(BENEFIT_CD_ICG AS VARCHAR(30)) else CAST(BENEFIT_CD_RIICG AS VARCHAR(30)) end) is not null
		and (case when ALLOCATION_DRIVER not in ('REINSURANCE','NOP_RI') then CAST(PRODUCT_CD_ICG AS VARCHAR(30)) else CAST(PRODUCT_CD_RIICG AS VARCHAR(30)) end) is not null

		
		--get all invalid data
		SELECT distinct a.*,null as CB_CHECKER,b.INFORCE_FLAG INFORCE_FLAG_,b.STATUS_SOURCE STATUS_SOURCE_ into #invaliddata 
		from (
		select t1.*,t2.CLEAN_CHECKER from #labeldata t1 
		left join (select *,'cleandata' CLEAN_CHECKER from #cleandata) t2 on t1.POL_NO=t2.POL_NO 
		and t1.DRIVER_SOURCE=t2.DRIVER_SOURCE 
		and t1.FUND=t2.FUND 
		and t1.BENF_CD=t2.BENF_CD 
		and t1.ALLOCATION_DRIVER=t2.ALLOCATION_DRIVER 
		and t1.DRIVER_AMOUNT=t2.DRIVER_AMOUNT	
		) a
		left join (select * from (select  POLICY_NO,INFORCE_FLAG,STATUS_SOURCE,ROW_NUMBER() OVER (PARTITION BY POLICY_NO ORDER BY CREATED_DATE DESC) AS rn from FOND_ID.FOND_IFRS17_ICG_STORES where BENEFIT_CD=PRODUCT_CD ) n where rn=1)  b 
		on REPLACE( a.POL_NO,' ','') COLLATE DATABASE_DEFAULT= REPLACE( b.POLICY_NO,' ','') COLLATE DATABASE_DEFAULT 
		where a.CLEAN_CHECKER is null

		---------------------------- TO Handle rerun process ------------------------------
		BEGIN TRANSACTION;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'DELETE DATA FROM FOND_ID.[FOND_ETL5_DRIVER_MASTER] and FOND_ID.[FOND_ETL5_DRIVER_MASTER_INVALID] : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	 

		--SELECT * FROM FOND_ID.FOND_ETL5_DRIVER_MASTER
--DECLARE @batch [nvarchar](30);
--SET @batch = '20210201';
		DELETE FROM FOND_ID.FOND_ETL5_DRIVER_MASTER 
		WHERE DRIVER_PERIOD =  EOMONTH(CAST(@batch AS VARCHAR));
		--YEAR(DATEADD(month, 0,CONVERT(date, @batch))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch)));
		DELETE FROM FOND_ID.FOND_ETL5_DRIVER_MASTER_INVALID 
		WHERE  DRIVER_PERIOD =  EOMONTH(CAST(@batch AS VARCHAR));
		 ---------------------------- TO Handle rerun process ------------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'INSERT INTO TABLE FOND_ID.[FOND_ETL5_DRIVER_MASTER] : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

--DECLARE @batch [nvarchar](30);
--SET @batch = '20210201';
		INSERT INTO [FOND_ID].[FOND_ETL5_DRIVER_MASTER]
		(ENTITY_ID, DRIVER_SRC, DRIVER_PERIOD, POLICY_NO, BENEFIT_CD, PRODUCT_CD, TREATY_CD, T0, POLICY_ALLOC_DRIVER, DRIVER_AMT, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
		SELECT CAST([ENTITY_ID] AS VARCHAR(25)) AS ENTITY_ID
		      ,CAST([DRIVER_SOURCE] AS VARCHAR(15)) AS DRIVER_SRC
		      ,EOMONTH(CAST(@batch AS VARCHAR)) AS DRIVER_PERIOD
		      ,CAST([POL_NO] AS VARCHAR(36)) AS POLICY_NO
		      ,case when ALLOCATION_DRIVER not in ('REINSURANCE','NOP_RI') then CAST(BENEFIT_CD_ICG AS VARCHAR(30)) else CAST(BENEFIT_CD_RIICG AS VARCHAR(30)) end AS BENEFIT_CD
		      ,case when ALLOCATION_DRIVER not in ('REINSURANCE','NOP_RI') then CAST(PRODUCT_CD_ICG AS VARCHAR(30)) else CAST(PRODUCT_CD_RIICG AS VARCHAR(30)) end  AS PRODUCT_CD
		      ,case when TREATYID='' or TREATYID is null then null else CAST(TREATY_ID_RIICG AS VARCHAR(30)) end AS TREATY_CD
		      ,CAST([FUND] AS VARCHAR(15)) AS T0
		      ,CAST([ALLOCATION_DRIVER] AS VARCHAR(15)) AS POLICY_ALLOC_DRIVER
		      ,case when [DRIVER_AMOUNT] is null then 0 else [DRIVER_AMOUNT] end [DRIVER_AMT] 
		      ,@BATCH_MASTER_ID AS BATCH_MASTER_ID
			  ,@BATCH_RUN_ID AS BATCH_RUN_ID
			  ,@JOB_MASTER_ID AS JOB_MASTER_ID
			  ,@JOB_RUN_ID AS JOB_RUN_ID
		      ,cast([BATCHDATE] as VARCHAR(6)) AS BATCHDATE
		      ,[ETL_PROCESS_DATE_TIME]
		FROM #cleandata ;

	
		INSERT INTO [FOND_ID].[FOND_ETL5_DRIVER_MASTER_INVALID]
		(ENTITY_ID, DRIVER_SRC, DRIVER_PERIOD, POLICY_NO, BENEFIT_CD, PRODUCT_CD, TREATY_CD, T0, POLICY_ALLOC_DRIVER, DRIVER_AMT, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME, INFORCE_FLAG, STATUS_SOURCE)
		SELECT CAST([ENTITY_ID] AS VARCHAR(25)) AS ENTITY_ID
		      ,CAST([DRIVER_SOURCE] AS VARCHAR(15)) AS DRIVER_SRC
		      ,EOMONTH(CAST(@batch AS VARCHAR)) AS DRIVER_PERIOD
		      ,case when POL_NO is null then 'POL_NO is null' else CAST([POL_NO] AS VARCHAR(36)) end AS POLICY_NO
		      ,case when BENF_CD is null then 'BENF_CD is null' else BENF_CD end AS BENEFIT_CD
		      ,case when PROD_CD is null then 'PROD_CD is null' else PROD_CD end AS PRODUCT_CD
		      ,case when TREATYID='' or TREATYID is null then null else CAST(TREATYID AS VARCHAR(30)) end AS TREATY_CD
		      ,case when FUND is null then 'FUND is null' else FUND end  AS T0
		      ,CAST([ALLOCATION_DRIVER] AS VARCHAR(15)) AS POLICY_ALLOC_DRIVER
		      ,case when [DRIVER_AMOUNT] is null then 0 else [DRIVER_AMOUNT] end [DRIVER_AMT]
		      ,@BATCH_MASTER_ID AS BATCH_MASTER_ID
			  ,@BATCH_RUN_ID AS BATCH_RUN_ID
			  ,@JOB_MASTER_ID AS JOB_MASTER_ID
			  ,@JOB_RUN_ID AS JOB_RUN_ID
		      ,cast([BATCHDATE] as VARCHAR(6)) AS BATCHDATE
		      ,[ETL_PROCESS_DATE_TIME]
		      ,INFORCE_FLAG_ INFORCE_FLAG
		      ,STATUS_SOURCE_ STATUS_SOURCE
		FROM #invaliddata  


		---------------------------- ETL5 LOGGING ----------------------------      
       	--DECLARE @batch [nvarchar](30);
		--SET @batch = '20190201';
		
		DECLARE @V_TOTAL_ROWS integer = 0;
		DECLARE @V_PERIOD nvarchar(10);
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM #etl5_driver_master) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'FOND_ID.FOND_ETL5_DRIVER_MASTER'
		,@drivername,@V_TOTAL_ROWS,'YTD',@V_PERIOD);
		
		--SELECT 'Total records : ' + @V_TOTAL_ROWS;

		IF @@TRANCOUNT > 0
        COMMIT;


		---------------------------- DROP TEMPORARY TABLE ------------------------------  
		IF OBJECT_ID('tempdb..#etl5_driver_master') IS NOT NULL
		BEGIN
			DROP TABLE #etl5_driver_master
		END;
				IF OBJECT_ID('tempdb..#labeldata') IS NOT NULL
		BEGIN
			DROP TABLE #labeldata
		END;
		IF OBJECT_ID('tempdb..#cleandata') IS NOT NULL
		BEGIN
			DROP TABLE #cleandata
		END;
		IF OBJECT_ID('tempdb..#invaliddata') IS NOT NULL
		BEGIN
			DROP TABLE #invaliddata
		END;
END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
                ROLLBACK;
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		SELECT 'Error : ' + ERROR_MESSAGE();	
	
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
END;
