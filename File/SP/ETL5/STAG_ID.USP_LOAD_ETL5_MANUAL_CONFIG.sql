CREATE PROC [STAG_ID].[USP_LOAD_ETL5_MANUAL_CONFIG] @batch [NVARCHAR](100),@JOBNAMESTR [NVARCHAR](2000) AS
BEGIN 
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'MANUAL CONFIGURATION';
	DECLARE @V_TABLE1 		NVARCHAR(2000);
	DECLARE @V_TABLE2 		NVARCHAR(2000);
	DECLARE @SCHEMA      NVARCHAR(MAX)
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @drivername NVARCHAR(15);
	SET @drivername = 'MANUAL_CONFIG';
	DECLARE @V_DRIVER_PERIOD VARCHAR(10); 
	SET @V_DRIVER_PERIOD =SUBSTRING(CAST(@batch AS VARCHAR),1,6);
	DECLARE @V_TBLSTS INT=1

	
	------ START ABC ------
	DECLARE
    @BATCH_MASTER_ID    VARCHAR(20) = 0,
    @BATCH_RUN_ID       VARCHAR(20) = 0,
    @JOB_MASTER_ID      VARCHAR(20) = 0,
    @JOB_RUN_ID         VARCHAR(20) = 0,
    @GMT_START_DTTM     VARCHAR(20) = GETDATE();
	
	EXEC STAG_ID.USP_GetRunIdReturn
	  @JobName        = @JOBNAMESTR,
	  @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	  @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
	  @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
	  @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
	  @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
	  
	------END GET RUN ID DETAIL FROM ABC--------- 	


BEGIN TRY

		SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
		PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
		SET @V_START 	= convert(datetime,getDATE());

		SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
		PRINT	@V_DESCRIPTION;
		SET @V_SEQNO		= @V_SEQNO + 1;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
		---------------------------- INSERT/DELETE PROCESS ------------------------------

		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'Delete or Insert new data to historical data : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		 
		

		--[1]==CHECK BIN CONFIG
		
		--SET @V_TBLSTS=(SELECT COUNT(*) FROM STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF)
		
		--=============================BIN CONFIG=================================================
		SET @V_DESCRIPTION	= 'INSERT INTO STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		
		--IF @V_TBLSTS<1 
		--BEGIN
			-----Initial Load
			TRUNCATE TABLE STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF;

			insert into STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF
			(ENTITY_ID,
			RULE_ID,
			EXCL_FIELD1,
			EXCL_FIELD1_COND,
			EXCL_FIELD2,
			EXCL_FIELD2_COND,
			EXCL_FLAG,
			DESCRIPTION,
			ACTION,
			USER_PROFILE,
			UPDATE_DATE)
			select 
			ENTITY_ID,
			RULE_ID,
			EXCL_FIELD1,
			EXCL_FIELD1_COND,
			EXCL_FIELD2,
			EXCL_FIELD2_COND,
			BIN_FLG,
			BIN_EXCL_SUMMARY_DESC,
			'I' ACTION,
			USER_PROFILE,
			UPDATE_DT
			from (
				select *,row_number() over (partition by CONCAT(ENTITY_ID,RULE_ID) order by EFF_TO_DT desc) rn from FCORE_ID.FOND_BIN_ACCT_EXCLUSION_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *,row_number() over (partition by CONCAT(ENTITY_ID,RULE_ID) order by EFF_TO_DT desc) rn from FCORE_IDIAC.FOND_BIN_ACCT_EXCLUSION_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *,row_number() over (partition by CONCAT(ENTITY_ID,RULE_ID) order by EFF_TO_DT desc) rn from FCORE_IDIAS.FOND_BIN_ACCT_EXCLUSION_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			) a		
			where rn=1
		--END
		--ELSE
		--BEGIN
			------Delete
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		

			delete from STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF 
			where CONCAT(ENTITY_ID,RULE_ID) in (
				select distinct CONCAT(ENTITY_ID,RULE_ID) from STAG_ID.STAG_BIN_ACCOUNT_CONFIG_ALL where ACTION='D' AND ENTITY_ID IN ('IAC','IAS','IAI')
			)
		
			------Update/Insert
		SET @V_DESCRIPTION	= 'UPDATE/INSERT STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		

			delete from STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF 
			where CONCAT(ENTITY_ID,RULE_ID) in (
			select distinct CONCAT(ENTITY_ID,RULE_ID) from STAG_ID.STAG_BIN_ACCOUNT_CONFIG_ALL where ACTION in ('I','U') AND ENTITY_ID IN ('IAC','IAS','IAI')
			);

			--declare @batch varchar(20)='20210301'
		SET @V_DESCRIPTION	= 'INSERT STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		

			insert into STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF 
			(ENTITY_ID, RULE_ID, EXCL_FIELD1, EXCL_FIELD1_COND, EXCL_FIELD2, EXCL_FIELD2_COND, EXCL_FLAG, DESCRIPTION, [ACTION], USER_PROFILE, UPDATE_DATE, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
			select 
			ENTITY_ID, RULE_ID, EXCL_FIELD1, EXCL_FIELD1_COND, EXCL_FIELD2, EXCL_FIELD2_COND, EXCL_FLAG, DESCRIPTION, [ACTION], USER_PROFILE, UPDATE_DATE, 
			@BATCH_MASTER_ID BATCH_MASTER_ID,
			@BATCH_RUN_ID BATCH_RUN_ID,
			@JOB_MASTER_ID JOB_MASTER_ID,
			@JOB_RUN_ID JOB_RUN_ID,
			left(CAST(@batch AS VARCHAR),6) BATCHDATE,
			GETDATE() ETL_PROCESS_DATE_TIME
			from STAG_ID.STAG_BIN_ACCOUNT_CONFIG_ALL
			where ACTION in ('I','U')
		--END	
		--SET @V_TBLSTS=1
		
		--[2]==CHECK PORTOFOLIO CONFIG
		--SET @V_TBLSTS=(SELECT COUNT(*) FROM STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_DQ_DDLREF)
		--=============================PORTOFOLIO CONFIG===========================
		SET @V_DESCRIPTION	= 'INSERT STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		
		--IF @V_TBLSTS<1 
		--BEGIN
		    -----Initial Load
			TRUNCATE TABLE STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_DQ_DDLREF;
			
			insert into STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_DQ_DDLREF
			(ENTITY_ID, 
			PCA_CATEGORY, 
			PORTFOLIO_ID, 
			PORTFOLIO_RATIO, 
			[ACTION], 
			USER_PROFILE, 
			UPDATE_DATE
			)
			select 
			ENTITY_ID, PCA_CATEGORY, PORTFOLIO_ID, PORTFOLIO_RATIO,'I','ETL5',@batch
			from (
			select *,row_number() over (partition by CONCAT(ENTITY_ID,PORTFOLIO_ID) order by EFF_TO_DT desc) rn from FCORE_ID.FOND_CATEGORY_PORTFOLIO_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			UNION ALL
			select *,row_number() over (partition by CONCAT(ENTITY_ID,PORTFOLIO_ID) order by EFF_TO_DT desc) rn from FCORE_IDIAC.FOND_CATEGORY_PORTFOLIO_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			UNION ALL
			select *,row_number() over (partition by CONCAT(ENTITY_ID,PORTFOLIO_ID) order by EFF_TO_DT desc) rn from FCORE_IDIAS.FOND_CATEGORY_PORTFOLIO_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			) a	
			where rn=1
		--END
		--ELSE
		--BEGIN
			------Delete
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
		
			delete from 
			STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_DQ_DDLREF 
			where CONCAT(ENTITY_ID, PCA_CATEGORY, PORTFOLIO_ID) in (
			select distinct CONCAT(ENTITY_ID, PCA_CATEGORY, PORTFOLIO_ID) from STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_ALL where ACTION='D'
			)
		
			------Update/Insert
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

			delete from STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_DQ_DDLREF 
			where CONCAT(ENTITY_ID, PCA_CATEGORY, PORTFOLIO_ID) in (
			select distinct CONCAT(ENTITY_ID, PCA_CATEGORY, PORTFOLIO_ID) from STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_ALL where ACTION in ('I','U')
			);
		SET @V_DESCRIPTION	= 'INSERT STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
		
			--declare @batch varchar(20)='20210301'
			insert into STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_DQ_DDLREF 
			(ENTITY_ID, 
			PCA_CATEGORY, 
			PORTFOLIO_ID, 
			PORTFOLIO_RATIO, 
			[ACTION], 
			USER_PROFILE, 
			UPDATE_DATE, 
			BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
			SELECT 
				ENTITY_ID, PCA_CATEGORY, PORTFOLIO_ID, PORTFOLIO_RATIO, [ACTION], USER_PROFILE, UPDATE_DATE,
				@BATCH_MASTER_ID BATCH_MASTER_ID,
				@BATCH_RUN_ID BATCH_RUN_ID,
				@JOB_MASTER_ID JOB_MASTER_ID,
				@JOB_RUN_ID JOB_RUN_ID,
				left(CAST(@batch AS VARCHAR),6) BATCHDATE,
				GETDATE() ETL_PROCESS_DATE_TIME
			from STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_ALL
			where ACTION in ('I','U')
		--END
		--SET @V_TBLSTS=1
		
		--[3]==CHECK EXCLUSION CONFIG
		--SET @V_TBLSTS=(SELECT COUNT(*) FROM STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF)
		--=============================EXCLUSION CONFIG===========================
		SET @V_DESCRIPTION	= 'INSERT STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

		--IF @V_TBLSTS<1 
		--BEGIN
		    -----Initial Load
			TRUNCATE TABLE STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF;

			insert into STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF
			(ENTITY_ID,
			RULE_ID,
			EXCL_FIELD1,
			EXCL_FIELD1_COND,
			EXCL_FIELD2,
			EXCL_FIELD2_COND,
			EXCL_FLAG,
			DESCRIPTION,
			RECONCILIATION_IND,
			[ACTION],
			USER_PROFILE,
			UPDATE_DATE
			)
			select 
			ENTITY_ID,
			RULE_ID,
			EXCL_FIELD1,
			EXCL_FIELD1_COND,
			EXCL_FIELD2,
			EXCL_FIELD2_COND,
			EXCL_FLG,
			EXCL_SUMMARY_DESC,
			RECONCILIATION_IND,
			'I' AS [ACTION],
			'ETL5' AS USER_PROFILE,
			@batch
			from (
			select *,row_number() over (partition by CONCAT(ENTITY_ID,RULE_ID) order by EFF_TO_DT desc) rn from FCORE_ID.FOND_EXCLUSION_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			UNION ALL
			select *,row_number() over (partition by CONCAT(ENTITY_ID,RULE_ID) order by EFF_TO_DT desc) rn from FCORE_IDIAC.FOND_EXCLUSION_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			UNION ALL
			select *,row_number() over (partition by CONCAT(ENTITY_ID,RULE_ID) order by EFF_TO_DT desc) rn from FCORE_IDIAS.FOND_EXCLUSION_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			) a	
			where rn=1
		--END
		--ELSE
		--BEGIN
			------Delete
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
		
			delete from 
			STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF 
			where CONCAT(ENTITY_ID, RULE_ID, EXCL_FIELD2_COND, EXCL_FIELD1_COND) in (
			select distinct CONCAT(ENTITY_ID, RULE_ID, EXCL_FIELD2_COND, EXCL_FIELD1_COND) from STAG_ID.STAG_EXCLUSION_CONFIG_ALL where ACTION='D'
			)
		
			------Update/Insert
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
		
			delete from STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF 
			where CONCAT(ENTITY_ID, RULE_ID, EXCL_FIELD2_COND, EXCL_FIELD1_COND) in (
			select distinct CONCAT(ENTITY_ID, RULE_ID, EXCL_FIELD2_COND, EXCL_FIELD1_COND) from STAG_ID.STAG_EXCLUSION_CONFIG_ALL where ACTION in ('I','U')
			);

			--declare @batch varchar(20)='20210301'
		SET @V_DESCRIPTION	= 'INSERT STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
		
			insert into STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF 
			(ENTITY_ID,
			RULE_ID,
			EXCL_FIELD1,
			EXCL_FIELD1_COND,
			EXCL_FIELD2,
			EXCL_FIELD2_COND,
			EXCL_FLAG,
			DESCRIPTION,
			RECONCILIATION_IND,
			[ACTION],
			USER_PROFILE,
			UPDATE_DATE,
			BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
			SELECT 
				ENTITY_ID, RULE_ID, EXCL_FIELD1, EXCL_FIELD1_COND, EXCL_FIELD2, EXCL_FIELD2_COND, EXCL_FLAG, DESCRIPTION, RECONCILIATION_IND, [ACTION], USER_PROFILE, UPDATE_DATE,
				@BATCH_MASTER_ID BATCH_MASTER_ID,
				@BATCH_RUN_ID BATCH_RUN_ID,
				@JOB_MASTER_ID JOB_MASTER_ID,
				@JOB_RUN_ID JOB_RUN_ID,
				left(CAST(@batch AS VARCHAR),6) BATCHDATE,
				GETDATE() ETL_PROCESS_DATE_TIME
			from STAG_ID.STAG_EXCLUSION_CONFIG_ALL
			where ACTION in ('I','U')
		--END
		--SET @V_TBLSTS=1
		
		
		--[4]==CHECK ALLOCATION CONFIG
		--SET @V_TBLSTS=(SELECT COUNT(*) FROM STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF)
		--=============================ALLOCATION CONFIG===========================
		SET @V_DESCRIPTION	= 'INSERT STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

		--IF @V_TBLSTS<1 
		--BEGIN
		    -----Initial Load
			TRUNCATE TABLE STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF;

			insert into STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF
			(ENTITY_ID,
			ACCNT_CODE,
			FUND_CD,
			EXPENSE_COMPONENT,
			ALLOCATION_DRIVER,
			[ACTION],
			USER_PROFILE,
			UPDATE_DATE
			)
			select 
			ENTITY_ID,
			ACCT_CD,
			T0,
			EXPENSE_COMP_IND,
			POLICY_ALLOC_DRIVER,'I','ETL5',@batch
			from (
				select *,row_number() over (partition by CONCAT(ENTITY_ID, ACCT_CD, T0, EXPENSE_COMP_IND) order by EFF_TO_DT desc) rn from FCORE_ID.FOND_ALLOC_DRIVER_CONFIG	where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *,row_number() over (partition by CONCAT(ENTITY_ID, ACCT_CD, T0, EXPENSE_COMP_IND) order by EFF_TO_DT desc) rn from FCORE_IDIAC.FOND_ALLOC_DRIVER_CONFIG	where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *,row_number() over (partition by CONCAT(ENTITY_ID, ACCT_CD, T0, EXPENSE_COMP_IND) order by EFF_TO_DT desc) rn from FCORE_IDIAS.FOND_ALLOC_DRIVER_CONFIG	where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			) a	
			where rn=1
		--END
		--ELSE
		--BEGIN
			------Delete
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
		
			delete from 
			STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF 
			where CONCAT(ENTITY_ID, ACCNT_CODE, FUND_CD, EXPENSE_COMPONENT, ALLOCATION_DRIVER) in (
			select distinct CONCAT(ENTITY_ID, ACCNT_CODE, FUND_CD, EXPENSE_COMPONENT, ALLOCATION_DRIVER) from STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_ALL where ACTION='D'
			)
		
			------Update/Insert
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

			delete from STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF 
			where CONCAT(ENTITY_ID, ACCNT_CODE, FUND_CD, EXPENSE_COMPONENT, ALLOCATION_DRIVER) in (
			select distinct CONCAT(ENTITY_ID, ACCNT_CODE, FUND_CD, EXPENSE_COMPONENT, ALLOCATION_DRIVER) from STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_ALL where ACTION in ('I','U')
			);
			--declare @batch varchar(20)='20210301'
		SET @V_DESCRIPTION	= 'INSERT INTO STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

			insert into STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF 
			(ENTITY_ID,
			ACCNT_CODE,
			FUND_CD,
			EXPENSE_COMPONENT,
			ALLOCATION_DRIVER,
			[ACTION],
			USER_PROFILE,
			UPDATE_DATE,
			BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
			SELECT 
				ENTITY_ID, ACCNT_CODE, FUND_CD, EXPENSE_COMPONENT, ALLOCATION_DRIVER, [ACTION], USER_PROFILE, UPDATE_DATE,
				@BATCH_MASTER_ID BATCH_MASTER_ID,
				@BATCH_RUN_ID BATCH_RUN_ID,
				@JOB_MASTER_ID JOB_MASTER_ID,
				@JOB_RUN_ID JOB_RUN_ID,
				left(CAST(@batch AS VARCHAR),6) BATCHDATE,
				GETDATE() ETL_PROCESS_DATE_TIME
			from STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_ALL
			where ACTION in ('I','U')
		--END
		--SET @V_TBLSTS=1
		
		--[5]==CHECK CLASSIFICATION/EXPENSE CONFIG
		--SET @V_TBLSTS=(SELECT COUNT(*) FROM STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF)
		--=============================ALLOCATION CONFIG===========================
		SET @V_DESCRIPTION	= 'INSERT INTO STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

		--IF @V_TBLSTS<1 
		--BEGIN
		    -----Initial Load
			TRUNCATE TABLE STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF;

			insert into STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF
			(ENTITY_ID,
			SUN_CD,
			FUND_TO,
			EXPENSE_IND,
			REINS_FLG,
			PRE_COV_PCT,
			NON_ATTR_PCT,
			ACQUISTION_PCT,
			MAINTAIN_PCT,
			NON_PREM_MAINTAIN_PCT,
			PROFIT_MARGIN,
			PCA_CATEGORY,
			INTERCOMP_IND,
			[ACTION],
			USER_PROFILE,
			UPDATE_DATE
			)
			select 
			ENTITY_ID,
			SUN_CD,
			T0,
			EXPENSE_IND,
			RI_FLG,
			PRE_COV_PCT,
			NON_ATTR_PCT,
			ACQUISTION_PCT,
			MAINTAIN_PCT,
			NON_PREM_MAINTAIN_PCT,
			PROFIT_MARGIN,
			PCA_CATEGORY,
			INTERCOMP_IND,'I','ETL5',@batch
			from (
				select *,row_number() over (partition by ENTITY_ID+SUN_CD+T0+EXPENSE_IND+RI_FLG order by EFF_TO_DT desc) rn from FCORE_ID.FOND_EXPENSE_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *,row_number() over (partition by ENTITY_ID+SUN_CD+T0+EXPENSE_IND+RI_FLG order by EFF_TO_DT desc) rn from FCORE_IDIAC.FOND_EXPENSE_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *,row_number() over (partition by ENTITY_ID+SUN_CD+T0+EXPENSE_IND+RI_FLG order by EFF_TO_DT desc) rn from FCORE_IDIAS.FOND_EXPENSE_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			) a	
			where rn=1
		--END
		--ELSE
		--BEGIN
			------Delete
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

			delete from 
			STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF 
			where CONCAT(ENTITY_ID, SUN_CD, EXPENSE_IND, PRE_COV_PCT, NON_ATTR_PCT, ACQUISTION_PCT, MAINTAIN_PCT, PROFIT_MARGIN) in (
			select distinct CONCAT(ENTITY_ID, SUN_CD, EXPENSE_IND, PRE_COV_PCT, NON_ATTR_PCT, ACQUISTION_PCT, MAINTAIN_PCT, PROFIT_MARGIN) from STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_ALL where ACTION='D'
			)
		
			------Update/Insert
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

			delete from STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF 
			where CONCAT(ENTITY_ID, SUN_CD, EXPENSE_IND, PRE_COV_PCT, NON_ATTR_PCT, ACQUISTION_PCT, MAINTAIN_PCT, PROFIT_MARGIN) in (
			select distinct CONCAT(ENTITY_ID, SUN_CD, EXPENSE_IND, PRE_COV_PCT, NON_ATTR_PCT, ACQUISTION_PCT, MAINTAIN_PCT, PROFIT_MARGIN) from STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_ALL where ACTION in ('I','U')
			);
			--declare @batch varchar(20)='20210301'
		SET @V_DESCRIPTION	= 'INSERT STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());		
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

			insert into STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF 
			(ENTITY_ID,
			SUN_CD,
			FUND_TO,
			EXPENSE_IND,
			REINS_FLG,
			PRE_COV_PCT,
			NON_ATTR_PCT,
			ACQUISTION_PCT,
			MAINTAIN_PCT,
			NON_PREM_MAINTAIN_PCT,
			PROFIT_MARGIN,
			PCA_CATEGORY,
			INTERCOMP_IND,
			[ACTION],
			USER_PROFILE,
			UPDATE_DATE,
			BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
			SELECT 
				ENTITY_ID, SUN_CD, FUND_TO, EXPENSE_IND, REINS_FLG, PRE_COV_PCT, NON_ATTR_PCT, ACQUISTION_PCT, MAINTAIN_PCT, NON_PREM_MAINTAIN_PCT, PROFIT_MARGIN, PCA_CATEGORY, INTERCOMP_IND, [ACTION], USER_PROFILE, UPDATE_DATE,
				@BATCH_MASTER_ID BATCH_MASTER_ID,
				@BATCH_RUN_ID BATCH_RUN_ID,
				@JOB_MASTER_ID JOB_MASTER_ID,
				@JOB_RUN_ID JOB_RUN_ID,
				left(CAST(@batch AS VARCHAR),6) BATCHDATE,
				GETDATE() ETL_PROCESS_DATE_TIME
			from STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_ALL
			where ACTION in ('I','U')
		--END
		--SET @V_TBLSTS=1
		
		--[6]==CHECK PRE-ALLOCATED CONFIG
		--SET @V_TBLSTS=(SELECT COUNT(*) FROM STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_DQ_DDLREF)
		--=============================PRE-ALLOCATED CONFIG===========================
		SET @V_DESCRIPTION	= 'INSERT STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

		--IF @V_TBLSTS<1 
		--BEGIN
		    -----Initial Load
			TRUNCATE TABLE STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_DQ_DDLREF;

			insert into
			STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_DQ_DDLREF (
			ENTITY_ID, SUN_CD,
			PASS_THROUGH_IND,
			[ACTION],
			USER_PROFILE,
			UPDATE_DATE )
			select
				ENTITY_ID, SUN_CD, PASS_THROUGH_IND, 'I', 'ETL5', @batch
			from (
				select *, row_number() over (partition by ENTITY_ID+SUN_CD + PASS_THROUGH_IND order by EFF_TO_DT desc) rn from FCORE_ID.FOND_PRE_ALLOC_COMM_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *, row_number() over (partition by ENTITY_ID+SUN_CD + PASS_THROUGH_IND order by EFF_TO_DT desc) rn from FCORE_IDIAC.FOND_PRE_ALLOC_COMM_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *, row_number() over (partition by ENTITY_ID+SUN_CD + PASS_THROUGH_IND order by EFF_TO_DT desc) rn from FCORE_IDIAS.FOND_PRE_ALLOC_COMM_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			) a where  rn = 1
			
		--END
		--ELSE
		--BEGIN
			------Delete
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

			delete from 
			STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_DQ_DDLREF 
			where CONCAT(ENTITY_ID, SUN_CD, PASS_THROUGH_IND) in (
			select distinct CONCAT(ENTITY_ID, SUN_CD, PASS_THROUGH_IND) from STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_ALL where ACTION='D'
			)
		
			------Update/Insert
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

			delete from STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_DQ_DDLREF 
			where CONCAT(ENTITY_ID, SUN_CD, PASS_THROUGH_IND) in (
			select distinct CONCAT(ENTITY_ID, SUN_CD, PASS_THROUGH_IND) from STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_ALL where ACTION in ('I','U')
			);

			--declare @batch varchar(20)='20210301'
		SET @V_DESCRIPTION	= 'INSERT INTO STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

			insert into STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_DQ_DDLREF 
			(ENTITY_ID,
			SUN_CD,
			PASS_THROUGH_IND,
			[ACTION],
			USER_PROFILE,
			UPDATE_DATE,
			BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
			SELECT 
				ENTITY_ID, SUN_CD, PASS_THROUGH_IND, [ACTION], USER_PROFILE, UPDATE_DATE,
				@BATCH_MASTER_ID BATCH_MASTER_ID,
				@BATCH_RUN_ID BATCH_RUN_ID,
				@JOB_MASTER_ID JOB_MASTER_ID,
				@JOB_RUN_ID JOB_RUN_ID,
				left(CAST(@batch AS VARCHAR),6) BATCHDATE,
				GETDATE() ETL_PROCESS_DATE_TIME
			from STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_ALL
			where ACTION in ('I','U')
		--END
		--SET @V_TBLSTS=1
		
		--[7]==CHECK RI CONFIG
		--SET @V_TBLSTS=(SELECT COUNT(*) FROM STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_DQ_DDLREF)
		--=============================RI CONFIG===========================
		SET @V_DESCRIPTION	= 'INSERT INTO STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

		--IF @V_TBLSTS<1 
		--BEGIN
		    -----Initial Load
			TRUNCATE TABLE STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_DQ_DDLREF;

			insert into
				STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_DQ_DDLREF (
				ENTITY_ID,
				ACCNT_CODE,
				UNDERLYING_PCT,
				REINS_PCT,
				[ACTION],
				USER_PROFILE,
				UPDATE_DATE )
			select
				ENTITY_ID, ACCT_CD, UNDERLYING_PCT, RI_PCT, 'I', 'ETL5', @batch
			from (
				select *, row_number() over (partition by concat(ENTITY_ID, ACCT_CD, UNDERLYING_PCT, RI_PCT) order by EFF_TO_DT desc) rn from FCORE_ID.FOND_RI_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *, row_number() over (partition by concat(ENTITY_ID, ACCT_CD, UNDERLYING_PCT, RI_PCT) order by EFF_TO_DT desc) rn from FCORE_IDIAC.FOND_RI_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *, row_number() over (partition by concat(ENTITY_ID, ACCT_CD, UNDERLYING_PCT, RI_PCT) order by EFF_TO_DT desc) rn from FCORE_IDIAS.FOND_RI_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			) a
			where rn = 1
		--END
		--ELSE
		--BEGIN
			------Delete
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

			delete from 
			STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_DQ_DDLREF 
			where CONCAT(ENTITY_ID, ACCNT_CODE, UNDERLYING_PCT, REINS_PCT) in (
			select distinct CONCAT(ENTITY_ID, ACCNT_CODE, UNDERLYING_PCT, REINS_PCT) from STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_ALL where ACTION='D'
			)
		
			------Update/Insert
		SET @V_DESCRIPTION	= 'UPDATE/INSERT FROM STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

			delete from STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_DQ_DDLREF 
			where CONCAT(ENTITY_ID, ACCNT_CODE, UNDERLYING_PCT, REINS_PCT) in (
			select distinct CONCAT(ENTITY_ID, ACCNT_CODE, UNDERLYING_PCT, REINS_PCT) from STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_ALL where ACTION in ('I','U')
			);
			--declare @batch varchar(20)='20210301'
			insert into STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_DQ_DDLREF 
			(ENTITY_ID,
			ACCNT_CODE,
			UNDERLYING_PCT,
			REINS_PCT,
			[ACTION],
			USER_PROFILE,
			UPDATE_DATE,
			BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
			SELECT 
				ENTITY_ID, ACCNT_CODE, UNDERLYING_PCT, REINS_PCT, [ACTION], USER_PROFILE, UPDATE_DATE,
				@BATCH_MASTER_ID BATCH_MASTER_ID,
				@BATCH_RUN_ID BATCH_RUN_ID,
				@JOB_MASTER_ID JOB_MASTER_ID,
				@JOB_RUN_ID JOB_RUN_ID,
				left(CAST(@batch AS VARCHAR),6) BATCHDATE,
				GETDATE() ETL_PROCESS_DATE_TIME
			from STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_ALL
			where ACTION in ('I','U')
		--END
		--SET @V_TBLSTS=1	


		--=============================PAR VFA CONFIG=================================================
		SET @V_DESCRIPTION	= 'INSERT INTO STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

		--IF @V_TBLSTS<1 
		--BEGIN
			-----Initial Load
			TRUNCATE TABLE STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_DQ_DDLREF;
			
			insert into STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_DQ_DDLREF
			(
			ENTITY_ID,
			RULE_ID,
			T0,
			BENF_CD,
			PROD_CD,
			CASHFLOW_TYPE_L2,
			VFA_CASHFLOW_TYPE,
			VFA_CASHFLOW_SIGNAGE,
			[ACTION],
			USER_PROFILE,
			UPDATE_DT
			)
			select 
			ENTITY_ID, RULE_ID, T0, BENEFIT_CD AS BENF_CD, PRODUCT_CD AS PROD_CD, CASHFLOW_TYPE_L2, VFA_CASHFLOW_TYPE, VFA_CASHFLOW_SIGNAGE, 'I' AS [ACTION], 'ETL5' AS USER_PROFILE, @batch
			from (
				select *,row_number() over (partition by CONCAT(ENTITY_ID,RULE_ID) order by EFF_TO_DT desc) rn from FCORE_ID.FOND_PAR_VFA_OFFSET_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *,row_number() over (partition by CONCAT(ENTITY_ID,RULE_ID) order by EFF_TO_DT desc) rn from FCORE_IDIAC.FOND_PAR_VFA_OFFSET_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *,row_number() over (partition by CONCAT(ENTITY_ID,RULE_ID) order by EFF_TO_DT desc) rn from FCORE_IDIAS.FOND_PAR_VFA_OFFSET_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			) a		
			where rn=1	

			------Delete
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
		
			delete from STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_DQ_DDLREF 
			where CONCAT(ENTITY_ID,RULE_ID) in (
				select distinct CONCAT(ENTITY_ID,RULE_ID) from STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_ALL where ACTION='D' AND ENTITY_ID IN ('IAC','IAS','IAI')
			);

			------Update/Insert
		SET @V_DESCRIPTION	= 'UPDATE/INSERT STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
		
			delete from STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_DQ_DDLREF 
			where CONCAT(ENTITY_ID,RULE_ID) in (
			select distinct CONCAT(ENTITY_ID,RULE_ID) from STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_ALL where ACTION in ('I','U') AND ENTITY_ID IN ('IAC','IAS','IAI')
			);
			
			--declare @batch varchar(20)='20210301'
		SET @V_DESCRIPTION	= 'INSERT STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
		
			insert into STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_DQ_DDLREF 
			(ENTITY_ID, RULE_ID, T0, BENF_CD, PROD_CD, CASHFLOW_TYPE_L2, VFA_CASHFLOW_TYPE, VFA_CASHFLOW_SIGNAGE, ACTION, USER_PROFILE, UPDATE_DT, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
			select 
			ENTITY_ID, RULE_ID, T0, BENF_CD, PROD_CD, CASHFLOW_TYPE_L2, VFA_CASHFLOW_TYPE, VFA_CASHFLOW_SIGNAGE, ACTION, USER_PROFILE, UPDATE_DT, 
			@BATCH_MASTER_ID BATCH_MASTER_ID,
			@BATCH_RUN_ID BATCH_RUN_ID,
			@JOB_MASTER_ID JOB_MASTER_ID,
			@JOB_RUN_ID JOB_RUN_ID,
			left(CAST(@batch AS VARCHAR),6) BATCHDATE,
			GETDATE() ETL_PROCESS_DATE_TIME
			from STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_ALL
			where ACTION in ('I','U');
			
			
		--TRUNCATE INSERT INTO FOND_ID.FOND_ETL5_EXCLUSION_CONFIG FROM STAG_EXCLUSION_CONFIG_DQ_DDLREF
		SET @V_DESCRIPTION	= 'TRUNCATE INSERT TABLE FROM STAG_ID.FOND_ETL5_EXCLUSION_CONFIG : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

		TRUNCATE TABLE FOND_ID.FOND_ETL5_EXCLUSION_CONFIG;
		
		INSERT INTO FOND_ID.FOND_ETL5_EXCLUSION_CONFIG
		  (
		    ENTITY_ID,
		    EXCL_FIELD1,
		    EXCL_FIELD1_COND,
		    EXCL_FIELD2,
		    EXCL_FIELD2_COND,
		    EXCL_FLG,
		    EXCL_SUMMARY_DESC,
			RULE_ID,
		    [ACTION],
		    RECONCILIATION_IND,
		    USER_PROFILE, UPDATE_DATE, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME
		  )
		SELECT
		  ENTITY_ID,
		  EXCL_FIELD1,
		  EXCL_FIELD1_COND,
		  EXCL_FIELD2,
		  EXCL_FIELD2_COND,
		  EXCL_FLAG AS EXCL_FLG,
		  DESCRIPTION AS EXCL_SUMMARY_DESC,
		  RULE_ID,
		  [ACTION],
		  RECONCILIATION_IND,
		  USER_PROFILE,
		  UPDATE_DATE,
		  @BATCH_MASTER_ID BATCH_MASTER_ID,
		  @BATCH_RUN_ID BATCH_RUN_ID,
		  @JOB_MASTER_ID JOB_MASTER_ID,
		  @JOB_RUN_ID JOB_RUN_ID,
		  left(CAST(@batch AS VARCHAR),6) BATCHDATE,
		  GETDATE() ETL_PROCESS_DATE_TIME
		FROM STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF;

		--TRUNCATE INSERT INTO FOND_ID.FOND_ETL5_BIN_ACCOUNT_CONFIG FROM STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF
		SET @V_DESCRIPTION	= 'TRUNCATE INSERT TABLE FROM FOND_ID.FOND_ETL5_BIN_ACCOUNT_CONFIG : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	

		TRUNCATE TABLE FOND_ID.FOND_ETL5_BIN_ACCOUNT_CONFIG;
		
		INSERT INTO FOND_ID.FOND_ETL5_BIN_ACCOUNT_CONFIG
		  (
		    ENTITY_ID,
		    EXCL_FIELD1,
		    EXCL_FIELD1_COND,
		    EXCL_FIELD2,
		    EXCL_FIELD2_COND,
		    BIN_FLG,
		    BIN_EXCL_SUMMARY_DESC,
			RULE_ID,
		    [ACTION],
		    USER_PROFILE, UPDATE_DATE, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME
		  )
		SELECT
		  ENTITY_ID,
		  EXCL_FIELD1,
		  EXCL_FIELD1_COND,
		  EXCL_FIELD2,
		  EXCL_FIELD2_COND,
		  EXCL_FLAG AS BIN_FLG,
		  DESCRIPTION AS BIN_EXCL_SUMMARY_DESC,
		  RULE_ID,
		  [ACTION],
		  USER_PROFILE, UPDATE_DATE, 
		  @BATCH_MASTER_ID BATCH_MASTER_ID,
		  @BATCH_RUN_ID BATCH_RUN_ID,
		  @JOB_MASTER_ID JOB_MASTER_ID,
		  @JOB_RUN_ID JOB_RUN_ID,
		  left(CAST(@batch AS VARCHAR),6) BATCHDATE,
		  GETDATE() ETL_PROCESS_DATE_TIME
		FROM STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF;


		---------------------------- ETL5 LOGGING ----------------------------      
		SET @V_DESCRIPTION	= 'ETL5 LOGGING : ' + convert(varchar,@V_START,121);
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		PRINT @V_DESCRIPTION;
  		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
     	
		DECLARE @V_TOTAL_ROWS integer = 0;
		DECLARE @V_PERIOD nvarchar(10);
		--[1]
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF_EXTTB) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))
		
		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'STAG_ID.STAG_BIN_ACCOUNT_CONFIG_DQ_DDLREF_EXTTB'
		,@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);
		--[2]
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_DQ_DDLREF_EXTTB) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'STAG_ID.STAG_CATEGORY_PORTOFOLIO_CONFIG_DQ_DDLREF_EXTTB'
		,@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);
		--[3]
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF_EXTTB) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'STAG_ID.STAG_EXCLUSION_CONFIG_DQ_DDLREF_EXTTB'
		,@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);
		--[4]
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF_EXTTB) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF_EXTTB'
		,@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);

		--[5]
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF_EXTTB) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF_EXTTB'
		,@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);
	
		--[6]
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_DQ_DDLREF_EXTTB) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'STAG_ID.STAG_PRE_ALLOCATED_CONFIGURATION_TABLE_DQ_DDLREF_EXTTB'
		,@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);
	
		--[7]
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_DQ_DDLREF_EXTTB) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'STAG_ID.STAG_REINSURANCE_CONFIG_TABLE_DQ_DDLREF_EXTTB'
		,@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);
		
		--[8]
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_DQ_DDLREF_EXTTB) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'STAG_ID.STAG_PAR_VFA_OFFSET_CONFIG_DQ_DDLREF'
		,@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);		
	
		IF @@TRANCOUNT > 0
        COMMIT;


END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
                ROLLBACK;
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
END;

