CREATE PROC [FOND_ID].[USP_LOAD_ETL5_RHO_EXPENSE_ANALYSIS_REPORT] @batch [NVARCHAR](100),@JOBNAMESTR [NVARCHAR](2000) AS
BEGIN

	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'USP_LOAD_ETL5_RHO_EXPENSE_ANALYSIS_REPORT';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @PERIOD varchar(10);
	DECLARE @FIRST_PERIOD_YEAR varchar(10);
	SET @PERIOD = concat(left(convert(varchar(8), @batch),4), '0', substring(convert(varchar(8), @batch),5,2));
	SET @FIRST_PERIOD_YEAR = CONCAT(left(convert(varchar(8), @batch),4),'0',SUBSTRING(format(cast(DATEADD(Year,-1*DateDiff(Year,CONCAT(@batch,'01'),0),0) as date), 'yyyyMMdd'),5,2))
	
	------ START ABC ------
	
	DECLARE
    @BATCH_MASTER_ID    VARCHAR(20) = 0,
    @BATCH_RUN_ID       VARCHAR(20) = 0,
    @JOB_MASTER_ID      VARCHAR(20) = 0,
    @JOB_RUN_ID         VARCHAR(20) = 0,
    @GMT_START_DTTM     VARCHAR(20) = GETDATE();
	
	EXEC STAG_ID.USP_GetRunIdReturn
	  @JobName        = @JOBNAMESTR,
	  @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	  @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
	  @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
	  @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
	  @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
	  
	------END GET RUN ID DETAIL FROM ABC--------- 	
	
BEGIN TRY

	SET @V_START_DATE	= convert(date, concat(cast(@batch as varchar),'01')); 
	PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
	SET @V_START 	= convert(datetime,getDATE());
	
	SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
	PRINT	@V_DESCRIPTION;
	SET @V_SEQNO		= @V_SEQNO + 1;
	
	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	-----GENERATE EXPENSE ANALYSIS REPORT1 PROCESS -----
	
	SET @V_DESCRIPTION = 'Generate Config Table from ETL_CONFIG_MASTER: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
	
	SELECT 
		COLUMN_1 as ACCT_CD,
		COLUMN_2 as IDENTIFIER,
		COLUMN_3 as ACT_DESC,
		COLUMN_4 as CAT_1,
		COLUMN_5 as CAT_2,
		COLUMN_6 as CAT_3 
	INTO #EXPENSE_CONFIG
	FROM STAG_ID.ETL_CONFIG_MASTER WHERE CONFIG_NAME = 'CONFIG_ETL5_EXPENSE_ANALYSIS';

	-----GENERATE EXPENSE ANALYSIS REPORT1 PROCESS -----
	
	SET @V_DESCRIPTION = 'Generate Expense Analysis Report1 data and insert into table: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	DELETE FROM FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_REPORT WHERE BATCHDATE = @batch
	-- REPORT 1
INSERT INTO FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_REPORT
SELECT 'REPORT 1',
	   CAT_1,
	   CAT_3,		
	   CAT_2,
	   AMT_LOCAL_CCY,
	   NULL,
	   @BATCH_MASTER_ID AS BATCH_MASTER_ID,
	   @BATCH_RUN_ID AS BATCH_RUN_ID,
	   @JOB_MASTER_ID AS JOB_MASTER_ID,
	   @JOB_RUN_ID AS JOB_RUN_ID,
	   @batch AS BATCHDATE,
	   GETDATE() AS ETL_PROCESS_DATE_TIME
FROM(
SELECT  B.CAT_1, B.CAT_3, B.CAT_2, SUM(AMT_LOCAL_CCY) AMT_LOCAL_CCY 
FROM (
	SELECT 
		ACCT_CD,  
		SUM (AMT_LOCAL_CCY) AMT_LOCAL_CCY,
		CF
	FROM (
		SELECT 
			ACCT_CD, 
			CASE WHEN CASHFLOW_TYPE_L1 LIKE 'ACTUAL_XAC_OUT_INC%' THEN 'XAC_OUT'
				 WHEN CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXPES_INC%' THEN 'Actual OTH'
			END CF, 
			SUM(AMT_LOCAL_CCY) AMT_LOCAL_CCY
		FROM FCORE_ID.FOND_IFRS17_SUNGL_CLASSIFIED -- ETL5
		WHERE EXTRACT_PERIOD_YTD = @PERIOD 
		AND (CASHFLOW_TYPE_L1 LIKE 'ACTUAL_XAC_OUT_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC_SET%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXPES_INC%')
		GROUP BY ACCT_CD, CASHFLOW_TYPE_L1
		UNION ALL
		SELECT 
			SUN_CD ACCT_CD, 
			CASE WHEN CASHFLOW_TYPE_L1 LIKE 'ACTUAL_XAC_OUT_INC%' THEN 'XAC_OUT'
				 WHEN CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXPES_INC%' THEN 'Actual OTH'
			END CF, 
			SUM(AMT_RPT_CCY) AMT_LOCAL_CCY
		FROM FCORE_ID.FOND_PAS_GRANULAR_SL_ACF  -- ETL6
		WHERE VALID_FLG='Y' AND ACCT_PERIOD BETWEEN @FIRST_PERIOD_YEAR AND @PERIOD
		AND (CASHFLOW_TYPE_L1 LIKE 'ACTUAL_XAC_OUT_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC_SET%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXPES_INC%') AND SOURCE_CD_BY_SYS = 'ETL4DUP_CONTROL'
		GROUP BY SUN_CD, CASHFLOW_TYPE_L1
	)X
	GROUP BY ACCT_CD,CF
)A
LEFT JOIN #EXPENSE_CONFIG B ON A.ACCT_CD = B.ACCT_CD 
GROUP BY  B.CAT_1, B.CAT_3, B.CAT_2
--ORDER BY  B.CAT_1
) A



-----GENERATE EXPENSE ANALYSIS REPORT2 PROCESS -----
	
	SET @V_DESCRIPTION = 'Generate Expense Analysis Report2 data and insert into table: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	--DELETE FROM FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_REPORT2 WHERE BATCHDATE = @batch

	--Report 2
IF OBJECT_ID('#TEMP','U') IS NOT NULL DROP TABLE #TEMP;

	CREATE TABLE #TEMP WITH
	(	
		DISTRIBUTION = ROUND_ROBIN,
		CLUSTERED COLUMNSTORE INDEX
) AS
WITH TEMPS AS (
	SELECT 
		ACCT_CD,  
		SUM (AMT_LOCAL_CCY) AMT_LOCAL_CCY 
	FROM (
		SELECT 
			ACCT_CD, 
			SUM(AMT_LOCAL_CCY) AMT_LOCAL_CCY
		FROM FCORE_ID.FOND_IFRS17_SUNGL_CLASSIFIED -- ETL5
		WHERE EXTRACT_PERIOD_YTD = @PERIOD
		AND (CASHFLOW_TYPE_L1 LIKE 'ACTUAL_AC_CF_INC%')
		GROUP BY ACCT_CD, CASHFLOW_TYPE_L1
		UNION ALL
		SELECT 
			SUN_CD ACCT_CD, 
			SUM(AMT_RPT_CCY) AMT_LOCAL_CCY
		FROM FCORE_ID.FOND_PAS_GRANULAR_SL_ACF  -- ETL6
		WHERE VALID_FLG='Y' AND ACCT_PERIOD BETWEEN @FIRST_PERIOD_YEAR AND @PERIOD 
		AND CASHFLOW_TYPE_L2 LIKE ('ACTUAL_AC_CF_INC%')
		GROUP BY SUN_CD, CASHFLOW_TYPE_L1
	)X
	GROUP BY ACCT_CD
),
TOTAL AS (
	SELECT 'JOIN' JOINKEY,
	SUM(AMT_LOCAL_CCY) TOTAL
	FROM TEMPS
)
SELECT 
	CAT_2,
	CAST((A.AMT_LOCAL_CCY/B.TOTAL)*100 AS DECIMAL(28,2)) AS [PCT %]
FROM (
	SELECT CAT_2, SUM(AMT_LOCAL_CCY) AMT_LOCAL_CCY, 'JOIN' AS JOINKEY
	FROM TEMPS A
	LEFT JOIN #EXPENSE_CONFIG B ON A.ACCT_CD = B.ACCT_CD
	GROUP BY CAT_2
) A 
LEFT JOIN TOTAL B ON A.JOINKEY = B.JOINKEY
--ORDER BY CAT_2


INSERT INTO FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_REPORT
SELECT 'REPORT 2', NULL,NULL,CAT_2,NULL,[PCT %],
	   @BATCH_MASTER_ID AS BATCH_MASTER_ID,
	   @BATCH_RUN_ID AS BATCH_RUN_ID,
	   @JOB_MASTER_ID AS JOB_MASTER_ID,
	   @JOB_RUN_ID AS JOB_RUN_ID,
	   @batch AS BATCHDATE,
	   GETDATE() AS ETL_PROCESS_DATE_TIME
	  FROM #TEMP

-----GENERATE EXPENSE ANALYSIS REPORT3 PROCESS -----
	
	SET @V_DESCRIPTION = 'Generate Expense Analysis Report3 data and insert into table: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	--DELETE FROM FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_REPORT3 WHERE BATCHDATE = @batch

	--Report 3
INSERT INTO FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_REPORT
SELECT 'REPORT 3', CAT1, CAT3, CAT2, AMT_LOCAL_CCY,NULL,
	   @BATCH_MASTER_ID AS BATCH_MASTER_ID,
	   @BATCH_RUN_ID AS BATCH_RUN_ID,
	   @JOB_MASTER_ID AS JOB_MASTER_ID,
	   @JOB_RUN_ID AS JOB_RUN_ID,
	   @batch AS BATCHDATE,
	   GETDATE() AS ETL_PROCESS_DATE_TIME	
FROM(
SELECT CAT1, CAT3, CAT2, SUM(AMT_LOCAL_CCY) AMT_LOCAL_CCY
FROM (
	SELECT
		CASE WHEN B.ACCT_CD IS NOT NULL THEN CAT_1 END AS CAT1,
		CASE WHEN B.ACCT_CD IS NOT NULL THEN CAT_2 END AS CAT2,
		CASE WHEN B.ACCT_CD IS NOT NULL THEN CAT_3 END AS CAT3,
		AMT_LOCAL_CCY
	FROM FCORE_ID.FOND_IFRS17_SUNGL_CLASSIFIED A
	LEFT JOIN (SELECT * FROM #EXPENSE_CONFIG WHERE UPPER(CAT_3) LIKE 'OTHER%EXPENSES' ) B ON A.ACCT_CD = B.ACCT_CD
	WHERE EXTRACT_PERIOD_YTD = @PERIOD
	AND NEW_COA LIKE 'SCI7%'
)X
GROUP BY CAT1,CAT3,CAT2
--ORDER BY CAT1
) A


-----GENERATE CONTROL EXPENSE ANALYSIS REPORT1 PROCESS -----
	
	SET @V_DESCRIPTION = 'Generate Control Expense Analysis Report1 data and insert into table: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	DELETE FROM FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_CONTROL WHERE BATCHDATE = @batch

	--CONTROL 1
INSERT INTO FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_CONTROL
SELECT 'REPORT 1', SOURCE, GL_ACCOUNT_ID, [ETL7_AMOUNT], ETL5_AMOUNT, ETL6_AMOUNT, DIFF,
	   @BATCH_MASTER_ID AS BATCH_MASTER_ID,
	   @BATCH_RUN_ID AS BATCH_RUN_ID,
	   @JOB_MASTER_ID AS JOB_MASTER_ID,
	   @JOB_RUN_ID AS JOB_RUN_ID,
	   @batch AS BATCHDATE,
	   GETDATE() AS ETL_PROCESS_DATE_TIME	
FROM(
SELECT 
	A.SOURCE, 
	A.GL_ACCOUNT_ID, 
	A.FC_ACCOUNT_PERIOD_CLOSE_BAL_AMT [ETL7_AMOUNT], 
	B.ETL5_AMOUNT ETL5_AMOUNT, 
	C.ETL6_AMOUNT ETL6_AMOUNT, 
	A.FC_ACCOUNT_PERIOD_CLOSE_BAL_AMT - (COALESCE(B.ETL5_AMOUNT,0) + COALESCE(C.ETL6_AMOUNT,0)) DIFF
FROM (
	SELECT 
		SOURCE, 
		GL_ACCOUNT_ID, 
		SUM(FC_ACCOUNT_PERIOD_CLOSE_BAL_AMT) [FC_ACCOUNT_PERIOD_CLOSE_BAL_AMT]
	FROM(
		SELECT 
			SOURCE, 
			CASE WHEN GL_ACCOUNT_ID LIKE 'ACTUAL_XAC_OUT_INC%' THEN 'XAC_OUT'
						 WHEN GL_ACCOUNT_ID LIKE 'ACTUAL_OTH_EXP_INC%' OR GL_ACCOUNT_ID LIKE 'ACTUAL_OTH_EXPES_INC%' THEN 'Actual OTH'
			END GL_ACCOUNT_ID, 
			SUM(FC_ACCOUNT_PERIOD_CLOSE_BAL_AMT) FC_ACCOUNT_PERIOD_CLOSE_BAL_AMT 
		FROM FCORE_ID.FOND_GL_ACCOUNT_BALANCE_SEGMENT_IR
		WHERE ACCOUNT_PERIOD_START_DT = cast(left(@batch,4)+'-01-01' as date)
		AND ACCOUNT_PERIOD_END_DT = EOMONTH(cast(left(@batch,4)+'-'+right(left(@batch,6),2)+'-01' as date))
		AND  ENTITY_ID = 'IAI_A' 
		AND (GL_ACCOUNT_ID  LIKE 'ACTUAL_XAC_OUT_INC%' OR GL_ACCOUNT_ID LIKE 'ACTUAL_OTH_EXP_INC%' OR GL_ACCOUNT_ID LIKE 'ACTUAL_OTH_EXP_INC_SET%' OR GL_ACCOUNT_ID LIKE 'ACTUAL_OTH_EXPES_INC%')
		GROUP BY SOURCE, GL_ACCOUNT_ID
	)X
	GROUP BY SOURCE, GL_ACCOUNT_ID
)A
LEFT JOIN (
	SELECT 
		SOURCE,
		CF,
		SUM(AMT_LOCAL_CCY) ETL5_AMOUNT
	FROM(
		SELECT 
			CASE WHEN CASHFLOW_TYPE_L1 LIKE 'ACTUAL_XAC_OUT_INC%' THEN 'XAC_OUT'
					WHEN CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXPES_INC%' THEN 'Actual OTH'
			END CF, 
			SUM(AMT_LOCAL_CCY) AMT_LOCAL_CCY,
			'ETL5' AS SOURCE
		FROM FCORE_ID.FOND_IFRS17_SUNGL_CLASSIFIED
		WHERE EXTRACT_PERIOD_YTD = @PERIOD 
		AND (CASHFLOW_TYPE_L1 LIKE 'ACTUAL_XAC_OUT_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC_SET%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXPES_INC%')
		GROUP BY CASHFLOW_TYPE_L1
	)X
	GROUP BY SOURCE,CF 
)B ON A.SOURCE = B.SOURCE AND A.GL_ACCOUNT_ID = B.CF 
LEFT JOIN (
	SELECT 
		SOURCE,
		CF,
		SUM(AMT_RPT_CCY) ETL6_AMOUNT
	FROM(
		SELECT 
			CASE WHEN CASHFLOW_TYPE_L1 LIKE 'ACTUAL_XAC_OUT_INC%' THEN 'XAC_OUT'
					WHEN CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXPES_INC%' THEN 'Actual OTH'
			END CF, 
			SUM(AMT_RPT_CCY) AMT_RPT_CCY,
			'ETL6' AS SOURCE
		FROM FCORE_ID.FOND_PAS_GRANULAR_SL_ACF  -- ETL6
		WHERE VALID_FLG='Y' AND ACCT_PERIOD BETWEEN @FIRST_PERIOD_YEAR AND @PERIOD 
		AND (CASHFLOW_TYPE_L1 LIKE 'ACTUAL_XAC_OUT_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC_SET%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXPES_INC%') AND SOURCE_CD_BY_SYS = 'ETL4DUP_CONTROL'
		GROUP BY CASHFLOW_TYPE_L1
	)X
	GROUP BY SOURCE,CF 
) C ON A.SOURCE = C.SOURCE AND A.GL_ACCOUNT_ID = C.CF 
) A 



-----GENERATE CONTROL EXPENSE ANALYSIS REPORT2 PROCESS -----
	
	SET @V_DESCRIPTION = 'Generate Control Expense Analysis Report2 data and insert into table: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	--DELETE FROM FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_CONTROL2 WHERE BATCHDATE = @batch

--CONTROL 2
INSERT INTO FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_CONTROL
SELECT 'REPORT 2', SOURCE, GL_ACCOUNT_ID, [ETL7_AMOUNT], ETL5_AMOUNT, ETL6_AMOUNT, DIFF,
	   @BATCH_MASTER_ID AS BATCH_MASTER_ID,
	   @BATCH_RUN_ID AS BATCH_RUN_ID,
	   @JOB_MASTER_ID AS JOB_MASTER_ID,
	   @JOB_RUN_ID AS JOB_RUN_ID,
	   @batch AS BATCHDATE,
	   GETDATE() AS ETL_PROCESS_DATE_TIME	
FROM(
SELECT 
	A.SOURCE, 
	A.GL_ACCOUNT_ID, 
	A.FC_ACCOUNT_PERIOD_CLOSE_BAL_AMT [ETL7_AMOUNT], 
	B.ETL5_AMOUNT ETL5_AMOUNT, 
	C.ETL6_AMOUNT ETL6_AMOUNT, 
	A.FC_ACCOUNT_PERIOD_CLOSE_BAL_AMT - (COALESCE(B.ETL5_AMOUNT,0) + COALESCE(C.ETL6_AMOUNT,0)) DIFF
FROM (
	SELECT 
		SOURCE, 
		GL_ACCOUNT_ID, 
		SUM(FC_ACCOUNT_PERIOD_CLOSE_BAL_AMT) [FC_ACCOUNT_PERIOD_CLOSE_BAL_AMT]
	FROM (
		SELECT 
			SOURCE,
			REPLACE(REPLACE(GL_ACCOUNT_ID,'_FU',''),'_CU','') GL_ACCOUNT_ID,
			SUM(FC_ACCOUNT_PERIOD_CLOSE_BAL_AMT) FC_ACCOUNT_PERIOD_CLOSE_BAL_AMT 
		FROM FCORE_ID.FOND_GL_ACCOUNT_BALANCE_SEGMENT_IR
		WHERE ACCOUNT_PERIOD_START_DT = cast(left(@batch,4)+'-01-01' as date)
		AND ACCOUNT_PERIOD_END_DT = EOMONTH(cast(left(@batch,4)+'-'+right(left(@batch,6),2)+'-01' as date))
		AND  ENTITY_ID = 'IAI_A' 
		AND (GL_ACCOUNT_ID  LIKE 'ACTUAL_AC_CF_INC%' )
		GROUP BY SOURCE, GL_ACCOUNT_ID
	)X
	GROUP BY SOURCE, GL_ACCOUNT_ID
)A
LEFT JOIN (
	SELECT 
		'ETL5' AS SOURCE,
		CASHFLOW_TYPE_L1, 
		SUM(AMT_LOCAL_CCY) ETL5_AMOUNT
	FROM FCORE_ID.FOND_IFRS17_SUNGL_CLASSIFIED -- ETL5
	WHERE EXTRACT_PERIOD_YTD = @PERIOD 
	AND (CASHFLOW_TYPE_L1 LIKE 'ACTUAL_AC_CF_INC%')
	GROUP BY CASHFLOW_TYPE_L1
)B ON A.SOURCE = B.SOURCE AND A.GL_ACCOUNT_ID = B.CASHFLOW_TYPE_L1 
LEFT JOIN (
	SELECT 
		'ETL6' AS SOURCE,
		CASHFLOW_TYPE_L1, 
		SUM(AMT_RPT_CCY) ETL6_AMOUNT
	FROM FCORE_ID.FOND_PAS_GRANULAR_SL_ACF  -- ETL6
	WHERE VALID_FLG='Y' AND ACCT_PERIOD BETWEEN @FIRST_PERIOD_YEAR AND @PERIOD 
	AND CASHFLOW_TYPE_L2 LIKE ('ACTUAL_AC_CF_INC%')
	GROUP BY CASHFLOW_TYPE_L1
) C ON A.SOURCE = C.SOURCE AND A.GL_ACCOUNT_ID = C.CASHFLOW_TYPE_L1 
) A




-----GENERATE COMPLETENESS EXPENSE ANALYSIS REPORT1 PROCESS -----
	
	SET @V_DESCRIPTION = 'Generate Completeness Expense Analysis Report1 data and insert into table: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	DELETE FROM FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_COMPLETENESS WHERE BATCHDATE = @batch

	--COMPLETENESS 1 --
INSERT INTO FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_COMPLETENESS
SELECT  'REPORT 1', ACCT_CD, CASE WHEN A.ACCT_CD = B.IFRS4_SUN_CD THEN 'YES' ELSE 'NO' END [SUNGL_MF_CHECKING],
		@BATCH_MASTER_ID AS BATCH_MASTER_ID,
		@BATCH_RUN_ID AS BATCH_RUN_ID,
		@JOB_MASTER_ID AS JOB_MASTER_ID,
		@JOB_RUN_ID AS JOB_RUN_ID,
		@batch AS BATCHDATE,
		GETDATE() AS ETL_PROCESS_DATE_TIME 
FROM (
	SELECT 
		ACCT_CD
	FROM FCORE_ID.FOND_IFRS17_SUNGL_CLASSIFIED -- ETL5
	WHERE EXTRACT_PERIOD_YTD = @PERIOD 
	AND (CASHFLOW_TYPE_L1 LIKE 'ACTUAL_XAC_OUT_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC_SET%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXPES_INC%')
	GROUP BY ACCT_CD
	UNION
	SELECT 
		SUN_CD ACCT_CD
	FROM FCORE_ID.FOND_PAS_GRANULAR_SL_ACF  -- ETL6
	WHERE VALID_FLG='Y' AND ACCT_PERIOD BETWEEN @FIRST_PERIOD_YEAR AND @PERIOD 
	AND (CASHFLOW_TYPE_L1 LIKE 'ACTUAL_XAC_OUT_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXP_INC_SET%' OR CASHFLOW_TYPE_L1 LIKE 'ACTUAL_OTH_EXPES_INC%') AND SOURCE_CD_BY_SYS = 'ETL4DUP_CONTROL'
	GROUP BY SUN_CD
)A 
LEFT JOIN (SELECT IFRS4_SUN_CD FROM [STAG_ID].[STAG_CONFIG_SUNGL_MF] WHERE BATCHDATE = @batch GROUP BY IFRS4_SUN_CD ) B ON A.ACCT_CD =  B.IFRS4_SUN_CD


-----GENERATE COMPLETENESS EXPENSE ANALYSIS REPORT2 PROCESS -----
	
	SET @V_DESCRIPTION = 'Generate Completeness Expense Analysis Report2 data and insert into table: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	--DELETE FROM FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_COMPLETENESS2 WHERE BATCHDATE = @batch

-- COMPLETENESS 2 --
INSERT INTO FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_COMPLETENESS
SELECT  'REPORT 2', ACCT_CD, CASE WHEN A.ACCT_CD = B.IFRS4_SUN_CD THEN 'YES' ELSE 'NO' END [SUNGL_MF_CHECKING],
		@BATCH_MASTER_ID AS BATCH_MASTER_ID,
		@BATCH_RUN_ID AS BATCH_RUN_ID,
		@JOB_MASTER_ID AS JOB_MASTER_ID,
		@JOB_RUN_ID AS JOB_RUN_ID,
		@batch AS BATCHDATE,
		GETDATE() AS ETL_PROCESS_DATE_TIME 
FROM (
	SELECT 
		ACCT_CD
	FROM FCORE_ID.FOND_IFRS17_SUNGL_CLASSIFIED -- ETL5
	WHERE EXTRACT_PERIOD_YTD = @PERIOD 
	AND (CASHFLOW_TYPE_L1 LIKE 'ACTUAL_AC_CF_INC%')
	GROUP BY ACCT_CD
	UNION 
	SELECT 
		SUN_CD ACCT_CD
	FROM FCORE_ID.FOND_PAS_GRANULAR_SL_ACF  -- ETL6
	WHERE VALID_FLG='Y' AND ACCT_PERIOD BETWEEN @FIRST_PERIOD_YEAR AND @PERIOD 
	AND CASHFLOW_TYPE_L2 LIKE ('ACTUAL_AC_CF_INC%')
	GROUP BY SUN_CD
) A
LEFT JOIN (SELECT IFRS4_SUN_CD FROM [STAG_ID].[STAG_CONFIG_SUNGL_MF] WHERE BATCHDATE = @batch GROUP BY IFRS4_SUN_CD ) B ON A.ACCT_CD =  B.IFRS4_SUN_CD


-----GENERATE COMPLETENESS EXPENSE ANALYSIS REPORT3 PROCESS -----
	
	SET @V_DESCRIPTION = 'Generate Completeness Expense Analysis Report3 data and insert into table: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	--DELETE FROM FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_COMPLETENESS3 WHERE BATCHDATE = @batch
	
-- COMPLETENESS 3 --
INSERT INTO FOND_ID.FOND_ETL5_RHO_EXP_ANALYSIS_COMPLETENESS
SELECT  'REPORT 3', ACCT_CD, SUNGL_MF_CHECKING,
		@BATCH_MASTER_ID AS BATCH_MASTER_ID,
		@BATCH_RUN_ID AS BATCH_RUN_ID,
		@JOB_MASTER_ID AS JOB_MASTER_ID,
		@JOB_RUN_ID AS JOB_RUN_ID,
		@batch AS BATCHDATE,
		GETDATE() AS ETL_PROCESS_DATE_TIME 
FROM(
SELECT 
	A.ACCT_CD, CASE WHEN A.ACCT_CD = B.IFRS4_SUN_CD THEN 'YES' ELSE 'NO' END [SUNGL_MF_CHECKING]
FROM FCORE_ID.FOND_IFRS17_SUNGL_CLASSIFIED A
LEFT JOIN (SELECT IFRS4_SUN_CD FROM [STAG_ID].[STAG_CONFIG_SUNGL_MF] WHERE BATCHDATE = @batch GROUP BY IFRS4_SUN_CD ) B ON A.ACCT_CD =  B.IFRS4_SUN_CD
WHERE EXTRACT_PERIOD_YTD = @PERIOD
AND NEW_COA LIKE 'SCI7%'
GROUP BY A.ACCT_CD, B.IFRS4_SUN_CD
) A

	
END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
				ROLLBACK;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
	
END;

