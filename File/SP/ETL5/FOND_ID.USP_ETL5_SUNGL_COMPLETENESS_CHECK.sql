CREATE PROC [FOND_ID].[USP_ETL5_SUNGL_COMPLETENESS_CHECK] @batch [NVARCHAR](100),@JOBNAMESTR [NVARCHAR](2000) AS
BEGIN 

	DECLARE @V_START		    datetime;
	DECLARE @V_END			    datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'USP_ETL5_SUNGL_COMPLETENESS_CHECK';
	DECLARE @V_DESCRIPTION	    NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_START_DATE	    date;
	DECLARE @V_END_DATE		    date;
	DECLARE @PERIOD             varchar(6) = SUBSTRING(CAST(@batch AS VARCHAR),1,6);
	DECLARE @PERIOD_DT          date = CAST(@batch AS DATE);

	------START GET RUN ID DETAIL FROM ABC------
	DECLARE 
	@BATCH_MASTER_ID  VARCHAR(20) = 0,
	@BATCH_RUN_ID    VARCHAR(20) = 0,
	@JOB_MASTER_ID   VARCHAR(20) = 0,
	@JOB_RUN_ID     VARCHAR(20) = 0,
	@GMT_START_DTTM   VARCHAR(19) = CONVERT(DATETIME2, GETDATE());

	EXEC STAG_ID.USP_GetRunIdReturn
	@JobName     =  @JOBNAMESTR,
	@BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	@BATCH_RUN_ID  = @BATCH_RUN_ID OUTPUT,
	@JOB_MASTER_ID  = @JOB_MASTER_ID OUTPUT,
	@JOB_RUN_ID   = @JOB_RUN_ID OUTPUT,
	@GMT_START_DTTM = @GMT_START_DTTM OUTPUT;
	------END GET RUN ID DETAIL FROM ABC------

BEGIN TRY
		SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
		PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
		SET @V_START 	= convert(datetime,getDATE());

		SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
		PRINT	@V_DESCRIPTION;
		SET @V_SEQNO		= @V_SEQNO + 1;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		---------------------------- DROP TEMPORARY TABLE ------------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'DROP TEMPORARY TABLES : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		IF OBJECT_ID('tempdb..#FINAL_CHECKING') IS NOT NULL BEGIN DROP TABLE #FINAL_CHECKING END;

		---------------------------- CREATE TEMPORARY TABLE ------------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'CREATE TEMPORARY TABLES : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		WITH IFRS4_SUNGL AS
		(
		  SELECT
			BATCHDATE, ACCNT_CODE, 'IAI' ENTITY_ID, --DESCRIPTN,
			SUM(CAST(AMOUNT AS NUMERIC(28,6))) AS TOTAL_AMT
		  FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL
		  WHERE BATCHDATE = @PERIOD AND ENTITY_ID IN ('IAC','IAS')
		  GROUP BY BATCHDATE, ACCNT_CODE
		  --WHERE BATCHDATE = @PERIOD AND ENTITY_ID = 'IAI'
		  --GROUP BY BATCHDATE, ACCNT_CODE, ENTITY_ID
		),

		ETL5_SUNGL_EXTRACT AS
		(
		  SELECT  BATCHDATE, ACCT_CD, ENTITY_ID, SUM (TOTAL_AMT) TOTAL_AMT
		  FROM (
			  SELECT BATCHDATE, ACCT_CD, ENTITY_ID, SUM(AMT_LOCAL_CCY) AS TOTAL_AMT
			  FROM FOND_ID.FOND_ETL5_SUNGL_EXTRACT
			  WHERE BATCHDATE = @PERIOD AND ENTITY_ID = 'IAI'
			  GROUP BY BATCHDATE, ACCT_CD, ENTITY_ID
			  UNION ALL
			  SELECT 
				A.BATCHDATE,
				A.SUN_CD AS ACCT_CD,
				A.ENTITY_ID,
				SUM(A.AMT_RPT_CCY_NEW) AS TOTAL_AMT
			  FROM
				(
				  SELECT
					CONCAT(LEFT(ACCT_PERIOD, 4), RIGHT(ACCT_PERIOD, 2)) AS BATCHDATE,
					SUN_CD,
					AMT_ORG_CCY,
					AMT_ORG_CCY_REV,
					CASE WHEN JRNAL_CD LIKE '%REV%' THEN AMT_RPT_CCY + AMT_RPT_CCY_REV ELSE AMT_RPT_CCY END AMT_RPT_CCY_NEW,
					ENTITY_ID
				  FROM STAG_ID.STAG_ETL4_INTEGRATION_TEST
				  WHERE POLICY_IDENTIFIER = 'O'
				  AND ACCT_PERIOD =  SUBSTRING(CAST(@batch AS VARCHAR),1,4)+'0'+SUBSTRING(CAST(@batch AS VARCHAR),5,2)
				  AND ENTITY_ID = 'IAI'
				) A
			  GROUP BY A.BATCHDATE, A.SUN_CD, A.ENTITY_ID
		  )X
		  GROUP BY  BATCHDATE, ACCT_CD, ENTITY_ID

		),

		ETL4_INTEGRATION AS
		(
		  SELECT 
			A.BATCHDATE,
			A.SUN_CD,
			A.ENTITY_ID,
			SUM(A.AMT_ORG_CCY + A.AMT_ORG_CCY_REV) AS AMT_ORG_CCY,
			SUM(A.AMT_RPT_CCY_NEW) AS AMT_RPT_CCY
		  FROM
			(
			  SELECT
				CONCAT(LEFT(ACCT_PERIOD, 4), RIGHT(ACCT_PERIOD, 2)) AS BATCHDATE,
				SUN_CD,
				AMT_ORG_CCY,
				AMT_ORG_CCY_REV,
				CASE WHEN JRNAL_CD LIKE '%REV%' THEN AMT_RPT_CCY + AMT_RPT_CCY_REV ELSE AMT_RPT_CCY END AMT_RPT_CCY_NEW,
				ENTITY_ID
			  FROM STAG_ID.STAG_ETL4_INTEGRATION_TEST
			  WHERE POLICY_IDENTIFIER = 'P'
			  AND ACCT_PERIOD =  SUBSTRING(CAST(@batch AS VARCHAR),1,4)+'0'+SUBSTRING(CAST(@batch AS VARCHAR),5,2)
			  AND ENTITY_ID = 'IAI'
			) A
		  GROUP BY A.BATCHDATE, A.SUN_CD, A.ENTITY_ID
		),

		ETL5_SUNGL_EXTRACT_BIN AS
		(
		  SELECT
			BATCHDATE,
			--CASE WHEN ACCT_CD = '4710300001' THEN '4710300000' ELSE ACCT_CD END AS ACCT_CD,
			ACCT_CD,
			ENTITY_ID,
			SUM(AMT_LOCAL_CCY) AS TOTAL_AMT
		  FROM FOND_ID.FOND_ETL5_SUNGL_EXTRACT_BIN
		  WHERE BATCHDATE = @PERIOD AND ENTITY_ID = 'IAI'
		  GROUP BY BATCHDATE, ACCT_CD, ENTITY_ID
		),

		IFRS4_SUNGL_NEW_ENTRIES AS
		(
		  SELECT
			BATCHDATE,
			ACCNT_CODE,
			ENTITY_ID,
			SUM(CAST(AMOUNT AS NUMERIC(28,6))) AS TOTAL_AMT
		  FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES
		  WHERE BATCHDATE = @PERIOD AND ENTITY_ID = 'IAI'
		  GROUP BY BATCHDATE, ACCNT_CODE, ENTITY_ID
		),
		IFRS4_SUNGL_ENTRIES AS (
			SELECT BATCHDATE, ACCNT_CODE, ENTITY_ID FROM IFRS4_SUNGL GROUP BY BATCHDATE, ACCNT_CODE, ENTITY_ID
			UNION 
			SELECT BATCHDATE, ACCNT_CODE, ENTITY_ID FROM  IFRS4_SUNGL_NEW_ENTRIES GROUP BY BATCHDATE, ACCNT_CODE, ENTITY_ID
		),

		CHECKING AS
		(
		  SELECT
			IFRS4_SUNGL_ENTRIES.ENTITY_ID,
			IFRS4_SUNGL_ENTRIES.BATCHDATE BATCHDATE,
			IFRS4_SUNGL_ENTRIES.ACCNT_CODE ACCNT_CODE,
			IFRS4_SUNGL.TOTAL_AMT AS IFRS4_SUNGL_AMT,
			ETL5_SUNGL_EXTRACT.TOTAL_AMT AS ETL5_INCLUDED_AMT,
			ETL4_INTEGRATION.AMT_RPT_CCY AS ETL4_INCLUDED_AMT,
			ETL5_SUNGL_EXTRACT_BIN.TOTAL_AMT AS BIN_AMT,
			IFRS4_SUNGL_NEW_ENTRIES.TOTAL_AMT AS MANUAL_ENTRIES_AMT,
			COALESCE(IFRS4_SUNGL.TOTAL_AMT,0) - (COALESCE(ETL5_SUNGL_EXTRACT.TOTAL_AMT,0) + COALESCE(ETL4_INTEGRATION.AMT_RPT_CCY,0) + COALESCE(ETL5_SUNGL_EXTRACT_BIN.TOTAL_AMT, 0) - COALESCE(IFRS4_SUNGL_NEW_ENTRIES.TOTAL_AMT, 0)) AS DIFF,
			CASE WHEN IFRS4_SUNGL_NEW_ENTRIES.ACCNT_CODE IS NOT NULL AND  IFRS4_SUNGL.ACCNT_CODE IS NULL THEN 'IFRS17' ELSE 'IFRS4' END AS COA_IDENTIFIER
		  FROM IFRS4_SUNGL_ENTRIES
		  LEFT JOIN IFRS4_SUNGL ON IFRS4_SUNGL_ENTRIES.ACCNT_CODE = IFRS4_SUNGL.ACCNT_CODE AND IFRS4_SUNGL_ENTRIES.BATCHDATE=IFRS4_SUNGL.BATCHDATE AND IFRS4_SUNGL_ENTRIES.ENTITY_ID=IFRS4_SUNGL.ENTITY_ID
		  LEFT JOIN ETL5_SUNGL_EXTRACT ON IFRS4_SUNGL_ENTRIES.BATCHDATE = ETL5_SUNGL_EXTRACT.BATCHDATE AND IFRS4_SUNGL_ENTRIES.ACCNT_CODE = ETL5_SUNGL_EXTRACT.ACCT_CD AND IFRS4_SUNGL_ENTRIES.ENTITY_ID = ETL5_SUNGL_EXTRACT.ENTITY_ID
		  LEFT JOIN ETL4_INTEGRATION ON IFRS4_SUNGL_ENTRIES.BATCHDATE = ETL4_INTEGRATION.BATCHDATE AND IFRS4_SUNGL_ENTRIES.ACCNT_CODE = ETL4_INTEGRATION.SUN_CD AND IFRS4_SUNGL_ENTRIES.ENTITY_ID = ETL4_INTEGRATION.ENTITY_ID
		  LEFT JOIN ETL5_SUNGL_EXTRACT_BIN ON IFRS4_SUNGL_ENTRIES.BATCHDATE = ETL5_SUNGL_EXTRACT_BIN.BATCHDATE AND IFRS4_SUNGL_ENTRIES.ACCNT_CODE = ETL5_SUNGL_EXTRACT_BIN.ACCT_CD AND IFRS4_SUNGL_ENTRIES.ENTITY_ID = ETL5_SUNGL_EXTRACT_BIN.ENTITY_ID
		  LEFT JOIN IFRS4_SUNGL_NEW_ENTRIES ON IFRS4_SUNGL_ENTRIES.BATCHDATE = IFRS4_SUNGL_NEW_ENTRIES.BATCHDATE AND IFRS4_SUNGL_ENTRIES.ACCNT_CODE = IFRS4_SUNGL_NEW_ENTRIES.ACCNT_CODE AND IFRS4_SUNGL_ENTRIES.ENTITY_ID = IFRS4_SUNGL_NEW_ENTRIES.ENTITY_ID
		)

		SELECT CHECKING.*,
		  COALESCE((ABS(CHECKING.DIFF)/ABS(NULLIF(CHECKING.IFRS4_SUNGL_AMT, 0)) * 100), 0) AS DIFF_PERCENTAGE,
		  CASE
			WHEN ETL5_EXCLUSION_CONFIG.ACCT_CD IS NOT NULL THEN 'SKIP'
			WHEN COALESCE((ABS(CHECKING.DIFF)/ABS(NULLIF(CHECKING.IFRS4_SUNGL_AMT, 0)) * 100), 0) < 2 OR ABS(CHECKING.DIFF) < 1000 THEN 'PASS'
			ELSE 'FAILED'
		  END AS STATUS
		INTO #FINAL_CHECKING
		FROM CHECKING
		LEFT JOIN
		  (
			SELECT EXCL_FIELD1_COND AS ACCT_CD, ENTITY_ID
			FROM FOND_ID.FOND_ETL5_EXCLUSION_CONFIG
			WHERE EXCL_FLG = 'EXCL' AND EXCL_SUMMARY_DESC = 'Waiver of Premium' AND RECONCILIATION_IND = 'Y' AND ACTION = 'I'
			AND EXCL_FIELD1 = 'ACCT_CD' AND EXCL_FIELD1_COND IN('3141990000', '5119030000') AND ENTITY_ID = 'IAI'
			GROUP BY EXCL_FIELD1_COND, ENTITY_ID
			UNION
			SELECT 
				EXCL_FIELD1_COND AS ACCNT_CODE, 'IAI' AS ENTITY_ID
			FROM FCORE_ID.FOND_EXCLUSION_CONFIG 
			WHERE RECONCILIATION_IND='Y' AND EXCL_FIELD1='ACCT_CD'
			GROUP BY EXCL_FIELD1_COND			
		  ) AS ETL5_EXCLUSION_CONFIG
		ON CHECKING.ACCNT_CODE = ETL5_EXCLUSION_CONFIG.ACCT_CD AND CHECKING.ENTITY_ID = ETL5_EXCLUSION_CONFIG.ENTITY_ID;


		---------------------------- TO Handle rerun process ------------------------------
		BEGIN TRANSACTION;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'DELETE DATA FROM [FOND_ID].[FOND_ETL5_SUNGL_COMPLETENESS_CHECK] : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	 
	
		DELETE FROM [FOND_ID].[FOND_ETL5_SUNGL_COMPLETENESS_CHECK]
		WHERE BATCHDATE = @PERIOD AND ENTITY_ID = 'IAI';

		 ---------------------------- TO Handle rerun process ------------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'INSERT INTO TABLE [FOND_ID].[FOND_ETL5_SUNGL_COMPLETENESS_CHECK] : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		insert into [FOND_ID].[FOND_ETL5_SUNGL_COMPLETENESS_CHECK]
		  (
			ENTITY_ID,
		    BATCHDATE,
			ACCNT_CODE,
			IFRS4_SUNGL_AMT,
			ETL5_INCLUDED_AMT,
			ETL4_INCLUDED_AMT,
			BIN_AMT,
			MANUAL_ENTRIES_AMT,
			DIFF,
			DIFF_PERCENTAGE,
			STATUS,
			COA_IDENTIFIER 
		  )

        SELECT
			ENTITY_ID,
			BATCHDATE,
			ACCNT_CODE,
			IFRS4_SUNGL_AMT AS IFRS4_SUNGL_AMT,
			ETL5_INCLUDED_AMT AS ETL5_INCLUDED_AMT,
			ETL4_INCLUDED_AMT AS ETL4_INCLUDED_AMT,
			BIN_AMT AS BIN_AMT,
			MANUAL_ENTRIES_AMT AS MANUAL_ENTRIES_AMT,
			DIFF,
			DIFF_PERCENTAGE,
			STATUS,
			COA_IDENTIFIER
        FROM #FINAL_CHECKING 

		---------------------------- ETL5 LOGGING ----------------------------      
       	
		DECLARE @V_TOTAL_ROWS integer = 0;
		DECLARE @V_PERIOD nvarchar(10);
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM #FINAL_CHECKING) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'FOND_ID.FOND_ETL5_SUNGL_COMPLETENESS_CHECK','',@V_TOTAL_ROWS,'MTD',@V_PERIOD);

		IF @@TRANCOUNT > 0
        COMMIT;

END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
            ROLLBACK;
    SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_END 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	='Error execution for function on ' 
						+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
						+ ' with Error Message : ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;
	
	
	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	raiserror(@V_DESCRIPTION, 18, 1)
END CATCH
END;
