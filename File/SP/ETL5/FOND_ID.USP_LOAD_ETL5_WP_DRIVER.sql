CREATE PROC [FOND_ID].[USP_LOAD_ETL5_WP_DRIVER] @batch [NVARCHAR](100),@JOBNAMESTR [NVARCHAR](2000) AS
BEGIN

	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.USP_LOAD_ETL5_WP_DRIVER';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @PERIOD varchar(10);
	SET @PERIOD = concat(left(convert(varchar(8), @batch),4), '0', substring(convert(varchar(8), @batch),5,2));
	
	------ START ABC ------
	
	DECLARE
    @BATCH_MASTER_ID    VARCHAR(20) = 0,
    @BATCH_RUN_ID       VARCHAR(20) = 0,
    @JOB_MASTER_ID      VARCHAR(20) = 0,
    @JOB_RUN_ID         VARCHAR(20) = 0,
    @GMT_START_DTTM     VARCHAR(20) = GETDATE();
	
	EXEC STAG_ID.USP_GetRunIdReturn
	  @JobName        = @JOBNAMESTR,
	  @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	  @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
	  @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
	  @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
	  @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
	  
	------END GET RUN ID DETAIL FROM ABC--------- 	
	
BEGIN TRY

	SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
	PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
	SET @V_START 	= convert(datetime,getDATE());
	
	SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
	PRINT	@V_DESCRIPTION;
	SET @V_SEQNO		= @V_SEQNO + 1;
	
	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	
	-- DROP TEMPORARY TABLE--
	
	IF OBJECT_ID('tempdb.dbo.#TEMP','U') IS NOT NULL DROP TABLE #TEMP;
	
	
	-----GENERATE IT DRIVER MASTER PROCESS -----
	
	SET @V_DESCRIPTION = 'Generate IT Driver Master and insert into temporary table: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	
	SELECT
		NO, 
		DRIVER_NAME, 
		ALLOCATION_DRIVER, 
		SOURCE, 
		'Single' as DRIVER_TYPE, 
		AMT 
	into #TEMP
	FROM
	(
		--GENERATE IT DRIVER MASTER
		select 1.1 as NO, 'LAS' as SOURCE, 'FYP' as DRIVER_NAME, 'IT Driver - LAS numbers' as ALLOCATION_DRIVER, sum(FYP_PREMIUM) as AMT
		from FOND_ID.FOND_ETL5_LIFEASIA_DRIVER_DETAIL_PREMIUM_COLLECTED_RENEWAL_PREMIUM
		where ACCOUNTING_PERIOD = @PERIOD

		UNION ALL

		select 1.2 as NO, 'Non-LAS' as SOURCE, 'FYP' as DRIVER_NAME, 'PRUAMAN SHARIA FYP' as ALLOCATION_DRIVER, sum(FYP) as AMT
		from FOND_ID.FOND_ETL5_PRUAMAN_SHARIA_FYP_DRIVER_DETAIL
		where ACCOUNTING_PERIOD = @PERIOD
		
		UNION ALL

		select 1.3 as NO, 'Non-LAS' as SOURCE, 'FYP' as DRIVER_NAME, 'PAYLIFE FYP' as ALLOCATION_DRIVER, sum(FYP) as AMT
		from FOND_ID.FOND_ETL5_PAYLIFE_FYP_DRIVER_DETAIL
		where ACCOUNTING_PERIOD = @PERIOD

		UNION ALL

		select 1.4 as NO, 'Non-LAS' as SOURCE, 'FYP' as DRIVER_NAME, 'PRUAMAN FYP' as ALLOCATION_DRIVER, sum(FYP) as AMT
		from FOND_ID.FOND_ETL5_PRUAMAN_FYP_DRIVER_DETAIL
		where ACCOUNTING_PERIOD = @PERIOD

		UNION ALL

		select 1.5 as NO, 'Non-LAS' as SOURCE, 'FYP' as DRIVER_NAME, 'PRUEMAS FYP' as ALLOCATION_DRIVER, sum(FYP) as AMT
		from FOND_ID.FOND_ETL5_PRUEMAS_FYP_DRIVER_DETAIL
		where ACCOUNTING_PERIOD = @PERIOD AND LEFT(UPPER(POL_NO),3) <> 'PES'
		
		UNION ALL
		select 1.6 as NO, 'Non-LAS' as SOURCE, 'FYP' as DRIVER_NAME, 'PRUEMAS SHARIA FYP' as ALLOCATION_DRIVER, sum(FYP) as AMT
		from FOND_ID.FOND_ETL5_PRUEMAS_FYP_DRIVER_DETAIL
		where ACCOUNTING_PERIOD = @PERIOD AND LEFT(UPPER(POL_NO),3) = 'PES'

		UNION ALL

		select 1.7 as NO, 'Non-LAS' as SOURCE, 'FYP' as DRIVER_NAME, 'CREDITSHIELD FYP' as ALLOCATION_DRIVER, sum(FYP) as AMT
		from FOND_ID.FOND_ETL5_CREDITSHIELD_FYP_DRIVER_DETAIL
		where ACCOUNTING_PERIOD = @PERIOD

		UNION ALL

		SELECT 2 as NO, '' as SOURCE, 'RB' as DRIVER_NAME, 'Renewal Premium (RB)' as ALLOCATION_DRIVER, SUM(RENEWAL_PREMIUM) as AMT
		from FOND_ID.FOND_ETL5_LIFEASIA_DRIVER_DETAIL_PREMIUM_COLLECTED_RENEWAL_PREMIUM
		where ACCOUNTING_PERIOD = @PERIOD

		UNION ALL

		SELECT 3 as NO, '' as SOURCE, 'PC' as DRIVER_NAME, 'Persistency Commission (PC)' as ALLOCATION_DRIVER, null as AMT

		UNION ALL

		SELECT 4 as NO, '' as SOURCE, 'PAV' as DRIVER_NAME, 'Per Account Value (PAV)' as ALLOCATION_DRIVER, SUM(PER_ACCOUNT_VALUE) AS AMT
		from FOND_ID.FOND_ETL5_LIFEASIA_DRIVER_DETAIL_PER_ACCOUNT_VALUE
		where ACCOUNTING_PERIOD = @PERIOD

		UNION ALL

		select 5 as NO, '' as SOURCE, 'NOP' as DRIVER_NAME, 'Number of Policy (NOP)' as ALLOCATION_DRIVER, sum(DRIVER_AMT) AS AMT
		from FOND_ID.FOND_ETL5_DRIVER_MASTER
		where BATCHDATE = left(convert(varchar(8), @batch),6)
		and POLICY_ALLOC_DRIVER = 'NOP'

		UNION ALL

		select 6 as NO, '' as SOURCE, 'NOP_RI' as DRIVER_NAME, 'Number of RI Policy (NOP_RI)' as ALLOCATION_DRIVER, sum(DRIVER_AMT) AS AMT
		from FOND_ID.FOND_ETL5_DRIVER_MASTER
		where BATCHDATE = left(convert(varchar(8), @batch),6)
		and POLICY_ALLOC_DRIVER = 'NOP_RI'

		UNION ALL

		select 7 as NO, '' as SOURCE, 'NOP_PAA' as DRIVER_NAME, 'Number of PAA Policy (NOP_PAA)' as ALLOCATION_DRIVER, COUNT(DISTINCT POL_NO)AS AMT
		from FOND_ID.FOND_ETL5_NOP_PAA_DRIVER_DETAIL
		where BATCHDATE = left(convert(varchar(8), @batch),6)

		UNION ALL

		select 8 as NO, '' as SOURCE, 'NOP_nonPAA' as DRIVER_NAME, 'Number of Non-PAA Policy (NOP_nonPAA)' as ALLOCATION_DRIVER, sum(DRIVER_AMT) AS AMT
		from FOND_ID.FOND_ETL5_DRIVER_MASTER
		where BATCHDATE = left(convert(varchar(8), @batch),6)
		and POLICY_ALLOC_DRIVER = 'NOP_nonPAA'
		
		UNION ALL

		select 9 as NO, '' as SOURCE, 'FYP_PAA' as DRIVER_NAME, 'First Year Premium PAA (FYP_PAA)' as ALLOCATION_DRIVER, sum(DRIVER_AMT) AS AMT
		from FOND_ID.FOND_ETL5_DRIVER_MASTER
		where BATCHDATE = left(convert(varchar(8), @batch),6)
		and POLICY_ALLOC_DRIVER = 'FYP_PAA'
		
		UNION ALL

		select 10 as NO, '' as SOURCE, 'FYP_nonPAA' as DRIVER_NAME, 'First Year Premium Non-PAA (FYP_nonPAA)' as ALLOCATION_DRIVER, sum(DRIVER_AMT) AS AMT
		from FOND_ID.FOND_ETL5_DRIVER_MASTER
		where BATCHDATE = left(convert(varchar(8), @batch),6)
		and POLICY_ALLOC_DRIVER = 'FYP_nonPAA'		
		) A;
	
	
	-----DELETE EXISTING DATA FROM THE SAME BATCHDATE	-----
	
	SET @V_DESCRIPTION = 'Delete data from the same batchdate: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	

	DELETE FROM FOND_ID.FOND_ETL5_WP_DRIVER WHERE BATCHDATE = left(convert(varchar(8), @batch),6);
	
	
	-----INSERT INTO WP_DRIVER	-----
	
	SET @V_DESCRIPTION = 'Inserting data into table wp_driver: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	
	INSERT INTO FOND_ID.FOND_ETL5_WP_DRIVER
	SELECT
				CAST(NO AS NUMERIC(5,1)) AS NO, DRIVER_NAME, ALLOCATION_DRIVER, SOURCE, DRIVER_TYPE, AMT,
				@BATCH_MASTER_ID AS BATCH_MASTER_ID,
				@BATCH_RUN_ID AS BATCH_RUN_ID,
				@JOB_MASTER_ID AS JOB_MASTER_ID,
				@JOB_RUN_ID AS JOB_RUN_ID,
				left(convert(varchar(8), @batch),6) as BATCHDATE,
				current_timestamp as ETL_PROCESS_DATE_TIME
	FROM (
				SELECT
					 *
				 FROM #TEMP
				UNION ALL
				 SELECT
				 1 as NO, 'FYP' as DRIVER_NAME, 'First Year Premium (FYP) - Total' as ALLOCATION_DRIVER, '' as SOURCE, 'Single' as DRIVER_TYPE, SUM(COALESCE(AMT,0)) AS AMT
				 FROM #TEMP
			 WHERE DRIVER_NAME = 'FYP'
	) A;
	
	
	SET @V_DESCRIPTION = 'Data Inserted: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
				ROLLBACK;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
	
END;
