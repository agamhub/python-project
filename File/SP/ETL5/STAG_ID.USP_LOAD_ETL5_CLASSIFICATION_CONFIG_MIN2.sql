CREATE PROC [STAG_ID].[USP_LOAD_ETL5_CLASSIFICATION_CONFIG_MIN2] @batch [NVARCHAR](100),@JOBNAMESTR [NVARCHAR](2000) AS
BEGIN 
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'MANUAL CONFIGURATION';
	DECLARE @V_TABLE1 		NVARCHAR(2000);
	DECLARE @V_TABLE2 		NVARCHAR(2000);
	DECLARE @SCHEMA      NVARCHAR(MAX)
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @drivername NVARCHAR(15);
	SET @drivername = 'MANUAL_CONFIG';
	DECLARE @V_DRIVER_PERIOD VARCHAR(10); 
	SET @V_DRIVER_PERIOD =SUBSTRING(CAST(@batch AS VARCHAR),1,6);
	DECLARE @V_TBLSTS INT=1

	
	------ START ABC ------
	DECLARE
    @BATCH_MASTER_ID    VARCHAR(20) = 0,
    @BATCH_RUN_ID       VARCHAR(20) = 0,
    @JOB_MASTER_ID      VARCHAR(20) = 0,
    @JOB_RUN_ID         VARCHAR(20) = 0,
    @GMT_START_DTTM     VARCHAR(20) = GETDATE();
	
	EXEC STAG_ID.USP_GetRunIdReturn
	  @JobName        = @JOBNAMESTR,
	  @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	  @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
	  @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
	  @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
	  @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
	  
	------END GET RUN ID DETAIL FROM ABC--------- 	


BEGIN TRY

		SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
		PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
		SET @V_START 	= convert(datetime,getDATE());

		SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
		PRINT	@V_DESCRIPTION;
		SET @V_SEQNO		= @V_SEQNO + 1;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
		---------------------------- INSERT/DELETE PROCESS ------------------------------

		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'Delete or Insert new data to historical data : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		 
		
		
		--[5]==CHECK CLASSIFICATION/EXPENSE CONFIG
		--SET @V_TBLSTS=(SELECT COUNT(*) FROM STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF)
		--=============================CLASSIFICATION CONFIG===========================
		SET @V_DESCRIPTION	= 'INSERT INTO STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		--IF @V_TBLSTS<1 
		--BEGIN
		    -----Initial Load
			TRUNCATE TABLE STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF;

			insert into STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF
			(ENTITY_ID,
			SUN_CD,
			FUND_TO,
			EXPENSE_IND,
			REINS_FLG,
			PRE_COV_PCT,
			NON_ATTR_PCT,
			ACQUISTION_PCT,
			MAINTAIN_PCT,
			NON_PREM_MAINTAIN_PCT,
			PROFIT_MARGIN,
			PCA_CATEGORY,
			INTERCOMP_IND,
			[ACTION],
			USER_PROFILE,
			UPDATE_DATE
			)
			select 
			ENTITY_ID,
			SUN_CD,
			T0,
			EXPENSE_IND,
			RI_FLG,
			PRE_COV_PCT,
			NON_ATTR_PCT,
			ACQUISTION_PCT,
			MAINTAIN_PCT,
			NON_PREM_MAINTAIN_PCT,
			PROFIT_MARGIN,
			PCA_CATEGORY,
			INTERCOMP_IND,'I','ETL5',@batch
			from (
				select *,row_number() over (partition by ENTITY_ID+SUN_CD+T0+EXPENSE_IND+RI_FLG order by EFF_TO_DT desc) rn from FCORE_ID.FOND_EXPENSE_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *,row_number() over (partition by ENTITY_ID+SUN_CD+T0+EXPENSE_IND+RI_FLG order by EFF_TO_DT desc) rn from FCORE_IDIAC.FOND_EXPENSE_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
				UNION ALL
				select *,row_number() over (partition by ENTITY_ID+SUN_CD+T0+EXPENSE_IND+RI_FLG order by EFF_TO_DT desc) rn from FCORE_IDIAS.FOND_EXPENSE_CONFIG where BATCH_TO_DT >=EOMONTH(DATEADD(MONTH,-1,cast(@batch as date))) and BATCH_FROM_DT<= EOMONTH(DATEADD(MONTH,-1,cast(@batch as date)))
			) a	
			where rn=1
		--END
		--ELSE
		--BEGIN
			------Delete
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
			delete from 
			STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF 
			where CONCAT(ENTITY_ID, SUN_CD, EXPENSE_IND, PRE_COV_PCT, NON_ATTR_PCT, ACQUISTION_PCT, MAINTAIN_PCT, PROFIT_MARGIN) in (
			select distinct CONCAT(ENTITY_ID, SUN_CD, EXPENSE_IND, PRE_COV_PCT, NON_ATTR_PCT, ACQUISTION_PCT, MAINTAIN_PCT, PROFIT_MARGIN) from STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_ALL where ACTION='D'
			)
		
			------Update/Insert
		SET @V_DESCRIPTION	= 'DELETE FROM STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
			delete from STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF 
			where CONCAT(ENTITY_ID, SUN_CD, EXPENSE_IND, PRE_COV_PCT, NON_ATTR_PCT, ACQUISTION_PCT, MAINTAIN_PCT, PROFIT_MARGIN) in (
			select distinct CONCAT(ENTITY_ID, SUN_CD, EXPENSE_IND, PRE_COV_PCT, NON_ATTR_PCT, ACQUISTION_PCT, MAINTAIN_PCT, PROFIT_MARGIN) from STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_ALL where ACTION in ('I','U')
			);
			--declare @batch varchar(20)='20210301'
		SET @V_DESCRIPTION	= 'INSERT STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
			insert into STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF 
			(ENTITY_ID,
			SUN_CD,
			FUND_TO,
			EXPENSE_IND,
			REINS_FLG,
			PRE_COV_PCT,
			NON_ATTR_PCT,
			ACQUISTION_PCT,
			MAINTAIN_PCT,
			NON_PREM_MAINTAIN_PCT,
			PROFIT_MARGIN,
			PCA_CATEGORY,
			INTERCOMP_IND,
			[ACTION],
			USER_PROFILE,
			UPDATE_DATE,
			BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
			SELECT 
				ENTITY_ID, SUN_CD, FUND_TO, EXPENSE_IND, REINS_FLG, PRE_COV_PCT, NON_ATTR_PCT, ACQUISTION_PCT, MAINTAIN_PCT, NON_PREM_MAINTAIN_PCT, PROFIT_MARGIN, PCA_CATEGORY, INTERCOMP_IND, [ACTION], USER_PROFILE, UPDATE_DATE,
				@BATCH_MASTER_ID BATCH_MASTER_ID,
				@BATCH_RUN_ID BATCH_RUN_ID,
				@JOB_MASTER_ID JOB_MASTER_ID,
				@JOB_RUN_ID JOB_RUN_ID,
				left(CAST(@batch AS VARCHAR),6) BATCHDATE,
				GETDATE() ETL_PROCESS_DATE_TIME
			from STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_ALL
			where ACTION in ('I','U')
		--END
		--SET @V_TBLSTS=1
		

		---------------------------- ETL5 LOGGING ----------------------------      
		SET @V_DESCRIPTION	= 'ETL5 LOGGING : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
       	
		DECLARE @V_TOTAL_ROWS integer = 0;
		DECLARE @V_PERIOD nvarchar(10);

		--[5]
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF_EXTTB) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'STAG_ID.STAG_PLAI_CLASSIFICATION_MAPPING_DQ_DDLREF_EXTTB'
		,@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);
	
		IF @@TRANCOUNT > 0
        COMMIT;


END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
                ROLLBACK;
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
END;

