CREATE PROC [FOND_ID].[USP_LOAD_ETL5_NEW_ENTRIES] @batch [nvarchar](30) AS 
BEGIN 
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'USP_LOAD_ETL5_NEW_ENTRIES';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO		integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @CNT_CURR 		integer;
	DECLARE @SUM_CURR		DECIMAL(28,6);

	
	BEGIN TRY

	
	SET @V_START_DATE	= convert(date, cast(@batch as varchar(8))); -- valuation extract date
	PRINT	'START DATE :' + convert(varchar,@V_START_DATE,112);
	SET @V_START 	= convert(datetime,getDATE());

	SET @V_DESCRIPTION 	= 'START ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
	PRINT	@V_DESCRIPTION;
	SET @V_SEQNO		= @V_SEQNO + 1;

	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	---------------------------- DROP TEMPORARY TABLE ------------------------------
	IF OBJECT_ID('tempdb..#tmp_rinewentries') IS NOT NULL
	BEGIN
		DROP TABLE #tmp_rinewentries
	END;
	
	IF OBJECT_ID('tempdb..#tmp_dpasomninewentries') IS NOT NULL
	BEGIN
		DROP TABLE #tmp_dpasomninewentries
	END;	

	IF OBJECT_ID('tempdb..#tmp_spinoffnewentries') IS NOT NULL
	BEGIN
		DROP TABLE #tmp_spinoffnewentries
	END;	
	
	----------------------------PREPARE TEMP TABLE FOR RI NEW ENTRIES------------------
--	if (left(@batch,4)='2021')
--		with SUNGL_INCL as (
--		SELECT ENTITY_ID, LEDGER, ACCT_CD ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, CR_DR_FLG D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE,null ENTRY_PRD, null DUE_DATE, null ALLOC_REF,null ALLOC_DATE,null ALLOC_PERIOD,null ASSET_IND,null ASSET_CODE,null ASSET_SUB,null CONV_CODE,null CONV_RATE,OTHER_AMT,null OTHER_DP,null CLEARDOWN,null REVERSAL,null LOSS_GAIN,null ROUGH_FLAG,null IN_USE_FLAG,T0 ANAL_T0, T1 ANAL_T1, T2 ANAL_T2, T3 ANAL_T3,T4 ANAL_T4,T5 ANAL_T5,T6 ANAL_T6,T7 ANAL_T7,T8 ANAL_T8,null ANAL_T9, cast(getdate() as date) POSTING_DATE,null ALLOC_IN_PROGRESS,null HOLD_REF,null HOLD_OP_ID,null LAST_CHANGE_USER_ID,null LAST_CHANGE_DATE,null ORIGINATOR_ID,cast(getdate() as date) UPLOAD_DATE,'ETL5 MJE' FNAME,null FPROCDATE,'Manual' SOURCE_TYPE,'MJE' PROCESS_TYPE,getdate() PROCESS_TIME,newid() JOB_PROCESS_ID,0 BATCH_MASTER_ID,0 BATCH_RUN_ID,0 JOB_MASTER_ID,0 JOB_RUN_ID,left(@batch,6) BATCHDATE,getdate() ETL_PROCESS_DATE_TIME
--		from (
--			select 
--			ENTITY_ID,'A' LEDGER,ACCT_CD,left(@batch,4)+'/0'+right(left(@batch,6),2) PERIOD,convert(varchar(20),EOMONTH(cast(@batch as date)),103) TRANS_DATE, sum(AMT_LOCAL_CCY)*-1 AMOUNT,case when sum(AMT_LOCAL_CCY)*-1>0 then 'D' else 'C' end CR_DR_FLG,null ALLOCATION,1000 JRNAL_NO,23660 JRNAL_LINE,'MJE' JRNAL_TYPE,'SYS' JRNAL_SRCE,'RICAT-Manual' TREFERENCE,'RI Cat-Manual Entries' DESCRIPTN,cast(getdate() as date) ENTRY_DATE,0 OTHER_AMT,T0,T1,T2,T3,T4,T5,T6,T7,T8
--			from FOND_ID.FOND_ETL5_SUNGL_EXTRACT where cast(BATCHDATE as int) >= cast(left(@batch,4)+'01' as int) and  cast(BATCHDATE as int)< cast(left(@batch,6) as int)
--			and ACCT_CD in ('3321900000', '3322500000', '3322700000', '4152310100')
--			group by ENTITY_ID,ACCT_CD,CR_DR_FLG,T0,T1,T2,T3,T4,T5,T6,T7,T8
--			) j
--		),
--		SUM_ as (
--		select 'key' key_,sum(AMOUNT) AMOUNT from SUNGL_INCL
--		),
--		CONTRA_ACCT as (
--			SELECT ENTITY_ID, LEDGER, ACCT_CD ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, CR_DR_FLG D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE,null ENTRY_PRD, null DUE_DATE, null ALLOC_REF,null ALLOC_DATE,null ALLOC_PERIOD,null ASSET_IND,null ASSET_CODE,null ASSET_SUB,null CONV_CODE,null CONV_RATE,OTHER_AMT,null OTHER_DP,null CLEARDOWN,null REVERSAL,null LOSS_GAIN,null ROUGH_FLAG,null IN_USE_FLAG,T0 ANAL_T0, T1 ANAL_T1, T2 ANAL_T2, T3 ANAL_T3,T4 ANAL_T4,T5 ANAL_T5,T6 ANAL_T6,T7 ANAL_T7,T8 ANAL_T8,null ANAL_T9, cast(getdate() as date) POSTING_DATE,null ALLOC_IN_PROGRESS,null HOLD_REF,null HOLD_OP_ID,null LAST_CHANGE_USER_ID,null LAST_CHANGE_DATE,null ORIGINATOR_ID,cast(getdate() as date) UPLOAD_DATE,'ETL5 MJE' FNAME,null FPROCDATE,'Manual' SOURCE_TYPE,'MJE' PROCESS_TYPE,getdate() PROCESS_TIME,newid() JOB_PROCESS_ID,0 BATCH_MASTER_ID,0 BATCH_RUN_ID,0 JOB_MASTER_ID,0 JOB_RUN_ID,left(@batch,6) BATCHDATE,getdate() ETL_PROCESS_DATE_TIME
--			from (
--			select top 1 
--			ENTITY_ID,'A' LEDGER,ACCT_CD,left(@batch,4)+'/0'+right(left(@batch,6),2) PERIOD,convert(varchar(20),EOMONTH(cast(@batch as date)),103)  TRANS_DATE, b.AMOUNT*-1 AMOUNT,case when b.AMOUNT*-1>0 then 'D' else 'C' end CR_DR_FLG,null ALLOCATION,1000 JRNAL_NO,23660 JRNAL_LINE,'MJE' JRNAL_TYPE,'SYS' JRNAL_SRCE,'RICAT-Manual' TREFERENCE,'RI Cat-Manual Entries' DESCRIPTN,cast(getdate() as date) ENTRY_DATE,0 OTHER_AMT,T0,T1,T2,T3,T4,T5,T6,T7,T8
--			from (select 'key' key_,* from FOND_ID.FOND_ETL5_SUNGL_EXTRACT) a 
--			left join SUM_ b on a.key_=b.key_
--			where ACCT_CD='3141490000' and BATCHDATE=left(@batch,6)
--			) j			
--		)
--		select * 
--		into #tmp_rinewentries
--		from SUNGL_INCL
--		union all
--		select * from CONTRA_ACCT
--	if (left(@batch,4)='2022')		

	-- Make sure if any manual data of RI CATASTROPHE, then yes then process else no.	
	SELECT @CNT_CURR = COUNT(1),  @SUM_CURR = SUM(CASE WHEN AMOUNT <> 0 THEN 1 ELSE 0 END)
	FROM (
	SELECT ACCNT_CODE,  SUM(CAST(AMOUNT AS DECIMAL(28,6))) AMOUNT
	FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL WHERE BATCHDATE=left(@batch,6) 
	AND ACCNT_CODE in ('3321900000', '3322500000', '3322700000', '4152310100')
	AND LOWER(DESCRIPTN) like '%catastrop%'
	GROUP BY ACCNT_CODE) X;	

	IF @CNT_CURR >= 1 AND @SUM_CURR <> 0
		WITH RI_CAT as (
		select 
		'IAI' ENTITY_ID
		,LEDGER,ACCNT_CODE,PERIOD,TRANS_DATE, sum(AMOUNT)*-1 AMOUNT,case when sum(AMOUNT)*-1>0 then 'D' else 'C' end CR_DR_FLG, ALLOCATION
		, JRNAL_NO, JRNAL_LINE,JRNAL_TYPE, JRNAL_SRCE, 'ADJ' TREFERENCE,
		'RI CATASTROPHE MANUAL ENTRIES' DESCRIPTN,
		cast(getdate() as date) ENTRY_DATE,0 OTHER_AMT,
		case when ANAL_T0= '0' then '0000000' else ANAL_T0 end ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8
		from STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL 
		where BATCHDATE=left(@batch,6) 
		and ACCNT_CODE in ('3321900000', '3322500000', '3322700000', '4152310100')
		and LOWER(DESCRIPTN) like '%catastrop%'
		--and TREFERENCE='REAS2201'
		group by JRNAL_NO, JRNAL_LINE,LEDGER,ACCNT_CODE,PERIOD,TRANS_DATE,ALLOCATION,JRNAL_TYPE, JRNAL_SRCE,TREFERENCE,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8
		), CONTRA_ACCT as (
		select 
		ENTITY_ID,LEDGER,
		case when ACCNT_CODE='3321900000' then '3321900001'
		when ACCNT_CODE='3322500000' then '3322500001' 
		when ACCNT_CODE='3322700000' then '3322700001'
		when ACCNT_CODE='4152310100' then '4152310101' end
		ACCNT_CODE,PERIOD,TRANS_DATE,AMOUNT*-1 AMOUNT,case when AMOUNT*-1>0 then 'D' else 'C' end CR_DR_FLG,ALLOCATION,'999999' JRNAL_NO,'999999' JRNAL_LINE,'ADJ' JRNAL_TYPE, 'ADJ' JRNAL_SRCE, 'ADJ' TREFERENCE,DESCRIPTN,ENTRY_DATE,OTHER_AMT,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8
		from RI_CAT
		)
		select * into #tmp_rinewentries from (
		select 
		ENTITY_ID, LEDGER,  ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, CR_DR_FLG D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE,null ENTRY_PRD, null DUE_DATE, null ALLOC_REF,null ALLOC_DATE,null ALLOC_PERIOD,null ASSET_IND,null ASSET_CODE,null ASSET_SUB,null CONV_CODE,null CONV_RATE,OTHER_AMT,null OTHER_DP,null CLEARDOWN,null REVERSAL,null LOSS_GAIN,null ROUGH_FLAG,null IN_USE_FLAG, ANAL_T0,  ANAL_T1,  ANAL_T2,  ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8,null ANAL_T9, cast(getdate() as date) POSTING_DATE,null ALLOC_IN_PROGRESS,null HOLD_REF,null HOLD_OP_ID,null LAST_CHANGE_USER_ID,null LAST_CHANGE_DATE,null ORIGINATOR_ID,cast(getdate() as date) UPLOAD_DATE,'ETL5 MJE' FNAME,null FPROCDATE,'Manual' SOURCE_TYPE,'MJE' PROCESS_TYPE,getdate() PROCESS_TIME,newid() JOB_PROCESS_ID,0 BATCH_MASTER_ID,0 BATCH_RUN_ID,0 JOB_MASTER_ID,0 JOB_RUN_ID,left(@batch,6) BATCHDATE,getdate() ETL_PROCESS_DATE_TIME
		from  RI_CAT
		union all
		select 
		ENTITY_ID, LEDGER,  ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, CR_DR_FLG D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE,null ENTRY_PRD, null DUE_DATE, null ALLOC_REF,null ALLOC_DATE,null ALLOC_PERIOD,null ASSET_IND,null ASSET_CODE,null ASSET_SUB,null CONV_CODE,null CONV_RATE,OTHER_AMT,null OTHER_DP,null CLEARDOWN,null REVERSAL,null LOSS_GAIN,null ROUGH_FLAG,null IN_USE_FLAG, ANAL_T0,  ANAL_T1,  ANAL_T2,  ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8,null ANAL_T9, cast(getdate() as date) POSTING_DATE,null ALLOC_IN_PROGRESS,null HOLD_REF,null HOLD_OP_ID,null LAST_CHANGE_USER_ID,null LAST_CHANGE_DATE,null ORIGINATOR_ID,cast(getdate() as date) UPLOAD_DATE,'ETL5 MJE' FNAME,null FPROCDATE,'Manual' SOURCE_TYPE,'MJE' PROCESS_TYPE,getdate() PROCESS_TIME,newid() JOB_PROCESS_ID,0 BATCH_MASTER_ID,0 BATCH_RUN_ID,0 JOB_MASTER_ID,0 JOB_RUN_ID,left(@batch,6) BATCHDATE,getdate() ETL_PROCESS_DATE_TIME
		from CONTRA_ACCT
		) n
	ELSE
		SELECT 
			ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, UPLOAD_DATE, FNAME, FPROCDATE, SOURCE_TYPE, PROCESS_TYPE, PROCESS_TIME, JOB_PROCESS_ID, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME
		into #tmp_rinewentries
		from STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL
		where BATCHDATE=left(@batch,6) and 1=2	
		
	--------------------------DELETE INSERT RI NEW ENTRIES-------------------------------------
	DELETE FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES 
	WHERE upper(DESCRIPTN) LIKE '%CATASTROPHE%' AND FNAME='ETL5 MJE' AND BATCHDATE=left(@batch,6) AND ENTITY_ID = 'IAI';

	DELETE FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES
				WHERE ACCNT_CODE IN ('4172000000', '1423008080', '5114040000','5119030000')
				AND JRNAL_NO = 777777 AND DESCRIPTN = 'ADJUSTMENT ROUNDING ETL5'
				AND BATCHDATE = SUBSTRING(@batch,1,6) AND ENTITY_ID = 'IAI';
	
	--declare @counter int=(select count(*) from STAG_ID.STAG_CONFIG_STAG_ETL5_RI_CAT_PREMIUM_CONFIG where BATCHDATE=left(@batch,6) );
	--if (@counter>0)
	INSERT INTO STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES
	(ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, UPLOAD_DATE, FNAME, FPROCDATE, SOURCE_TYPE, PROCESS_TYPE, PROCESS_TIME, JOB_PROCESS_ID, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
	SELECT ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, UPLOAD_DATE, FNAME, FPROCDATE, SOURCE_TYPE, PROCESS_TYPE, PROCESS_TIME, JOB_PROCESS_ID, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME
 	from #tmp_rinewentries;
	--else
	--select 'No insertion required' ; 
	
	----------------------------PREPARE TEMP TABLE FOR DPAS-OMNI NEW ENTRIES------------------
	WITH OMNI AS (
	select 
		'IAI' ENTITY_ID,
		LEDGER,
		ACCNT_CODE,
		left(@batch,4)+'/0'+right(left(@batch,6),2) PERIOD,
		convert(varchar(20),EOMONTH(cast(@batch as date)),103) TRANS_DATE, 
		sum(AMOUNT)*-1 AMOUNT,
		case when sum(AMOUNT)*-1>0 then 'D' else 'C' end CR_DR_FLG, 
		ALLOCATION, 
		'111111' JRNAL_NO, 
		'111111' JRNAL_LINE,
		'ADJ' JRNAL_TYPE, 
		'111111' JRNAL_SRCE, 
		'ETL5-OMNI' TREFERENCE,
		CASE WHEN ACCNT_CODE = '5111010000' THEN 'Death claim'
			 WHEN ACCNT_CODE = '4112110010' THEN 'First year Premium'
			 WHEN ACCNT_CODE = '6417070100' THEN 'Staff Medical Expenses'
		END AS DESCRIPTN,
		ENTRY_DATE,
		'IDR' CONV_CODE,
		0 OTHER_AMT,
		'ITLP000' ANAL_T0,
		NULL ANAL_T1,
		NULL ANAL_T2,
		NULL ANAL_T3,
		NULL ANAL_T4,
		NULL ANAL_T5,
		NULL ANAL_T6,
		ANAL_T7,
		NULL ANAL_T8
	from STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL 
	where BATCHDATE=left(@batch,6) 
	and ACCNT_CODE in ('5111010000','4112110010','6417070100')
	and LOWER(ANAL_T0) like 'gtn%' 
	and (LOWER(ANAL_T1) like '0100g%' or LOWER(ANAL_T1) IS NULL)
	group by LEDGER,ACCNT_CODE,ALLOCATION,ENTRY_DATE, ANAL_T7
	),
	CONTRA_ACCT_OMNI AS (
		select 
			ENTITY_ID,
			LEDGER,
			CASE WHEN ACCNT_CODE = '5111010000' THEN '5111030000'
				 WHEN ACCNT_CODE = '4112110010' THEN '4112110081'
				 WHEN ACCNT_CODE = '6417070100' THEN '6417070200'
			END AS ACCNT_CODE,
			PERIOD,
			TRANS_DATE, 
			AMOUNT*-1 AMOUNT,
			case when AMOUNT*-1>0 then 'D' else 'C' end CR_DR_FLG, 
			ALLOCATION, 
			JRNAL_NO, 
			JRNAL_LINE,
			JRNAL_TYPE, 
			JRNAL_SRCE, 
			TREFERENCE,
			DESCRIPTN,
			ENTRY_DATE,
			CONV_CODE,
			0 OTHER_AMT,
			ANAL_T0,
			ANAL_T1,
			ANAL_T2,
			ANAL_T3,
			ANAL_T4,
			ANAL_T5,
			ANAL_T6,
			ANAL_T7,
			ANAL_T8
		from OMNI
	),
	DPAS AS (
		select 
			'IAI' ENTITY_ID,
			LEDGER,
			ACCNT_CODE,
			left(@batch,4)+'/0'+right(left(@batch,6),2) PERIOD,
			convert(varchar(20),EOMONTH(cast(@batch as date)),103) TRANS_DATE, 
			sum(AMOUNT)*-1 AMOUNT,
			case when sum(AMOUNT)*-1>0 then 'D' else 'C' end CR_DR_FLG, 
			ALLOCATION, 
			'111111' JRNAL_NO, 
			'111111' JRNAL_LINE,
			'ADJ' JRNAL_TYPE, 
			'111111' JRNAL_SRCE, 
			'ETL5-DPAS' TREFERENCE,
			CASE WHEN ACCNT_CODE = '4111100100' THEN 'Single Premium'
				 WHEN ACCNT_CODE = '4112110010' THEN 'First year Premium'
				 WHEN ACCNT_CODE = '4112310010' THEN 'Renewal Premium'
			END AS DESCRIPTN,
			ENTRY_DATE,
			'IDR' CONV_CODE,
			0 OTHER_AMT,
			'ITLP000' ANAL_T0,
			NULL ANAL_T1,
			NULL ANAL_T2,
			NULL ANAL_T3,
			NULL ANAL_T4,
			NULL ANAL_T5,
			NULL ANAL_T6,
			ANAL_T7,
			NULL ANAL_T8
		from STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL 
		where BATCHDATE=left(@batch,6) 
		and ACCNT_CODE in ('4111100100','4112110010','4112310010')
		and LOWER(ANAL_T1) like '0100d%' 
		and LOWER(TREFERENCE) like 'prm%' 
		group by LEDGER,ACCNT_CODE,ALLOCATION,ENTRY_DATE, ANAL_T7
	),
	CONTRA_ACCT_DPAS AS (
		select 
			ENTITY_ID,
			LEDGER,
			CASE WHEN ACCNT_CODE = '4111100100' THEN '4111100400'
				 WHEN ACCNT_CODE = '4112110010' THEN '4112110080'
				 WHEN ACCNT_CODE = '4112310010' THEN '4112310080'
			END AS ACCNT_CODE,
			PERIOD,
			TRANS_DATE, 
			AMOUNT*-1 AMOUNT,
			case when AMOUNT*-1>0 then 'D' else 'C' end CR_DR_FLG, 
			ALLOCATION, 
			JRNAL_NO, 
			JRNAL_LINE,
			JRNAL_TYPE, 
			JRNAL_SRCE, 
			TREFERENCE,
			DESCRIPTN,
			ENTRY_DATE,
			CONV_CODE,
			0 OTHER_AMT,
			ANAL_T0,
			ANAL_T1,
			ANAL_T2,
			ANAL_T3,
			ANAL_T4,
			ANAL_T5,
			ANAL_T6,
			ANAL_T7,
			ANAL_T8
		from DPAS
	)
	select * into #tmp_dpasomninewentries from (
		SELECT
		ENTITY_ID, LEDGER,  ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, CR_DR_FLG D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE,null ENTRY_PRD, null DUE_DATE, null ALLOC_REF,null ALLOC_DATE,null ALLOC_PERIOD,null ASSET_IND,null ASSET_CODE,null ASSET_SUB, CONV_CODE,null CONV_RATE,OTHER_AMT,null OTHER_DP,null CLEARDOWN,null REVERSAL,null LOSS_GAIN,null ROUGH_FLAG,null IN_USE_FLAG, ANAL_T0,  ANAL_T1,  ANAL_T2,  ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8,null ANAL_T9, cast(getdate() as date) POSTING_DATE,null ALLOC_IN_PROGRESS,null HOLD_REF,null HOLD_OP_ID,null LAST_CHANGE_USER_ID,null LAST_CHANGE_DATE,null ORIGINATOR_ID,cast(getdate() as date) UPLOAD_DATE,'ETL5 MJE' FNAME,null FPROCDATE,'Manual' SOURCE_TYPE,'MJE' PROCESS_TYPE,getdate() PROCESS_TIME,newid() JOB_PROCESS_ID,0 BATCH_MASTER_ID,0 BATCH_RUN_ID,0 JOB_MASTER_ID,0 JOB_RUN_ID,left(@batch,6) BATCHDATE,getdate() ETL_PROCESS_DATE_TIME
		FROM OMNI
		UNION ALL
		SELECT 
		ENTITY_ID, LEDGER,  ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, CR_DR_FLG D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE,null ENTRY_PRD, null DUE_DATE, null ALLOC_REF,null ALLOC_DATE,null ALLOC_PERIOD,null ASSET_IND,null ASSET_CODE,null ASSET_SUB, CONV_CODE,null CONV_RATE,OTHER_AMT,null OTHER_DP,null CLEARDOWN,null REVERSAL,null LOSS_GAIN,null ROUGH_FLAG,null IN_USE_FLAG, ANAL_T0,  ANAL_T1,  ANAL_T2,  ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8,null ANAL_T9, cast(getdate() as date) POSTING_DATE,null ALLOC_IN_PROGRESS,null HOLD_REF,null HOLD_OP_ID,null LAST_CHANGE_USER_ID,null LAST_CHANGE_DATE,null ORIGINATOR_ID,cast(getdate() as date) UPLOAD_DATE,'ETL5 MJE' FNAME,null FPROCDATE,'Manual' SOURCE_TYPE,'MJE' PROCESS_TYPE,getdate() PROCESS_TIME,newid() JOB_PROCESS_ID,0 BATCH_MASTER_ID,0 BATCH_RUN_ID,0 JOB_MASTER_ID,0 JOB_RUN_ID,left(@batch,6) BATCHDATE,getdate() ETL_PROCESS_DATE_TIME
		FROM CONTRA_ACCT_OMNI
		UNION ALL
		SELECT 
		ENTITY_ID, LEDGER,  ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, CR_DR_FLG D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE,null ENTRY_PRD, null DUE_DATE, null ALLOC_REF,null ALLOC_DATE,null ALLOC_PERIOD,null ASSET_IND,null ASSET_CODE,null ASSET_SUB, CONV_CODE,null CONV_RATE,OTHER_AMT,null OTHER_DP,null CLEARDOWN,null REVERSAL,null LOSS_GAIN,null ROUGH_FLAG,null IN_USE_FLAG, ANAL_T0,  ANAL_T1,  ANAL_T2,  ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8,null ANAL_T9, cast(getdate() as date) POSTING_DATE,null ALLOC_IN_PROGRESS,null HOLD_REF,null HOLD_OP_ID,null LAST_CHANGE_USER_ID,null LAST_CHANGE_DATE,null ORIGINATOR_ID,cast(getdate() as date) UPLOAD_DATE,'ETL5 MJE' FNAME,null FPROCDATE,'Manual' SOURCE_TYPE,'MJE' PROCESS_TYPE,getdate() PROCESS_TIME,newid() JOB_PROCESS_ID,0 BATCH_MASTER_ID,0 BATCH_RUN_ID,0 JOB_MASTER_ID,0 JOB_RUN_ID,left(@batch,6) BATCHDATE,getdate() ETL_PROCESS_DATE_TIME
		FROM DPAS
		UNION ALL
		SELECT 
		ENTITY_ID, LEDGER,  ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, CR_DR_FLG D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE,null ENTRY_PRD, null DUE_DATE, null ALLOC_REF,null ALLOC_DATE,null ALLOC_PERIOD,null ASSET_IND,null ASSET_CODE,null ASSET_SUB, CONV_CODE,null CONV_RATE,OTHER_AMT,null OTHER_DP,null CLEARDOWN,null REVERSAL,null LOSS_GAIN,null ROUGH_FLAG,null IN_USE_FLAG, ANAL_T0,  ANAL_T1,  ANAL_T2,  ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8,null ANAL_T9, cast(getdate() as date) POSTING_DATE,null ALLOC_IN_PROGRESS,null HOLD_REF,null HOLD_OP_ID,null LAST_CHANGE_USER_ID,null LAST_CHANGE_DATE,null ORIGINATOR_ID,cast(getdate() as date) UPLOAD_DATE,'ETL5 MJE' FNAME,null FPROCDATE,'Manual' SOURCE_TYPE,'MJE' PROCESS_TYPE,getdate() PROCESS_TIME,newid() JOB_PROCESS_ID,0 BATCH_MASTER_ID,0 BATCH_RUN_ID,0 JOB_MASTER_ID,0 JOB_RUN_ID,left(@batch,6) BATCHDATE,getdate() ETL_PROCESS_DATE_TIME
		FROM CONTRA_ACCT_DPAS
	) n;	
	
	--------------------------DELETE INSERT DPAS-OMNI NEW ENTRIES-------------------------------------
	DELETE FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES 
	WHERE TREFERENCE IN ('ETL5-DPAS','ETL5-OMNI') AND FNAME='ETL5 MJE' AND BATCHDATE=left(@batch,6) AND ENTITY_ID = 'IAI';	
	
	INSERT INTO STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES
	(ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, UPLOAD_DATE, FNAME, FPROCDATE, SOURCE_TYPE, PROCESS_TYPE, PROCESS_TIME, JOB_PROCESS_ID, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
	SELECT 
	ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, UPLOAD_DATE, FNAME, FPROCDATE, SOURCE_TYPE, PROCESS_TYPE, PROCESS_TIME, JOB_PROCESS_ID, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME
 	FROM #tmp_dpasomninewentries;
	
	----------------------------PREPARE TEMP TABLE FOR SPIN OFF NEW ENTRIES------------------
	WITH COMPLETE_SUNGL AS(
	SELECT 
		'IAI' ENTITY_ID, 
		LEDGER,
		ACCNT_CODE,
		left(@batch,4)+'/0'+right(left(@batch,6),2) [PERIOD],
		convert(varchar(20),EOMONTH(cast(@batch as date)),103) TRANS_DATE,
		SUM(AMOUNT)*-1 AMOUNT,
		case when sum(AMOUNT)*-1>0 then 'D' else 'C' end CR_DR_FLG,
		ALLOCATION,
		'222222' JRNAL_NO, 
		'222222' JRNAL_LINE,
		'ADJ' JRNAL_TYPE, 
		'ADJ' JRNAL_SRCE, 
		'ETL5-RESTRUCTURING COST' TREFERENCE,
		DESCRIPTN,
		ENTRY_DATE,
		'IDR' CONV_CODE,
		0 OTHER_AMT,
		'ITLP000' ANAL_T0,
		NULL ANAL_T1,
		NULL ANAL_T2,
		NULL ANAL_T3,
		NULL ANAL_T4,
		NULL ANAL_T5,
		NULL ANAL_T6,
		ANAL_T7,
		NULL ANAL_T8
	FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL]
	WHERE [PERIOD] = left(@batch,4)+'/0'+right(left(@batch,6),2)
	AND  LEFT(ACCNT_CODE,1) = '6'
	AND LEFT(ANAL_T3,4) IN (SELECT [PROJECT_CODE] FROM [STAG_ID].[STAG_CONFIG_ETL5_SPIN_OFF] WHERE BATCHDATE=left(@batch,6) GROUP BY [PROJECT_CODE] )
	GROUP BY LEDGER,ACCNT_CODE,ALLOCATION,ENTRY_DATE, DESCRIPTN, ANAL_T7
	),
	RECLASS AS (
	select 
				ENTITY_ID,
				LEDGER,
				'6444444444'AS ACCNT_CODE,
				[PERIOD],
				TRANS_DATE, 
				SUM(AMOUNT)*-1 AMOUNT,	
				CASE WHEN SUM(AMOUNT)*-1 >0 then 'D' else 'C' end CR_DR_FLG, 
				ALLOCATION, 
				JRNAL_NO, 
				JRNAL_LINE,
				JRNAL_TYPE, 
				JRNAL_SRCE, 
				TREFERENCE,
				'IFRS17 Sharia Spinoff and Other Restructuring Cost' AS DESCRIPTN,
				ENTRY_DATE,
				CONV_CODE,
				0 OTHER_AMT,
				ANAL_T0,
				ANAL_T1,
				ANAL_T2,
				ANAL_T3,
				ANAL_T4,
				ANAL_T5,
				ANAL_T6,
				ANAL_T7,
				ANAL_T8
			from COMPLETE_SUNGL
			GROUP BY ENTITY_ID, LEDGER, [PERIOD], TRANS_DATE, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, ENTRY_DATE, 
			CONV_CODE, ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8
	)

	select * into #tmp_spinoffnewentries from (
	SELECT ENTITY_ID, LEDGER,  ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, CR_DR_FLG D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE,null ENTRY_PRD, null DUE_DATE, null ALLOC_REF,null ALLOC_DATE,null ALLOC_PERIOD,null ASSET_IND,null ASSET_CODE,null ASSET_SUB, CONV_CODE,null CONV_RATE,OTHER_AMT,null OTHER_DP,null CLEARDOWN,null REVERSAL,null LOSS_GAIN,null ROUGH_FLAG,null IN_USE_FLAG, ANAL_T0,  ANAL_T1,  ANAL_T2,  ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8,null ANAL_T9, cast(getdate() as date) POSTING_DATE,null ALLOC_IN_PROGRESS,null HOLD_REF,null HOLD_OP_ID,null LAST_CHANGE_USER_ID,null LAST_CHANGE_DATE,null ORIGINATOR_ID,cast(getdate() as date) UPLOAD_DATE,'ETL5 MJE' FNAME,null FPROCDATE,'Manual' SOURCE_TYPE,'MJE' PROCESS_TYPE,getdate() PROCESS_TIME,newid() JOB_PROCESS_ID,0 BATCH_MASTER_ID,0 BATCH_RUN_ID,0 JOB_MASTER_ID,0 JOB_RUN_ID,left(@batch,6) BATCHDATE,getdate() ETL_PROCESS_DATE_TIME
	FROM COMPLETE_SUNGL
	UNION ALL
	SELECT ENTITY_ID, LEDGER,  ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, CR_DR_FLG D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE,null ENTRY_PRD, null DUE_DATE, null ALLOC_REF,null ALLOC_DATE,null ALLOC_PERIOD,null ASSET_IND,null ASSET_CODE,null ASSET_SUB, CONV_CODE,null CONV_RATE,OTHER_AMT,null OTHER_DP,null CLEARDOWN,null REVERSAL,null LOSS_GAIN,null ROUGH_FLAG,null IN_USE_FLAG, ANAL_T0,  ANAL_T1,  ANAL_T2,  ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8,null ANAL_T9, cast(getdate() as date) POSTING_DATE,null ALLOC_IN_PROGRESS,null HOLD_REF,null HOLD_OP_ID,null LAST_CHANGE_USER_ID,null LAST_CHANGE_DATE,null ORIGINATOR_ID,cast(getdate() as date) UPLOAD_DATE,'ETL5 MJE' FNAME,null FPROCDATE,'Manual' SOURCE_TYPE,'MJE' PROCESS_TYPE,getdate() PROCESS_TIME,newid() JOB_PROCESS_ID,0 BATCH_MASTER_ID,0 BATCH_RUN_ID,0 JOB_MASTER_ID,0 JOB_RUN_ID,left(@batch,6) BATCHDATE,getdate() ETL_PROCESS_DATE_TIME 
	FROM RECLASS
	)X
	where AMOUNT <> 0
	
	--------------------------DELETE INSERT SPIN OFF NEW ENTRIES-------------------------------------
	DELETE FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES 
	WHERE TREFERENCE IN ('ETL5-RESTRUCTURING COST') AND FNAME='ETL5 MJE' AND BATCHDATE=left(@batch,6) AND ENTITY_ID = 'IAI';	
	
	INSERT INTO STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES
	(ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, UPLOAD_DATE, FNAME, FPROCDATE, SOURCE_TYPE, PROCESS_TYPE, PROCESS_TIME, JOB_PROCESS_ID, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
	SELECT 
	ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, UPLOAD_DATE, FNAME, FPROCDATE, SOURCE_TYPE, PROCESS_TYPE, PROCESS_TIME, JOB_PROCESS_ID, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME
 	FROM #tmp_spinoffnewentries;
	
 	---------------------------- ETL5 LOGGING ----------------------------      
       	
	DECLARE @V_TOTAL_ROWS integer = 0;
	DECLARE @V_PERIOD nvarchar(10);
	SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM #tmp_rinewentries) ;
    SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

	INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
	VALUES (@V_START,@V_FUNCTION_NAME,'STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES'
	,'NEW ENTRIES',@V_TOTAL_ROWS,'',@V_PERIOD);
		

 	IF @@TRANCOUNT > 0
		COMMIT;
				
	
	END TRY

	BEGIN CATCH
 		IF @@TRANCOUNT > 0
                ROLLBACK;
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;		
		
	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
END;

