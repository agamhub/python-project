CREATE PROC [FOND_ID].[USP_LOAD_ETL5_IFRS4_SUNGL_FMC_BALANCING] @batch [NVARCHAR](100),@JOBNAMESTR [NVARCHAR](2000) AS
BEGIN 
	
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.USP_LOAD_ETL5_IFRS4_SUNGL_FMC_BALANCING';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @V_DRIVER_PERIOD VARCHAR(10) = SUBSTRING(CAST(@batch AS VARCHAR),1,6);
    DECLARE @VAR_SUNGL_EXTRACT_BIN decimal(28,6);
    DECLARE @VAR_SUNGL_EXTRACT decimal(28,6);
    DECLARE @VAR_SUNGL_EXCLUDED_EXCLUSION decimal(28,6);
	DECLARE @VAR_SUNGL_NEW_ENTRIES decimal(28,6);
   	DECLARE @drivername NVARCHAR(15) = 'IFRS4_SUNGL';
	
	------START GET RUN ID DETAIL FROM ABC------
	DECLARE 
	@BATCH_MASTER_ID  VARCHAR(20) = 0,
	@BATCH_RUN_ID    VARCHAR(20) = 0,
	@JOB_MASTER_ID   VARCHAR(20) = 0,
	@JOB_RUN_ID     VARCHAR(20) = 0,
	@GMT_START_DTTM   VARCHAR(19) = CONVERT(DATETIME2, GETDATE());

	EXEC STAG_ID.USP_GetRunIdReturn
	@JobName     = @JOBNAMESTR,
	@BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	@BATCH_RUN_ID  = @BATCH_RUN_ID OUTPUT,
	@JOB_MASTER_ID  = @JOB_MASTER_ID OUTPUT,
	@JOB_RUN_ID   = @JOB_RUN_ID OUTPUT,
	@GMT_START_DTTM = @GMT_START_DTTM OUTPUT;
	------END GET RUN ID DETAIL FROM ABC------

	BEGIN TRY
		SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
		PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
		SET @V_START 	= convert(datetime,getDATE());
		
		SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
		PRINT	@V_DESCRIPTION;
		SET @V_SEQNO		= @V_SEQNO + 1;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		
		
		---------------------------- DROP TEMPORARY TABLE ------------------------------
		IF OBJECT_ID('tempdb..#FMC_SUNGL_EXTRACT_BIN') IS NOT NULL
		BEGIN
			DROP TABLE #FMC_SUNGL_EXTRACT_BIN
		END;
		
		IF OBJECT_ID('tempdb..#FMC_SUNGL_EXTRACT') IS NOT NULL
		BEGIN
			DROP TABLE #FMC_SUNGL_EXTRACT
		END;
		
		IF OBJECT_ID('tempdb..#FMC_SUNGL_EXCLUDED_EXCLUSION') IS NOT NULL
		BEGIN
			DROP TABLE #FMC_SUNGL_EXCLUDED_EXCLUSION
		END;


		---------------------------- FMC BALANCING PROCESS ------------------------------
		SET @V_DESCRIPTION = 'Check FMC Balancing in SUNGL: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		SET @V_SEQNO = @V_SEQNO + 1;

		INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		-- GET SUM AMOUNT OF ALL SUNGL TABLES
		SELECT @VAR_SUNGL_EXTRACT_BIN = SUM(AMT_LOCAL_CCY) FROM FOND_ID.FOND_ETL5_SUNGL_EXTRACT_BIN WHERE EXTRACT_PERIOD = CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2)) AND ENTITY_ID = 'IAI';
		SELECT @VAR_SUNGL_EXTRACT = SUM(AMT_LOCAL_CCY) FROM FOND_ID.FOND_ETL5_SUNGL_EXTRACT WHERE EXTRACT_PERIOD = CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2)) AND ENTITY_ID = 'IAI';
		SELECT @VAR_SUNGL_EXCLUDED_EXCLUSION = SUM(CAST(AMOUNT AS DECIMAL(28,6))) FROM FOND_ID.FOND_PLAI_FOND_ETL5_SUNGL_EXCLUDED_EXCLUSION WHERE PERIOD = CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2)) AND ENTITY_ID = 'IAI';
			   
		-- CHECK IF THE AMOUNT DIFF IS RELATED TO FMC
		IF ABS(@VAR_SUNGL_EXTRACT_BIN) <= 1000 OR ABS(@VAR_SUNGL_EXTRACT) <= 1000 OR ABS(@VAR_SUNGL_EXCLUDED_EXCLUSION) <= 1000
			BEGIN
				--- 1. Delete record related to Adjustment Rounding
				DELETE FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES
				WHERE ACCNT_CODE IN ('4172000000', '1423008080', '5114040000','5119030000')
				AND JRNAL_NO = 777777 AND DESCRIPTN = 'ADJUSTMENT ROUNDING ETL5'
				AND BATCHDATE = SUBSTRING(@batch,1,6) AND ENTITY_ID = 'IAI';
				
				--- 2. Add New Entries for BIN
				IF @VAR_SUNGL_EXTRACT_BIN <> 0 AND ABS(@VAR_SUNGL_EXTRACT_BIN) <= 1000
					BEGIN
						-- 2.1. GET THE HIGHEST AMOUNT OF 4172000000
						SELECT TOP 1 *
						INTO #FMC_SUNGL_EXTRACT_BIN
						FROM FOND_ID.FOND_ETL5_SUNGL_EXTRACT_BIN
						WHERE EXTRACT_PERIOD = CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2))
						AND ACCT_CD = '4172000000'
						AND ENTITY_ID = 'IAI'
						ORDER BY AMT_LOCAL_CCY DESC;
					
						-- 2.2. INSERT ADJUSTMENT OF SUNGL_EXTRACT_BIN INTO MANUAL ENTRIES
						INSERT INTO STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES (ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ANAL_T0, ANAL_T7, POSTING_DATE, FNAME, PROCESS_TIME, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
						SELECT
							ENTITY_ID,
							'A' AS LEDGER,
							'4172000000' AS ACCNT_CODE,
							CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2)) AS PERIOD,
							CONVERT(VARCHAR, EOMONTH(@batch), 103) AS TRANS_DATE,
							(@VAR_SUNGL_EXTRACT_BIN * -1) AS AMOUNT,
							CASE WHEN @VAR_SUNGL_EXTRACT_BIN > 0 THEN 'C' ELSE 'D' END AS D_C,
							777777 AS JRNAL_NO,
							777777 AS JRNAL_LINE,
							'ADJ' AS JRNAL_TYPE,
							'ADJ' AS JRNAL_SRCE,
							'ADJ' AS TREFERENCE,
							'ADJUSTMENT ROUNDING ETL5' AS DESCRIPTN,
							T0 AS ANAL_T0,
							T7 AS ANAL_T7,
							SUBSTRING(@batch,1,6) AS POSTING_DATE,
							'ETL5 MJE' AS FNAME,
							CURRENT_TIMESTAMP AS PROCESS_TIME,
							@BATCH_MASTER_ID AS BATCH_MASTER_ID,
							@BATCH_RUN_ID AS BATCH_RUN_ID,
							@JOB_MASTER_ID AS JOB_MASTER_ID,
							@JOB_RUN_ID AS JOB_RUN_ID,
							CONCAT(SUBSTRING(@batch,1,4), SUBSTRING(@batch,5,2)) AS BATCHDATE,
							CURRENT_TIMESTAMP AS ETL_PROCESS_DATE_TIME
						FROM #FMC_SUNGL_EXTRACT_BIN;
					
						SET @V_DESCRIPTION = 'Rounding Adjustment of Bin Value added into manual entries : ' + convert(varchar,@V_START,121);
						PRINT @V_DESCRIPTION;
						SET @V_SEQNO = @V_SEQNO + 1;
						
						INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
						VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);						
						
					END
				
				--- 3. Add New Entries for Extract
				IF @VAR_SUNGL_EXTRACT <> 0 AND ABS(@VAR_SUNGL_EXTRACT) <= 1000
					BEGIN
						-- 3.1. GET THE HIGHEST AMOUNT OF 1423008080
						SELECT TOP 1 *
						INTO #FMC_SUNGL_EXTRACT
						FROM FOND_ID.FOND_ETL5_SUNGL_EXTRACT
						WHERE EXTRACT_PERIOD = CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2))
						AND ACCT_CD = '1423008080'
						AND ENTITY_ID = 'IAI'
						ORDER BY AMT_LOCAL_CCY DESC;
						
						-- 3.2. INSERT ADJUSTMENT OF SUNGL_EXTRACT INTO MANUAL ENTRIES
						INSERT INTO STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES(ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, CONV_CODE, OTHER_AMT, ANAL_T0, ANAL_T7, POSTING_DATE, FNAME, PROCESS_TIME, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
						SELECT
							ENTITY_ID,
							'A' AS LEDGER,
							'1423008080' AS ACCNT_CODE,
							CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2)) AS PERIOD,
							CONVERT(VARCHAR, EOMONTH(@batch), 103) AS TRANS_DATE,
							(@VAR_SUNGL_EXTRACT * -1) AS AMOUNT,
							CASE WHEN @VAR_SUNGL_EXTRACT > 0 THEN 'C' ELSE 'D' END AS D_C,
							777777 AS JRNAL_NO,
							777777 AS JRNAL_LINE,
							'ADJ' AS JRNAL_TYPE,
							'ADJ' AS JRNAL_SRCE,
							'ADJ' AS TREFERENCE,
							'ADJUSTMENT ROUNDING ETL5' AS DESCRIPTN,
							'IDR' AS CONV_CODE,
							0 AS OTHER_AMT,
							'ITLP000' AS ANAL_T0,
							'P01' AS ANAL_T7,
							SUBSTRING(@batch,1,6) AS POSTING_DATE,
							'ETL5 MJE' AS FNAME,
							CURRENT_TIMESTAMP AS PROCESS_TIME,
							@BATCH_MASTER_ID AS BATCH_MASTER_ID,
							@BATCH_RUN_ID AS BATCH_RUN_ID,
							@JOB_MASTER_ID AS JOB_MASTER_ID,
							@JOB_RUN_ID AS JOB_RUN_ID,
							CONCAT(SUBSTRING(@batch,1,4), SUBSTRING(@batch,5,2)) AS BATCHDATE,
							CURRENT_TIMESTAMP AS ETL_PROCESS_DATE_TIME
						FROM #FMC_SUNGL_EXTRACT;
					
						SET @V_DESCRIPTION = 'Rounding Adjustment of Extract Value added into manual entries : ' + convert(varchar,@V_START,121);
						PRINT @V_DESCRIPTION;
						SET @V_SEQNO = @V_SEQNO + 1;
						
						INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
						VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);						
						
					END
				
				--- 4. Add New Entries for Excluded Exclusion
				IF @VAR_SUNGL_EXCLUDED_EXCLUSION <> 0 AND ABS(@VAR_SUNGL_EXCLUDED_EXCLUSION) <= 1000
					BEGIN
						-- 4.1. GET THE HIGHEST AMOUNT OF 5114040000 OR 5119030000
						SELECT TOP 1 *
						INTO #FMC_SUNGL_EXCLUDED_EXCLUSION
						FROM FOND_ID.FOND_PLAI_FOND_ETL5_SUNGL_EXCLUDED_EXCLUSION
						WHERE PERIOD = CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2))
						AND ACCNT_CODE IN ('5114040000','5119030000')
						AND ENTITY_ID = 'IAI'
						ORDER BY AMOUNT DESC;
					
						-- 4.2. INSERT ADJUSTMENT OF SUNGL_EXCLUDED_EXCLUSION INTO MANUAL ENTRIES
						INSERT INTO STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES(ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE,   DESCRIPTN, CONV_CODE, OTHER_AMT, ANAL_T0, ANAL_T7, POSTING_DATE, FNAME, PROCESS_TIME, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
						SELECT
							ENTITY_ID,
							'A' AS LEDGER,
							ACCNT_CODE,
							CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2)) AS PERIOD,
							CONVERT(VARCHAR, EOMONTH(@batch), 103) AS TRANS_DATE,
							(@VAR_SUNGL_EXCLUDED_EXCLUSION * -1) AS AMOUNT,
							CASE WHEN @VAR_SUNGL_EXCLUDED_EXCLUSION > 0 THEN 'C' ELSE 'D' END AS D_C,
							777777 AS JRNAL_NO,
							777777 AS JRNAL_LINE,
							'ADJ' AS JRNAL_TYPE,
							'ADJ' AS JRNAL_SRCE,
							'ADJ' AS TREFERENCE,
							'ADJUSTMENT ROUNDING ETL5' AS DESCRIPTN,
							'IDR' AS CONV_CODE,
							0 AS OTHER_AMT,
							'ITLP000' AS ANAL_T0,
							'P01' AS ANAL_T7,
							SUBSTRING(@batch,1,6) AS POSTING_DATE,
							'ETL5 MJE' AS FNAME,
							CURRENT_TIMESTAMP AS PROCESS_TIME,
							@BATCH_MASTER_ID AS BATCH_MASTER_ID,
							@BATCH_RUN_ID AS BATCH_RUN_ID,
							@JOB_MASTER_ID AS JOB_MASTER_ID,
							@JOB_RUN_ID AS JOB_RUN_ID,
							CONCAT(SUBSTRING(@batch,1,4), SUBSTRING(@batch,5,2)) AS BATCHDATE,
							CURRENT_TIMESTAMP AS ETL_PROCESS_DATE_TIME
						FROM #FMC_SUNGL_EXCLUDED_EXCLUSION;
						
						SET @V_DESCRIPTION = 'Rounding Adjustment of Excluded Exclusion Value added into manual entries : ' + convert(varchar,@V_START,121);
						PRINT @V_DESCRIPTION;
						SET @V_SEQNO = @V_SEQNO + 1;
						
						INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
						VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
						
					END
				
				--- 5. Check Sum of New Entries equal to zero or not
				SELECT @VAR_SUNGL_NEW_ENTRIES = SUM(CAST(AMOUNT AS decimal(28,6))) FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES
				WHERE PERIOD = CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2)) AND ENTITY_ID = 'IAI';

				IF @VAR_SUNGL_NEW_ENTRIES = 0
					BEGIN
						SET @V_DESCRIPTION = 'New Entries = 0 -> Checked OK at ' + convert(varchar,@V_START,121);
						PRINT @V_DESCRIPTION;
						SET @V_SEQNO = @V_SEQNO + 1;
						
						INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
						VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		
						
						--- 6. Reprocess SUNGL
						exec FOND_ID.USP_LOAD_ETL5_IFRS4_SUNGL @batch, @JOBNAMESTR;
						exec FOND_ID.USP_LOAD_ETL5_SUNGL_EXTRACT @batch, @JOBNAMESTR;
						exec FOND_ID.USP_LOAD_ETL5_SUNGL_EXTRACT_BINEXCLUSION_SEPARATION @batch, @JOBNAMESTR;
						
						SET @V_DESCRIPTION = 'Reprocess SUNGL DONE at ' + convert(varchar,@V_START,121);
						PRINT @V_DESCRIPTION;
						SET @V_SEQNO = @V_SEQNO + 1;
						
						INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
						VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		
					END 
				ELSE 
					BEGIN
						SET @V_DESCRIPTION = 'ERROR: NEW ENTRIES IS NOT ZERO at ' + convert(varchar,@V_START,121);
						PRINT @V_DESCRIPTION;
						SET @V_SEQNO = @V_SEQNO + 1;
						
						INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
						VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
						
						THROW 52000, 'NEW ENTRIES IS NOT ZERO', 1;
					END
					
			END
		ELSE
			BEGIN
				SET @V_DESCRIPTION = 'ERROR: VAR AMOUNT IS NOT RELATED TO FMC BALANCING! at ' + convert(varchar,@V_START,121);
				PRINT @V_DESCRIPTION;
				SET @V_SEQNO = @V_SEQNO + 1;
				
				INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
				VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);					
				
				THROW 52000, 'VAR AMOUNT IS NOT RELATED TO FMC BALANCING!', 1;
			END
		;
		
			
		---------------------------- ETL5 LOGGING ----------------------------      
		
		DECLARE @V_TOTAL_ROWS integer = 0;
		DECLARE @V_PERIOD nvarchar(10);
		SET @V_TOTAL_ROWS = 0;
		SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))
		
		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES',@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);
		
		IF @@TRANCOUNT > 0
		COMMIT;


		---------------------------- DROP TEMPORARY TABLE ------------------------------  
		IF OBJECT_ID('tempdb..#FMC_SUNGL_EXTRACT_BIN') IS NOT NULL
		BEGIN
			DROP TABLE #FMC_SUNGL_EXTRACT_BIN
		END;
		
		IF OBJECT_ID('tempdb..#FMC_SUNGL_EXTRACT') IS NOT NULL
		BEGIN
			DROP TABLE #FMC_SUNGL_EXTRACT
		END;
		
		IF OBJECT_ID('tempdb..#FMC_SUNGL_EXCLUDED_EXCLUSION') IS NOT NULL
		BEGIN
			DROP TABLE #FMC_SUNGL_EXCLUDED_EXCLUSION
		END;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
				ROLLBACK;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
	
END;;
