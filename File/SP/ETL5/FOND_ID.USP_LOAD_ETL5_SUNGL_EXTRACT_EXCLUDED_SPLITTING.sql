CREATE PROC [FOND_ID].[USP_LOAD_ETL5_SUNGL_EXTRACT_EXCLUDED_SPLITTING] @batch [NVARCHAR](100),@JOBNAMESTR [NVARCHAR](2000) AS
BEGIN 
	--DECLARE @batch [nvarchar](30);
--	DECLARE @batch [nvarchar](30)='20190201'
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.FOND_PLAI_FOND_ETL5_SUNGL_EXCLUDED';
	DECLARE @V_TABLE1 		NVARCHAR(2000);
	DECLARE @V_TABLE2 		NVARCHAR(2000);
	DECLARE @SCHEMA      NVARCHAR(MAX)
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @drivername NVARCHAR(15);
	SET @drivername = 'FOND_PLAI_FOND_ETL5_SUNGL_EXCLUDED';
	DECLARE @V_DRIVER_PERIOD VARCHAR(10); 
	SET @V_DRIVER_PERIOD =SUBSTRING(CAST(@batch AS VARCHAR),1,4)+'/0'+SUBSTRING(@batch,5,2) ;
	
	------START GET RUN ID DETAIL FROM ABC------
	DECLARE 
	@BATCH_MASTER_ID  VARCHAR(20) = 0,
	@BATCH_RUN_ID    VARCHAR(20) = 0,
	@JOB_MASTER_ID   VARCHAR(20) = 0,
	@JOB_RUN_ID     VARCHAR(20) = 0,
	@GMT_START_DTTM   VARCHAR(19) = CONVERT(DATETIME2, GETDATE());

	EXEC STAG_ID.USP_GetRunIdReturn
	@JobName     = @JOBNAMESTR,
	@BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	@BATCH_RUN_ID  = @BATCH_RUN_ID OUTPUT,
	@JOB_MASTER_ID  = @JOB_MASTER_ID OUTPUT,
	@JOB_RUN_ID   = @JOB_RUN_ID OUTPUT,
	@GMT_START_DTTM = @GMT_START_DTTM OUTPUT;
	------END GET RUN ID DETAIL FROM ABC------
	
	
BEGIN TRY

		SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
		PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
		SET @V_START 	= convert(datetime,getDATE());

		SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
		PRINT	@V_DESCRIPTION;
		SET @V_SEQNO		= @V_SEQNO + 1;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
		---------------------------- DROP TEMPORARY TABLE ------------------------------
		IF OBJECT_ID('tempdb..#IFRS4_SUNGL_EXCLUDED') IS NOT NULL
		BEGIN
			DROP TABLE #IFRS4_SUNGL_EXCLUDED
		END;

		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'SELECT INTO TEMPORARY TABLE IFRS4_SUNGL_EXCLUDED : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);		 


		---------------------------- INSERT INTO TEMPORARY TABLE ------------------------------
		
--		select A.* 
--		INTO #IFRS4_SUNGL_EXCLUDED
--		from (
--			SELECT ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, UPLOAD_DATE, FNAME, FPROCDATE, SOURCE_TYPE, PROCESS_TYPE, PROCESS_TIME, JOB_PROCESS_ID, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME
--			FROM 
--			(
--			SELECT A.*,LBL FROM (select * from STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL) A
--			LEFT JOIN (SELECT *,'ETL5' AS LBL FROM FOND_ID.FOND_ETL5_SUNGL_EXTRACT) B ON
--			 A.JRNAL_NO=B.JRNAL_NO
--			    AND A.JRNAL_LINE=B.JRNAL_LINE
--			    AND A.PERIOD=B.EXTRACT_PERIOD
--			    AND A.TRANS_DATE=B.TXN_DT
--			    AND TRIM(A.JRNAL_SRCE)=TRIM(B.JRNAL_SRC)
--			) D
--			WHERE LBL IS  NULL ) A 
--		
--		select A.* 
--			INTO #IFRS4_SUNGL_EXCLUDED
--			from (
--				SELECT ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, UPLOAD_DATE, FNAME, FPROCDATE, SOURCE_TYPE, PROCESS_TYPE, PROCESS_TIME, JOB_PROCESS_ID, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME
--				FROM 
--				(
--				SELECT A.*,LBL FROM (
----				select  * from STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL where PERIOD=@V_DRIVER_PERIOD
--				SELECT DISTINCT * FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL WHERE replace(PERIOD,'/0','') =SUBSTRING(CAST(@batch AS VARCHAR),1,6 ) and JRNAL_TYPE not like '%LAS17%'
--				UNION ALL
--				SELECT DISTINCT * FROM [STAG_ID].[STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES] WHERE replace(PERIOD,'/0','') =SUBSTRING(CAST(@batch AS VARCHAR),1,6) 
--				) A
--				LEFT JOIN (SELECT *,'ETL5' AS LBL FROM FOND_ID.FOND_ETL5_SUNGL_EXTRACT where EXTRACT_PERIOD=@V_DRIVER_PERIOD) B ON
--				 A.JRNAL_NO=B.JRNAL_NO
--				    AND A.JRNAL_LINE=B.JRNAL_LINE
--				    AND trim(A.DESCRIPTN)=trim(B.TXN_DESC)
--				    AND A.PERIOD=B.EXTRACT_PERIOD
--				    AND TRIM(A.JRNAL_SRCE)=TRIM(B.JRNAL_SRC)
--				    AND convert(date,A.TRANS_DATE,103)=B.TXN_DT
--				    
--				) D
--				WHERE LBL IS  NULL ) A 

		select A.* 
			INTO #IFRS4_SUNGL_EXCLUDED
			from (
				SELECT ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, UPLOAD_DATE, FNAME, FPROCDATE, SOURCE_TYPE, PROCESS_TYPE, PROCESS_TIME, JOB_PROCESS_ID, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME
				FROM 
				(
				SELECT A.*,LBL FROM (
				select  ENTITY_ID,
				LEDGER,
				ACCNT_CODE,
				PERIOD,
				TRANS_DATE,
				AMOUNT,
				D_C,
				ALLOCATION,
				JRNAL_NO,
				JRNAL_LINE,
				JRNAL_TYPE,
				JRNAL_SRCE,
				TREFERENCE,
				DESCRIPTN,
				ENTRY_DATE,
				ENTRY_PRD,
				DUE_DATE,
				ALLOC_REF,
				ALLOC_DATE,
				ALLOC_PERIOD,
				ASSET_IND,
				ASSET_CODE,
				ASSET_SUB,
				CONV_CODE,
				CONV_RATE,
				OTHER_AMT,
				OTHER_DP,
				CLEARDOWN,
				REVERSAL,
				LOSS_GAIN,
				ROUGH_FLAG,
				IN_USE_FLAG,
				ANAL_T0,
				ANAL_T1,
				ANAL_T2,
				ANAL_T3,
				ANAL_T4,
				ANAL_T5,
				ANAL_T6,
				ANAL_T7,
				ANAL_T8,
				ANAL_T9,
				POSTING_DATE,
				ALLOC_IN_PROGRESS,
				HOLD_REF,
				HOLD_OP_ID,
				LAST_CHANGE_USER_ID,
				LAST_CHANGE_DATE,
				ORIGINATOR_ID,
				cast(getdate() as date) UPLOAD_DATE,
				null FNAME,
				null FPROCDATE,
				null SOURCE_TYPE,
				null PROCESS_TYPE,
				getdate() PROCESS_TIME,
				newid() JOB_PROCESS_ID,
				@BATCH_MASTER_ID AS BATCH_MASTER_ID,
				@BATCH_RUN_ID AS BATCH_RUN_ID,
				@JOB_MASTER_ID AS JOB_MASTER_ID,
				@JOB_RUN_ID AS JOB_RUN_ID,
				CONCAT(SUBSTRING(@batch,1,4), SUBSTRING(@batch,5,2)) AS BATCHDATE,
				CURRENT_TIMESTAMP AS ETL_PROCESS_DATE_TIME
				from  FOND_ID.FOND_ETL5_IFRS4_SUNGL where PERIOD=@V_DRIVER_PERIOD AND ENTITY_ID IN ('IAC','IAS')
				) A
				LEFT JOIN (SELECT *,'ETL5' AS LBL FROM FOND_ID.FOND_ETL5_SUNGL_EXTRACT where EXTRACT_PERIOD=@V_DRIVER_PERIOD AND ENTITY_ID IN ('IAC','IAS')) B ON
				 A.JRNAL_NO=B.JRNAL_NO
				    AND A.JRNAL_LINE=B.JRNAL_LINE
				    AND CAST(trim(A.DESCRIPTN) AS VARCHAR(MAX))=trim(B.TXN_DESC)
				    AND A.PERIOD=B.EXTRACT_PERIOD
				    AND TRIM(A.JRNAL_SRCE)=TRIM(B.JRNAL_SRC)
				    AND convert(date,A.TRANS_DATE,103)=B.TXN_DT
				    AND A.ACCNT_CODE = B.ACCT_CD
					AND A.ENTITY_ID = B.ENTITY_ID
				) D
				WHERE LBL IS  NULL ) A 
		---------------------------- TO Handle rerun process ------------------------------
		BEGIN TRANSACTION;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'TRUNCATE DATA FROM FOND_ID.[FOND_PLAI_FOND_ETL5_SUNGL_EXCLUDED] : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	 

		DELETE FOND_ID.[FOND_PLAI_FOND_ETL5_SUNGL_EXCLUDED] where PERIOD=@V_DRIVER_PERIOD AND ENTITY_ID IN ('IAC','IAS');
	
		 ---------------------------- TO Handle rerun process ------------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'INSERT INTO TABLE FOND_ID.[FOND_PLAI_FOND_ETL5_SUNGL_EXCLUDED] : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
--
--		DECLARE @batch [nvarchar](30)='20190201'
--		SELECT SUBSTRING(CAST(@batch AS VARCHAR),1,4)+'/0'+SUBSTRING(@batch,5,2)
		INSERT INTO [FOND_ID].[FOND_PLAI_FOND_ETL5_SUNGL_EXCLUDED]	
		SELECT ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, UPLOAD_DATE, FNAME, FPROCDATE, SOURCE_TYPE, PROCESS_TYPE, PROCESS_TIME, JOB_PROCESS_ID, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID,left(@batch,6) as BATCHDATE, ETL_PROCESS_DATE_TIME
		FROM #IFRS4_SUNGL_EXCLUDED
		;
	
		---------------------------- ETL5 LOGGING ----------------------------      
       	
		DECLARE @V_TOTAL_ROWS integer = 0;
		DECLARE @V_PERIOD nvarchar(10);
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM #IFRS4_SUNGL_EXCLUDED) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'FOND_ID.FOND_PLAI_FOND_ETL5_SUNGL_EXCLUDED'
		,@drivername,@V_TOTAL_ROWS,'MTD',@V_PERIOD);
		


		IF @@TRANCOUNT > 0
        COMMIT;


		---------------------------- DROP TEMPORARY TABLE ------------------------------  
		IF OBJECT_ID('tempdb..#IFRS4_SUNGL_EXCLUDED') IS NOT NULL
		BEGIN
			DROP TABLE #IFRS4_SUNGL_EXCLUDED
		END;

END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
                ROLLBACK;
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
END;



