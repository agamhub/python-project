CREATE PROC [FOND_ID].[USP_LOAD_ETL5_INSERT_UC_DRIVER_FYP_POLICY] @IFRS17_YEAR [INTEGER],@IFRS17_MONTH [INTEGER],@TABLE_SUFFIX [VARCHAR](100) AS

BEGIN
	DECLARE @V_SQL VARCHAR(MAX);
	DECLARE @V_SQL2 VARCHAR(MAX);
	DECLARE @V_SQL_POLICY_MAPPING VARCHAR(MAX);
	DECLARE	@V_FUNCTION_NAME VARCHAR(200);
	DECLARE @ERROR_MESSAGE VARCHAR(MAX);
	DECLARE @ERROR_STATE INT;
	DECLARE @ERROR_SEVERITY INT;
	DECLARE @V_START datetime;
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_END			datetime;
	
	SET @V_FUNCTION_NAME = CONCAT('FOND_ID.USP_LOAD_ETL5_INSERT_UC_DRIVER_FYP_POLICY ',@IFRS17_YEAR,' ',@IFRS17_MONTH, ' ', @TABLE_SUFFIX);
	
	SET @V_START 	= convert(datetime,getDATE());

	SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
	PRINT	@V_DESCRIPTION;
	SET @V_SEQNO		= @V_SEQNO + 1;
	
	--LogStart
	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	PRINT(@IFRS17_YEAR)
	PRINT(@IFRS17_MONTH)
	
	BEGIN TRY	
	
	
	DELETE FROM FOND_ID.FOND_ETL5_DRIVER_FYP_POLICY WHERE BATCACTYR = @IFRS17_YEAR AND BATCACTMN = @IFRS17_MONTH;
	
	SET @V_SQL_POLICY_MAPPING = 'SELECT A.*,'+
	(SELECT 'CASE '+STRING_AGG(CAST(POLICY_NO AS NVARCHAR(MAX)),' ')+' ELSE NULL END AS POLICY_NUMBER,' FROM 
	(SELECT 
		CASE WHEN (TRANREF = 'Y') THEN 'WHEN (TRANREF <> '''' AND TRANREF IS NOT NULL) AND ' ELSE 'WHEN ' END + 'CONCAT(SACSCODE,SACSTYP,BATCTRCDE) IN ('+TCODE_IN+') THEN '+ THEN_CLAUSE AS POLICY_NO 
		FROM
		(SELECT TRANREF,  ''''+STRING_AGG(CAST(CONCAT(SASCODE,SASTYPE,TCODE) AS NVARCHAR(MAX)),''',''')+'''' TCODE_IN, THEN_CLAUSE FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING GROUP BY THEN_CLAUSE, TRANREF) X_POLICY_NO -- ORDER BY TRANREF DESC
		) POLICY_NO_TABLE) -- POLICY NO SYNTAX
	+' '+
	(SELECT 'CASE '+STRING_AGG(CAST(POLICY_FLAG AS NVARCHAR(MAX)),' ')+' ELSE ' FROM 
	(SELECT 
		CASE WHEN (TRANREF = 'Y') THEN 'WHEN (TRANREF <> '''' AND TRANREF IS NOT NULL) AND ' ELSE 'WHEN ' END + 'CONCAT(SACSCODE,SACSTYP,BATCTRCDE) IN ('+TCODE_IN+') THEN ''P''' AS POLICY_FLAG 
		FROM
		(SELECT TRANREF, ''''+STRING_AGG(CAST(CONCAT(SASCODE,SASTYPE,TCODE) AS NVARCHAR(MAX)),''',''')+'''' TCODE_IN, THEN_CLAUSE FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING GROUP BY THEN_CLAUSE, TRANREF) X_POLICY_FLAG -- ORDER BY TRANREF DESC
		) POLICY_FLAG_TABLE) 
	+(SELECT 'CASE '+STRING_AGG(CAST(POLICY_FLAG AS NVARCHAR(MAX)),' ') FROM 
	(SELECT 
		CASE WHEN (TRANREF = 'Y') THEN 'WHEN (TRANREF = '''' OR TRANREF IS NULL) AND ' ELSE 'WHEN' END +' CONCAT(SACSCODE,SACSTYP,BATCTRCDE) IN ('+SACSTCODE_IN+') THEN ''O''' AS POLICY_FLAG 
		FROM
	(SELECT TRANREF, ''''+STRING_AGG(CAST(CONCAT(SASCODE,SASTYPE,TCODE) AS NVARCHAR(MAX)),''',''')+'''' SACSTCODE_IN FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING_NONRELATED GROUP BY TRANREF) X_POLICY_FLAG -- ORDER BY TRANREF DESC
	) POLICY_FLAG_TABLE)
	+'ELSE ''-'' END END AS POLICY_FLAG,'-- POLICY FLAG SYNTAX
	+' '+
	(SELECT 'CASE '+STRING_AGG(CAST(NEW_RLDGACCT AS NVARCHAR(MAX)),' ')+' ELSE NULL END AS NEW_RLDGACCT' FROM 
	(SELECT 
		CASE WHEN (TRANREF = 'Y') THEN 'WHEN (TRANREF <> '''' AND TRANREF IS NOT NULL) AND ' ELSE 'WHEN ' END + 'CONCAT(SACSCODE,SACSTYP,BATCTRCDE) IN ('+TCODE_IN+') THEN '+  THEN_ACCT AS NEW_RLDGACCT FROM
		(SELECT TRANREF,  ''''+STRING_AGG(CAST(CONCAT(SASCODE,SASTYPE,TCODE) AS NVARCHAR(MAX)),''',''' )+'''' TCODE_IN, THEN_ACCT FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING GROUP BY THEN_ACCT, TRANREF) X_NEW_RLDGACCT --ORDER BY TRANREF DESC
		) NEW_RLDGACCT_TABLE) -- ACCOUNT NO SYNTAX
	+' FROM ACMVPF_RTRNPF_GENLPF A' 
	;
	
	SET @V_SQL = CONCAT('
	WITH ACMVPF_RTRNPF AS(
		SELECT ''ACMV'' MOVEMENT, RDOCNUM, RLDGACCT, SACSCODE, SACSTYP, BATCTRCDE, TRANDESC, ORIGCURR, ORIGAMT, ACCTAMT, BATCCOY, BATCBRN, BATCACTYR, BATCACTMN, BATCBATCH, TRANNO, 
			GENLCOY, POSTMONTH, POSTYEAR, GLCODE, GLSIGN, GENLCUR, EFFDATE,
			CAST(CASE 
			WHEN ((SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),3,2) IN (''01'',''03'',''05'',''07'',''08'',''10'',''12'')) AND (SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),5,2) BETWEEN ''01'' AND ''31'')) 
				THEN (SUBSTRING(CAST(BATCACTYR AS VARCHAR),1,2)+RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6))
			WHEN ((SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),3,2) IN (''04'',''06'',''09'',''11'')) AND (SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),5,2) BETWEEN ''01'' AND ''30'')) 
				THEN (SUBSTRING(CAST(BATCACTYR AS VARCHAR),1,2)+RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6))
			WHEN ((SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),3,2) = ''02'') AND (SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),5,2) BETWEEN ''01'' AND ''28'') OR (SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),3,2) = ''02'' AND CAST((SUBSTRING(CAST(BATCACTYR AS VARCHAR),1,2)+SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),1,2))AS INTEGER)%4 = 0 AND SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),5,2) = ''29'')) 
				THEN (SUBSTRING(CAST(BATCACTYR AS VARCHAR),1,2)+RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6))
			ELSE (CAST(BATCACTYR AS VARCHAR)+RIGHT(''00''+CAST(BATCACTMN AS VARCHAR),2)+''28'') END AS INTEGER) AS TRANSACTION_DATE
			,RDOCPFX,RLDGPFX,TRANREF 
			, CONCAT(CONCAT(SACSCODE,SACSTYP),BATCTRCDE) AS T_CODE
			FROM STAG_ID.STAG_LIFEASIA_ACMVPF_',@IFRS17_YEAR,'',@TABLE_SUFFIX,'
			WHERE BATCACTYR = ',@IFRS17_YEAR,' AND BATCACTMN = ',@IFRS17_MONTH,' -- FILTER DATE 
		UNION ALL 
		SELECT ''ACMV'' MOVEMENT, RDOCNUM, RLDGACCT, SACSCODE, SACSTYP, BATCTRCDE, TRANDESC, ORIGCURR, ORIGAMT, ACCTAMT, BATCCOY, BATCBRN, BATCACTYR, BATCACTMN, BATCBATCH, TRANNO, 
			GENLCOY, POSTMONTH, POSTYEAR, GLCODE, GLSIGN, GENLCUR, EFFDATE,
			CAST(CASE 
			WHEN ((SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),3,2) IN (''01'',''03'',''05'',''07'',''08'',''10'',''12'')) AND (SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),5,2) BETWEEN ''01'' AND ''31'')) 
				THEN (SUBSTRING(CAST(BATCACTYR AS VARCHAR),1,2)+RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6))
			WHEN ((SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),3,2) IN (''04'',''06'',''09'',''11'')) AND (SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),5,2) BETWEEN ''01'' AND ''30'')) 
				THEN (SUBSTRING(CAST(BATCACTYR AS VARCHAR),1,2)+RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6))
			WHEN ((SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),3,2) = ''02'') AND (SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),5,2) BETWEEN ''01'' AND ''28'') OR (SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),3,2) = ''02'' AND CAST((SUBSTRING(CAST(BATCACTYR AS VARCHAR),1,2)+SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),1,2))AS INTEGER)%4 = 0 AND SUBSTRING(RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6),5,2) = ''29'')) 
				THEN (SUBSTRING(CAST(BATCACTYR AS VARCHAR),1,2)+RIGHT(''000000''+CAST(TRANSACTION_DATE AS VARCHAR),6))
			ELSE (CAST(BATCACTYR AS VARCHAR)+RIGHT(''00''+CAST(BATCACTMN AS VARCHAR),2)+''28'') END AS INTEGER) AS TRANSACTION_DATE
			,RDOCPFX,RLDGPFX,TRANREF 
			, CONCAT(CONCAT(SACSCODE,SACSTYP),BATCTRCDE) AS T_CODE
			FROM STAG_ID.STAG_LIFEASIA_AB618B671_',@IFRS17_YEAR,'',@TABLE_SUFFIX,' 
			WHERE BATCACTYR = ',@IFRS17_YEAR,' AND BATCACTMN = ',@IFRS17_MONTH,' AND (BATCACTYR < 2018 OR CONCAT(BATCACTYR,BATCACTMN) = ''201912'') -- FILTER DATE
		UNION ALL
		SELECT ''RTRN'' MOVEMENT, RDOCNUM, RLDGACCT, SACSCODE, SACSTYP, BATCTRCDE, TRANDESC, ORIGCCY ORIGCURR, ORIGAMT, ACCTAMT, BATCCOY, BATCBRN, BATCACTYR, BATCACTMN, BATCBATCH,TRANNO, 
			GENLCOY, POSTMONTH, POSTYEAR, GLCODE, GLSIGN, GENLCUR, EFFDATE, TRANDATE AS TRANSACTION_DATE,RDOCPFX,RLDGPFX, CAST('''' AS VARCHAR) AS TRANREF
			, CONCAT(CONCAT(SACSCODE,SACSTYP),BATCTRCDE) AS T_CODE
			FROM STAG_ID.STAG_LIFEASIA_RTRNPF',@TABLE_SUFFIX,' 
			WHERE BATCACTYR = ',@IFRS17_YEAR,' AND BATCACTMN = ',@IFRS17_MONTH,' -- FILTER DATE
	), GENLPF AS (
		SELECT * FROM FOND_ID.FOND_PREP_LIFEASIA_GTRNPF_GENLPF
		WHERE BATCACTYR = ',@IFRS17_YEAR,' AND BATCACTMN = ',@IFRS17_MONTH,' -- FILTER DATE
	), CHDRPF_NON_VALID2 AS (
		SELECT 
			CHDRNUM,CNTTYPE, MAX(PTDATE) AS PTDATE, MAX(BILLFREQ) AS BILLFREQ
		FROM STAG_ID.STAG_LIFEASIA_CHDRPF 
		WHERE VALIDFLAG <> ''2'' GROUP BY CHDRNUM,CNTTYPE
	), CHDRPF_VALID2 AS (
		SELECT 
			CHDRNUM,CNTTYPE, MAX(PTDATE) AS PTDATE, MAX(BILLFREQ) AS BILLFREQ
		FROM STAG_ID.STAG_LIFEASIA_CHDRPF 
		WHERE VALIDFLAG = ''2'' GROUP BY CHDRNUM,CNTTYPE
	), COVRPF_NON_VALID2 AS (
		SELECT CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE, MAX(CRRCD) CRRCD 
			FROM STAG_ID.STAG_LIFEASIA_COVRPF 
		WHERE VALIDFLAG <> ''2'' GROUP BY CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE
		UNION ALL
		SELECT CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE, NULL CRRCD 
			FROM STAG_ID.STAG_LIFEASIA_COVTPF 
		WHERE CHDRNUM NOT IN (SELECT CHDRNUM FROM STAG_ID.STAG_LIFEASIA_COVRPF WHERE VALIDFLAG <> ''2'' GROUP BY CHDRNUM)
		GROUP BY CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE
	), DESCPF_CASHFLOW AS (
		SELECT DESCITEM, LONGDESC 
		FROM (SELECT ROW_NUMBER() OVER (PARTITION BY DESCITEM ORDER BY DESCCOY) ROWNUM, DESCITEM, SHORTDESC, LONGDESC FROM STAG_ID.STAG_LIFEASIA_DESCPF WHERE DESCTABL = ''T3695'') A 
		WHERE ROWNUM = 1
	), HPADPF as (
		SELECT CHDRNUM, CAST(MAX(HOISSDTE) AS VARCHAR(10)) as HOISSDTE from STAG_ID.STAG_LIFEASIA_HPADPF GROUP BY CHDRNUM
	), ACMVPF_RTRNPF_GENLPF AS (
		SELECT A.*, B.ALTREF, B.SHTDESC, B.APRVDATE
		FROM ACMVPF_RTRNPF A 
		JOIN GENLPF B 
		ON A.BATCCOY = B.BATCCOY AND A.BATCBRN = B.BATCBRN AND A.BATCACTYR = B.BATCACTYR 
		AND A.BATCACTMN = B.BATCACTMN AND A.BATCTRCDE = B.BATCTRCDE AND A.BATCBATCH = B.BATCBATCH 
		AND A.GENLCOY = B.GENLCOY AND A.GENLCUR = B.GENLCUR AND A.GLCODE = B.GENLCDE 
		AND A.ORIGCURR = B.ORIGCURR AND A.POSTMONTH = B.POSTMONTH AND A.POSTYEAR = B.POSTYEAR
	), POLICY_MAPPING AS (
		',@V_SQL_POLICY_MAPPING,'			
	), POLICY_JOIN AS (
		SELECT 
			A.BATCACTYR, 
			A.BATCACTMN,
			CONCAT(A.BATCACTYR, RIGHT(''000''+CAST(A.BATCACTMN AS VARCHAR(3)),3)) AS ACCT_PERIOD,
			A.POLICY_NUMBER AS POLICY_NO,
			A.SACSCODE, 
			A.SACSTYP, 
			A.BATCTRCDE,
			F.LONGDESC AS SACSTYP_DESC, 
			A.GLCODE LFAGLCODE,
			A.POLICY_FLAG,
			CASE WHEN (A.POLICY_FLAG IS NULL OR A.POLICY_FLAG = '''') THEN ''-'' ELSE A.POLICY_FLAG END AS POLICY_IDENTIFIER,
			CASE WHEN A.GLSIGN = ''-'' THEN -1*A.ORIGAMT ELSE A.ORIGAMT END AS AMT_ORG_CCY,
			CASE WHEN A.GLSIGN = ''-'' THEN -1*A.ACCTAMT ELSE A.ACCTAMT END AS AMT_RPT_CCY,
			A.ORIGCURR,
			A.ALTREF,
			HP.HOISSDTE,
			CONCAT(CASE WHEN SUBSTRING(HP.HOISSDTE,5,2) IN (''01'',''02'',''03'') THEN ''01''
				WHEN SUBSTRING(HP.HOISSDTE,5,2) IN (''04'',''05'',''06'') THEN ''02''
				WHEN SUBSTRING(HP.HOISSDTE,5,2) IN (''07'',''08'',''09'') THEN ''03''
				WHEN SUBSTRING(HP.HOISSDTE,5,2) IN (''10'',''11'',''12'') THEN ''04''
				ELSE ''00'' 
			END, SUBSTRING(HP.HOISSDTE,3,2)) AS QQYY,
			COALESCE(B.CNTTYPE,C.CNTTYPE) AS PROD_CD,
			E.CRTABLE AS BENF_CD,
			CASE 
					WHEN A.BATCTRCDE IN (''T642'', ''T679'') THEN 0
					WHEN OC.OCCDATE  = A.EFFDATE THEN 0
					WHEN A.EFFDATE IN (''00000000'',''99999999'') THEN 9 
					WHEN OC.OCCDATE IN (''00000000'',''99999999'') THEN 9 
			ELSE ( CAST(A.EFFDATE/10000 AS INT) - CAST(OC.OCCDATE/10000 AS INT) ) +1 END AS X_YEAR,
			( CAST(A.EFFDATE/10000 AS INT) - CAST(OC.OCCDATE/10000 AS INT) ) * 12 + (CAST(SUBSTRING(CAST(A.EFFDATE AS VARCHAR(10)),5,2) AS INT) - CAST(SUBSTRING(CAST(OC.OCCDATE AS VARCHAR(10)),5,2) AS INT)) X_MONTH,
			B.BILLFREQ,
			CASE WHEN (SUBSTRING(A.ALTREF,1,10) IS NULL OR SUBSTRING(A.ALTREF,1,10) = '''') THEN ''-'' ELSE SUBSTRING(A.ALTREF,1,10) END AS ACCOUNT_CODE
		FROM POLICY_MAPPING A
		LEFT JOIN CHDRPF_NON_VALID2 B ON A.POLICY_NUMBER = B.CHDRNUM
		LEFT JOIN CHDRPF_VALID2 C ON A.POLICY_NUMBER = C.CHDRNUM
		LEFT JOIN COVRPF_NON_VALID2 D ON COALESCE(B.CHDRNUM, C.CHDRNUM) = D.CHDRNUM AND (CASE WHEN LEN(TRIM(A.NEW_RLDGACCT))<14 THEN ''010100'' ELSE SUBSTRING(A.NEW_RLDGACCT,9,6) END) = CONCAT(CONCAT(D.LIFE,D.COVERAGE),D.RIDER)
		LEFT JOIN COVRPF_NON_VALID2 E ON COALESCE(B.CHDRNUM, C.CHDRNUM) = E.CHDRNUM AND ''010100'' = CONCAT(CONCAT(E.LIFE,E.COVERAGE),E.RIDER)
		LEFT JOIN DESCPF_CASHFLOW F ON A.SACSTYP = F.DESCITEM	
		LEFT JOIN HPADPF hp on A.POLICY_NUMBER = HP.CHDRNUM
		LEFT JOIN (SELECT CHDRNUM, MAX(OCCDATE) OCCDATE FROM STAG_ID.STAG_LIFEASIA_CHDRPF WHERE VALIDFLAG <> 2 GROUP BY CHDRNUM) OC ON OC.CHDRNUM = A.POLICY_NUMBER
		WHERE CASE WHEN (SUBSTRING(A.ALTREF,1,10) IS NULL OR SUBSTRING(A.ALTREF,1,10) = '''') THEN ''-'' ELSE SUBSTRING(A.ALTREF,1,10) END >= ''4110000000'' 
			AND
			CASE WHEN (SUBSTRING(A.ALTREF,1,10) IS NULL OR SUBSTRING(A.ALTREF,1,10) = '''') THEN ''-'' ELSE SUBSTRING(A.ALTREF,1,10) END <= ''4189999999''
	)');

	PRINT(@V_SQL)
		
	SET @V_SQL2 = '
		INSERT INTO FOND_ID.FOND_ETL5_DRIVER_FYP_POLICY
		SELECT BATCACTYR, 
				BATCACTMN,
				ACCT_PERIOD,
				POLICY_NO,
				SACSCODE, 
				SACSTYP, 
				BATCTRCDE,
				SACSTYP_DESC, 
				LFAGLCODE,
				POLICY_FLAG,
				POLICY_IDENTIFIER,
				AMT_ORG_CCY,
				AMT_RPT_CCY,
				ORIGCURR,
				ALTREF,
				HOISSDTE,
				QQYY,
				PROD_CD,
				BENF_CD,
				X_YEAR,
				X_MONTH,
				BILLFREQ,
				ACCOUNT_CODE
		FROM POLICY_JOIN
		;
	';
		
	EXEC(@V_SQL+@V_SQL2);

	--LogFinish
	
	---------------------------- TO Handle rerun process ------------------------------
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	= 'INSERT INTO TABLE FOND_ID.FOND_ETL5_DRIVER_FYP_POLICY : ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
                ROLLBACK;
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH

END;

