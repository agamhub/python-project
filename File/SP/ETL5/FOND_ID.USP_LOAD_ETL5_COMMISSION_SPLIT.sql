CREATE PROC [FOND_ID].[USP_LOAD_ETL5_COMMISSION_SPLIT] @batch [NVARCHAR](100),@JOBNAMESTR [NVARCHAR](2000) AS
BEGIN

	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.USP_LOAD_ETL5_COMMISSION_SPLIT';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @PERIOD varchar(10);
	SET @PERIOD = concat(left(convert(varchar(8), @batch),4), '0', substring(convert(varchar(8), @batch),5,2));
	
	------ START ABC ------
	
	DECLARE
    @BATCH_MASTER_ID    VARCHAR(20) = 0,
    @BATCH_RUN_ID       VARCHAR(20) = 0,
    @JOB_MASTER_ID      VARCHAR(20) = 0,
    @JOB_RUN_ID         VARCHAR(20) = 0,
    @GMT_START_DTTM     VARCHAR(20) = GETDATE();
	
	EXEC STAG_ID.USP_GetRunIdReturn
	  @JobName        = @JOBNAMESTR,
	  @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	  @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
	  @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
	  @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
	  @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
	  
	------END GET RUN ID DETAIL FROM ABC--------- 	
	
BEGIN TRY

	SET @V_START_DATE	= convert(date, cast(@batch as varchar)); 
	PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
	SET @V_START 	= convert(datetime,getDATE());
	
	SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
	PRINT	@V_DESCRIPTION;
	SET @V_SEQNO		= @V_SEQNO + 1;
	
	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	-- DROP TEMPORARY TABLE--
	
	IF OBJECT_ID('tempdb.dbo.#UNIONS','U') IS NOT NULL DROP TABLE #UNION;
	IF OBJECT_ID('tempdb.dbo.#SUNGL','U') IS NOT NULL DROP TABLE #SUNGL;
	
	
	
	-----GENERATE UNION PROCESS -----
	
	SET @V_DESCRIPTION = 'Generate Union data and insert into temporary table: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	WITH ETL4_CTE AS (
	SELECT 
		SUN_CD,  SOURCE_CD_BY_SYS, ACCT_PERIOD,CASHFLOW_TYPE_L1, CASHFLOW_TYPE_L2,SUM(AMT_ORG_CCY) AMT_ORG_CCY, SUM(AMT_RPT_CCY) AMT_RPT_CCY, B.CATEGORY COMMISSION_IND
	FROM FCORE_ID.FOND_PAS_ACTUAL_CASHFLOW A
	LEFT JOIN [STAG_ID].[STAG_CONFIG_ETL5_COMMISSION_LIST_CONFIG] B ON B.[IFRS4SUN_CD] = A.SUN_CD
	WHERE cast(ACCT_PERIOD as int)<=cast(left(@batch,4)+'0'+right(left(@batch,6),2) as int)
	AND cast(ACCT_PERIOD as int)>=cast(left(@batch,4)+'001' as int)
	GROUP BY 
	SUN_CD, SOURCE_CD_BY_SYS, CASHFLOW_TYPE_L2, ACCT_PERIOD, CASHFLOW_TYPE_L1, CATEGORY
	),
	ETL5_CTE AS (
	select 
		B.CATEGORY COMMISSION_IND,A.*
	from FCORE_ID.FOND_IFRS17_SUNGL_CLASSIFIED A
	LEFT JOIN [STAG_ID].[STAG_CONFIG_ETL5_COMMISSION_LIST_CONFIG] B ON B.[IFRS4SUN_CD] = A.ACCT_CD
	WHERE cast(EXTRACT_PERIOD_YTD as int)=cast(left(@batch,4)+'0'+right(left(@batch,6),2) as int)
	),
	EXP_COMP AS (
	SELECT  EXPENSE_COMP_IND, CASHFLOW_TYPE_L2
	FROM ETL5_CTE
	WHERE EXPENSE_COMP_IND LIKE 'EXP%'
	GROUP BY EXPENSE_COMP_IND, CASHFLOW_TYPE_L2
	)
	SELECT 
		EXPENSE_COMP_IND, 
		CASHFLOW_TYPE_L2 , 
		SUM(ETL4) AS ETL4, 
		SUM(ETL5) AS ETL5, 
		SUM([ETL4_COMMISSION])[ETL4_COMMISSION], 
		SUM([ETL5_COMMISSION])[ETL5_COMMISSION],
		SUM([ETL4_COMMISSION]) + SUM([ETL5_COMMISSION]) as [COMBINED_COMMISSION], 
		SUM(ETL4) - SUM([ETL4_COMMISSION]) as [ETL4_NON_COMMISSION],
		SUM(ETL5) - SUM([ETL5_COMMISSION]) as [ETL5_NON_COMMISSION]
	into #UNIONS
	FROM(
		SELECT  
			A.EXPENSE_COMP_IND, A.CASHFLOW_TYPE_L2, COALESCE(B.ETL4,0) ETL4, COALESCE(C.ETL5,0) ETL5, COALESCE(D.ETL4_COMM,0) AS [ETL4_COMMISSION],  COALESCE(E.ETL5_COMM,0) AS [ETL5_COMMISSION]
		FROM EXP_COMP A
		LEFT JOIN (SELECT CASHFLOW_TYPE_L2, SUM (AMT_RPT_CCY) ETL4 FROM ETL4_CTE GROUP BY CASHFLOW_TYPE_L2 ) B ON TRIM(A.CASHFLOW_TYPE_L2) = TRIM(B.CASHFLOW_TYPE_L2)
		LEFT JOIN (SELECT CASHFLOW_TYPE_L2, EXPENSE_COMP_IND, SUM (AMT_LOCAL_CCY) ETL5 FROM ETL5_CTE GROUP BY CASHFLOW_TYPE_L2, EXPENSE_COMP_IND) C ON TRIM(A.CASHFLOW_TYPE_L2) = TRIM(C.CASHFLOW_TYPE_L2) AND A.EXPENSE_COMP_IND = C.EXPENSE_COMP_IND
		LEFT JOIN (SELECT CASHFLOW_TYPE_L2, SUM (AMT_RPT_CCY) ETL4_COMM FROM ETL4_CTE WHERE COMMISSION_IND = 'Commission' GROUP BY CASHFLOW_TYPE_L2) D ON TRIM(A.CASHFLOW_TYPE_L2) = TRIM(D.CASHFLOW_TYPE_L2)
		LEFT JOIN (SELECT CASHFLOW_TYPE_L2, SUM (AMT_LOCAL_CCY) ETL5_COMM FROM ETL5_CTE WHERE COMMISSION_IND = 'Commission' GROUP BY CASHFLOW_TYPE_L2) E ON TRIM(A.CASHFLOW_TYPE_L2) = TRIM(E.CASHFLOW_TYPE_L2)
	) x 
	GROUP BY EXPENSE_COMP_IND, CASHFLOW_TYPE_L2;

	-----GENERATE SUNGL PROCESS -----
	
	SET @V_DESCRIPTION = 'Generate SUNGL data and insert into temporary table: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


	SELECT 
		ACCNT_CODE, 
		DESCRIPTN,
		[PERIOD], 
		SUM(CAST(AMOUNT AS FLOAT)) AMOUNT, 
		SUM(CAST(OTHER_AMT AS FLOAT)) TRANSACTION_AMOUNT, 
		ANAL_T0, 
		ANAL_T7, 
		B.CATEGORY COMMISSION_IND
	into #SUNGL
	FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL A
	LEFT JOIN [STAG_ID].[STAG_CONFIG_ETL5_COMMISSION_LIST_CONFIG] B ON B.[IFRS4SUN_CD] = A.ACCNT_CODE
	WHERE [PERIOD]<= left(@batch,4)+'/0'+right(left(@batch,6),2) 
	AND [PERIOD] >= left(@batch,4)+'/001' 
	AND LEDGER = 'A'
	AND B.CATEGORY = 'Commission'
	GROUP BY ACCNT_CODE, DESCRIPTN,[PERIOD], ANAL_T0, ANAL_T7, B.CATEGORY;	
	
	-----DELETE EXISTING DATA FROM THE SAME BATCHDATE	-----
	
	SET @V_DESCRIPTION = 'Delete data from the same batchdate: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	

	DELETE FROM FOND_ID.FOND_ETL5_COMMISSION_SPLIT_VALIDATION WHERE BATCHDATE = left(convert(varchar(8), @batch),6);
	DELETE FROM FOND_ID.FOND_ETL5_COMMISSION_SPLIT_SUMMARY WHERE BATCHDATE = left(convert(varchar(8), @batch),6);

	-----INSERT INTO COMMISSION SPLIT SUMMARY	-----
	
	SET @V_DESCRIPTION = 'Inserting data into table commission split summary: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	INSERT INTO FOND_ID.FOND_ETL5_COMMISSION_SPLIT_SUMMARY
	SELECT 
		EXP_COMP_CF,
		ETL4 AS ETL4_AMT,
		ETL5 AS ETL5_AMT,
		ETL4_COMMISSION AS ETL4_COMM_AMT,
		ETL5_COMMISSION AS ETL5_COMM_AMT,
		COMBINED_COMMISSION AS COMBINED_COMM_AMT,
		ETL4_NON_COMMISSION AS ETL4_NON_COMM_AMT,
		ETL5_NON_COMMISSION AS ETL5_NON_COMM_AMT,
		[COMMISION_PCT_PER_EXP_COMP] AS COMM_PCT_PER_EXP_COMP,
		COMM_CAT_PCT AS COMM_CATEGORY_PCT,
		@BATCH_MASTER_ID AS BATCH_MASTER_ID,
		@BATCH_RUN_ID AS BATCH_RUN_ID,
		@JOB_MASTER_ID AS JOB_MASTER_ID,
		@JOB_RUN_ID AS JOB_RUN_ID,
		left(convert(varchar(8), @batch),6) as BATCHDATE,
		current_timestamp as ETL_PROCESS_DATE_TIME
	FROM (
		SELECT 
			EXPENSE_COMP_IND,
			CASHFLOW_TYPE_L2, 
			SUM(ETL4) AS ETL4 , SUM(ETL5) AS ETL5, SUM(ETL4_COMMISSION) AS ETL4_COMMISSION, SUM(ETL5_COMMISSION) AS ETL5_COMMISSION,	SUM(COMBINED_COMMISSION) AS COMBINED_COMMISSION, 
			SUM([ETL4_NON_COMMISSION]) as [ETL4_NON_COMMISSION],
			SUM([ETL5_NON_COMMISSION]) as [ETL5_NON_COMMISSION],
			GROUPING(EXPENSE_COMP_IND) AS EXPENSE_COMP_INDGrp,
			GROUPING(CASHFLOW_TYPE_L2) AS CASHFLOW_TYPE_L2Grp,
			CASE WHEN GROUPING(EXPENSE_COMP_IND)=0 AND GROUPING(CASHFLOW_TYPE_L2)=1 THEN EXPENSE_COMP_IND
				 WHEN GROUPING(EXPENSE_COMP_IND)=1 AND GROUPING(CASHFLOW_TYPE_L2)=1 THEN 'TOTAL' 
				 ELSE CONCAT(EXPENSE_COMP_IND,' - ',CASHFLOW_TYPE_L2)
			END AS EXP_COMP_CF,
			CASE WHEN GROUPING(EXPENSE_COMP_IND)=0 AND GROUPING(CASHFLOW_TYPE_L2)=1 THEN CAST(COALESCE((SUM(cast(COMBINED_COMMISSION as float))/NULLIF(SUM(cast(COALESCE(ETL4,0) as float) + cast(COALESCE(ETL5,0) as float)),0)*100),0) AS DECIMAL(28,0))
				 ELSE NULL
			END AS [COMMISION_PCT_PER_EXP_COMP],
			CASE WHEN GROUPING(EXPENSE_COMP_IND) IN (0,1) AND GROUPING(CASHFLOW_TYPE_L2)=1 THEN CAST(SUM(COMBINED_COMMISSION)/NULLIF((SELECT SUM(COALESCE(ETL4_COMMISSION,0)+COALESCE(ETL5_COMMISSION,0)) FROM #UNIONS),0)*100 AS DECIMAL(28,0))
				ELSE NULL
			END AS COMM_CAT_PCT
		FROM #UNIONS AA
		GROUP BY ROLLUP(EXPENSE_COMP_IND, CASHFLOW_TYPE_L2)
	) X;
	

	-----INSERT INTO COMMISSION SPLIT VALIDATION	-----
	
	SET @V_DESCRIPTION = 'Inserting data into table commission split validation: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	INSERT INTO FOND_ID.FOND_ETL5_COMMISSION_SPLIT_VALIDATION
	select 
		*, 
		CASE WHEN ABS(VAR_PCT) >= 2 THEN 'FAILED' ELSE 'PASSED' END AS STATUS,
		@BATCH_MASTER_ID AS BATCH_MASTER_ID,
		@BATCH_RUN_ID AS BATCH_RUN_ID,
		@JOB_MASTER_ID AS JOB_MASTER_ID,
		@JOB_RUN_ID AS JOB_RUN_ID,
		left(convert(varchar(8), @batch),6) as BATCHDATE,
		current_timestamp as ETL_PROCESS_DATE_TIME
	FROM(
		SELECT 
			CAST(SUM([ETL4_COMMISSION]) AS float) AS [ETL4_COMM_AMT], 
			CAST(SUM([ETL5_COMMISSION]) AS float) AS [ETL5_COMM_AMT], 
			CAST(SUM([TOTAL_ETL_COMMISSION]) AS float) AS [TOTAL_ETL_COMM_AMT],
			CAST(SUM([TOTAL_TB_COMMISSION]) AS float) AS [TOTAL_TB_COMM_AMT],
			CAST (SUM([TOTAL_ETL_COMMISSION]) - SUM([TOTAL_TB_COMMISSION]) AS float) as [VAR_AMT],
			CAST(coalesce((SUM(cast([TOTAL_ETL_COMMISSION] as float)) - SUM(cast([TOTAL_TB_COMMISSION] as float)))/nullif(SUM(cast([TOTAL_ETL_COMMISSION] as float)),0),0)*100 AS float) AS VAR_PCT
		FROM 
		(SELECT SUM([ETL4_COMMISSION])[ETL4_COMMISSION], SUM([ETL5_COMMISSION])[ETL5_COMMISSION],  SUM([ETL4_COMMISSION])+SUM([ETL5_COMMISSION]) [TOTAL_ETL_COMMISSION] FROM #UNIONS ) AA
		LEFT JOIN (SELECT SUM(AMOUNT) [TOTAL_TB_COMMISSION] FROM #SUNGL) BB ON 1=1
	)SRC;
	
	
	SET @V_DESCRIPTION = 'Data Inserted: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
				ROLLBACK;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
	
END;
