CREATE PROC [FOND_ID].[USP_LOAD_ETL5_PAYABLE_ASSESSMENT_PRE] @batch [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000) AS 
BEGIN
--DECLARE @batch [NVARCHAR](10)='20231128',@JOBNAMESTR [NVARCHAR](2000)='';
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.USP_LOAD_ETL5_PAYABLE_ASSESSMENT_PRE';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @drivername NVARCHAR(15);
	DECLARE @SEQ DATE;
	SET @SEQ = CAST(@batch AS date);

	------ START ABC ------
	DECLARE
    @BATCH_MASTER_ID    VARCHAR(20) = 0,
    @BATCH_RUN_ID       VARCHAR(20) = 0,
    @JOB_MASTER_ID      VARCHAR(20) = 0,
    @JOB_RUN_ID         VARCHAR(20) = 0,
    @GMT_START_DTTM     VARCHAR(20) = GETDATE();
	
	EXEC STAG_ID.USP_GetRunIdReturn
	  @JobName        = @JOBNAMESTR,
	  @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	  @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
	  @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
	  @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
	  @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
	------END GET RUN ID DETAIL FROM ABC--------- 	

BEGIN TRY
	SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
	PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
	SET @V_START 	= convert(datetime,getDATE());
	
	SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
	PRINT	@V_DESCRIPTION;
	SET @V_SEQNO		= @V_SEQNO + 1;
	
	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


	-- Drop Temporary Table
	IF OBJECT_ID('tempdb.dbo.#LIST_PERIOD','U') IS NOT NULL DROP TABLE #LIST_PERIOD;
	IF OBJECT_ID('tempdb.dbo.#ALL_ACCNT_CODE','U') IS NOT NULL DROP TABLE #ALL_ACCNT_CODE;
	IF OBJECT_ID('tempdb.dbo.#EXPENSE_RELATED_PAYABLES','U') IS NOT NULL DROP TABLE #EXPENSE_RELATED_PAYABLES;
	IF OBJECT_ID('tempdb.dbo.#EXPENSE_RELATED_PAYABLES_CURRENT','U') IS NOT NULL DROP TABLE #EXPENSE_RELATED_PAYABLES_CURRENT;
	IF OBJECT_ID('tempdb.dbo.#LIST_ACCNT_YTD','U') IS NOT NULL DROP TABLE #LIST_ACCNT_YTD;
	IF OBJECT_ID('tempdb.dbo.#CURR_MONTH_BEFORE_HIST','U') IS NOT NULL DROP TABLE #CURR_MONTH_BEFORE_HIST;
	IF OBJECT_ID('tempdb.dbo.#CNT_BEFORE_HIST','U') IS NOT NULL DROP TABLE #CNT_BEFORE_HIST;
	IF OBJECT_ID('tempdb.dbo.#CURR_MONTH_AFTER_HIST','U') IS NOT NULL DROP TABLE #CURR_MONTH_AFTER_HIST;

	-- Create List of All Period 12 months back
	SET @V_DESCRIPTION = 'Create List of All Period 12 months back: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


	DELETE FROM [STAG_ID].[STAG_CONFIG_ETL5_PAYABLE_ASSESSMENT_EXCLUSION_HIST] WHERE LEFT(BATCHDATE,6) = LEFT(@batch,6);
 
	INSERT INTO [STAG_ID].[STAG_CONFIG_ETL5_PAYABLE_ASSESSMENT_EXCLUSION_HIST]
	SELECT * FROM [STAG_ID].[STAG_CONFIG_ETL5_PAYABLE_ASSESSMENT_EXCLUSION]
	WHERE LEFT(BATCHDATE,6) = LEFT(@batch,6);
		
	CREATE TABLE #LIST_PERIOD (SEQ VARCHAR(10) NULL);

	WHILE @SEQ > DATEADD(year,-1,CAST(@batch AS date))
	BEGIN
		INSERT INTO #LIST_PERIOD
		SELECT SUBSTRING(convert(varchar,@SEQ),1,4)+'/0'+SUBSTRING(convert(varchar,@SEQ),6,2)
		SET @SEQ = DATEADD(MONTH,-1,@SEQ)
	END

	-- Get the unique list of ACCNT_CODE from SUNGL T-2, Exclude some ACCNT_CODE based on CONFIG and Get first digit of ACCT_CODE
	SET @V_DESCRIPTION = 'Get the unique list of ACCNT_CODE from SUNGL T-2 & Exclude some CoA: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	SELECT  
		PERIOD,
		SUBSTRING(A.ACCNT_CODE,1,1) CHECK_COA, 
		A.ACCNT_CODE,
		A.JRNAL_NO ,
		CASE WHEN SUBSTRING(A.ACCNT_CODE,1,1) = '6' THEN 'Expense' WHEN SUBSTRING(A.ACCNT_CODE,1,1) IN('3','C') THEN 'Payable' ELSE 'Others' END AS REMARKS
	INTO #ALL_ACCNT_CODE
	FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_DRAFT A
	LEFT JOIN (Select * from [STAG_ID].[STAG_CONFIG_ETL5_PAYABLE_ASSESSMENT_EXCLUSION_HIST] where LEFT(BATCHDATE,6) = LEFT(@batch,6)) B ON A.ACCNT_CODE = B.ACCNT_CODE
	WHERE PERIOD = CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2))
	AND B.REMARKS IS NULL
	GROUP BY PERIOD, A.ACCNT_CODE, A.JRNAL_NO;

	-- If Payable found in Expense then it remark as Expense Related
	SET @V_DESCRIPTION = 'Mark Expense Related: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	select 
		AA.PERIOD,
		AA.CHECK_COA, 
		AA.ACCNT_CODE,
		AA.JRNAL_NO, 
		case when BB.REMARKS = 'Expense' THEN 'Expense Related' ELSE 'Non-Exp' END AS REMARKS 
	INTO #EXPENSE_RELATED_PAYABLES
	FROM (SELECT * FROM #ALL_ACCNT_CODE WHERE REMARKS = 'Payable') AA
	LEFT JOIN (SELECT * FROM #ALL_ACCNT_CODE WHERE REMARKS = 'Expense') BB ON AA.JRNAL_NO = BB.JRNAL_NO;

	-- If duplicate record then prioritize Expense Related first
	SET @V_DESCRIPTION = 'Sorting based on ACCT_CODE and only get priority of REMARKS: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	SELECT 
		PERIOD, 
		ACCNT_CODE, 
		REMARKS 
	INTO #EXPENSE_RELATED_PAYABLES_CURRENT
	FROM (SELECT PERIOD, ACCNT_CODE, REMARKS, row_number() over (partition by ACCNT_CODE order by REMARKS) rn FROM #EXPENSE_RELATED_PAYABLES GROUP BY PERIOD, ACCNT_CODE, REMARKS) AA
	WHERE rn = 1;

	-- Get all CoA for all period	
	SELECT * 
	INTO #LIST_ACCNT_YTD 
	FROM (
	SELECT 
		AA.ACCNT_CODE, 
		SEQ AS PERIOD , 
		CASE WHEN SEQ = CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2)) AND b.ACCNT_CODE  is NOT null THEN 'Y' ELSE 'N' END AS EXCL_IND
	FROM (
		SELECT ACCNT_CODE FROM (SELECT * FROM FOND_ID.FOND_ETL5_CONFIG_PAYABLE_ASSESSMENT_FINAL WHERE BATCHDATE = REPLACE(CAST(DATEADD(MONTH,-1,cast(@batch AS DATE)) AS VARCHAR(7)),'-','')) A
		UNION 
		SELECT ACCNT_CODE FROM #EXPENSE_RELATED_PAYABLES_CURRENT ) AA
	LEFT JOIN #LIST_PERIOD BB ON 1=1
	LEFT JOIN (Select * from [STAG_ID].[STAG_CONFIG_ETL5_PAYABLE_ASSESSMENT_EXCLUSION_HIST] where LEFT(BATCHDATE,6) = LEFT(@batch,6)) b on AA.ACCNT_CODE = b.ACCNT_CODE   
	) A WHERE EXCL_IND = 'N';

	SELECT 
		AA.ACCNT_CODE,
		AA.PERIOD,
		COALESCE(CC.REMARKS, BB.REMARKS, 'No Records') AS REMARKS,
		COALESCE(BB.ACTION, 'I') AS ACTION,
		COALESCE(BB.USER_PROFILE, 'ETL5_PLAI') AS USER_PROFILE,
		COALESCE(BB.UPDATE_DATE, GETDATE() ) AS UPDATE_DATE,
		COALESCE(BB.BATCH_MASTER_ID, @BATCH_MASTER_ID) AS BATCH_MASTER_ID,
		COALESCE(BB.BATCH_RUN_ID, @BATCH_RUN_ID) AS BATCH_RUN_ID,
		COALESCE(BB.JOB_MASTER_ID, @JOB_MASTER_ID) AS JOB_MASTER_ID,
		COALESCE(BB.JOB_RUN_ID, @JOB_RUN_ID) AS JOB_RUN_ID,
		COALESCE(BB.BATCHDATE, left(@batch,6)) AS BATCHDATE,
		COALESCE(BB.ETL_PROCESS_DATE_TIME, GETDATE() ) AS ETL_PROCESS_DATE_TIME
	INTO #CURR_MONTH_BEFORE_HIST
	FROM #LIST_ACCNT_YTD AA
	LEFT JOIN (SELECT * FROM FOND_ID.FOND_ETL5_CONFIG_PAYABLE_ASSESSMENT_FINAL WHERE BATCHDATE = REPLACE(CAST(DATEADD(MONTH,-1,cast(@batch AS DATE)) AS VARCHAR(7)),'-','')) BB ON AA.ACCNT_CODE = BB.ACCNT_CODE AND AA.PERIOD = BB.PERIOD
	LEFT JOIN #EXPENSE_RELATED_PAYABLES_CURRENT CC ON AA.ACCNT_CODE = CC.ACCNT_CODE AND AA.PERIOD = CC.PERIOD;

	-- Check 6 months back to get the historical pattern
	SET @V_DESCRIPTION = 'Check 6 months back to get the historical pattern: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	SELECT 
		ACCNT_CODE, 
		COUNT(1) AS CNT 
	INTO #CNT_BEFORE_HIST
	FROM #CURR_MONTH_BEFORE_HIST
	WHERE UPPER(REMARKS) = 'EXPENSE RELATED' 
	AND PERIOD > REPLACE(CAST(DATEADD(MONTH,-6,cast(@batch AS DATE)) AS VARCHAR(7)),'-','/0') 
	GROUP BY ACCNT_CODE;

	SELECT 
		AA.ACCNT_CODE,
		AA.PERIOD,
		CASE WHEN AA.PERIOD = CONCAT(SUBSTRING(@batch, 1, 4), '/0', SUBSTRING(@batch, 5, 2)) THEN (CASE WHEN UPPER(AA.REMARKS) = 'EXPENSE RELATED'  THEN AA.REMARKS  ELSE (CASE WHEN BB.CNT >= 3 THEN 'Expense Related' ELSE AA.REMARKS END) END )ELSE AA.REMARKS END REMARKS,
		AA.ACTION,
		AA.USER_PROFILE,
		AA.UPDATE_DATE,
		AA.BATCH_MASTER_ID,
		AA.BATCH_RUN_ID,
		AA.JOB_MASTER_ID,
		AA.JOB_RUN_ID,
		AA.BATCHDATE,
		AA.ETL_PROCESS_DATE_TIME
	INTO #CURR_MONTH_AFTER_HIST
	FROM #CURR_MONTH_BEFORE_HIST AA
	LEFT JOIN #CNT_BEFORE_HIST BB ON AA.ACCNT_CODE = BB.ACCNT_CODE;

	-- Delete Data Current Period
	DELETE FROM [FOND_ID].[FOND_ETL5_CONFIG_PAYABLE_ASSESSMENT_PRE] WHERE BATCHDATE=left(@batch,6);
	
	SET @V_DESCRIPTION = 'Data truncated: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	-- Insert Data	
	INSERT INTO [FOND_ID].[FOND_ETL5_CONFIG_PAYABLE_ASSESSMENT_PRE]
	SELECT * 
	FROM #CURR_MONTH_BEFORE_HIST
	WHERE BATCHDATE=left(@batch,6)
	--PERIOD > REPLACE(CAST(DATEADD(MONTH,-12,cast(@batch AS DATE)) AS VARCHAR(7)),'-','/0');
	
	SET @V_DESCRIPTION = 'Data Inserted: ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;
	SET @V_SEQNO = @V_SEQNO + 1;

	INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
				ROLLBACK;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
	
END;
