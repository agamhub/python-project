CREATE PROC [FOND_ID].[USP_LOAD_ETL5_RHO_CREDIT_RISK_REPORT] @batch [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000) AS 
BEGIN
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.USP_LOAD_ETL5_RHO_CREDIT_RISK_REPORT';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @drivername NVARCHAR(15);
	SET @batch = CONCAT(SUBSTRING(CAST(@batch AS VARCHAR),1,6),'01');	
	DECLARE @SEQ DATE;
	SET @SEQ = CAST(@batch AS date);

	------ START ABC ------
	DECLARE
    @BATCH_MASTER_ID    VARCHAR(20) = 0,
    @BATCH_RUN_ID       VARCHAR(20) = 0,
    @JOB_MASTER_ID      VARCHAR(20) = 0,
    @JOB_RUN_ID         VARCHAR(20) = 0,
    @GMT_START_DTTM     VARCHAR(20) = GETDATE();
	
	EXEC STAG_ID.USP_GetRunIdReturn
	  @JobName        = @JOBNAMESTR,
	  @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	  @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
	  @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
	  @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
	  @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
	------END GET RUN ID DETAIL FROM ABC--------- 	

BEGIN TRY

SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
SET @V_START 	= convert(datetime,getDATE());

SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
PRINT	@V_DESCRIPTION;
SET @V_SEQNO		= @V_SEQNO + 1;

INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


---------------- Drop All Temporary Tables
SET @V_DESCRIPTION = 'Drop All Temporary Tables: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

IF OBJECT_ID('tempdb.dbo.#MAPPING_ACTUARY','U') IS NOT NULL DROP TABLE #MAPPING_ACTUARY;
IF OBJECT_ID('tempdb.dbo.#CONFIG_RATING','U') IS NOT NULL DROP TABLE #CONFIG_RATING;
IF OBJECT_ID('tempdb.dbo.#SAS_DATA','U') IS NOT NULL DROP TABLE #SAS_DATA;
IF OBJECT_ID('tempdb.dbo.#SAS_DATA_FINAL','U') IS NOT NULL DROP TABLE #SAS_DATA_FINAL;
IF OBJECT_ID('tempdb.dbo.#WITH_ETL1','U') IS NOT NULL DROP TABLE #WITH_ETL1;
IF OBJECT_ID('tempdb.dbo.#WITH_RCGID','U') IS NOT NULL DROP TABLE #WITH_RCGID;
IF OBJECT_ID('tempdb.dbo.#CALCULATION_DETAILS_PER_TREATY','U') IS NOT NULL DROP TABLE #CALCULATION_DETAILS_PER_TREATY;
IF OBJECT_ID('tempdb.dbo.#FINAL_CALCULATION','U') IS NOT NULL DROP TABLE #FINAL_CALCULATION;


---------------- Create Config of Actuary Mapping & Rating
SET @V_DESCRIPTION = 'Create Config of Actuary Mapping & Rating: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

SELECT 
	DISTINCT COLUMN_1 AS BENEFITGROUP_ID , COLUMN_2 AS ACTUARY_MAP
INTO #MAPPING_ACTUARY
FROM STAG_ID.ETL_CONFIG_MASTER WHERE CONFIG_NAME = 'CONFIG_CREDIT_RISK - Mapping_Actuary';

SELECT 
	COLUMN_1 AS REINSURANCE_NAME , COLUMN_2 AS FITCH_RATING
INTO #CONFIG_RATING
FROM STAG_ID.ETL_CONFIG_MASTER WHERE CONFIG_NAME = 'CONFIG_CREDIT_RISK - Rating_Reinsurance';


---------------- Get Data from SAS RI and Join with ETL1
SET @V_DESCRIPTION = 'Get Data from SAS RI and Join with ETL1: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

SELECT * 
INTO #SAS_DATA
FROM 
( 
	SELECT 
		GL_ACCOUNT_TYPE,
		COUNTERPARTY_ID,
		INSURANCE_CONTRACT_GROUP_ID,
		SUM(CAST(CREDIT_RISK_AMOUNT_FC AS NUMERIC(28,6))) AS CREDIT_RISK_AMOUNT_FC
	FROM [STAG_ID].[STAG_VALIDATION_CREDIT_RISK_SAS_RI] T
	GROUP BY GL_ACCOUNT_TYPE, COUNTERPARTY_ID, INSURANCE_CONTRACT_GROUP_ID
) XX WHERE CREDIT_RISK_AMOUNT_FC <> 0;

SELECT 
	GL_ACCOUNT_TYPE, COUNTERPARTY_ID, value as TREATY_ID, SUM(CREDIT_RISK_AMOUNT_FC) AS CREDIT_RISK_AMOUNT_FC 
INTO #SAS_DATA_FINAL 
FROM
(
	SELECT t.*, s.value, ROW_NUMBER() OVER (PARTITION BY GL_ACCOUNT_TYPE, COUNTERPARTY_ID, INSURANCE_CONTRACT_GROUP_ID ORDER BY (SELECT NULL)) idx FROM #SAS_DATA t CROSS APPLY STRING_SPLIT(t.INSURANCE_CONTRACT_GROUP_ID, '_') s 
) xx 
WHERE idx = 2 AND COUNTERPARTY_ID = 'MIXED'
GROUP BY GL_ACCOUNT_TYPE, COUNTERPARTY_ID, value ;

WITH  DATA_SAS AS (select GL_ACCOUNT_TYPE, COUNTERPARTY_ID, TREATY_ID from #SAS_DATA_FINAL)
	, DATA_ETL1 AS (select DISTINCT GROUP_TREATY, BENEFIT_GROUP_ID from STAG_ID.STAG_CONFIG_CREDIT_RISK_RCG_ID)
SELECT 
	A.*,
	CAST(C.BENEFIT_GROUP_ID AS VARCHAR(1000)) BENEFIT_GROUP_ID
INTO #WITH_ETL1
FROM DATA_SAS A 
LEFT JOIN DATA_ETL1 C ON C.GROUP_TREATY = A.TREATY_ID;


---------------- Join with RCG ID
SET @V_DESCRIPTION = 'Join with RCG ID: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

SET DATEFORMAT dmy;  
WITH 
RCG_LIST AS (
	select 
		PRODUCT_COVERED_BY_TREATY, 
		LEGAL_NAME_OF_COUNTER_PARTY, 
		CASE WHEN UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%MAREIN%' THEN 'Marein'
			WHEN UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%RGA%' THEN 'RGA'
			WHEN UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%SWISS%RE%' THEN 'Swiss Re'
			WHEN UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%GEN%RE%' THEN 'Gen Re'
			WHEN UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%MUNICH%RE%' THEN 'Munich Re'
			WHEN UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%PACIFIC%LIFE%RE%' THEN 'Pacific Life Re'
			WHEN (UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%METROPOLITAN%LIFE%' OR UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%MET%LIFE%' ) THEN 'MetLife'
			WHEN UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%PARTNER%RE%' THEN 'Partner Re'
			WHEN UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%HANNOVER%RE%' THEN 'Hannover Re'
			WHEN (UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%INDO RE%' or UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%INDORE%' OR UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%REINDO%') THEN 'Indonesia Re'
			WHEN (UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%NAS RE%' or UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%NASRE%') THEN 'Nasional Re'
			WHEN (UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%TUGU RE%' or UPPER(LEGAL_NAME_OF_COUNTER_PARTY) LIKE '%TUGURE%') THEN 'Tugu Re'
			ELSE 'OTHERS' END AS REINSURER,
		B.BENEFITGROUP_ID,
		CAST(AMOUNT_CEDED_REINSURER AS NUMERIC(28,6)) AS AMOUNT_CEDED_REINSURER
	FROM STAG_ID.STAG_CONFIG_CREDIT_RISK_REINSURANCE_PRODUCT_LIST A 
	LEFT JOIN #MAPPING_ACTUARY B ON B.ACTUARY_MAP LIKE +'%'+A.PRODUCT_COVERED_BY_TREATY+'%'
	WHERE CASE WHEN  YEAR(CASE WHEN ISDATE(TRIM(END_DATE)) = 1 THEN END_DATE WHEN UPPER(TRIM(END_DATE)) = 'OPEN' THEN '31/12/9999' END)  > LEFT(@batch,4) THEN '1' ELSE '0' END = 1
),
RCG_LIST_SUMM AS
(
	SELECT 
		PRODUCT_COVERED_BY_TREATY, LEGAL_NAME_OF_COUNTER_PARTY, REINSURER, BENEFITGROUP_ID, SUM(AMOUNT_CEDED_REINSURER) AS AMOUNT_CEDED_REINSURER 
	FROM RCG_LIST WHERE REINSURER <> 'OTHERS' GROUP BY PRODUCT_COVERED_BY_TREATY, LEGAL_NAME_OF_COUNTER_PARTY,REINSURER, BENEFITGROUP_ID
)
SELECT A.* , B.REINSURER, B.AMOUNT_CEDED_REINSURER
INTO #WITH_RCGID
FROM #WITH_ETL1 A 
LEFT JOIN RCG_LIST_SUMM B on UPPER(B.BENEFITGROUP_ID) = UPPER(A.BENEFIT_GROUP_ID)
WHERE B.PRODUCT_COVERED_BY_TREATY IS NOT NULL;


------------- SPLITTED PER TREATY & REINSURER
SET @V_DESCRIPTION = 'Detail of Calculation splitted by treaty: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

WITH 
DATA_SUM_PCT_PER_TREATY AS (
	SELECT 
		GL_ACCOUNT_TYPE,COUNTERPARTY_ID,TREATY_ID, SUM(AMOUNT_CEDED_REINSURER) AS AMOUNT_CEDED_REINSURER
	FROM #WITH_RCGID 
	GROUP BY GL_ACCOUNT_TYPE,COUNTERPARTY_ID,TREATY_ID
)
SELECT 
	A.*, 
	B.AMOUNT_CEDED_REINSURER AS TOTAL_PCT_PER_TREATY ,	
	C.CREDIT_RISK_AMOUNT_FC AS TOTAL_AMT_PER_TREATY,
	(cast(A.AMOUNT_CEDED_REINSURER as float)/cast(B.AMOUNT_CEDED_REINSURER as float)) AS WEIGHTED_PCT,
	cast((cast(A.AMOUNT_CEDED_REINSURER as float)/cast(B.AMOUNT_CEDED_REINSURER as float))*C.CREDIT_RISK_AMOUNT_FC as float) AS WEIGHTED_AMT
INTO #CALCULATION_DETAILS_PER_TREATY
FROM #WITH_RCGID A
LEFT JOIN DATA_SUM_PCT_PER_TREATY B ON A.GL_ACCOUNT_TYPE = B.GL_ACCOUNT_TYPE AND A.COUNTERPARTY_ID = B.COUNTERPARTY_ID AND A.TREATY_ID = B.TREATY_ID
LEFT JOIN #SAS_DATA_FINAL C ON A.GL_ACCOUNT_TYPE = C.GL_ACCOUNT_TYPE AND A.COUNTERPARTY_ID = C.COUNTERPARTY_ID AND A.TREATY_ID = C.TREATY_ID;


------------- SPLITTED REINSURER -> FINAL DATA of SUMMARY
SET @V_DESCRIPTION = 'SUMMARY FINAL of Calculation splitted by reinsurer: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

WITH DATA_SUM_PCT_PER_REINSURER AS (
	SELECT 
		GL_ACCOUNT_TYPE,COUNTERPARTY_ID,REINSURER,
		SUM(WEIGHTED_PCT) WEIGHTED_PCT, SUM(WEIGHTED_AMT) WEIGHTED_AMT
	FROM #CALCULATION_DETAILS_PER_TREATY
	GROUP BY GL_ACCOUNT_TYPE,COUNTERPARTY_ID,REINSURER
),
TOTAL AS (
	SELECT 
		GL_ACCOUNT_TYPE,COUNTERPARTY_ID,
		SUM(WEIGHTED_PCT) TOTAL_PCT, SUM(WEIGHTED_AMT) TOTAL_AMT
	FROM DATA_SUM_PCT_PER_REINSURER
	GROUP BY GL_ACCOUNT_TYPE,COUNTERPARTY_ID
)
SELECT 
	A.GL_ACCOUNT_TYPE,A.COUNTERPARTY_ID,A.REINSURER,
	(A.WEIGHTED_PCT/B.TOTAL_PCT) AS WEIGHTED_PCT,
	(A.WEIGHTED_PCT/B.TOTAL_PCT)*B.TOTAL_AMT AS WEIGHTED_AMT,
	C.FITCH_RATING
INTO #FINAL_CALCULATION
FROM DATA_SUM_PCT_PER_REINSURER A 
LEFT JOIN TOTAL B ON A.GL_ACCOUNT_TYPE = B.GL_ACCOUNT_TYPE AND A.COUNTERPARTY_ID = B.COUNTERPARTY_ID
LEFT JOIN #CONFIG_RATING C ON UPPER(A.REINSURER) = UPPER(C.REINSURANCE_NAME);


------------- Delete Data of Detail & Summary
SET @V_DESCRIPTION = 'Delete Data in Table Detail & Summary: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

DELETE FROM [FOND_ID].[FOND_ETL5_RHO_CREDIT_RISK_RPT_DETAIL] WHERE BATCHDATE=left(@batch,6);
DELETE FROM [FOND_ID].[FOND_ETL5_RHO_CREDIT_RISK_RPT_SUMMARY] WHERE BATCHDATE=left(@batch,6);


------------- INSERT Data INTO TABLE Credit Risk Detail & Summary
SET @V_DESCRIPTION = 'Inserting Data into Table: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

INSERT INTO [FOND_ID].[FOND_ETL5_RHO_CREDIT_RISK_RPT_DETAIL] 
SELECT 
	GL_ACCOUNT_TYPE, 
	COUNTERPARTY_ID,
	TREATY_ID,
	BENEFIT_GROUP_ID,
	REINSURER,
	AMOUNT_CEDED_REINSURER,
	TOTAL_PCT_PER_TREATY,
	TOTAL_AMT_PER_TREATY,
	WEIGHTED_PCT,
	WEIGHTED_AMT,
	@BATCH_MASTER_ID AS BATCH_MASTER_ID,
	@BATCH_RUN_ID AS BATCH_RUN_ID,
	@JOB_MASTER_ID AS JOB_MASTER_ID,
	@JOB_RUN_ID AS JOB_RUN_ID,
	left(@batch,6) AS BATCHDATE,
	GETDATE() AS ETL_PROCESS_DATE_TIME
FROM #CALCULATION_DETAILS_PER_TREATY;

SET @V_DESCRIPTION = 'Data Inserted into Table Detail: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


INSERT INTO [FOND_ID].[FOND_ETL5_RHO_CREDIT_RISK_RPT_SUMMARY] 
SELECT 
	GL_ACCOUNT_TYPE,
	COUNTERPARTY_ID,
	REINSURER,
	WEIGHTED_PCT,
	WEIGHTED_AMT,
	FITCH_RATING,
	@BATCH_MASTER_ID AS BATCH_MASTER_ID,
	@BATCH_RUN_ID AS BATCH_RUN_ID,
	@JOB_MASTER_ID AS JOB_MASTER_ID,
	@JOB_RUN_ID AS JOB_RUN_ID,
	left(@batch,6) AS BATCHDATE,
	GETDATE() AS ETL_PROCESS_DATE_TIME
FROM #FINAL_CALCULATION;

SET @V_DESCRIPTION = 'Data Inserted into Table Summary: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
			ROLLBACK;
	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_END 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	='Error execution for function on ' 
						+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
						+ ' with Error Message : ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;
	
	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	raiserror(@V_DESCRIPTION, 18, 1)
END CATCH
	
END;
