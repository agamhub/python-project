CREATE PROC [FOND_ID].[USP_LOAD_ETL5_RHO_BEL_REPORT] @batch [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000) AS 
BEGIN
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.USP_LOAD_ETL5_RHO_BEL_REPORT';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @drivername NVARCHAR(15);
	SET @batch = CONCAT(SUBSTRING(CAST(@batch AS VARCHAR),1,6),'01');		
	DECLARE @SEQ DATE;
	SET @SEQ = CAST(@batch AS date);
	DECLARE @VAR_CHECK_DQ_MEASUREMENT decimal(10,2);	

	------ START ABC ------
	DECLARE
    @BATCH_MASTER_ID    VARCHAR(20) = 0,
    @BATCH_RUN_ID       VARCHAR(20) = 0,
    @JOB_MASTER_ID      VARCHAR(20) = 0,
    @JOB_RUN_ID         VARCHAR(20) = 0,
    @GMT_START_DTTM     VARCHAR(20) = GETDATE();
	
	EXEC STAG_ID.USP_GetRunIdReturn
	  @JobName        = @JOBNAMESTR,
	  @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	  @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
	  @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
	  @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
	  @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;
	------END GET RUN ID DETAIL FROM ABC--------- 	

BEGIN TRY

SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
SET @V_START 	= convert(datetime,getDATE());

SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
PRINT	@V_DESCRIPTION;
SET @V_SEQNO		= @V_SEQNO + 1;

INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


---------------- Drop All Temporary Tables
SET @V_DESCRIPTION = 'Drop All Temporary Tables: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

IF OBJECT_ID('tempdb.dbo.#ICG_IDR','U') IS NOT NULL DROP TABLE #ICG_IDR;
IF OBJECT_ID('tempdb.dbo.#ICG_USD','U') IS NOT NULL DROP TABLE #ICG_USD;
IF OBJECT_ID('tempdb.dbo.#MIXED','U') IS NOT NULL DROP TABLE #MIXED;
IF OBJECT_ID('tempdb.dbo.#RECONCILE','U') IS NOT NULL DROP TABLE #RECONCILE;
IF OBJECT_ID('tempdb.dbo.#NET_OPENING_BALANCE_BREAKDOWN','U') IS NOT NULL DROP TABLE #NET_OPENING_BALANCE_BREAKDOWN;
IF OBJECT_ID('tempdb.dbo.#SUMMARY_BEL','U') IS NOT NULL DROP TABLE #SUMMARY_BEL;


------------------- MANUAL GROUP DATA
SET @V_DESCRIPTION = 'Create Config of Manual Group: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

SELECT 
	IFRS17_ACCOUNT_CODE,
	ICG_ID,
	SUM(CAST(TOTAL_ADJ_AMOUNT AS NUMERIC(28,6))) TOTAL_ADJ_AMOUNT
INTO #ICG_IDR
FROM [STAG_ID].[STAG_CONFIG_BEL_MANUAL_GROUP]
WHERE UPPER(ICG_ID) LIKE '%IDR%'
GROUP BY IFRS17_ACCOUNT_CODE, ICG_ID

SELECT 
	IFRS17_ACCOUNT_CODE,
	ICG_ID,
	SUM(CAST(TOTAL_ADJ_AMOUNT AS NUMERIC(28,6))) TOTAL_ADJ_AMOUNT
INTO #ICG_USD
FROM [STAG_ID].[STAG_CONFIG_BEL_MANUAL_GROUP]
WHERE UPPER(ICG_ID) LIKE '%USD%'
GROUP BY IFRS17_ACCOUNT_CODE, ICG_ID

SELECT 
	IFRS17_ACCOUNT_CODE,
	SUM(CAST(TOTAL_ADJ_AMOUNT AS NUMERIC(28,6))) TOTAL_ADJ_AMOUNT
INTO #MIXED
FROM [STAG_ID].[STAG_CONFIG_BEL_MANUAL_GROUP]
GROUP BY IFRS17_ACCOUNT_CODE


------------------- RECONCILE
SET @V_DESCRIPTION = 'Build Data of Reconcile: ' + convert(varchar,@V_START,121);
PRINT @V_DESCRIPTION;
SET @V_SEQNO = @V_SEQNO + 1;

INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

SELECT 
	REPORTING_PERIOD,
	GL_ACCOUNT_ID,
	GL_ACCOUNT_DESCRIPTION,
	ICA_ICL,
	MEASURE_NAME,
	SUM(NET_OPENING_BALANCE) as NET_OPENING_BALANCE,
	SUM([MOVEMENT]) [MOVEMENT],
	SUM(NET_CLOSING_BALANCE) as NET_CLOSING_BALANCE,
	(SUM(NET_OPENING_BALANCE) + SUM([MOVEMENT]) - SUM(NET_CLOSING_BALANCE)) [CHECK],
	CASE WHEN UPPER(MEASURE_NAME) LIKE ('ACTUAL%') THEN 'FINANCE DATA'
	     WHEN (UPPER(MEASURE_NAME) IS NULL OR  UPPER(MEASURE_NAME) = '') AND UPPER(ACCOUNTING_EVENT_TYPE_CODE) LIKE '%CARRYFWD%' THEN 'FINANCE DATA'
		 WHEN (UPPER(MEASURE_NAME) IS NULL OR  UPPER(MEASURE_NAME) = '') AND UPPER(ACCOUNTING_EVENT_TYPE_DESCRIPTION) LIKE 'FX%' THEN 'FINANCE DATA'
		 WHEN UPPER(MEASURE_NAME) = '+' THEN 'SLAM MA'
	ELSE 'ACTUARIAL DATA'
	END [TYPE]
INTO #RECONCILE
FROM (
	SELECT 
		REPORTING_PERIOD,
		GL_ACCOUNT_ID,
		GL_ACCOUNT_DESCRIPTION,
		LEFT(GL_ACCOUNT_DESCRIPTION,3) ICA_ICL,
		MEASURE_NAME,
		ACCOUNTING_EVENT_TYPE_CODE,
		ACCOUNTING_EVENT_TYPE_DESCRIPTION,
		CASE WHEN UPPER(ACCOUNTING_EVENT_TYPE_LEVEL_1) LIKE '%NET OPENING BALANCE%' THEN SUM(CAST(BALANCE_AMOUNT_FC_IN_TRIAL_BALANCE_SIGN AS NUMERIC(28,6))) ELSE 0 END NET_OPENING_BALANCE,
		CASE WHEN UPPER(ACCOUNTING_EVENT_TYPE_LEVEL_1) NOT LIKE '%NET%' THEN SUM(CAST(BALANCE_AMOUNT_FC_IN_TRIAL_BALANCE_SIGN AS NUMERIC(28,6))) ELSE 0 END [MOVEMENT],
		CASE WHEN UPPER(ACCOUNTING_EVENT_TYPE_LEVEL_1) LIKE '%NET CLOSING BALANCE%' THEN SUM(CAST(BALANCE_AMOUNT_FC_IN_TRIAL_BALANCE_SIGN AS NUMERIC(28,6))) ELSE 0 END NET_CLOSING_BALANCE
	FROM [STAG_ID].[STAG_VALIDATION_BEL_SAS_DATA]
	WHERE LEFT(REPORTING_PERIOD,4) IN (CAST(YEAR(CAST(@batch AS DATE)) AS VARCHAR), CAST(YEAR(DATEADD(year,-1,CAST(@batch AS DATE))) AS VARCHAR))
	AND UPPER(GL_ACCOUNT_DESCRIPTION) LIKE '%BEL%'
	GROUP BY REPORTING_PERIOD, GL_ACCOUNT_ID,GL_ACCOUNT_DESCRIPTION, ACCOUNTING_EVENT_TYPE_LEVEL_1, MEASURE_NAME, ACCOUNTING_EVENT_TYPE_CODE,ACCOUNTING_EVENT_TYPE_DESCRIPTION
)X
GROUP BY REPORTING_PERIOD, GL_ACCOUNT_ID,GL_ACCOUNT_DESCRIPTION, ICA_ICL, MEASURE_NAME, ACCOUNTING_EVENT_TYPE_CODE,ACCOUNTING_EVENT_TYPE_DESCRIPTION;


------------------- DQCHECK BY SP EXECUTION - Ensure any Null / Blank Measurement Model is tagged to Actuarial Data or not
SELECT @VAR_CHECK_DQ_MEASUREMENT = COUNT(1) FROM #RECONCILE WHERE COALESCE(MEASURE_NAME,'') ='' AND UPPER(TYPE) LIKE '%ACTUARIAL%DATA%';

IF @VAR_CHECK_DQ_MEASUREMENT = 0
	BEGIN
		------------------- Net Opening Balance Breakdown
		SET @V_DESCRIPTION = 'Build Data of Net Opening Balance Breakdown: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		SET @V_SEQNO = @V_SEQNO + 1;

		INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		SELECT 
			A.GL_ACCOUNT_ID,
			SUM(COALESCE(B.TOTAL_ADJ_AMOUNT,0))*-1 FIN_BALANCE_IN_ICG_CURRENCY,
			SUM(COALESCE(C.TOTAL_ADJ_AMOUNT,0))*-1 FIN_BALANCE_IN_IDR_FOR_IDR_ICG,
			SUM(COALESCE(D.TOTAL_ADJ_AMOUNT,0))*-1 FIN_BALANCE_IN_USD_FOR_USD_ICG,
			((SUM(COALESCE(D.TOTAL_ADJ_AMOUNT,0)) * (-14252.5) ) + (SUM(COALESCE(C.TOTAL_ADJ_AMOUNT,0))*-1)) FIN_BALANCE_IN_IDR_FOR_ALL_ICG,
			SUM(A.NET_OPENING_BALANCE) - (((SUM(COALESCE(D.TOTAL_ADJ_AMOUNT,0)) * (-14252.5) ) + (SUM(COALESCE(C.TOTAL_ADJ_AMOUNT,0))*-1))) ACT_BALANCE_IN_IDR_FOR_ALL_ICG
		INTO #NET_OPENING_BALANCE_BREAKDOWN
		FROM (SELECT GL_ACCOUNT_ID, SUM(NET_OPENING_BALANCE) NET_OPENING_BALANCE, REPORTING_PERIOD FROM #RECONCILE GROUP BY GL_ACCOUNT_ID, REPORTING_PERIOD)  A
		LEFT JOIN (SELECT IFRS17_ACCOUNT_CODE, SUM(TOTAL_ADJ_AMOUNT) TOTAL_ADJ_AMOUNT FROM #MIXED GROUP BY IFRS17_ACCOUNT_CODE)  B ON A.GL_ACCOUNT_ID = B.IFRS17_ACCOUNT_CODE
		LEFT JOIN (SELECT IFRS17_ACCOUNT_CODE, SUM(TOTAL_ADJ_AMOUNT) TOTAL_ADJ_AMOUNT FROM #ICG_IDR GROUP BY IFRS17_ACCOUNT_CODE) C ON A.GL_ACCOUNT_ID = C.IFRS17_ACCOUNT_CODE
		LEFT JOIN (SELECT IFRS17_ACCOUNT_CODE, SUM(TOTAL_ADJ_AMOUNT) TOTAL_ADJ_AMOUNT FROM #ICG_USD GROUP BY IFRS17_ACCOUNT_CODE) D ON A.GL_ACCOUNT_ID = D.IFRS17_ACCOUNT_CODE
		WHERE LEFT(A.REPORTING_PERIOD,4)= CAST(YEAR(DATEADD(year,-1,CAST(@batch AS DATE))) AS VARCHAR)
		GROUP BY GL_ACCOUNT_ID;


		------------------- FINAL
		SET @V_DESCRIPTION = 'Build Data SUMMARY FINAL: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		SET @V_SEQNO = @V_SEQNO + 1;

		INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		SELECT 
			A.GL_ACCOUNT_ID,
			COALESCE(B.ACT_BALANCE_IN_IDR_FOR_ALL_ICG,0) BOP_ACT,
			COALESCE(B.FIN_BALANCE_IN_IDR_FOR_ALL_ICG,0) BOP_FIN,
			COALESCE(C.[MOVEMENT],0) MOVEMENT_ACT,
			COALESCE(D.[MOVEMENT],0) MOVEMENT_FN,
			COALESCE(E.[MOVEMENT],0) MOVEMENT_SLAM_MA,
			COALESCE(B.ACT_BALANCE_IN_IDR_FOR_ALL_ICG,0) + COALESCE(C.[MOVEMENT],0) EOP_ACT,
			COALESCE(B.FIN_BALANCE_IN_IDR_FOR_ALL_ICG,0) + COALESCE(D.[MOVEMENT],0) EOP_FN,
			COALESCE(E.[MOVEMENT],0) EOP_SLAM_MA,
			COALESCE(F.NET_CLOSING_BALANCE,0) SAS,
			(((COALESCE(B.ACT_BALANCE_IN_IDR_FOR_ALL_ICG,0) + COALESCE(C.[MOVEMENT],0))+(COALESCE(B.FIN_BALANCE_IN_IDR_FOR_ALL_ICG,0) + COALESCE(D.[MOVEMENT],0))+COALESCE(E.[MOVEMENT],0))- COALESCE(F.NET_CLOSING_BALANCE,0))[CHECK]
		INTO #SUMMARY_BEL
		FROM (SELECT GL_ACCOUNT_ID FROM #RECONCILE GROUP BY GL_ACCOUNT_ID) A
		LEFT JOIN (SELECT GL_ACCOUNT_ID, SUM(FIN_BALANCE_IN_IDR_FOR_ALL_ICG) FIN_BALANCE_IN_IDR_FOR_ALL_ICG, SUM(ACT_BALANCE_IN_IDR_FOR_ALL_ICG) ACT_BALANCE_IN_IDR_FOR_ALL_ICG FROM #NET_OPENING_BALANCE_BREAKDOWN GROUP BY GL_ACCOUNT_ID) B ON A.GL_ACCOUNT_ID = B.GL_ACCOUNT_ID
		LEFT JOIN (SELECT GL_ACCOUNT_ID, SUM([MOVEMENT]) [MOVEMENT], [TYPE] FROM #RECONCILE GROUP BY GL_ACCOUNT_ID,[TYPE]) C ON A.GL_ACCOUNT_ID = C.GL_ACCOUNT_ID AND C.TYPE = 'ACTUARIAL DATA'
		LEFT JOIN (SELECT GL_ACCOUNT_ID, SUM([MOVEMENT]) [MOVEMENT], [TYPE] FROM #RECONCILE GROUP BY GL_ACCOUNT_ID,[TYPE]) D ON A.GL_ACCOUNT_ID = D.GL_ACCOUNT_ID AND D.TYPE = 'FINANCE DATA'
		LEFT JOIN (SELECT GL_ACCOUNT_ID, SUM([MOVEMENT]) [MOVEMENT], [TYPE] FROM #RECONCILE GROUP BY GL_ACCOUNT_ID,[TYPE]) E ON A.GL_ACCOUNT_ID = E.GL_ACCOUNT_ID AND E.TYPE = 'SLAM MA'
		LEFT JOIN (SELECT GL_ACCOUNT_ID, SUM(NET_CLOSING_BALANCE) NET_CLOSING_BALANCE, REPORTING_PERIOD FROM #RECONCILE GROUP BY GL_ACCOUNT_ID,REPORTING_PERIOD) F ON A.GL_ACCOUNT_ID =F.GL_ACCOUNT_ID AND LEFT(F.REPORTING_PERIOD,4) = CAST(YEAR(CAST(@batch AS DATE)) AS VARCHAR);


		------------- Delete Data of Detail & Summary
		SET @V_DESCRIPTION = 'Delete Data in Table Detail & Summary: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		SET @V_SEQNO = @V_SEQNO + 1;

		INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		DELETE FROM [FOND_ID].[FOND_ETL5_RHO_BEL_RPT_DETAIL_RECONCILE] WHERE BATCHDATE=left(@batch,6);
		DELETE FROM [FOND_ID].[FOND_ETL5_RHO_BEL_RPT_DETAIL_BREAKDOWN] WHERE BATCHDATE=left(@batch,6);
		DELETE FROM [FOND_ID].[FOND_ETL5_RHO_BEL_RPT_SUMMARY] WHERE BATCHDATE=left(@batch,6);


		------------- INSERT Data INTO TABLE Credit Risk Detail & Summary
		SET @V_DESCRIPTION = 'Inserting Data into Table: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		SET @V_SEQNO = @V_SEQNO + 1;

		INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		INSERT INTO [FOND_ID].[FOND_ETL5_RHO_BEL_RPT_DETAIL_RECONCILE]
		SELECT
			REPORTING_PERIOD,
			GL_ACCOUNT_ID,
			GL_ACCOUNT_DESCRIPTION,
			ICA_ICL,MEASURE_NAME,
			NET_OPENING_BALANCE,
			MOVEMENT,
			NET_CLOSING_BALANCE,
			[CHECK],
			TYPE,
			@BATCH_MASTER_ID AS BATCH_MASTER_ID,
			@BATCH_RUN_ID AS BATCH_RUN_ID,
			@JOB_MASTER_ID AS JOB_MASTER_ID,
			@JOB_RUN_ID AS JOB_RUN_ID,
			left(@batch,6) AS BATCHDATE,
			GETDATE() AS ETL_PROCESS_DATE_TIME
		FROM #RECONCILE;

		SET @V_DESCRIPTION = 'Data Inserted into Table RECONCILE: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		SET @V_SEQNO = @V_SEQNO + 1;

		INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		INSERT INTO [FOND_ID].[FOND_ETL5_RHO_BEL_RPT_DETAIL_BREAKDOWN]
		SELECT
			GL_ACCOUNT_ID,
			FIN_BALANCE_IN_ICG_CURRENCY,
			FIN_BALANCE_IN_IDR_FOR_IDR_ICG,
			FIN_BALANCE_IN_USD_FOR_USD_ICG,
			FIN_BALANCE_IN_IDR_FOR_ALL_ICG,
			ACT_BALANCE_IN_IDR_FOR_ALL_ICG,
			@BATCH_MASTER_ID AS BATCH_MASTER_ID,
			@BATCH_RUN_ID AS BATCH_RUN_ID,
			@JOB_MASTER_ID AS JOB_MASTER_ID,
			@JOB_RUN_ID AS JOB_RUN_ID,
			left(@batch,6) AS BATCHDATE,
			GETDATE() AS ETL_PROCESS_DATE_TIME
		FROM #NET_OPENING_BALANCE_BREAKDOWN;

		SET @V_DESCRIPTION = 'Data Inserted into Table NET OPENING BALANCE BREAKDOWN: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		SET @V_SEQNO = @V_SEQNO + 1;

		INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		INSERT INTO [FOND_ID].[FOND_ETL5_RHO_BEL_RPT_SUMMARY]
		SELECT
			GL_ACCOUNT_ID,
			BOP_ACT,
			BOP_FIN,
			MOVEMENT_ACT,
			MOVEMENT_FN,
			MOVEMENT_SLAM_MA,
			EOP_ACT,
			EOP_FN,
			EOP_SLAM_MA,
			SAS,
			[CHECK],
			@BATCH_MASTER_ID AS BATCH_MASTER_ID,
			@BATCH_RUN_ID AS BATCH_RUN_ID,
			@JOB_MASTER_ID AS JOB_MASTER_ID,
			@JOB_RUN_ID AS JOB_RUN_ID,
			left(@batch,6) AS BATCHDATE,
			GETDATE() AS ETL_PROCESS_DATE_TIME
		FROM #SUMMARY_BEL;

		SET @V_DESCRIPTION = 'Data Inserted into Table FINAL: ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		SET @V_SEQNO = @V_SEQNO + 1;

		INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	END 
ELSE 
	BEGIN
		SET @V_DESCRIPTION = 'ERROR!!!: DQCHECK FAILED - Ensure any Null / Blank Measurement Model is tagged to Actuarial Data or not.' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		SET @V_SEQNO = @V_SEQNO + 1;
		
		INSERT INTO FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	
		
		THROW 52000, 'There s null measurement model tagged to Actuarial', 1;
	END
END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
				ROLLBACK;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
	
END;;
