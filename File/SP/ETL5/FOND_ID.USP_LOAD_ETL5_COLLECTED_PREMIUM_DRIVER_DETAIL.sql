CREATE PROC [FOND_ID].[USP_LOAD_ETL5_COLLECTED_PREMIUM_DRIVER_DETAIL] @batch1 [NVARCHAR](100),@batch2 [NVARCHAR](100),@batchid [NVARCHAR](100),@batchrunid [NVARCHAR](100),@jobid [NVARCHAR](100),@jobrunid [NVARCHAR](100) AS 
BEGIN

DECLARE @V_START		datetime;
DECLARE @V_END			datetime;
DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.USP_LOAD_ETL5_COLLECTED_PREMIUM_DRIVER_DETAIL';
DECLARE @V_DESCRIPTION	NVARCHAR(2000);
DECLARE @V_CMD			NVARCHAR(2000);
DECLARE @V_SEQNO			integer = 0; 
DECLARE @V_PRD_ID		integer;
DECLARE @V_CREATED_DATE	datetime;
DECLARE @V_START_DATE	date;
DECLARE @V_END_DATE		date;
DECLARE @drivername VARCHAR;
SET @drivername = 'COLLECTEDPREM';

BEGIN TRY -- START PROCEDURE

-- AUDIT LOG - START

	SET @V_START_DATE	= convert(date, cast(@batch1 as varchar)); -- valuation extract date
	PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
	SET @V_START 	= convert(datetime,getDATE());

	SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
	PRINT	@V_DESCRIPTION;
	SET @V_SEQNO		= @V_SEQNO + 1;

	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
	---------------------------- DROP TEMPORARY TABLE ------------------------------
	IF OBJECT_ID('tempdb..#ETL5_COLLECTED_PREMIUM_DRIVER') IS NOT NULL
	BEGIN
	    DROP TABLE #ETL5_COLLECTED_PREMIUM_DRIVER
	END;
	
	
	---------------------------- INSERT INTO TEMPORARY TABLE ------------------------------

-- AUDIT LOG - INSERT TEMP TABLE

	SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	= 'INSERT INTO TEMPORARY TABLE ETL5_COLLECTED_PREMIUM_DRIVER : ' + convert(varchar,@V_START,121);
	PRINT @V_DESCRIPTION;

	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


	SELECT * 
	INTO #ETL5_COLLECTED_PREMIUM_DRIVER
	FROM (
	
	SELECT 
			'IAI' ENTITY_ID,
			'LifeAsia' DRIVER_SOURCE,
			SUBSTRING(@batch2,0,5)+'0'+SUBSTRING(@batch2,6,2) DRIVER_PERIOD,
			POLICY_NO as POL_NO,
			max(BENF_CD) as BENF_CD,
			max(PROD_CD) as PROD_CD,
			'' TREATY_CD,
			max(ADJ_T0) AS FUND,
	        @drivername AS ALLOCATION_DRIVER,
			SUM(CAST(PREMIUM_COLLECTED AS NUMERIC(18,3))) DRIVER_AMOUNT,
			@batchid DL_PLAI_BATCHID,
			@batchid DL_PLAI_BATCH_RUN_ID,
			@batchrunid DL_PLAI_JOBID,
			@jobrunid DL_PLAI_JOB_RUN_ID,
			SUBSTRING(@batch2,0,5)+SUBSTRING(@batch2,6,2) DL_PLAI_BATCHDATE,
	        GETDATE() ETL_PROCESS_DATE_TIME
	FROM FOND_ID.FOND_ETL5_LIFEASIA_DRIVER_DETAIL_PREMIUM_COLLECTED_RENEWAL_PREMIUM
	WHERE  ACCOUNTING_PERIOD BETWEEN YEAR(DATEADD(month, 0,CONVERT(date, @batch1))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch1)))
	AND YEAR(DATEADD(month, 0,CONVERT(date, @batch2))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch2)))
	and PREMIUM_COLLECTED is not null
	GROUP BY POLICY_NO
	
	--select top 10 * from FOND_ID.FOND_ETL5_LIFEASIA_DRIVER_DETAIL_PREMIUM_COLLECTED_RENEWAL_PREMIUM
	
	UNION all
	
	
  --select top 10 * from FOND_ID.FOND_ETL5_PRUEMAS_DRIVER_DETAIL
	
	SELECT 
	        'IAI' ENTITY_ID,
			'PruEmas' DRIVER_SOURCE,
			SUBSTRING(@batch2,0,5)+'0'+SUBSTRING(@batch2,6,2) DRIVER_PERIOD,
			POL_NO ,
			max([BENF_CD]) as BENF_CD,
			max([PROD_CD]) as PROD_CD,
			'' [TREATY_CD],
			max([ADJ_T0]) AS FUND,
	        @drivername ALLOCATION_DRIVER,
			SUM(CAST([COLLECTED_PREMIUM] AS NUMERIC(18,3))) DRIVER_AMOUNT,
			@batchid DL_PLAI_BATCHID,
			@batchid DL_PLAI_BATCH_RUN_ID,
			@batchrunid DL_PLAI_JOBID,
			@jobrunid DL_PLAI_JOB_RUN_ID,
			SUBSTRING(@batch2,0,5)+SUBSTRING(@batch2,6,2) DL_PLAI_BATCHDATE,
			 GETDATE() ETL_PROCESS_DATE_TIME
			 -- select top 10 *
	      FROM FOND_ID.FOND_ETL5_PRUEMAS_DRIVER_DETAIL
	WHERE  ACCOUNTING_PERIOD BETWEEN YEAR(DATEADD(month, 0,CONVERT(date, @batch1))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch1)))
	AND YEAR(DATEADD(month, 0,CONVERT(date, @batch2))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch2)))
	GROUP BY [POL_NO]
	
	UNION all
	
	SELECT 
	        'IAI' ENTITY_ID,
			'PruAman' DRIVER_SOURCE,
			SUBSTRING(@batch2,0,5)+'0'+SUBSTRING(@batch2,6,2) DRIVER_PERIOD,
			[POL_NO],
			max([BENF_CD]) as BENF_CD,
			max([PROD_CD]) as PROD_CD,
			'' [TREATY_CD],
			max([ADJ_T0]) AS FUND,
	        @drivername ALLOCATION_DRIVER,
			SUM(CAST([COLLECTED_PREMIUM] AS NUMERIC(18,3))) DRIVER_AMOUNT,
			@batchid DL_PLAI_BATCHID,
			@batchid DL_PLAI_BATCH_RUN_ID,
			@batchrunid DL_PLAI_JOBID,
			@jobrunid DL_PLAI_JOB_RUN_ID,
			SUBSTRING(@batch2,0,5)+SUBSTRING(@batch2,6,2) DL_PLAI_BATCHDATE,
	        GETDATE() ETL_PROCESS_DATE_TIME
			from FOND_ID.FOND_ETL5_PRUAMAN_DRIVER_DETAIL
	WHERE  ACCOUNTING_PERIOD BETWEEN YEAR(DATEADD(month, 0,CONVERT(date, @batch1))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch1)))
	AND YEAR(DATEADD(month, 0,CONVERT(date, @batch2))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch2)))
	GROUP BY [POL_NO]
	
	UNION all
	
	SELECT 
	        'IAI' ENTITY_ID,
			'PruAmanS' DRIVER_SOURCE,
			SUBSTRING(@batch2,0,5)+'0'+SUBSTRING(@batch2,6,2) DRIVER_PERIOD,
			POL_NO,
			max([BENF_CD]) as BENF_CD,
			max([PROD_CD]) as PROD_CD,
			'' [TREATY_CD],
			max([ADJ_T0]) AS FUND,
	        @drivername ALLOCATION_DRIVER,
			SUM(CAST([COLLECTED_PREMIUM] AS NUMERIC(18,3))) DRIVER_AMOUNT,
			@batchid DL_PLAI_BATCHID,
			@batchid DL_PLAI_BATCH_RUN_ID,
			@batchrunid DL_PLAI_JOBID,
			@jobrunid DL_PLAI_JOB_RUN_ID,
			SUBSTRING(@batch2,0,5)+SUBSTRING(@batch2,6,2) DL_PLAI_BATCHDATE,
	        GETDATE() ETL_PROCESS_DATE_TIME
			from FOND_ID.FOND_ETL5_PRUAMAN_SHARIA_DRIVER_DETAIL
	WHERE  ACCOUNTING_PERIOD BETWEEN YEAR(DATEADD(month, 0,CONVERT(date, @batch1))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch1)))
	AND YEAR(DATEADD(month, 0,CONVERT(date, @batch2))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch2)))
	GROUP BY [POL_NO]
	
	--select top 10 * from FOND_ID.FOND_ETL5_PRUAMAN_SHARIA_DRIVER_DETAIL
	
	UNION ALL
	
	SELECT 
	        'IAI' ENTITY_ID,
			'PayLife' DRIVER_SOURCE,
			SUBSTRING(@batch2,0,5)+'0'+SUBSTRING(@batch2,6,2) DRIVER_PERIOD,
			[POL_NO],
			max([BENF_CD]) as BENF_CD,
			max([PROD_CD]) as PROD_CD,
			'' [TREATY_CD],
			max([ADJ_T0]) AS FUND,
	        @drivername ALLOCATION_DRIVER,
			SUM(CAST([COLLECTED_PREMIUM] AS NUMERIC(18,3))) DRIVER_AMOUNT,
			@batchid DL_PLAI_BATCHID,
			@batchid DL_PLAI_BATCH_RUN_ID,
			@batchrunid DL_PLAI_JOBID,
			@jobrunid DL_PLAI_JOB_RUN_ID,
			SUBSTRING(@batch2,0,5)+SUBSTRING(@batch2,6,2) DL_PLAI_BATCHDATE,
	        GETDATE() ETL_PROCESS_DATE_TIME
	      FROM FOND_ID.FOND_ETL5_PAYLIFE_DRIVER_DETAIL
	WHERE  ACCOUNTING_PERIOD BETWEEN YEAR(DATEADD(month, 0,CONVERT(date, @batch1))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch1)))
	AND YEAR(DATEADD(month, 0,CONVERT(date, @batch2))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch2)))
	GROUP BY [POL_NO]
	
	UNION ALL
	SELECT 
	        'IAI' ENTITY_ID,
			'CreditShield' DRIVER_SOURCE,
			SUBSTRING(@batch2,0,5)+'0'+SUBSTRING(@batch2,6,2) DRIVER_PERIOD,
			[POL_NO],
			max([BENF_CD]) as BENF_CD,
			max([PROD_CD]) as PROD_CD,
			'' [TREATY_CD],
			max([ADJ_T0]) AS FUND,
	        @drivername ALLOCATION_DRIVER,
			SUM(CAST([COLLECTED_PREMIUM] AS NUMERIC(18,3))) DRIVER_AMOUNT,
			@batchid DL_PLAI_BATCHID,
			@batchid DL_PLAI_BATCH_RUN_ID,
			@batchrunid DL_PLAI_JOBID,
			@jobrunid DL_PLAI_JOB_RUN_ID,
			SUBSTRING(@batch2,0,5)+SUBSTRING(@batch2,6,2) DL_PLAI_BATCHDATE,
	        GETDATE() ETL_PROCESS_DATE_TIME
	      FROM FOND_ID.FOND_ETL5_CREDITSHIELD_DRIVER_DETAIL
	WHERE  ACCOUNTING_PERIOD BETWEEN YEAR(DATEADD(month, 0,CONVERT(date, @batch1))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch1)))
	AND YEAR(DATEADD(month, 0,CONVERT(date, @batch2))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch2)))
	GROUP BY [POL_NO]
--	
	) A;
	
		--select top 10 * FROM  FOND_ID.FOND_ETL5_COLLECTED_PREMIUM_DRIVER_DETAIL
		
		---------------------------- TO Handle rerun process ------------------------------
		BEGIN TRANSACTION;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'DELETE DATA FROM FOND_ID.FOND_ETL5_COLLECTED_PREMIUM_DRIVER_DETAIL : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	
		-- DELETE EXISTING DATA
		DELETE FROM FOND_ID.FOND_ETL5_COLLECTED_PREMIUM_DRIVER_DETAIL
		WHERE  DRIVER_PERIOD BETWEEN YEAR(DATEADD(month, 0,CONVERT(date, @batch1))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch1)))
		AND YEAR(DATEADD(month, 0,CONVERT(date, @batch2))) * 1000 + 0 + MONTH(DATEADD(month, 0,CONVERT(date, @batch2)));
	
				
		---------------------------- TO Handle rerun process ------------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'INSERT INTO TABLE FOND_ID.FOND_ETL5_COLLECTED_PREMIUM_DRIVER_DETAIL : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		INSERT INTO FOND_ID.FOND_ETL5_COLLECTED_PREMIUM_DRIVER_DETAIL
				SELECT ENTITY_ID,
				case when DRIVER_SOURCE='LifeAsia' then DRIVER_SOURCE else DRIVER_SOURCE*-1 end DRIVER_SOURCE ,
				CAST (DRIVER_PERIOD AS VARCHAR(7)) DRIVER_PERIOD,
				POL_NO,
				BENF_CD,
				PROD_CD,
				TREATY_CD,
				FUND,
				ALLOCATION_DRIVER,
				DRIVER_AMOUNT,
				BATCH_MASTER_ID,
				BATCH_RUN_ID,
				JOB_MASTER_ID,
				JOB_RUN_ID,
				CAST (DL_PLAI_BATCHDATE AS VARCHAR(6)) DL_PLAI_BATCHDATE,
				ETL_PROCESS_DATE_TIME  FROM #ETL5_COLLECTED_PREMIUM_DRIVER; 

		IF @@TRANCOUNT > 0
        COMMIT;
       
		---------------------------- DROP TEMPORARY TABLE ------------------------------  
		IF OBJECT_ID('tempdb..#ETL5_COLLECTED_PREMIUM_DRIVER') IS NOT NULL
		BEGIN
			DROP TABLE #ETL5_COLLECTED_PREMIUM_DRIVER
		END;

-- END PROCEDURE
END TRY

BEGIN CATCH

	IF @@TRANCOUNT > 0
            ROLLBACK;
    SET @V_SEQNO 	= @V_SEQNO + 1;
	SET @V_START 	= convert(datetime,getDATE());
	SET @V_END 	= convert(datetime,getDATE());
	SET @V_DESCRIPTION	='Error execution for function on ' 
						+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
						+ ' with Error Message : ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;
	
	SELECT 'Error : ' + ERROR_MESSAGE();

	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	raiserror(@V_DESCRIPTION, 18, 1)
END CATCH

END;


