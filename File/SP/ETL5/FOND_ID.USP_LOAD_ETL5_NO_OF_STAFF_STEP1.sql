CREATE PROC [FOND_ID].[USP_LOAD_ETL5_NO_OF_STAFF_STEP1] @batchdate [varchar](6) AS 
Begin
	declare @monthYear varchar(6)=@batchdate;
	declare @monthYear2 varchar(10)='';
	declare @year varchar(10)= '';
	set @year = left(@monthYear,4)
	set @monthYear2 = CONCAT(left(@monthYear,4),'/0',RIGHT(@monthYear,2))
	--select @monthYear2
	BEGIN TRY
	-------------[[[[[[[[[#1]]]]]]]]]]]
	IF OBJECT_ID('tempdb..#ETL5_TEMP_NO_STAFF_PER_PRODUCT') IS NOT NULL
	BEGIN
		DROP TABLE #ETL5_TEMP_NO_STAFF_PER_PRODUCT
	END;
	

--declare @monthYear varchar(6)='20210101';
--declare @monthYear2 varchar(10)='';
--declare @year varchar(10)= '';
--set @year = left(@monthYear,4)
--set @monthYear2 = CONCAT(left(@monthYear,4),'/0',RIGHT(@monthYear,2));

	WITH TBL_POLICY AS (
			SELECT UNIT.*,HPADPF.HOISSDTE HPADPF_HOISSDTE
			FROM (
					SELECT HOISSDTE,AGNTNUM,CHDRNUM,CNTTYPE,CONCAT(CNTTYPE,'R') CRTABLE,0 PREMI,API,PRUSVR,SINGP,SUMINS FROM STAG_ID.STAG_LIFEASIA_ZPRUPF_V2 WHERE left(HOISSDTE,6) <= @monthYear  --> UNTUK PRODUK UNITLINK
					UNION
					SELECT HOISSDTE,AGNTNUM,CHDRNUM,left(CRTABLE,3) CNTTYPE,CRTABLE,PREMI,0 API,0 PRUSVR,0 SINGP,SUMINS FROM STAG_ID.STAG_LIFEASIA_AC1108RDB WHERE left(HOISSDTE,6) <= @monthYear   --> UNTUK PRODUK TRADITIONAL
					UNION
					SELECT HOISSDTE,'' AGNTNUM,CHDRNUM,left(CRTABLE,3) CNTTYPE,CRTABLE,0 PREMI,0 API,0 PRUSVR,0 SINGP,SUMINS FROM STAG_ID.STAG_LIFEASIA_IPSUPF WHERE left(HOISSDTE,6) <= @monthYear   --> UNTUK POLIS PRODUK LINK/SINGLE PREMI
					UNION
					SELECT HOISSDTE,'' AGNTNUM,CHDRNUM,CNTTYPE,CONCAT(CNTTYPE,'R') CRTABLE,0 PREMI,API,0 PRUSVR,0 SINGP,SUMINS FROM STAG_ID.STAG_LIFEASIA_IPRVPF WHERE left(HOISSDTE,6) <= @monthYear  --> UNTUK POLIS REGULAR LINK
				) UNIT
			INNER JOIN 
				(  SELECT 
						HOISSDTE, 
						CHDRNUM 
				   FROM STAG_ID.STAG_LIFEASIA_HPADPF WHERE VALIDFLAG='1'
				   --AND  SUBSTRING(HOISSDTE,1,6) = '201911' 
				 ) HPADPF 
			ON UNIT.CHDRNUM = HPADPF.CHDRNUM
		)
		
		,TBL_CRTABLE AS(
			SELECT
				A.CHDRNUM,
				MAX(A.CRTABLE) CRTABLE FROM 
				(
					SELECT
						CHDRNUM,
						CRTABLE
					FROM
						STAG_ID.STAG_LIFEASIA_COVRPF
					WHERE
						VALIDFLAG = '1'
						AND LIFE = '01'
						AND COVERAGE = '01'
						AND RIDER = '00'
					UNION ALL
					SELECT
						CHDRNUM,
						CRTABLE
					FROM
						STAG_ID.STAG_LIFEASIA_COVTPF
					WHERE
						LIFE = '01'
						AND COVERAGE = '01'
						AND RIDER = '00' 
				)A
			GROUP BY A.CHDRNUM
		
		)
		
		,TBL_NEW_BUSSINESS AS (
			SELECT 
				A.*	,cast('new_bussiness' as varchar) STATUS
			FROM TBL_POLICY A 
				WHERE left(HOISSDTE,6) = @monthYear AND left(HPADPF_HOISSDTE,6) = @monthYear
		)
		
		,TBL_YEAR1 AS (
			SELECT 
				A.*	,cast('existing_bussiness_year1' as varchar) STATUS
			FROM TBL_POLICY A 
				WHERE 
				left(HOISSDTE,4) = @year 
				AND left(HPADPF_HOISSDTE,4) = @year 
				AND left(HOISSDTE,6) <> @monthYear
		)
		
		,TBL_YEAR2 AS (
			SELECT 
				A.*	,cast('existing_bussiness_year2+' as varchar) STATUS
			FROM TBL_POLICY A 
				WHERE 
				left(HOISSDTE,4) < @year 
				AND left(HPADPF_HOISSDTE,4) < @year 
		)
		
		,TBL_VALID_POLICY AS (
			SELECT HOISSDTE,AGNTNUM,CHDRNUM,CNTTYPE,CRTABLE,PREMI,API,PRUSVR,SINGP,SUMINS,HPADPF_HOISSDTE,STATUS FROM TBL_NEW_BUSSINESS
			UNION 
			SELECT HOISSDTE,AGNTNUM,CHDRNUM,CNTTYPE,CRTABLE,PREMI,API,PRUSVR,SINGP,SUMINS,HPADPF_HOISSDTE,STATUS FROM TBL_YEAR1
			UNION
			SELECT HOISSDTE,AGNTNUM,CHDRNUM,CNTTYPE,CRTABLE,PREMI,API,PRUSVR,SINGP,SUMINS,HPADPF_HOISSDTE,STATUS FROM TBL_YEAR2
		)
		
		, TBL_POLICY_WITH_PRODUCT AS (
			SELECT 
				VALID_POLICY.*,
				cast(DESCPF.LONGDESC as varchar) AS PRODUCT_DESC 
			FROM TBL_VALID_POLICY VALID_POLICY LEFT JOIN 
			( SELECT * FROM STAG_ID.STAG_LIFEASIA_DESCPF DESCPF WHERE DESCPF.DESCCOY = 2 AND DESCPF.DESCTABL = 'T5447')DESCPF 
			ON VALID_POLICY.CNTTYPE = DESCPF.DESCITEM
		), TBL_REFERENCE AS (
			SELECT
				CH.AGNTNUM AS AGENT_CD,
				CASE
					WHEN W1.CHANNEL IN ('1',
					'3') THEN 'Agency'
					WHEN SUBSTRING(FIF.TSALESUNT, LEN(FIF.TSALESUNT), 1) = 'B' THEN 'Bankassurance'
					ELSE 'DMTM'
				END AS CHANNEL,
				CASE
					WHEN SHA.SHARIA_FLAG = 1 THEN 'Sharia'
					ELSE 'Non Sharia'
				END SHARIA_INDICATOR,
				CH.CHDRNUM AS POLICY_NO
			FROM
				STAG_ID.STAG_LIFEASIA_HPADPF HP
			LEFT JOIN STAG_ID.STAG_LIFEASIA_CHDRPF CH ON
				CH.CHDRNUM = HP.CHDRNUM
			LEFT JOIN STAG_ID.STAG_LIFEASIA_AGNTPF A ON
				A.AGNTNUM = CH.AGNTNUM
				AND CH.VALIDFLAG <> '2'
			LEFT JOIN STAG_ID.STAG_MANUAL_MP_CHANNEL W1 ON
				A.AGTYPE = W1.AGENT_TYPE
				AND W1.CHANNEL IN ('1','3')
			LEFT JOIN STAG_ID.STAG_LIFEASIA_AGLFPF FIF ON
				CH.AGNTNUM = FIF.AGNTNUM
			LEFT JOIN STAG_ID.STAG_LIFEASIA_FV_SHARIA_POLICY SHA ON
				HP.CHDRNUM = SHA.CHDRNUM
			WHERE
				HP.VALIDFLAG <> '2'
				AND CH.CHDRCOY = '2'
				AND CH.VALIDFLAG <> '2'
	)
		
	select * into #ETL5_TEMP_NO_STAFF_PER_PRODUCT from 
	(
		SELECT  
			CAST(@monthYear AS VARCHAR(7)) AS DRIVER_PERIOD,
			POLICY_WITH_PRODUCT.HOISSDTE,
			POLICY_WITH_PRODUCT.AGNTNUM AS AGENT_CD,
			POLICY_WITH_PRODUCT.CHDRNUM AS POLICY_NO,
			POLICY_WITH_PRODUCT.CNTTYPE AS PRODUCT_CD,
			TBL_CRTABLE.CRTABLE,
			T.T0,
			POLICY_WITH_PRODUCT.STATUS,
			CASE 
				WHEN POLICY_WITH_PRODUCT.PRODUCT_DESC ='L2N' THEN 'PRUlife Juvenile'
				WHEN POLICY_WITH_PRODUCT.PRODUCT_DESC ='P1E' THEN 'PRUaccident plus'
				WHEN POLICY_WITH_PRODUCT.PRODUCT_DESC ='P2E' THEN 'PRUaccident plus'
				WHEN POLICY_WITH_PRODUCT.PRODUCT_DESC ='P1E' THEN 'PRUaccident plus'
				WHEN POLICY_WITH_PRODUCT.PRODUCT_DESC IS NULL THEN 'LifeAsia'
				ELSE POLICY_WITH_PRODUCT.PRODUCT_DESC
			END AS 
			PRODUCT_DESC,
			REFERENCE.CHANNEL,
			REFERENCE.SHARIA_INDICATOR
			FROM TBL_POLICY_WITH_PRODUCT POLICY_WITH_PRODUCT 
			LEFT JOIN (SELECT DISTINCT PRODUCT_CD,T0 FROM STAG_ID.STAG_LIFEASIA_ETL5_LIFEASIA_MASTER_T0 WHERE 1=1 AND T0 NOT IN ('-','0000LAS','ITYT000','0000000'))T
				ON POLICY_WITH_PRODUCT. CNTTYPE = T.PRODUCT_CD
			LEFT JOIN TBL_REFERENCE REFERENCE 
				ON POLICY_WITH_PRODUCT.CHDRNUM = REFERENCE.POLICY_NO
			LEFT JOIN TBL_CRTABLE
				ON POLICY_WITH_PRODUCT.CHDRNUM=TBL_CRTABLE.CHDRNUM
			-- AND POLICY_WITH_PRODUCT.AGNTNUM = REFERENCE.AGENT_CD
	) a;
	
	--select * from #ETL5_TEMP_NO_STAFF_PER_PRODUCT
	
	-------------[[[[[[[[[#2]]]]]]]]]]]
	
	--declare @monthYear varchar(6)='201911';
	--declare @monthYear2 varchar(6)='2019/011';
	--declare @year varchar= '2019';
	
	IF OBJECT_ID('tempdb..#ETL5_ALLOCATION_MAPPING_EXPENSE') IS NOT NULL
	BEGIN
		DROP TABLE #ETL5_ALLOCATION_MAPPING_EXPENSE
	END;
	
--declare @monthYear varchar(6)='20210101';
--declare @monthYear2 varchar(10)='';
--declare @year varchar(10)= '';
--set @year = left(@monthYear,4)
--set @monthYear2 = CONCAT(left(@monthYear,4),'/0',RIGHT(@monthYear,2));
	
	SELECT * into #ETL5_ALLOCATION_MAPPING_EXPENSE from 
	(
		SELECT A.ACCNT_CODE,COALESCE(B.EXPENSE,0) AS EXPENSE ,@monthYear PERIOD FROM (
			select
				distinct cast(ACCNT_CODE as varchar(50)) as ACCNT_CODE
			from
				STAG_ID.STAG_PLAI_ALLOCATION_MAPPING_DQ_DDLREF_EXTTB
			where
				ALLOCATION_DRIVER = 'APE_NOSTAFF'
				and UPPER(ACTION) in ('I','U')
		)A left join (
			select
				ACCNT_CODE,
				SUM(cast(AMOUNT as float)) EXPENSE
			from
				STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL
			where
				1=1
				and PERIOD = @monthYear2
			group by
				ACCNT_CODE
			
		)B on REPLACE(A.ACCNT_CODE,' ','') =  REPLACE(B.ACCNT_CODE,' ','')
	) a;
	
	--SELECT *FROM #ETL5_ALLOCATION_MAPPING_EXPENSE
	
	-------------[[[[[[[[[#3]]]]]]]]]]]
	
	
	--declare @monthYear varchar(6)='201911';
	--declare @monthYear2 varchar(6)='2019/011';
	--declare @year varchar= '2019';
	
	IF OBJECT_ID('tempdb..#ETL5_TEMP_REFERENCE_PER_DEPARTMENT') IS NOT NULL
	BEGIN
		DROP TABLE #ETL5_TEMP_REFERENCE_PER_DEPARTMENT
	END;
	
	WITH TBL_EXPENSE AS (
--		SELECT A.JOIN_KEY,A.GOC,A.DEPT,A.TOTAL,(B.TOTAL_EXPENSE/A.TOTAL_EMPLOYEE) * A.TOTAL AS EXPENSE FROM  
		SELECT A.JOIN_KEY,A.GOC,A.DEPT,A.TOTAL,(B.TOTAL_EXPENSE/A.TOTAL_SALARY) * A.SALARY AS EXPENSE FROM  
			(
--				SELECT A.* , SUM(TOTAL) OVER (PARTITION BY PERIOD) AS TOTAL_EMPLOYEE FROM (
				SELECT A.* , SUM(SALARY) OVER (PARTITION BY PERIOD) AS TOTAL_SALARY FROM (
					SELECT 'JOIN_KEY' JOIN_KEY, A.* FROM STAG_ID.STAG_MANUAL_ETL5_DEPARTMENT_OF_STAFF A 
					WHERE PERIOD =@monthYear2
				)A
			)A
			INNER JOIN 
			(
				SELECT 'JOIN_KEY' JOIN_KEY,SUM(EXPENSE) TOTAL_EXPENSE FROM #ETL5_ALLOCATION_MAPPING_EXPENSE
			) B
			ON A.JOIN_KEY = B.JOIN_KEY
	)
	
	,TBL_REFERENCE as (
	select A.GOC,A.DEPT,A.EXPENSE,
		case
			when B.CHANNEL ='Agency' and B.INDICATOR ='Non Sharia' and B.VARIABLE ='New Business' then (B.VALUE * A.EXPENSE )/100
		end as AGENCY_NON_SHARIA_NEW_BUSSINESS,
		case
			when B.CHANNEL ='Agency' and B.INDICATOR ='Non Sharia' and B.VARIABLE ='Existing Business' then (B.VALUE * A.EXPENSE )/100
		end as AGENCY_NON_SHARIA_EXISTING_BUSSINESS,
		case
			when B.CHANNEL ='Agency' and B.INDICATOR ='Sharia' and B.VARIABLE ='New Business' then (B.VALUE * A.EXPENSE )/100
		end as AGENCY_SHARIA_NEW_BUSSINESS,
		case
			when B.CHANNEL ='Agency' and B.INDICATOR ='Sharia' and B.VARIABLE ='Existing Business' then (B.VALUE * A.EXPENSE )/100
		end as AGENCY_SHARIA_EXISTING_BUSSINESS,
		
		case
			when B.CHANNEL ='DMTM' and B.INDICATOR ='Non Sharia' and B.VARIABLE ='New Business' then (B.VALUE * A.EXPENSE )/100
		end as DMTM_NON_SHARIA_NEW_BUSSINESS,
		case
			when B.CHANNEL ='DMTM' and B.INDICATOR ='Non Sharia' and B.VARIABLE ='Existing Business' then (B.VALUE * A.EXPENSE )/100
		end as DMTM_NON_SHARIA_EXISTING_BUSSINESS,
		case
			when B.CHANNEL ='DMTM' and B.INDICATOR ='Sharia' and B.VARIABLE ='New Business' then (B.VALUE * A.EXPENSE )/100
		end as DMTM_SHARIA_NEW_BUSSINESS,
		case
			when B.CHANNEL ='DMTM' and B.INDICATOR ='Sharia' and B.VARIABLE ='Existing Business' then (B.VALUE * A.EXPENSE )/100
		end as DMTM_SHARIA_EXISTING_BUSSINESS,
		
		case
			when B.CHANNEL ='Bancassurance' and B.INDICATOR ='Non Sharia' and B.VARIABLE ='New Business' then (B.VALUE * A.EXPENSE )/100
		end as BANCASSURANCE_NON_SHARIA_NEW_BUSSINESS,
		case
			when B.CHANNEL ='Bancassurance' and B.INDICATOR ='Non Sharia' and B.VARIABLE ='Existing Business' then (B.VALUE * A.EXPENSE )/100
		end as BANCASSURANCE_NON_SHARIA_EXISTING_BUSSINESS,
		case
			when B.CHANNEL ='Bancassurance' and B.INDICATOR ='Sharia' and B.VARIABLE ='New Business' then (B.VALUE * A.EXPENSE )/100
		end as BANCASSURANCE_SHARIA_NEW_BUSSINESS,
		case
			when B.CHANNEL ='Bancassurance' and B.INDICATOR ='Sharia' and B.VARIABLE ='Existing Business' then (B.VALUE * A.EXPENSE )/100
		end as BANCASSURANCE_SHARIA_EXISTING_BUSSINESS--,
		
		--b.channel,b.indicator,b.variable,b.value 
	FROM  TBL_EXPENSE A 
		inner join STAG_ID.STAG_MANUAL_ETL5_REFERENCE_DEPARTMENT B
		on A.GOC = B.GOC
	where B.STATUS='Active'
	)
	select * into #ETL5_TEMP_REFERENCE_PER_DEPARTMENT from 
	(
		SELECT DISTINCT
		a.GOC,
		a.DEPT,
		a.EXPENSE,
		a.AGENCY_NON_SHARIA_NEW_BUSSINESS,
		b.AGENCY_NON_SHARIA_EXISTING_BUSSINESS,
		i.BANCASSURANCE_NON_SHARIA_NEW_BUSSINESS,
		j.BANCASSURANCE_NON_SHARIA_EXISTING_BUSSINESS,
		e.DMTM_NON_SHARIA_NEW_BUSSINESS,
		f.DMTM_NON_SHARIA_EXISTING_BUSSINESS,
		c.AGENCY_SHARIA_NEW_BUSSINESS,
		d.AGENCY_SHARIA_EXISTING_BUSSINESS,
		k.BANCASSURANCE_SHARIA_NEW_BUSSINESS,
		l.BANCASSURANCE_SHARIA_EXISTING_BUSSINESS,
		g.DMTM_SHARIA_EXISTING_BUSSINESS,
		h.DMTM_SHARIA_NEW_BUSSINESS
		FROM TBL_REFERENCE a 
		left join (select * from  TBL_REFERENCE b where b.AGENCY_NON_SHARIA_EXISTING_BUSSINESS is not null) b on a.GOC = b.GOC
		left join (select * from  TBL_REFERENCE c where c.AGENCY_SHARIA_NEW_BUSSINESS is not null) c on a.GOC = c.GOC
		left join (select * from  TBL_REFERENCE d where d.AGENCY_SHARIA_EXISTING_BUSSINESS is not null) d on a.GOC = d.GOC
		left join (select * from  TBL_REFERENCE e where e.DMTM_NON_SHARIA_NEW_BUSSINESS is not null) e on a.GOC = e.GOC
		left join (select * from  TBL_REFERENCE f where f.DMTM_NON_SHARIA_EXISTING_BUSSINESS is not null) f on a.GOC = f.GOC
		left join (select * from  TBL_REFERENCE g where g.DMTM_SHARIA_EXISTING_BUSSINESS is not null) g on a.GOC = g.GOC
		left join (select * from  TBL_REFERENCE h where h.DMTM_SHARIA_NEW_BUSSINESS is not null) h on a.GOC = h.GOC
		left join (select * from  TBL_REFERENCE i where i.BANCASSURANCE_NON_SHARIA_NEW_BUSSINESS is not null) i on a.GOC = i.GOC
		left join (select * from  TBL_REFERENCE j where j.BANCASSURANCE_NON_SHARIA_EXISTING_BUSSINESS is not null) j on a.GOC = j.GOC
		left join (select * from  TBL_REFERENCE k where k.BANCASSURANCE_SHARIA_NEW_BUSSINESS is not null) k on a.GOC = k.GOC
		left join (select * from  TBL_REFERENCE l where l.BANCASSURANCE_SHARIA_EXISTING_BUSSINESS is not null) l on a.GOC = l.GOC
		where a.AGENCY_NON_SHARIA_NEW_BUSSINESS is not null 
	) a;
	--select * from #ETL5_TEMP_REFERENCE_PER_DEPARTMENT
	
	-------------[[[[[[[[[#4]]]]]]]]]]]
	--declare @monthYear varchar(6)='201911';
	--declare @monthYear2 varchar(6)='2019/011';
	--declare @year varchar= '2019';
	
	DELETE FOND_ID.FOND_ETL5_tTEMP_LIFEASIA_DRIVER_DETAIL_NO_STAFF_PRODUCT_DEPARTMENT WHERE accounting_period=@monthYear;
	INSERT INTO FOND_ID.FOND_ETL5_tTEMP_LIFEASIA_DRIVER_DETAIL_NO_STAFF_PRODUCT_DEPARTMENT
	SELECT 
		@monthYear ACCOUNTING_PERIOD,
		a.* 
	FROM 
		#ETL5_TEMP_REFERENCE_PER_DEPARTMENT a
		
		DECLARE @V_START DATETIME= GETDATE()
		DECLARE @V_FUNCTION_NAME VARCHAR(200)='FOND_ID.USP_LOAD_ETL5_NO_OF_STAFF_STEP1'
		DECLARE @drivername VARCHAR(100)='NO_OF_STAFF'
		DECLARE @V_TOTAL_ROWS integer = 0;
		DECLARE @V_PERIOD nvarchar(10);
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM #ETL5_TEMP_REFERENCE_PER_DEPARTMENT) ;
		declare @batchdate_new varchar(10)=@batchdate+'01'
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batchdate_new))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batchdate_new)))),3))

        
		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'FOND_ID.FOND_ETL5_tTEMP_LIFEASIA_DRIVER_DETAIL_NO_STAFF_PRODUCT_DEPARTMENT'
		,@drivername,@V_TOTAL_ROWS,'YTD',@V_PERIOD);
		
	
	
	
	DELETE FOND_ID.FOND_ETL5_tTEMP_LIFEASIA_DRIVER_DETAIL_NO_STAFF_PRODUCT WHERE driver_period= @monthYear;
	INSERT INTO FOND_ID.FOND_ETL5_tTEMP_LIFEASIA_DRIVER_DETAIL_NO_STAFF_PRODUCT 
	(driver_period, policy_no, product_cd, benf_cd, t0, status, product_desc, channel, sharia_indicator)
	SELECT 
	DRIVER_PERIOD,POLICY_NO,PRODUCT_CD,CRTABLE,T0,STATUS,PRODUCT_DESC,CHANNEL,SHARIA_INDICATOR
	--,HOISSDTE,AGENT_CD
	FROM #ETL5_TEMP_NO_STAFF_PER_PRODUCT;
	
		DECLARE @V_TOTAL_ROWS2 integer = 0;
		SET @V_TOTAL_ROWS2 = (SELECT COUNT(1) as totalrows FROM #ETL5_TEMP_NO_STAFF_PER_PRODUCT) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batchdate_new))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batchdate_new)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'FOND_ID.FOND_ETL5_tTEMP_LIFEASIA_DRIVER_DETAIL_NO_STAFF_PRODUCT'
		,@drivername,@V_TOTAL_ROWS2,'YTD',@V_PERIOD);

	END TRY

	BEGIN CATCH
		PRINT ERROR_MESSAGE()
	END CATCH
end;
