CREATE PROC [FOND_ID].[USP_LOAD_ETL5_DRIVER_MASTER_SUNGL_B71] @batch [NVARCHAR](100) AS
BEGIN 
--	DECLARE @batch [nvarchar](30)='20190101'
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'FOND_ID.FOND_ETL5_DRIVER_MASTER_B71';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;
	DECLARE @drivername NVARCHAR(15);
	SET @drivername = 'DRIVERMASTER_B71';
 

BEGIN TRY
		SET @V_START_DATE	= convert(date, cast(@batch as varchar)); -- valuation extract date
		PRINT	'Start date :' + convert(varchar,@V_START_DATE,112);
		SET @V_START 	= convert(datetime,getDATE());

		SET @V_DESCRIPTION 	= 'Start ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
		PRINT	@V_DESCRIPTION;
		SET @V_SEQNO		= @V_SEQNO + 1;

		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
		---------------------------- DROP TEMPORARY TABLE ------------------------------
		IF OBJECT_ID('tempdb..#etl5_driver_master_sungl') IS NOT NULL
		BEGIN
			DROP TABLE #etl5_driver_master_sungl
		END;

	WITH SUNGL_CURRATED as 
		(	
		select A.*,B.ALLOCATION_DRIVER as POLICY_ALLOC_DRIVER,C.LIC_LRC_FLAG from (
		SELECT AMT_LOCAL_CCY, EXTRACT_PERIOD, ACCT_CD, T7, BATCHDATE from FOND_ID.FOND_ETL5_SUNGL_EXTRACT 
		UNION ALL
		SELECT AMOUNT AS AMT_LOCAL_CCY, [PERIOD] AS EXTRACT_PERIOD, ACCNT_CODE AS ACCT_CD, ANAL_T7 AS T7, BATCHDATE FROM STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL WHERE ACCNT_CODE IN ('5139040000','5149040000') AND (JRNAL_TYPE = 'REVS' OR TREFERENCE LIKE 'IBNR%'))A
		inner join (select * from (select *,row_number() over (PARTITION BY ACCNT_CODE ORDER BY ACCNT_CODE) rn from STAG_ID.STAG_CONFIG_ETL5_ALLOC_DRIVER_B71_CONFIG) x where rn=1) B on B.ACCNT_CODE=A.ACCT_CD
		inner join (select * from STAG_ID.STAG_CONFIG_ETL5_B71_CONFIG where LIC_LRC_FLAG in ('LIC','LRC') ) C on A.ACCT_CD=C.SUN_CD
		where A.T7 in ('TBR','DTB') and A.BATCHDATE=left(@batch,6) 
		),
		TOT_DRIVER_AMT AS (
		SELECT SUM(cast(DRIVER_AMT as float)) DRIVER_AMT_PERDRIVER,POLICY_ALLOC_DRIVER FROM FOND_ID.FOND_ETL5_DRIVER_MASTER A
		INNER JOIN ( SELECT * FROM FOND_ID.FOND_IFRS17_ICG_STORES
		WHERE PRODUCT_CD=BENEFIT_CD AND MEASUREMENT_MODEL = 'VFA' AND PORTFOLIO_GROUP LIKE '%SHA%') D
		ON A.POLICY_NO=D.POLICY_NO AND ( ( EOMONTH(DATEFROMPARTS(cast(left(@batch,4) as int),cast(right(left(@batch,6),2) as int),1)) BETWEEN D.CB_START_DT AND D.CB_END_DT )
		OR D.CB_START_DT = ( SELECT MAX(DD.CB_START_DT)
		FROM FOND_ID.FOND_IFRS17_ICG_STORES DD 
		WHERE DD.PRODUCT_CD=D.BENEFIT_CD AND PORTFOLIO_GROUP LIKE '%SHA%'
		AND DD.MEASUREMENT_MODEL = 'VFA' AND A.POLICY_NO=DD.POLICY_NO ) )	
		AND A.BATCHDATE=left(@batch,6) AND A.DRIVER_AMT!=0
		GROUP BY POLICY_ALLOC_DRIVER
		), 
		CURATED_DATA AS (
		SELECT A.*,B.AMT_SUNGL,C.DRIVER_AMT_PERDRIVER,B.ACCT_CD,B.LIC_LRC_FLAG FROM 
		(SELECT A.* FROM FOND_ID.FOND_ETL5_DRIVER_MASTER A
		INNER JOIN ( SELECT * FROM FOND_ID.FOND_IFRS17_ICG_STORES
		WHERE PRODUCT_CD=BENEFIT_CD AND MEASUREMENT_MODEL = 'VFA' AND PORTFOLIO_GROUP LIKE '%SHA%') D
		ON A.POLICY_NO=D.POLICY_NO AND ( ( EOMONTH(DATEFROMPARTS(cast(left(@batch,4) as int),cast(right(left(@batch,6),2) as int),1)) BETWEEN D.CB_START_DT AND D.CB_END_DT )
		OR D.CB_START_DT = ( SELECT MAX(DD.CB_START_DT)
		FROM FOND_ID.FOND_IFRS17_ICG_STORES DD 
		WHERE DD.PRODUCT_CD=D.BENEFIT_CD AND PORTFOLIO_GROUP LIKE '%SHA%'
		AND DD.MEASUREMENT_MODEL = 'VFA' AND A.POLICY_NO=DD.POLICY_NO ) )	
		AND A.BATCHDATE=left(@batch,6) AND A.DRIVER_AMT!=0		
		) A 
		INNER JOIN (SELECT sum(cast(AMT_LOCAL_CCY as float)) AMT_SUNGL,EXTRACT_PERIOD,POLICY_ALLOC_DRIVER,ACCT_CD,LIC_LRC_FLAG from SUNGL_CURRATED group by  LIC_LRC_FLAG,EXTRACT_PERIOD,POLICY_ALLOC_DRIVER,ACCT_CD) B ON A.POLICY_ALLOC_DRIVER=B.POLICY_ALLOC_DRIVER
		INNER JOIN TOT_DRIVER_AMT C ON B.POLICY_ALLOC_DRIVER=C.POLICY_ALLOC_DRIVER),
		DISTTOPOL_DRIVERMASTER AS (
		SELECT *,cast(AMT_SUNGL*WEIGHT as numeric(28,6)) WEIGHTED_AMT FROM (
		SELECT *,cast(DRIVER_AMT as float)/DRIVER_AMT_PERDRIVER AS WEIGHT FROM CURATED_DATA ) J
		)
		SELECT * into #etl5_driver_master_sungl from (
		SELECT
		--ENTITY_ID,DRIVER_SRC,DRIVER_PERIOD,POLICY_NO,BENEFIT_CD,PRODUCT_CD,TREATY_CD,T0,POLICY_ALLOC_DRIVER,DRIVER_AMT,WEIGHTED_AMT SUNGL_AMT,ACCT_CD SUN_CD,LIC_LRC_FLAG,BATCH_MASTER_ID,BATCH_RUN_ID,JOB_MASTER_ID,JOB_RUN_ID,BATCHDATE,ETL_PROCESS_DATE_TIME
		'IAS' ENTITY_ID,DRIVER_SRC,DRIVER_PERIOD,POLICY_NO,BENEFIT_CD,PRODUCT_CD,TREATY_CD,T0,POLICY_ALLOC_DRIVER,DRIVER_AMT,WEIGHTED_AMT SUNGL_AMT,ACCT_CD SUN_CD,LIC_LRC_FLAG,BATCH_MASTER_ID,BATCH_RUN_ID,JOB_MASTER_ID,JOB_RUN_ID,BATCHDATE,ETL_PROCESS_DATE_TIME
		FROM DISTTOPOL_DRIVERMASTER	
		) A
		---------------------------- TO Handle rerun process ------------------------------
		BEGIN TRANSACTION;
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'DELETE DATA FROM FOND_ID.[FOND_ETL5_DRIVER_MASTER] and FOND_ID.[FOND_ETL5_DRIVER_MASTER_INVALID] : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);	 

--DECLARE @batch [nvarchar](30);
--SET @batch = '20210201';
		DELETE FROM FOND_ID.FOND_ETL5_DRIVER_MASTER_B71 
		WHERE DRIVER_PERIOD =  EOMONTH(CAST(@batch AS VARCHAR));

		 ---------------------------- TO Handle rerun process ------------------------------
		SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	= 'INSERT INTO TABLE FOND_ID.[FOND_ETL5_DRIVER_MASTER_SUNGL] : ' + convert(varchar,@V_START,121);
		PRINT @V_DESCRIPTION;
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

--DECLARE @batch [nvarchar](30);
--SET @batch = '20210201';
		INSERT INTO [FOND_ID].[FOND_ETL5_DRIVER_MASTER_B71]
		(ENTITY_ID, DRIVER_SRC, DRIVER_PERIOD, POLICY_NO, BENEFIT_CD, PRODUCT_CD, TREATY_CD, T0, POLICY_ALLOC_DRIVER, DRIVER_AMT, SUNGL_AMT,SUN_CD,LIC_LRC_FLAG, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
		select 
		ENTITY_ID,
		DRIVER_SRC,
		DRIVER_PERIOD,
		POLICY_NO,
		BENEFIT_CD,
		PRODUCT_CD,
		TREATY_CD,
		T0,
		POLICY_ALLOC_DRIVER,
		DRIVER_AMT,
		SUNGL_AMT,
		SUN_CD,
		LIC_LRC_FLAG,
		BATCH_MASTER_ID,
		BATCH_RUN_ID,
		JOB_MASTER_ID,
		JOB_RUN_ID,
		BATCHDATE,
		ETL_PROCESS_DATE_TIME
		from #etl5_driver_master_sungl
		---------------------------- ETL5 LOGGING ----------------------------      
		DECLARE @V_TOTAL_ROWS integer = 0;
		DECLARE @V_PERIOD nvarchar(10);
		SET @V_TOTAL_ROWS = (SELECT COUNT(1) as totalrows FROM #etl5_driver_master_sungl) ;
        SET @V_PERIOD = CONCAT(YEAR(DATEADD(month, 0,CONVERT(date, @batch))), RIGHT(CONCAT('000', MONTH(DATEADD(month, 0,CONVERT(date, @batch)))),3))

		INSERT INTO FOND_ID.FOND_IFRS17_ETL5_PROC_LOG (PROC_DATE,FUNC_NAME,TRGT_TABLE_NAME,DRIVER_NAME,TOTAL_ROWS,DESCRIPTION,PERIOD)
		VALUES (@V_START,@V_FUNCTION_NAME,'FOND_ID.FOND_ETL5_DRIVER_MASTER_B71'
		,@drivername,@V_TOTAL_ROWS,'YTD',@V_PERIOD);
		

		IF @@TRANCOUNT > 0
        COMMIT;


		---------------------------- DROP TEMPORARY TABLE ------------------------------  
		IF OBJECT_ID('tempdb..#etl5_driver_master_sungl') IS NOT NULL
		BEGIN
			DROP TABLE #etl5_driver_master_sungl
		END;
		
END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
                ROLLBACK;
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;
		
		SELECT 'Error : ' + ERROR_MESSAGE();	
	
		INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION) VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
		raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
END
