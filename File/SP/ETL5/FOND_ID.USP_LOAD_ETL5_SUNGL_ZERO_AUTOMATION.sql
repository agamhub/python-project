CREATE PROC [FOND_ID].[USP_LOAD_ETL5_SUNGL_ZERO_AUTOMATION] @batch [nvarchar](30),@JOBNAMESTR [NVARCHAR](2000) AS

BEGIN 
	DECLARE @V_START		datetime;
	DECLARE @V_END			datetime;
	DECLARE @V_FUNCTION_NAME	NVARCHAR(2000) = 'USP_LOAD_ETL5_SUNGL_ZERO_AUTOMATION';
	DECLARE @V_DESCRIPTION	NVARCHAR(2000);
	DECLARE @V_CMD			NVARCHAR(2000);
	DECLARE @V_SEQNO			integer = 0;
	DECLARE @V_PRD_ID		integer;
	DECLARE @V_CREATED_DATE	datetime;
	DECLARE @V_START_DATE	date;
	DECLARE @V_END_DATE		date;

	------START GET RUN ID DETAIL FROM ABC------
	DECLARE 
	@BATCH_MASTER_ID  VARCHAR(20) = 0,
	@BATCH_RUN_ID    VARCHAR(20) = 0,
	@JOB_MASTER_ID   VARCHAR(20) = 0,
	@JOB_RUN_ID     VARCHAR(20) = 0,
	@GMT_START_DTTM   VARCHAR(19) = CONVERT(DATETIME2, GETDATE());

	EXEC STAG_ID.USP_GetRunIdReturn
	@JobName     = @JOBNAMESTR,
	@BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	@BATCH_RUN_ID  = @BATCH_RUN_ID OUTPUT,
	@JOB_MASTER_ID  = @JOB_MASTER_ID OUTPUT,
	@JOB_RUN_ID   = @JOB_RUN_ID OUTPUT,
	@GMT_START_DTTM = @GMT_START_DTTM OUTPUT;
	------END GET RUN ID DETAIL FROM ABC------
	
	BEGIN TRY

	
	SET @V_START_DATE	= convert(date, cast(@batch as varchar(8))); -- valuation extract date
	PRINT	'START DATE :' + convert(varchar,@V_START_DATE,112);
	SET @V_START 	= convert(datetime,getDATE());

	SET @V_DESCRIPTION 	= 'START ' + @V_FUNCTION_NAME + ' : ' + convert(varchar,@V_START,121);
	PRINT	@V_DESCRIPTION;
	SET @V_SEQNO		= @V_SEQNO + 1;

	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	---------------------------- DROP TEMPORARY TABLE ------------------------------
		IF OBJECT_ID('tempdb..#temp') IS NOT NULL
		BEGIN
		DROP TABLE #temp
		END;

	---------------------------- CREATE TEMPORARY TABLE ------------------------------
--		declare @batch varchar(20)='202101';
		with sungl as (
		select
		ENTITY_ID,LEDGER,n.ACCNT_CODE,PERIOD,TRANS_DATE,AMT_DIFF*-1 AMOUNT,case when AMT_DIFF*-1<0 then 'C' else 'D' end D_C,ALLOCATION,'8888888'JRNAL_NO,JRNAL_LINE,JRNAL_TYPE,JRNAL_SRCE,TREFERENCE,'Accr Cash Back-ETL 5 Zeroist' DESCRIPTN,ENTRY_DATE,ENTRY_PRD,DUE_DATE,ALLOC_REF,ALLOC_DATE,ALLOC_PERIOD,ASSET_IND,ASSET_CODE,ASSET_SUB,CONV_CODE,CONV_RATE,OTHER_AMT,OTHER_DP,CLEARDOWN,REVERSAL,LOSS_GAIN,ROUGH_FLAG,IN_USE_FLAG,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,POSTING_DATE,ALLOC_IN_PROGRESS,HOLD_REF,HOLD_OP_ID,LAST_CHANGE_USER_ID,LAST_CHANGE_DATE,ORIGINATOR_ID,VALID_FROM,VALID_TO,BATCH_MASTER_ID,BATCH_RUN_ID,JOB_MASTER_ID,JOB_RUN_ID,BATCHDATE,ETL_PROCESS_DATE_TIME
		from (
		select *,row_number() over (partition by ACCNT_CODE order by AMOUNT DESC) rn from FOND_ID.FOND_ETL5_IFRS4_SUNGL where BATCHDATE=left(@batch,6) and
		ACCNT_CODE in (select distinct ACCNT_CODE from FOND_ID.ETL5_ETL4_INTEGRATION_CHECK where (PERIOD=left(@batch,4)+'/0'+right(@batch,2) or PERIOD_ETL4=left(@batch,4)+'0'+right(@batch,2)) and AMT_DIFF>=-1000 and AMT_DIFF<=1000 and STATUS='FAILED' and ENTITY_ID = 'IAI')
		--ACCNT_CODE in ('3373099990','1233010000')
		) n
		left join (select ACCNT_CODE,AMT_DIFF from FOND_ID.ETL5_ETL4_INTEGRATION_CHECK where (PERIOD=left(@batch,4)+'/0'+right(@batch,2)or PERIOD_ETL4=left(@batch,4)+'0'+right(@batch,2)) and AMT_DIFF>=-1000 and AMT_DIFF<=1000 and STATUS='FAILED' and ENTITY_ID = 'IAI') m on n.ACCNT_CODE=m.ACCNT_CODE
		--left join (select ACCNT_CODE,AMT_DIFF from FOND_ID.ETL5_ETL4_INTEGRATION_CHECK where (PERIOD=left(@batch,4)+'/0'+right(@batch,2)or PERIOD_ETL4=left(@batch,4)+'0'+right(@batch,2)) and AMT_DIFF>=-1000 and AMT_DIFF<=1000 and ACCNT_CODE in ('3373099990','1233010000') ) m on n.ACCNT_CODE=m.ACCNT_CODE
		where rn=1
		), other as (
		select ENTITY_ID,LEDGER,n.ACCNT_CODE,PERIOD,TRANS_DATE,AMT_DIFF AMOUNT,case when AMT_DIFF*-1<0 then 'D' else 'C' end D_C,ALLOCATION,'8888888'JRNAL_NO,JRNAL_LINE,JRNAL_TYPE,JRNAL_SRCE,TREFERENCE,'Accr Cash Back-ETL 5 Zeroist' DESCRIPTN,ENTRY_DATE,ENTRY_PRD,DUE_DATE,ALLOC_REF,ALLOC_DATE,ALLOC_PERIOD,ASSET_IND,ASSET_CODE,ASSET_SUB,CONV_CODE,CONV_RATE,OTHER_AMT,OTHER_DP,CLEARDOWN,REVERSAL,LOSS_GAIN,ROUGH_FLAG,IN_USE_FLAG,ANAL_T0,ANAL_T1,ANAL_T2,ANAL_T3,ANAL_T4,ANAL_T5,ANAL_T6,ANAL_T7,ANAL_T8,ANAL_T9,POSTING_DATE,ALLOC_IN_PROGRESS,HOLD_REF,HOLD_OP_ID,LAST_CHANGE_USER_ID,LAST_CHANGE_DATE,ORIGINATOR_ID,VALID_FROM,VALID_TO,BATCH_MASTER_ID,BATCH_RUN_ID,JOB_MASTER_ID,JOB_RUN_ID,BATCHDATE,ETL_PROCESS_DATE_TIME
		from (
		select 'key' key_,*,row_number() over (order by AMOUNT DESC) rn from FOND_ID.FOND_ETL5_IFRS4_SUNGL where BATCHDATE=left(@batch,6) and JRNAL_TYPE='LAS' and ACCNT_CODE in (
		select DISTINCT IFRS4_SUN_CD from STAG_ID.STAG_CONFIG_SUNGL_MF
		where
		UPPER(SUN_CD_DESC ) in ('OTHER')
		and IFRS17_RELATED = 'No'
		and SUN_CD_CATEGORY = 'Profit & Loss'
			)
		and ENTITY_ID = 'IAI'
		) n 
		left join (select 'key' key_,sum(AMT_DIFF) AMT_DIFF from FOND_ID.ETL5_ETL4_INTEGRATION_CHECK where (PERIOD=left(@batch,4)+'/0'+right(@batch,2)or PERIOD_ETL4=left(@batch,4)+'0'+right(@batch,2)) and AMT_DIFF>=-1000 and AMT_DIFF<=1000 and STATUS='FAILED' and ENTITY_ID = 'IAI'
		--left join (select 'key' key_,sum(AMT_DIFF) AMT_DIFF from FOND_ID.ETL5_ETL4_INTEGRATION_CHECK where (PERIOD=left(@batch,4)+'/0'+right(@batch,2)or PERIOD_ETL4=left(@batch,4)+'0'+right(@batch,2)) and AMT_DIFF>=-1000 and AMT_DIFF<=1000  and ACCNT_CODE in ('3373099990','1233010000')
		) m on n.key_=m.key_
		where rn=1
		)
		select * 
		into #temp
		from sungl
		union all
		select * from other;
	
		declare @counter int=(select count(*) from FOND_ID.ETL5_ETL4_INTEGRATION_CHECK where (PERIOD=left(@batch,4)+'/0'+right(@batch,2) or PERIOD_ETL4=left(@batch,4)+'0'+right(@batch,2)) and STATUS='FAILED' and ENTITY_ID = 'IAI' and AMT_DIFF between -1000 and 1000);
		if (@counter>0)
		delete from  STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES where BATCHDATE=left(@batch,6) and DESCRIPTN in ('ETL5-Zeroing recon balance','Accr Cash Back-ETL 5 Zeroist') and ENTITY_ID = 'IAI'; 	
		else
		select 'No deletion required' ; 


		if (@counter>0)
		insert into STAG_ID.STAG_SUNGL_ABSTR_IFRS4_SUNGL_NEW_ENTRIES
		(ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, UPLOAD_DATE, FNAME, FPROCDATE, SOURCE_TYPE, PROCESS_TYPE, PROCESS_TIME, JOB_PROCESS_ID, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME)
		select 
		ENTITY_ID, LEDGER, ACCNT_CODE, PERIOD, TRANS_DATE, AMOUNT, D_C, ALLOCATION, JRNAL_NO, JRNAL_LINE, JRNAL_TYPE, JRNAL_SRCE, TREFERENCE, DESCRIPTN, ENTRY_DATE, ENTRY_PRD, DUE_DATE, ALLOC_REF, ALLOC_DATE, ALLOC_PERIOD, ASSET_IND, ASSET_CODE, ASSET_SUB, CONV_CODE, CONV_RATE, OTHER_AMT, OTHER_DP, CLEARDOWN, REVERSAL, LOSS_GAIN, ROUGH_FLAG, IN_USE_FLAG, ANAL_T0, ANAL_T1, ANAL_T2, ANAL_T3, ANAL_T4, ANAL_T5, ANAL_T6, ANAL_T7, ANAL_T8, ANAL_T9, POSTING_DATE, ALLOC_IN_PROGRESS, HOLD_REF, HOLD_OP_ID, LAST_CHANGE_USER_ID, LAST_CHANGE_DATE, ORIGINATOR_ID, null UPLOAD_DATE,'Manual' FNAME,null FPROCDATE,'ETL5INPUT' SOURCE_TYPE,'append' PROCESS_TYPE,getdate() PROCESS_TIME,newid() JOB_PROCESS_ID,
		0 BATCH_MASTER_ID,0 BATCH_RUN_ID,0 JOB_MASTER_ID,0 JOB_RUN_ID,'202101' BATCHDATE,getdate() ETL_PROCESS_DATE_TIME
		from #temp;			
		else
		select 'No issue detected!' ;      
	
		if (@counter>0)		
		exec FOND_ID.USP_LOAD_ETL5_IFRS4_SUNGL @batch,@JOBNAMESTR;
		else
		select 'No rerun required for FOND_ID.USP_LOAD_ETL5_IFRS4_SUNGL' ; 
	
		if (@counter>0)		
		exec FOND_ID.USP_LOAD_ETL5_SUNGL_EXTRACT @batch,@JOBNAMESTR;
		else
		select 'No rerun required FOND_ID.USP_LOAD_ETL5_SUNGL_EXTRACT' ; 

		if (@counter>0)		
		exec FOND_ID.USP_LOAD_ETL5_SUNGL_EXTRACT_EXCLUDED @batch,@JOBNAMESTR;
		else
		select 'No rerun required FOND_ID.USP_LOAD_ETL5_SUNGL_EXTRACT_EXCLUDED' ; 
	
		if (@counter>0)		
		exec FOND_ID.USP_LOAD_ETL5_SUNGL_EXTRACT_BINEXCLUSION_SEPARATION @batch,@JOBNAMESTR;	
		else
		select 'No rerun required FOND_ID.USP_LOAD_ETL5_SUNGL_EXTRACT_BINEXCLUSION_SEPARATION' ; 
		
		IF @@TRANCOUNT > 0
				COMMIT;
				
	
	END TRY

	BEGIN CATCH
 		IF @@TRANCOUNT > 0
                ROLLBACK;
	    SET @V_SEQNO 	= @V_SEQNO + 1;
		SET @V_START 	= convert(datetime,getDATE());
		SET @V_END 	= convert(datetime,getDATE());
		SET @V_DESCRIPTION	='Error execution for function on ' 
							+ @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) 
							+ ' with Error Message : ' + ERROR_MESSAGE();
		PRINT @V_DESCRIPTION;		
		
	INSERT into FOND_ID.FOND_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	raiserror(@V_DESCRIPTION, 18, 1)
	END CATCH
END;

