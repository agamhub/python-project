CREATE PROC [FOND_ID].[USP_LOAD_ETL4_FOND_CONFIG_ABST_FINANCE_CONFIG] @BATCHDATESTR [NVARCHAR](10),@JOBNAMESTR [NVARCHAR](2000),@p_prd_id [integer] AS

BEGIN TRY

	DECLARE
	@V_START			datetime,
	@V_END				datetime,
	@V_DURATION			datetime,
	@V_FUNCTION_NAME	varchar(100),
	@V_DESCRIPTION		varchar(500),
	@V_CMD				nvarchar(max),
	@V_CMD_1			nvarchar(max),
	@V_PARAM			nvarchar(4000),
	@V_SEQNO			integer,
	@V_PRD_ID			integer,
	@V_CREATED_DATE		datetime,
	@V_START_DATE		date,
	@V_END_DATE			date,
	@YEAR1 				integer,
	@MONTH1 			integer,
	@V_PERIOD			nvarchar(10),
	@V_PERIOD_2			nvarchar(10),

	------START GET RUN ID DETAIL FROM ABC------
	@BATCH_MASTER_ID  VARCHAR(20) = 0,
	@BATCH_RUN_ID    VARCHAR(20) = 0,
	@JOB_MASTER_ID   VARCHAR(20) = 0,
	@JOB_RUN_ID     VARCHAR(20) = 0,
	@GMT_START_DTTM   VARCHAR(19) = CONVERT(DATETIME2, GETDATE());

	EXEC STAG_ID.USP_GetRunIdReturn
	@JobName     = @JOBNAMESTR,
	@BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
	@BATCH_RUN_ID  = @BATCH_RUN_ID OUTPUT,
	@JOB_MASTER_ID  = @JOB_MASTER_ID OUTPUT,
	@JOB_RUN_ID   = @JOB_RUN_ID OUTPUT,
	@GMT_START_DTTM = @GMT_START_DTTM OUTPUT;
	------END GET RUN ID DETAIL FROM ABC------

	SET @V_FUNCTION_NAME	= 'FOND_ID.USP_LOAD_ETL4_FOND_CONFIG_ABST_FINANCE_CONFIG';
	SET @V_SEQNO			= 0;
	SET @V_START 			= current_timestamp;
	SET @V_PERIOD			= LEFT(@BATCHDATESTR,4)+'0'+RIGHT(@BATCHDATESTR,2);
	SET @V_PERIOD_2			= LEFT(@BATCHDATESTR,4)+RIGHT(@BATCHDATESTR,2);
	
	SET @V_START_DATE	= convert(date, convert(varchar(8), @p_prd_id), 112);
	SET @V_START 		= current_timestamp;

	-- Extracting Parameter Input Year
	SET @YEAR1           = YEAR(@V_START_DATE);
	-- Extracting Parameter Input Month
	SET @MONTH1          = MONTH(@V_START_DATE);
	PRINT	'Param Year: '+ convert(varchar(4), @YEAR1) +' and Month: '+ convert(varchar(2), @MONTH1);



	-------------------------------------------------------------------------
	-- STEP 1: INITIALIZATION
	-------------------------------------------------------------------------
	
	SET @V_DESCRIPTION 	= 'Start '+ @V_FUNCTION_NAME +' PARAM PERIOD='+ convert(varchar(10), @V_PERIOD) +': '+ convert(varchar(20), @V_START);
	PRINT	'Start '+ @V_FUNCTION_NAME +': '+ convert(varchar(20), @V_START);

	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	
	
	-- DELETE DATA BASED ON PERIOD
	DELETE FROM STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG_HISTORICAL WHERE BATCHDATE = @V_PERIOD_2;
	
	-- CONTROL VFA_CASHFLOW_SIGNAGE
	UPDATE STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG
	SET VFA_CASHFLOW_SIGNAGE='+1'
	WHERE VFA_CASHFLOW_SIGNAGE='1';

	-- INSERT DATA INTO FCT HISTORICAL TABLE
	INSERT INTO STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG_HISTORICAL
	SELECT *
	FROM STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG

	--------------------------------------------------------------------
	-- STEP 2: INSERT DATA TO FOND_ID.FOND_CONFIG_ABST_FINANCE_CONFIG
	--------------------------------------------------------------------

	SET @V_START 		= current_timestamp;
	SET @V_SEQNO		= @V_SEQNO + 1;
	SET @V_DESCRIPTION 	= 'INSERT INTO FOND_ID.FOND_CONFIG_ABST_FINANCE_CONFIG '+ CONVERT(VARCHAR(20),CURRENT_TIMESTAMP);
	PRINT	@V_DESCRIPTION;
	

	--(2A) UPDATE SHARIA PAR BUILD ON FCT (NEED TO MAKE SURE ACTION COLUMN U OR I BASED ON FCORE)
    UPDATE STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG
    SET SOURCE_PARM_ID_1 = 'SH_LIC', VFA_CASHFLOW_SIGNAGE = '-1'
    FROM STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG A
    INNER JOIN (
        SELECT * FROM STAG_ID.STAG_CONFIG_ETL5_B71_CONFIG WHERE LIC_LRC_FLAG = 'LIC'
    ) B 
    ON A.SUN_CD = B.SUN_CD AND A.CASHFLOW_TYPE_L1 = B.CASHFLOW_TYPE_L1 AND A.CASHFLOW_TYPE_L2 = B.CASHFLOW_TYPE_L2
    WHERE A.FUND_CD LIKE '%ITYT%' AND A.FUND_CD LIKE '%ISYS%';
    

	--(2B) Update FCT FOND table
	IF OBJECT_ID('tempdb.dbo.#TEMP_FCT', 'U') IS NOT NULL DROP TABLE #TEMP_FCT;

	SELECT ENTITY_ID, SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3, CONTROL_ACCT_FLG, NEW_COA, CASHFLOW_TYPE_L1, CASHFLOW_TYPE_L2, VFA_CASHFLOW_TYPE, VFA_CASHFLOW_SIGNAGE,
	ACTION, USER_PROFILE, A.UPDATE_DT, BATCH_MASTER_ID, BATCH_RUN_ID, JOB_MASTER_ID, JOB_RUN_ID, BATCHDATE, ETL_PROCESS_DATE_TIME
	INTO #TEMP_FCT
	FROM
	(
	SELECT *,
	CONCAT(ENTITY_ID, SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3, CONTROL_ACCT_FLG, NEW_COA, 
	COALESCE(CASHFLOW_TYPE_L1,''), COALESCE(CASHFLOW_TYPE_L2,''), COALESCE(VFA_CASHFLOW_TYPE,''), COALESCE(VFA_CASHFLOW_SIGNAGE,'')) AS [KEY]
	FROM
	(
	SELECT *, ROW_NUMBER() OVER(PARTITION BY ENTITY_ID, SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3 ORDER BY UPDATE_DT DESC) RNK
	FROM STAG_ID.STAG_CONFIG_ABST_FINANCE_CONFIG
	) A WHERE RNK=1
	) A
	LEFT JOIN
	(SELECT CONCAT('IAI', SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3, CONTROL_ACCT_FLG, NEW_COA, 
	COALESCE(CASHFLOW_TYPE_L1,''), COALESCE(CASHFLOW_TYPE_L2,''), COALESCE(VFA_CASHFLOW_TYPE,''), COALESCE(VFA_CASHFLOW_SIGNAGE,'')) AS [KEY], UPDATE_DT
	FROM FCORE_IDIAC.FOND_FINANCE_CONFIG WHERE YEAR(EFF_TO_DT)=9999) B
	ON A.[KEY]=B.[KEY] WHERE (B.[KEY] IS NULL OR (B.[KEY] IS NOT NULL AND A.[ACTION]='D'));

	TRUNCATE TABLE FOND_ID.FOND_CONFIG_ABST_FINANCE_CONFIG;
	INSERT INTO FOND_ID.FOND_CONFIG_ABST_FINANCE_CONFIG 
    SELECT ENTITY_ID, SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3, CONTROL_ACCT_FLG, NEW_COA, 
    CASE WHEN TRIM(CASHFLOW_TYPE_L1) = '' THEN NULL ELSE CASHFLOW_TYPE_L1 END AS CASHFLOW_TYPE_L1, 
    CASE WHEN TRIM(CASHFLOW_TYPE_L2) = '' THEN NULL ELSE CASHFLOW_TYPE_L2 END AS CASHFLOW_TYPE_L2, 
    CASE WHEN TRIM(VFA_CASHFLOW_TYPE) = '' THEN NULL ELSE VFA_CASHFLOW_TYPE END AS VFA_CASHFLOW_TYPE,
	CASE WHEN TRIM(VFA_CASHFLOW_SIGNAGE) = '' THEN NULL ELSE VFA_CASHFLOW_SIGNAGE END AS VFA_CASHFLOW_SIGNAGE,
	[NEW_ACTION] ACTION, USER_PROFILE, UPDATE_DT, 	
	@BATCH_MASTER_ID [BATCH_MASTER_ID],
	@BATCH_RUN_ID [BATCH_RUN_ID],
	@JOB_MASTER_ID [JOB_MASTER_ID],
	@JOB_RUN_ID [JOB_RUN_ID],
	@BATCHDATESTR [BATCHDATE],
	@GMT_START_DTTM [ETL_PROCESS_DATE_TIME]
	FROM (
	SELECT B.EFF_FROM_DT,A.*,
	CASE WHEN B.[KEY] IS NOT NULL AND A.UPDATE_DT>=B.EFF_FROM_DT AND A.[ACTION]<>'D' THEN 'U' ELSE [ACTION] END [NEW_ACTION]
	FROM #TEMP_FCT A
	LEFT JOIN 
	(SELECT CONCAT('IAI', SUN_CD, FUND_CD, PAS_NAME, SOURCE_PARM_ID_1, SOURCE_PARM_ID_2, SOURCE_PARM_ID_3) [KEY], UPDATE_DT, EFF_FROM_DT
	FROM FCORE_IDIAC.FOND_FINANCE_CONFIG WHERE YEAR(EFF_TO_DT)=9999) B
	ON CONCAT(A.ENTITY_ID, A.SUN_CD, A.FUND_CD, A.PAS_NAME, A.SOURCE_PARM_ID_1, A.SOURCE_PARM_ID_2, A.SOURCE_PARM_ID_3) = B.[KEY]
	WHERE (A.UPDATE_DT>=B.UPDATE_DT) OR (B.EFF_FROM_DT IS NULL AND A.[ACTION]<>'D')
	) A;

INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

	---------------------------------------------------------------
	-- STEP 4: CREATE TABLE RTRN FOR RRN PURPOSE
	---------------------------------------------------------------
	
	IF OBJECT_ID('STAG_ID.STAG_LIFEASIA_RTRNPF_ETL4', 'U') IS NOT NULL DROP TABLE STAG_ID.STAG_LIFEASIA_RTRNPF_ETL4;

	SELECT *, ROW_NUMBER() OVER(ORDER BY RDOCNUM) AS NEW_RRN
	INTO STAG_ID.STAG_LIFEASIA_RTRNPF_ETL4
	FROM STAG_ID.STAG_LIFEASIA_RTRNPF
	WHERE BATCACTYR=@YEAR1 AND BATCACTMN=@MONTH1;


	---------------------------------------------------------------
	-- STEP 5: FINISHING THE PROCESS
	---------------------------------------------------------------
	SET @V_START 		= current_timestamp;
	SET @V_SEQNO		= @V_SEQNO + 1;
	SET @V_DESCRIPTION 	= 'FINISH CALCULATE '+@V_FUNCTION_NAME+': '+ convert(varchar(20),current_timestamp);
	PRINT	@V_DESCRIPTION;
		
	INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
	VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);


END TRY

BEGIN CATCH
 DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
 DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
 DECLARE @ErrorState AS INT = ERROR_STATE()

 SET @V_SEQNO 	= @V_SEQNO + 1;
 SET @V_START 	= CONVERT(DATETIME,GETDATE());
 SET @V_DESCRIPTION	='Error execution for function on ' + @V_FUNCTION_NAME + ' at ' + convert(varchar,@V_START,121) + ' with Error Message : ' + ERROR_MESSAGE();

 INSERT into STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE, FUNC_NAME, SEQNO, "DESCRIPTION") VALUES(@V_START, @V_FUNCTION_NAME, @V_SEQNO, @V_DESCRIPTION);
 RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)

 IF @@TRANCOUNT > 0
  ROLLBACK TRANSACTION;

END CATCH;

IF @@TRANCOUNT > 0
 COMMIT TRANSACTION;

