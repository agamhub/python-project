CREATE PROC [FOND_ID].[USP_LOAD_ETL4_LIFEASIA_PARALLEL_FOND2] @P_PRD_ID [INTEGER],@BATCH_NO [INT],@JOBNAMESTR [NVARCHAR](2000) AS

  
BEGIN TRY
	DECLARE 
			@V_START			datetime,
			@V_END				datetime,
			@V_DURATION			datetime,
			@V_FUNCTION_NAME	varchar(100),
			@V_DESCRIPTION		varchar(500),
			@V_PARAM			nvarchar(4000),
			@V_SEQNO			integer,
			@V_CREATED_DATE		DATETIME,
	        @V_START_DATE		DATE,
	        @V_END_DATE			DATE,
			@V_CMD				NVARCHAR(max),
			@V_CMD_1			VARCHAR(max),
			@V_CMD_2			NVARCHAR(max),
			@V_CMD_3			VARCHAR(max),
			@V_CMD_4			VARCHAR(max),
			@V_CMD_5			VARCHAR(max),
			@V_CMD_6			VARCHAR(max),
			@V_CMD_7			VARCHAR(max),
			@V_CMD_8			VARCHAR(max),
			@TABLE_IN			varchar(100),
			@TABLE_OUT			varchar(100),
			@TABLE_NAME			varchar(100),
			@INIT_TABLE			varchar(100),
			@IFRS17_YEAR		INTEGER = CAST(SUBSTRING (CAST (@P_PRD_ID AS VARCHAR) ,1,4) AS INT),
			@IFRS17_MONTH		INTEGER = CAST(SUBSTRING (CAST (@P_PRD_ID AS VARCHAR) ,5,2) AS INT),
			@BATCH_NUMBER		VARCHAR(5),
			@PRD_ID 			VARCHAR(8),
			@VOUCHERLIST_TABLE	varchar(100),
			@TABLE_INVALID		varchar(100),
			@TARGET_TABLE_NAME AS VARCHAR(100),
	
	--TEMPORARILY SET MANUAL 
	--SET @IFRS17_YEAR=2019;
	--SET @IFRS17_MONTH=11;
	--SET @IFRS17_YEAR		= cast(SUBSTRING (cast (@p_prd_id as varchar) ,1,4) as int);
	--SET @IFRS17_MONTH		= cast(SUBSTRING (cast (@p_prd_id as varchar) ,5,2) as int);
		
	------START GET RUN ID DETAIL FROM ABC------
     @BATCH_MASTER_ID    VARCHAR(20) = 0,
     @BATCH_RUN_ID       VARCHAR(20) = 0,
     @JOB_MASTER_ID      VARCHAR(20) = 0,
	 @JOB_RUN_ID         VARCHAR(20) = 0,
     @GMT_START_DTTM     VARCHAR(20) = CONVERT(DATETIME2, GETDATE()),
	 @BATCHDATE			 VARCHAR(20) = LEFT(@P_PRD_ID,6);
	 
	EXEC STAG_ID.USP_GetRunIdReturn
      @JobName        = @JOBNAMESTR,
      @BATCH_MASTER_ID = @BATCH_MASTER_ID OUTPUT,
      @BATCH_RUN_ID    = @BATCH_RUN_ID OUTPUT,
      @JOB_MASTER_ID   = @JOB_MASTER_ID OUTPUT,
      @JOB_RUN_ID      = @JOB_RUN_ID OUTPUT,
      @GMT_START_DTTM  = @GMT_START_DTTM OUTPUT;

------END GET RUN ID DETAIL FROM ABC--------- 
	
------set variable----------------
	SET @BATCH_NUMBER		= CAST(@BATCH_NO AS VARCHAR);
	SET @V_FUNCTION_NAME	= 'FOND_ID.USP_LOAD_ETL4_LIFEASIA_PARALLEL_FOND2';
	SET @V_SEQNO			= 1;
	SET @V_START_DATE		= CONVERT(DATE, CONVERT(CHAR(10), @P_PRD_ID));
	SET @V_START			= CURRENT_TIMESTAMP;
	SET @V_DESCRIPTION		= CONCAT('Start Initiation - Creating #FOND LIFEASIA INVALID TABLE ', @V_FUNCTION_NAME, ' : ', @V_START_DATE);
	SET @PRD_ID				= CONVERT(CHAR(8),@P_PRD_ID);	

--------------------------
	-- Error Log STEP 5-2 START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Creating INVALID TABLE '+ @V_FUNCTION_NAME + ' - STEP 5-2 at ' + convert(varchar(20),current_timestamp) + ' with Error Message VALID TABLE (ifany): ' + ERROR_MESSAGE();

    INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 5 END
	--------------------------

	--IF @BATCH_NUMBER=1
	--BEGIN
	--SET @TARGET_TABLE_NAME = ('FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_' + CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00'))
	--SET @INIT_TABLE = ('FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_' + CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00'))
	--	IF OBJECT_ID(@TARGET_TABLE_NAME,'U') IS NULL 
	--		BEGIN
	--			EXEC ('CREATE TABLE '+@TARGET_TABLE_NAME + ' WITH(DISTRIBUTION = HASH(ROWNO), HEAP) AS ' + ' SELECT * FROM ' + @INIT_TABLE +' WHERE 1=0'  );
	--		END
	--END
		

	DECLARE @INVALID_TBL VARCHAR(100), @RECORDCOUNT INTEGER;--,@V_CMD NVARCHAR(max), @V_PARAM NVARCHAR(max);
	SET @INVALID_TBL = (SELECT 'FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_'+CAST(@IFRS17_YEAR AS VARCHAR)+STAG_ID.LPAD(CAST(@IFRS17_MONTH  AS VARCHAR),2,'00'));
	--SET @INVALID_TBL = 'FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_202206';

	SET @V_CMD = N'SELECT @RECORDCOUNT = COUNT(1) FROM '+@INVALID_TBL+'';
	SET @V_PARAM = N' @RECORDCOUNT INT OUTPUT';
	EXEC sp_executesql @V_CMD, @V_PARAM, @RECORDCOUNT=@RECORDCOUNT OUTPUT;
	PRINT @RECORDCOUNT;
	

	IF @RECORDCOUNT = 0
	BEGIN

	PRINT 'CHECK POINT 1';
	SET @TABLE_OUT = (SELECT 'FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_'+CAST(@IFRS17_YEAR AS VARCHAR)+STAG_ID.LPAD(CAST(@IFRS17_MONTH  AS VARCHAR),2,'00')+'_'+@BATCH_NUMBER );
	IF OBJECT_ID(@TABLE_OUT,'U') IS NOT NULL 
	BEGIN
		EXEC ('DROP TABLE '+@TABLE_OUT);
	END


	SET @V_CMD = ( 
	'CREATE TABLE '+@TABLE_OUT+' WITH ( DISTRIBUTION = HASH(ROWNO), HEAP )
	 AS
	 SELECT ACF.*,
	 CASE WHEN 
		(CASE WHEN FCT1.NEW_COA IS NOT NULL THEN FCT1.NEW_COA
			WHEN FCT2.NEW_COA IS NOT NULL THEN FCT2.NEW_COA
			WHEN FCT3.NEW_COA IS NOT NULL THEN FCT3.NEW_COA
			WHEN FCT4.NEW_COA IS NOT NULL THEN FCT4.NEW_COA
			WHEN FCT5.NEW_COA IS NOT NULL THEN FCT5.NEW_COA
			WHEN FCT6.NEW_COA IS NOT NULL THEN FCT6.NEW_COA
			WHEN FCT7.NEW_COA IS NOT NULL THEN FCT7.NEW_COA
			WHEN FCT8.NEW_COA IS NOT NULL THEN FCT8.NEW_COA
			WHEN FCT9.NEW_COA IS NOT NULL THEN FCT9.NEW_COA
			WHEN FCT10.NEW_COA IS NOT NULL THEN FCT10.NEW_COA
			WHEN FCT11.NEW_COA IS NOT NULL THEN FCT11.NEW_COA
			WHEN FCT12.NEW_COA IS NOT NULL THEN FCT12.NEW_COA
			WHEN FCT13.NEW_COA IS NOT NULL THEN FCT13.NEW_COA
			WHEN FCT14.NEW_COA IS NOT NULL THEN FCT14.NEW_COA
			WHEN FCT15.NEW_COA IS NOT NULL THEN FCT15.NEW_COA
			WHEN FCT16.NEW_COA IS NOT NULL THEN FCT16.NEW_COA
			ELSE NULL
			END) <> ''9999999999999'' 
		THEN NULL ELSE ''9999999999999'' END AS NEW_COA,
	'''+@BATCH_MASTER_ID+''' [BATCH_MASTER_ID],
	'''+@BATCH_RUN_ID+''' [BATCH_RUN_ID],
	'''+@JOB_MASTER_ID+''' [JOB_MASTER_ID],
	'''+@JOB_RUN_ID+''' [JOB_RUN_ID],
	'''+@BATCHDATE+''' [BATCHDATE],
	'''+@GMT_START_DTTM+''' [ETL_PROCESS_DATE_TIME]
	 FROM (
		SELECT 
		CAST(ROW_NUMBER()OVER(ORDER BY (SELECT NULL)) AS INTEGER) ROWNO,
		CAST(''IAI'' AS VARCHAR) ENTITY_ID,
		CAST(CASE WHEN TRIM(A.POLICY_NO) = '''' THEN NULL ELSE A.POLICY_NO END AS VARCHAR) POLICY_NO,
		CAST(CASE WHEN (A.POLICY_FLAG IS NULL OR A.POLICY_FLAG = '''') THEN ''-'' ELSE A.POLICY_FLAG END AS VARCHAR) POLICY_IDENTIFIER,
		CAST(CASE WHEN (A.PRODUCT IS NULL OR A.PRODUCT = '''') THEN ''-'' ELSE A.PRODUCT END AS VARCHAR) PRODUCT_CD,
		CAST(CASE WHEN (A.PRODUCT IS NULL OR A.PRODUCT = '''') THEN ''-'' ELSE A.PRODUCT END AS VARCHAR) BENEFIT_CD,
		CAST(CASE WHEN (A.COHORT IS NULL OR A.COHORT = '''') THEN ''-'' ELSE STAG_ID.LPAD(SUBSTRING(A.COHORT,1,4),4,''0000'')+''-''+STAG_ID.LPAD(SUBSTRING(A.COHORT,5,2),2,''00'')+''-''+STAG_ID.LPAD(SUBSTRING(A.COHORT,7,2),2,''00'') END AS VARCHAR) COHORT_DT,
		CAST(
			CASE WHEN (SUBSTRING(A.SUN_GLCODE,1,10) IS NULL OR SUBSTRING(A.SUN_GLCODE,1,10) = '''') THEN ''-'' ELSE SUBSTRING(A.SUN_GLCODE,1,10) END AS VARCHAR) SUN_CD,
		CASE 
		--BIN enhancement
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) IN (''1311219010'',''1311219020'',''4181010000'',''4182010000'') AND A.PRODUCT LIKE ''U%'' THEN A.BENEFIT_CODE
		--Renewal Suspense
			WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3394102000'' AND A.PSTATCODE = ''PS'' THEN ''PS''
			WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3394102000'' AND A.PROPOSAL_FLG = ''PS'' THEN ''PS''
			WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3394102000'' AND A.ORI_TRCDE = ''T642'' THEN ''T642''
				')
	SET @V_CMD_1 = ('
		--Revenue Enhancement
			WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''4771050000'' AND A.PSTATCODE = ''PS'' THEN ''PS''
			WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3141401000'' AND A.PSTATCODE = ''PS'' THEN ''PS''
		--WOP
			 WHEN (CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_WV WHERE WV_FLG=1) THEN CONCAT(A.ORI_TRCDE,''-LE-WP'')
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''5119030000'' AND A.ORI_TRCDE IN (''T515'',''T516'',''T518'') AND A.SACSCODE+A.SACSTYP=''LEWV'' THEN CONCAT(A.ORI_TRCDE,''-LE-WV'')
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3141990000'' AND A.ORI_TRCDE IN (''B516'') AND A.SACSCODE+A.SACSTYP=''LEWP'' THEN CONCAT(A.ORI_TRCDE,''-LE-WP'')
			 WHEN (CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_PEP WHERE PEP_FLG=1) THEN CONCAT(A.ORI_TRCDE,''-LE-EP'')
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) IN (''5119999000'') AND A.ORI_TRCDE IN (''T515'',''T516'',''T518'') AND A.SACSCODE+A.SACSTYP=''LERB'' THEN CONCAT(A.ORI_TRCDE,''-LE-RB'')
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3141990000'' AND A.ORI_TRCDE IN (''B516'') AND A.SACSCODE+A.SACSTYP=''LEEP'' THEN CONCAT(A.ORI_TRCDE,''-LE-EP'')
			 WHEN (CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI WHERE CI_FLG=1) THEN CONCAT(A.ORI_TRCDE,''-I1DR-I1ER'')
			 WHEN (CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI_LEG2 WHERE CI_FLG=1) THEN ''B516-I1DR-I1ER''
			 WHEN (CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI_LEG3 WHERE CI_FLG=1) THEN CONCAT(A.ORI_TRCDE,''-I1DR-I1ER'')
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) IN (''5119030000'') AND A.ORI_TRCDE IN (''T515'',''T516'',''T518'') AND A.SACSCODE+A.SACSTYP=''LERB'' THEN CONCAT(A.ORI_TRCDE,''-LE-RB'')
			 --TPD	 
			 --WHEN (CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_TPD WHERE TPD_FLG=1) THEN NULL
			 --WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3141990000'' AND A.ORI_TRCDE = ''B516'' AND A.SACSCODE+A.SACSTYP=''LEWP'' AND A.PSTATCODE = ''TP'' THEN ''B516-LE-WP-TP'' 
		--Basic
			 WHEN C.SOURCE_PARM_1 = ''case1'' THEN A.SACSCODE+''-''+A.SACSTYP+''-''+A.TRANS_CODE
			 WHEN C.SOURCE_PARM_1 = ''case2'' THEN A.SACSTYP
			 WHEN C.SOURCE_PARM_1 = ''case3'' THEN A.BENEFIT_CODE
			 WHEN C.SOURCE_PARM_1 = ''case5'' THEN A.PAIRING_ACCOUNT	
			ELSE NULL END SOURCE_PARM_1,
		--Loyalty Bonus
		CASE WHEN A.PTDATE_DIFF > 60 AND A.PRODUCT IN (''U1U'',''U2W'',''U2V'',''U2T'',''U24'',''U26'',''U20'') AND 
			SUBSTRING(A.SUN_GLCODE,1,10) = ''4112310030'' AND A.TRANS_CODE = ''B633'' AND A.ORI_TRCDE = ''T989'' THEN ''T989'' 
		--Extra Allocation
			WHEN A.PTDATE_DIFF > 24 AND A.PTDATE_DIFF <= 60 AND A.PRODUCT IN (''U2V'') AND 
			(CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_EA_FLAG WHERE EA_FLG=1)
			AND	SUBSTRING(A.SUN_GLCODE,1,10) = ''4112310030'' AND A.ORI_TRCDE = ''B522'' AND A.SACSCODE+A.SACSTYP = ''LENI'' THEN ''T999''
		--BIN enhancement
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) IN (''1311219010'',''1311219020'') AND A.PRODUCT LIKE ''U%'' AND A.ORI_TRCDE = ''B633'' THEN ''B633''
		ELSE NULL END SOURCE_PARM_2,
		CAST(NULL AS VARCHAR) SOURCE_PARM_3,
		CAST(CASE WHEN (CAST(A.TRANS_DATE AS VARCHAR) IS NULL) THEN ''-'' ELSE SUBSTRING(CAST(A.TRANS_DATE AS VARCHAR),1,4)+''-''+SUBSTRING(CAST(A.TRANS_DATE AS VARCHAR),5,2)+''-''+SUBSTRING(CAST(A.TRANS_DATE AS VARCHAR),7,2) END AS VARCHAR) TXN_DT,
	')
	SET @V_CMD_2 = ( 
		'CAST(CASE WHEN (A.ORIGCURR IS NULL OR A.ORIGCURR = '''') THEN ''-'' ELSE A.ORIGCURR END AS VARCHAR) ORG_CCY_CD,
		CAST(''IDR'' AS VARCHAR) RPT_CCY_CD,
		A.ORIG_AMT AMT_ORG_CCY,
		A.ACCT_AMT AMT_RPT_CCY,
		CAST(''LAS'' AS VARCHAR) PAS_NAME,
		CAST(CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'') AS BIGINT) ACCT_PERIOD,	
		CAST(A.VOUCHER_NO AS VARCHAR) VOUCHER_NO,
		CAST(CASE WHEN A.ACCT_AMT > 0 THEN ''DR'' ELSE ''CR'' END AS VARCHAR) AS CR_DR_FLG,
		CAST(CASE WHEN (A.T0 IS NULL OR A.T0 = '''') THEN ''-'' 
			WHEN (A.T0 = ''ITLP000'' AND A.T7 = ''P01'') THEN ''ITLS000''
			ELSE A.T0 END  AS VARCHAR) AS T0,
		CAST(NULL AS VARCHAR) T1,
		CAST(NULL AS VARCHAR) T2,
		CAST(NULL AS VARCHAR) T3,
		CAST(NULL AS VARCHAR) T4,
		CAST(NULL AS VARCHAR) T5,
		CAST(NULL AS VARCHAR) T6,
		CASE WHEN A.T0 = ''ITYT000'' THEN CAST(''TBR'' AS VARCHAR) ELSE CAST(A.T7 AS VARCHAR) END T7,
		CAST(NULL AS VARCHAR) T8,
		CAST(CASE WHEN (A.GLCODE IS NULL OR A.GLCODE = '''') THEN ''-'' ELSE A.GLCODE END AS VARCHAR) JRNAL_CD,
		CASE WHEN (A.RDOCNUM IS NULL OR A.RDOCNUM = '''') THEN ''-'' ELSE A.RDOCNUM END RDOCNUM,
		CASE WHEN (A.RLDGACCT IS NULL OR A.RLDGACCT = '''') THEN ''-'' ELSE A.RLDGACCT END RLDGACCT,
		A.TRANNO TRANNO,
		CASE WHEN (A.TRANDESC IS NULL OR A.TRANDESC = '''') THEN ''-'' ELSE A.TRANDESC END AS TRANDESC,
		CASE WHEN (CAST(A.LIFECOVERAGERIDER AS VARCHAR) IS NULL OR CAST(A.LIFECOVERAGERIDER AS VARCHAR) = '''') THEN ''-'' ELSE A.LIFECOVERAGERIDER END AS LIFECOVERAGERIDER,
		A.EFFDATE,
		CAST(CASE 
			WHEN (A.TRANREF IS NULL OR A.TRANREF = '''')
				THEN ''NON POLICY RELATED''
			ELSE ''POLICY RELATED'' END AS VARCHAR) POLICYRELATED_FLAG,
		A.TRANREF,
		CAST(A.SACSCODE AS VARCHAR(5)) SACSCODE,
		CAST(A.SACSTYP AS VARCHAR(5)) SACSTYP,
		A.TRANS_CODE,
		CAST(CASE WHEN (A.GLCODE_ORI IS NULL OR TRIM(A.GLCODE_ORI) = '''') THEN ''-'' ELSE TRIM(A.GLCODE_ORI) END AS VARCHAR) LFAGLCODE, 	
		--CAST(A.CLAIM_NO AS VARCHAR) CLAIM_NO,
		CASE WHEN 
			CAST(
				CASE WHEN (SUBSTRING(A.SUN_GLCODE,1,10) IS NULL OR SUBSTRING(A.SUN_GLCODE,1,10) = '''') THEN ''-'' 
				ELSE SUBSTRING(A.SUN_GLCODE,1,10) 
		END AS VARCHAR) = ''5114900000'' THEN CAST(CONCAT(A.CLAIM_NO,''-SR'') AS VARCHAR) ELSE CAST(A.CLAIM_NO AS VARCHAR) END CLAIM_NO,
		CAST(NULL AS VARCHAR) TREATY_IDENTIFIER,
		CASE WHEN MOVEMENT=''ACMV PL'' THEN 
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''27''+STAG_ID.LPAD(ROW_NUMBER() OVER(ORDER BY (SELECT NULL)),23,''0'')) AS VARCHAR(32)),1,8) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''27''+STAG_ID.LPAD(ROW_NUMBER() OVER(ORDER BY (SELECT NULL)),23,''0'')) AS VARCHAR(32)),9,4) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''27''+STAG_ID.LPAD(ROW_NUMBER() OVER(ORDER BY (SELECT NULL)),23,''0'')) AS VARCHAR(32)),13,4) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''27''+STAG_ID.LPAD(ROW_NUMBER() OVER(ORDER BY (SELECT NULL)),23,''0'')) AS VARCHAR(32)),17,4) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''27''+STAG_ID.LPAD(ROW_NUMBER() OVER(ORDER BY (SELECT NULL)),23,''0'')) AS VARCHAR(32)),21,12)
		ELSE
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''01''+STAG_ID.LPAD(CAST(A.ROWID AS VARCHAR),23,''0'')) AS VARCHAR(32)),1,8) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''01''+STAG_ID.LPAD(CAST(A.ROWID AS VARCHAR),23,''0'')) AS VARCHAR(32)),9,4) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''01''+STAG_ID.LPAD(CAST(A.ROWID AS VARCHAR),23,''0'')) AS VARCHAR(32)),13,4) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''01''+STAG_ID.LPAD(CAST(A.ROWID AS VARCHAR),23,''0'')) AS VARCHAR(32)),17,4) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''01''+STAG_ID.LPAD(CAST(A.ROWID AS VARCHAR),23,''0'')) AS VARCHAR(32)),21,12)
		END
			TXN_SK,
		A.APRVDATE,
		A.BENEFIT_CODE CRTABLE,
		A.TAXCODE,
		A.MOVEMENT,
		A.OMNI_PRODUCT_CD,
		A.ALTREF,
		A.T0_4_REPLACE, 
		A.TG002_ABBB,
		A.TG002_OMNI_1_ABBB,
		A.TG002_OMNI_ABBB,
		A.T0_2A1_REPLACE,
		A.T0_2B1_REPLACE,
		A.T0_2B2_REPLACE,
		A.ITEMITEM,
		A.SL_PREFIX,
		A.T0_0_REPLACE,
		A.TG009_FLAG,
		A.BILLFREQ,
		A.CRRCD_DEFAULT,
		A.PTDATE,
		A.PAIRING_ACCOUNT,
		A.ORI_TRCDE,
		CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END RRN
		FROM (SELECT CAST(TB1.RRN AS VARCHAR) NEW_RRN, TB1.* FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_DATA11 TB1 WHERE RRN NOT IN (SELECT DISTINCT RRN FROM FOND_ID.FOND_LIFEASIA_ETL4_TEMP_DATA11_TABARU_BATCH'+@BATCH_NUMBER+')
			  UNION ALL SELECT CAST(TB2.RRN AS VARCHAR) NEW_RRN, TB2.* FROM FOND_ID.FOND_LIFEASIA_ETL4_TEMP_DATA11_TABARU_BATCH'+@BATCH_NUMBER+' TB2
			  UNION ALL SELECT NULL AS NEW_RRN, TB3.* FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PL TB3) A 
		LEFT JOIN (SELECT SASCODE,SASTYPE,TCODE, MAX(TRANREF) TRANREF FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING_NONRELATED GROUP BY SASCODE,SASTYPE,TCODE) B ON B.SASCODE = A.SACSCODE AND B.SASTYPE = A.SACSTYP AND B.TCODE = A.TRANS_CODE
		LEFT JOIN STAG_ID.STAG_LIFEASIA_IFRS17_COA_INSCOPE C ON SUBSTRING(A.SUN_GLCODE,1,10) = C.IFRS_SUN_CD
	')
   SET @V_CMD_3 = ( 
	'WHERE (A.POLICY_FLAG = ''P'' AND (A.POLICY_NO IS NULL OR A.PRODUCT IS NULL OR A.COHORT IS NULL)) OR (A.POLICY_FLAG = ''-'') OR 
	ISDATE(CAST(CASE WHEN (A.COHORT IS NULL OR A.COHORT = '''') THEN ''-'' ELSE STAG_ID.LPAD(SUBSTRING(A.COHORT,1,4),4,''0000'')+''-''+STAG_ID.LPAD(SUBSTRING(A.COHORT,5,2),2,''00'')+''-''+STAG_ID.LPAD(SUBSTRING(A.COHORT,7,2),2,''00'') END AS VARCHAR)) = 0
		) ACF 
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT1
	  ON ACF.ENTITY_ID = FCT1.ENTITY_ID      --PRIORITY 1
	  AND ACF.SUN_CD = FCT1.SUN_CD
	  AND ACF.PAS_NAME = FCT1.PAS_NAME
	  AND ACF.T0 LIKE REPLACE(FCT1.FUND_CD,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT1.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT1.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_3 LIKE REPLACE(FCT1.SOURCE_PARM_ID_3,''*'','''')+''%''
	  AND FCT1.FUND_CD <> ''*''
	  AND FCT1.PAS_NAME <> ''*''
	  AND FCT1.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT1.SOURCE_PARM_ID_2 <> ''*''
	  AND FCT1.SOURCE_PARM_ID_3 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT2
	  ON ACF.ENTITY_ID = FCT2.ENTITY_ID      --PRIORITY 2
	  AND ACF.SUN_CD = FCT2.SUN_CD
	  AND ACF.PAS_NAME = FCT2.PAS_NAME
	  AND FCT2.FUND_CD = ''*''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT2.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT2.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_3 LIKE REPLACE(FCT2.SOURCE_PARM_ID_3,''*'','''')+''%''
	  AND FCT2.PAS_NAME <> ''*''
	  AND FCT2.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT2.SOURCE_PARM_ID_2 <> ''*''
	  AND FCT2.SOURCE_PARM_ID_3 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT3
	  ON ACF.ENTITY_ID = FCT3.ENTITY_ID      --PRIORITY 3
	  AND ACF.SUN_CD = FCT3.SUN_CD
	  AND FCT3.PAS_NAME = ''*''
	  AND ACF.T0 LIKE REPLACE(FCT3.FUND_CD,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT3.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT3.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_3 LIKE REPLACE(FCT3.SOURCE_PARM_ID_3,''*'','''')+''%''
	  AND FCT3.FUND_CD <> ''*''
	  AND FCT3.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT3.SOURCE_PARM_ID_2 <> ''*''
	  AND FCT3.SOURCE_PARM_ID_3 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT4
	  ON ACF.ENTITY_ID = FCT4.ENTITY_ID      --PRIORITY 4
	  AND ACF.SUN_CD = FCT4.SUN_CD
	  AND FCT4.FUND_CD = ''*''
	  AND FCT4.PAS_NAME = ''*''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT4.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT4.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_3 LIKE REPLACE(FCT4.SOURCE_PARM_ID_3,''*'','''')+''%''
	  AND FCT4.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT4.SOURCE_PARM_ID_2 <> ''*''
	  AND FCT4.SOURCE_PARM_ID_3 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT5
	  ON ACF.ENTITY_ID = FCT5.ENTITY_ID      --PRIORITY 5
	  AND ACF.SUN_CD = FCT5.SUN_CD
	  AND ACF.PAS_NAME = FCT5.PAS_NAME
	  AND ACF.T0 LIKE REPLACE(FCT5.FUND_CD,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT5.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT5.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND FCT5.SOURCE_PARM_ID_3 = ''*''
	  AND FCT5.FUND_CD <> ''*''
	  AND FCT5.PAS_NAME <> ''*''
	  AND FCT5.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT5.SOURCE_PARM_ID_2 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT6
	  ON ACF.ENTITY_ID = FCT6.ENTITY_ID      --PRIORITY 6
	  AND ACF.SUN_CD = FCT6.SUN_CD
	  AND ACF.PAS_NAME = FCT6.PAS_NAME
	  AND FCT6.FUND_CD = ''*''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT6.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT6.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND FCT6.SOURCE_PARM_ID_3 = ''*''
	  AND FCT6.PAS_NAME <> ''*''
	  AND FCT6.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT6.SOURCE_PARM_ID_2 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT7        
	  ON ACF.ENTITY_ID = FCT7.ENTITY_ID      --PRIORITY 7
	  AND ACF.SUN_CD = FCT7.SUN_CD
	  AND FCT7.PAS_NAME = ''*''
	  AND ACF.T0 LIKE REPLACE(FCT7.FUND_CD,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT7.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT7.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND FCT7.SOURCE_PARM_ID_3 = ''*''
	  AND FCT7.FUND_CD <> ''*''
	  AND FCT7.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT7.SOURCE_PARM_ID_2 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT8
	  ON ACF.ENTITY_ID = FCT8.ENTITY_ID      --PRIORITY 8
	  AND ACF.SUN_CD = FCT8.SUN_CD
	  AND FCT8.FUND_CD = ''*''
	  AND FCT8.PAS_NAME = ''*''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT8.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT8.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND FCT8.SOURCE_PARM_ID_3 = ''*''
	  AND FCT8.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT8.SOURCE_PARM_ID_2 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT9
	  ON ACF.ENTITY_ID = FCT9.ENTITY_ID      --PRIORITY 9
	  AND ACF.SUN_CD = FCT9.SUN_CD
	  AND ACF.PAS_NAME = FCT9.PAS_NAME
	  AND ACF.T0 LIKE REPLACE(FCT9.FUND_CD,''*'','''')+''%''            
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT9.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND FCT9.SOURCE_PARM_ID_3 = ''*''
	  AND FCT9.SOURCE_PARM_ID_2 = ''*''
	  AND FCT9.FUND_CD <> ''*''
	  AND FCT9.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT9.PAS_NAME <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT10
	  ON ACF.ENTITY_ID = FCT10.ENTITY_ID     --PRIORITY 10
	  AND ACF.SUN_CD = FCT10.SUN_CD
	  AND FCT10.FUND_CD= ''*''
	  AND ACF.PAS_NAME = FCT10.PAS_NAME
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT10.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND FCT10.SOURCE_PARM_ID_3 = ''*''
	  AND FCT10.SOURCE_PARM_ID_2 = ''*''
	  AND FCT10.PAS_NAME <> ''*''
	  AND FCT10.SOURCE_PARM_ID_1 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT11
	  ON ACF.ENTITY_ID = FCT11.ENTITY_ID     --PRIORITY 11
	  AND ACF.SUN_CD = FCT11.SUN_CD
	  AND FCT11.PAS_NAME = ''*''
	  AND ACF.T0 LIKE REPLACE(FCT11.FUND_CD,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT11.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND FCT11.SOURCE_PARM_ID_3 = ''*''
	  AND FCT11.SOURCE_PARM_ID_2 = ''*''
	  AND FCT11.FUND_CD <> ''*''
	  AND FCT11.SOURCE_PARM_ID_1 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT12
	  ON ACF.ENTITY_ID = FCT12.ENTITY_ID     --PRIORITY 12
	  AND ACF.SUN_CD = FCT12.SUN_CD
	  AND FCT12.FUND_CD = ''*''
	  AND FCT12.PAS_NAME = ''*''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT12.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND FCT12.SOURCE_PARM_ID_3 = ''*''
	  AND FCT12.SOURCE_PARM_ID_2 = ''*''
	  AND FCT12.SOURCE_PARM_ID_1 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT13
	  ON ACF.ENTITY_ID = FCT13.ENTITY_ID     --PRIORITY 13
	  AND ACF.SUN_CD = FCT13.SUN_CD
	  AND ACF.PAS_NAME = FCT13.PAS_NAME
	  AND ACF.T0 LIKE REPLACE(FCT13.FUND_CD,''*'','''')+''%''
	  AND FCT13.SOURCE_PARM_ID_1 = ''*''
	  AND FCT13.SOURCE_PARM_ID_3 = ''*''
	  AND FCT13.SOURCE_PARM_ID_2 = ''*''
	  AND FCT13.PAS_NAME <> ''*''
	  AND FCT13.FUND_CD <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT14
	  ON ACF.ENTITY_ID = FCT14.ENTITY_ID     --PRIORITY 14
	  AND ACF.SUN_CD = FCT14.SUN_CD
	  AND FCT14.FUND_CD = ''*''
	  AND ACF.PAS_NAME = FCT14.PAS_NAME
	  AND FCT14.SOURCE_PARM_ID_3 = ''*''
	  AND FCT14.SOURCE_PARM_ID_2 = ''*''
	  AND FCT14.SOURCE_PARM_ID_1 = ''*''
	  AND FCT14.PAS_NAME <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT15
	  ON ACF.ENTITY_ID = FCT15.ENTITY_ID     --PRIORITY 15
	  AND ACF.SUN_CD = FCT15.SUN_CD
	  AND ACF.T0 LIKE REPLACE(FCT15.FUND_CD,''*'','''')+''%''
	  AND FCT15.PAS_NAME = ''*''
	  AND FCT15.SOURCE_PARM_ID_3 = ''*''
	  AND FCT15.SOURCE_PARM_ID_2 = ''*''
	  AND FCT15.SOURCE_PARM_ID_1 = ''*''
	  AND FCT15.FUND_CD <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT16
	  ON ACF.ENTITY_ID = FCT16.ENTITY_ID     --PRIORITY 16
	  AND ACF.SUN_CD = FCT16.SUN_CD
	  AND FCT16.FUND_CD = ''*''
	  AND FCT16.PAS_NAME = ''*''
	  AND FCT16.SOURCE_PARM_ID_3 = ''*''
	  AND FCT16.SOURCE_PARM_ID_2 = ''*''
	  AND FCT16.SOURCE_PARM_ID_1 = ''*''
	')
	print @V_CMD;
	print @V_CMD_1;
	print @V_CMD_2;
	print @V_CMD_3;
	EXEC (@V_CMD+@V_CMD_1+@V_CMD_2+@V_CMD_3);

		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into ',@TABLE_OUT ,' on		: ', @V_START)
		--PRINT @V_DESCRIPTION
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT

		SET @TARGET_TABLE_NAME = ('FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_' + CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00'))
		
		SET @V_CMD = 'INSERT INTO ' + @TARGET_TABLE_NAME + ' SELECT * FROM ' + @TABLE_OUT 
		EXEC (@V_CMD);
		
		--IF OBJECT_ID(@TARGET_TABLE_NAME,'U') IS NULL 
		--	BEGIN
		--		EXEC ('CREATE TABLE '+@TARGET_TABLE_NAME + ' WITH(DISTRIBUTION = HASH(ROWNO), HEAP) AS ' + ' SELECT * FROM ' + @TABLE_OUT  );
		--	END
		--	ELSE
		--	BEGIN
		--		SET @V_CMD = 'INSERT INTO ' + @TARGET_TABLE_NAME + ' SELECT * FROM ' + @TABLE_OUT 
		--		EXEC (@V_CMD);
		--	END

		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into ',('FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_' + CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00')),' on			: ', @V_START)
		--PRINT @V_DESCRIPTION
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT

		--------------------------
	--MOVE INVALID TO RELATED TABLE
	--------------------------
	--Invalid table backup
	EXEC('IF OBJECT_ID(''FOND_ID.TMP_'+@BATCH_NUMBER+'_INVALID_BACKUP'',''U'') IS NOT NULL DROP TABLE FOND_ID.TMP_'+@BATCH_NUMBER+'_INVALID_BACKUP');
	SET @V_CMD='
	SELECT A.* INTO FOND_ID.TMP_'+@BATCH_NUMBER+'_INVALID_BACKUP
	FROM FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_' + CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00')+' A
	';
	EXEC (@V_CMD);

	EXEC('IF OBJECT_ID(''FOND_ID.TMP_'+@BATCH_NUMBER+'_LAS_INVALID1'',''U'') IS NOT NULL DROP TABLE FOND_ID.TMP_'+@BATCH_NUMBER+'_LAS_INVALID1');

	SET @V_CMD='
		WITH LAS_INVALID AS(
	SELECT A.*
	FROM FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_' + CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00')+'_'+@BATCH_NUMBER+' A
	WHERE UPPER(A.TRANDESC) NOT LIKE ''UP SUSPENSE%''
	)

	SELECT DISTINCT NULL AS [ROWNO]
		  ,A.[ENTITY_ID]
		  ,A.[POLICY_NO]
		  ,A.[POLICY_IDENTIFIER]
		  ,A.[PRODUCT_CD]
		  ,A.[BENEFIT_CD]
		  ,B.[COHORT_DT]
		  ,A.[SUN_CD]
		  ,A.[SOURCE_PARM_1]
		  ,A.[SOURCE_PARM_2]
		  ,A.[SOURCE_PARM_3]
		  ,A.[TXN_DT]
		  ,A.[ORG_CCY_CD]
		  ,A.[RPT_CCY_CD]
		  ,A.[AMT_ORG_CCY]
		  ,A.[AMT_RPT_CCY]
		  ,A.[PAS_NAME]
		  ,A.[ACCT_PERIOD]
		  ,A.[VOUCHER_NO]
		  ,A.[CR_DR_FLG]
		  ,A.[T0]
		  ,A.[T1]
		  ,A.[T2]
		  ,A.[T3]
		  ,A.[T4]
		  ,A.[T5]
		  ,A.[T6]
		  ,A.[T7]
		  ,A.[T8]
		  ,A.[JRNAL_CD]
		  ,A.[RDOCNUM]
		  ,A.[RLDGACCT]
		  ,A.[TRANNO]
		  ,A.[TRANDESC]
		  ,A.[LIFECOVERAGERIDER]
		  ,A.[EFFDATE]
		  ,A.[POLICYRELATED_FLAG]
		  ,A.[TRANREF]
		  ,A.[SACSCODE]
		  ,A.[SACSTYP]
		  ,A.[TRANS_CODE]
		  ,A.[LFAGLCODE]
		  ,B.[CLAIM_NO]
		  ,A.[TREATY_IDENTIFIER]
		  ,A.[TXN_SK]
		  ,A.[APRVDATE]
		  ,A.[CRTABLE]
		  ,A.[TAXCODE]
		  ,A.[MOVEMENT]
		  ,A.[OMNI_PRODUCT_CD]
		  ,A.[ALTREF]
		  ,A.[T0_4_REPLACE]
		  ,A.[TG002_ABBB]
		  ,A.[TG002_OMNI_1_ABBB]
		  ,A.[TG002_OMNI_ABBB]
		  ,A.[T0_2A1_REPLACE]
		  ,A.[T0_2B1_REPLACE]
		  ,A.[T0_2B2_REPLACE]
		  ,A.[ITEMITEM]
		  ,A.[SL_PREFIX]
		  ,A.[T0_0_REPLACE]
		  ,A.[TG009_FLAG]
		  ,A.[BILLFREQ]
		  ,A.[CRRCD_DEFAULT]
		  ,A.[PTDATE]
		  ,A.[PAIRING_ACCOUNT]
		  ,A.[ORI_TRCDE]
		  ,A.[RRN]
		  ,A.[NEW_COA]
		  ,'''+@BATCH_MASTER_ID+''' [BATCH_MASTER_ID]
		  ,'''+@BATCH_RUN_ID+''' [BATCH_RUN_ID]
		  ,'''+@JOB_MASTER_ID+''' [JOB_MASTER_ID]
		  ,'''+@JOB_RUN_ID+''' [JOB_RUN_ID]
		  ,'''+@BATCHDATE+''' [BATCHDATE]
		  ,'''+@GMT_START_DTTM+''' [ETL_PROCESS_DATE_TIME] 
		  INTO FOND_ID.TMP_'+@BATCH_NUMBER+'_LAS_INVALID1
	FROM LAS_INVALID A
	INNER JOIN(
		SELECT * FROM FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_' + CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00')+'
		) B ON A.RDOCNUM=B.RDOCNUM AND A.TRANREF=B.TRANREF  AND A.PRODUCT_CD=B.PRODUCT_CD AND A.AMT_RPT_CCY=B.AMT_RPT_CCY*-1 AND A.VOUCHER_NO=B.VOUCHER_NO AND A.POLICY_IDENTIFIER=B.POLICY_IDENTIFIER --A.TRANDESC=B.TRANDESC
	WHERE A.POLICY_IDENTIFIER=''P'' 
	';
	EXEC (@V_CMD);

	SET @TABLE_OUT = CONCAT('FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_',CAST(@IFRS17_YEAR AS VARCHAR),STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00'));

	--Insert data into Related table
	SET @V_CMD='INSERT INTO '+@TABLE_OUT+'
	SELECT * FROM FOND_ID.TMP_'+@BATCH_NUMBER+'_LAS_INVALID1 A
	WHERE (POLICY_IDENTIFIER = ''P'' AND POLICY_NO IS NOT NULL AND PRODUCT_CD IS NOT NULL AND ISDATE(COHORT_DT) = 1)';
	EXEC (@V_CMD);

	--UP SUSPENSE--
	EXEC('IF OBJECT_ID(''FOND_ID.TMP_'+@BATCH_NUMBER+'_LAS_INVALID2'',''U'') IS NOT NULL DROP TABLE FOND_ID.TMP_'+@BATCH_NUMBER+'_LAS_INVALID2');

	SET @V_CMD='
		WITH LAS_INVALID AS(
	SELECT A.*
	FROM FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_' + CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00')+'_'+@BATCH_NUMBER+' A
	WHERE UPPER(A.TRANDESC) LIKE ''UP SUSPENSE%''
	)

	SELECT DISTINCT NULL AS [ROWNO]
		  ,A.[ENTITY_ID]
		  ,A.[POLICY_NO]
		  ,A.[POLICY_IDENTIFIER]
		  ,A.[PRODUCT_CD]
		  ,A.[BENEFIT_CD]
		  ,B.[COHORT_DT]
		  ,A.[SUN_CD]
		  ,A.[SOURCE_PARM_1]
		  ,A.[SOURCE_PARM_2]
		  ,A.[SOURCE_PARM_3]
		  ,A.[TXN_DT]
		  ,A.[ORG_CCY_CD]
		  ,A.[RPT_CCY_CD]
		  ,A.[AMT_ORG_CCY]
		  ,A.[AMT_RPT_CCY]
		  ,A.[PAS_NAME]
		  ,A.[ACCT_PERIOD]
		  ,A.[VOUCHER_NO]
		  ,A.[CR_DR_FLG]
		  ,A.[T0]
		  ,A.[T1]
		  ,A.[T2]
		  ,A.[T3]
		  ,A.[T4]
		  ,A.[T5]
		  ,A.[T6]
		  ,A.[T7]
		  ,A.[T8]
		  ,A.[JRNAL_CD]
		  ,A.[RDOCNUM]
		  ,A.[RLDGACCT]
		  ,A.[TRANNO]
		  ,A.[TRANDESC]
		  ,A.[LIFECOVERAGERIDER]
		  ,A.[EFFDATE]
		  ,A.[POLICYRELATED_FLAG]
		  ,A.[TRANREF]
		  ,A.[SACSCODE]
		  ,A.[SACSTYP]
		  ,A.[TRANS_CODE]
		  ,A.[LFAGLCODE]
		  ,B.[CLAIM_NO]
		  ,A.[TREATY_IDENTIFIER]
		  ,A.[TXN_SK]
		  ,A.[APRVDATE]
		  ,A.[CRTABLE]
		  ,A.[TAXCODE]
		  ,A.[MOVEMENT]
		  ,A.[OMNI_PRODUCT_CD]
		  ,A.[ALTREF]
		  ,A.[T0_4_REPLACE]
		  ,A.[TG002_ABBB]
		  ,A.[TG002_OMNI_1_ABBB]
		  ,A.[TG002_OMNI_ABBB]
		  ,A.[T0_2A1_REPLACE]
		  ,A.[T0_2B1_REPLACE]
		  ,A.[T0_2B2_REPLACE]
		  ,A.[ITEMITEM]
		  ,A.[SL_PREFIX]
		  ,A.[T0_0_REPLACE]
		  ,A.[TG009_FLAG]
		  ,A.[BILLFREQ]
		  ,A.[CRRCD_DEFAULT]
		  ,A.[PTDATE]
		  ,A.[PAIRING_ACCOUNT]
		  ,A.[ORI_TRCDE]
		  ,A.[RRN]
		  ,A.[NEW_COA]
		  ,'''+@BATCH_MASTER_ID+''' [BATCH_MASTER_ID]
		  ,'''+@BATCH_RUN_ID+''' [BATCH_RUN_ID]
		  ,'''+@JOB_MASTER_ID+''' [JOB_MASTER_ID]
		  ,'''+@JOB_RUN_ID+''' [JOB_RUN_ID]
		  ,'''+@BATCHDATE+''' [BATCHDATE]
		  ,'''+@GMT_START_DTTM+''' [ETL_PROCESS_DATE_TIME] 
		  INTO FOND_ID.TMP_'+@BATCH_NUMBER+'_LAS_INVALID2
	FROM LAS_INVALID A
	INNER JOIN(
		SELECT * FROM FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_' + CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00')+'
		) B ON A.POLICY_IDENTIFIER=B.POLICY_IDENTIFIER AND A.POLICY_NO=B.POLICY_NO
	WHERE A.POLICY_IDENTIFIER=''P''
	';
	EXEC (@V_CMD);

	SET @TABLE_OUT = CONCAT('FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_',CAST(@IFRS17_YEAR AS VARCHAR),STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00'));

	--Insert data into Related table
	SET @V_CMD='INSERT INTO '+@TABLE_OUT+'
	SELECT * FROM FOND_ID.TMP_'+@BATCH_NUMBER+'_LAS_INVALID2 WHERE (POLICY_IDENTIFIER = ''P'' AND POLICY_NO IS NOT NULL AND PRODUCT_CD IS NOT NULL AND ISDATE(COHORT_DT) = 1)';
	EXEC (@V_CMD);

	--Delete invalid data
	SET @V_CMD='DELETE FROM FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_' + CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00')
	+' WHERE TXN_SK IN (SELECT TXN_SK FROM FOND_ID.TMP_'+@BATCH_NUMBER+'_LAS_INVALID1)';
	EXEC (@V_CMD);

	--Delete invalid data
	SET @V_CMD='DELETE FROM FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_' + CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00')
	+' WHERE TXN_SK IN (SELECT TXN_SK FROM FOND_ID.TMP_'+@BATCH_NUMBER+'_LAS_INVALID2)';
	EXEC (@V_CMD);
	--------------------------
	-- MOVE INVALID TO RELATED TABLE End
	--------------------------

	--------------------------
	-- Error Log STEP 5-2 START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Finish Processing FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_'+ CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00') + @BATCH_NUMBER+ @V_FUNCTION_NAME + ' - STEP 5-2 Point 1 at ' + convert(varchar(20),current_timestamp) + ' with Error Message STEP 2 (ifany): ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 5-2 END
	--------------------------
	
	END
	ELSE 
	BEGIN
	PRINT 'CHECK POINT 2';
	--------------------------
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE');
	
	EXEC('
		CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE WITH
		(
			DISTRIBUTION = HASH(RDOCNUM),
			HEAP
		) AS 
		WITH 
		ZGLEPF AS (
			SELECT 
				CAST(RDOCPFX AS VARCHAR)+CAST(RDOCCOY AS VARCHAR)
					+CAST(RDOCNUM AS VARCHAR)+CAST(JRNSEQ AS VARCHAR)
					+CAST(RLDGCOY AS VARCHAR)+CAST(RLDGACCT AS VARCHAR)
					+CAST(BATCCOY AS VARCHAR)+CAST(BATCBRN AS VARCHAR)
					+CAST(BATCACTYR AS VARCHAR)+CAST(BATCACTMN AS VARCHAR)
					+CAST(BATCTRCDE AS VARCHAR)+CAST(BATCBATCH AS VARCHAR)
					+CAST(GENLPFX AS VARCHAR)+CAST(GENLCOY AS VARCHAR)
					+CAST(GENLCUR AS VARCHAR)+CAST(TRIM(GLCODE) AS VARCHAR)
					+CAST(SACSCODE AS VARCHAR)+CAST(SACSTYP AS VARCHAR)
					+CAST(CAST(ORIGAMT AS NUMERIC(28,2)) AS VARCHAR)+CAST(ORIGCURR AS VARCHAR)
					+CAST(TRANNO AS VARCHAR)+CAST(POSTYEAR AS VARCHAR)
					+CAST(POSTMONTH AS VARCHAR)+CAST(EFFDATE AS VARCHAR) R_ID,
				ANLSCDXD01,ANLSCDXD02,ANLSCDXD03,CHDRNUM
				FROM STAG_ID.STAG_LIFEASIA_ZGLEPF
		)
		SELECT 
			A.*, 
			B.ALTREF, 
			B.SHTDESC, 
			B.APRVDATE, 
			(CAST(A.BATCACTYR AS VARCHAR)+CAST(A.BATCACTMN AS VARCHAR)+CAST(A.BATCCOY AS VARCHAR)+CAST(A.BATCTRCDE AS VARCHAR)+CAST(A.BATCBATCH AS VARCHAR)+CAST(A.BATCBRN AS VARCHAR)) AS VOUCHER_NO, 
			C.ANLSCDXD01,
			C.ANLSCDXD02,
			C.ANLSCDXD03, 
			CAST(C.CHDRNUM AS VARCHAR(8)) MISSING_POLICY_NO, 
			D.PAIRING_ACCOUNT
		FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_T_TABLE A 
		INNER JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_G_TABLE B ON A.BATCCOY = B.BATCCOY AND A.BATCBRN = B.BATCBRN AND A.BATCACTYR = B.BATCACTYR AND A.BATCACTMN = B.BATCACTMN AND A.BATCTRCDE = B.BATCTRCDE AND A.BATCBATCH = B.BATCBATCH AND A.GENLCOY = B.GENLCOY AND A.GENLCUR = B.GENLCUR AND TRIM(A.GLCODE) = TRIM(B.GENLCDE) AND A.ORIGCURR = B.ORIGCURR AND A.POSTMONTH = B.POSTMONTH AND A.POSTYEAR = B.POSTYEAR
		LEFT JOIN ZGLEPF C ON C.R_ID = CAST(A.RDOCPFX AS VARCHAR)+CAST(A.RDOCCOY AS VARCHAR)+CAST(A.RDOCNUM AS VARCHAR)+CAST(A.JRNSEQ AS VARCHAR)+CAST(A.RLDGCOY AS VARCHAR)+CAST(A.RLDGACCT AS VARCHAR)+CAST(A.BATCCOY AS VARCHAR)+CAST(A.BATCBRN AS VARCHAR)+CAST(A.BATCACTYR AS VARCHAR)+CAST(A.BATCACTMN AS VARCHAR)+CAST(A.BATCTRCDE AS VARCHAR)+CAST(A.BATCBATCH AS VARCHAR)+CAST(B.GENLPFX AS VARCHAR)+CAST(A.GENLCOY AS VARCHAR)+CAST(A.GENLCUR AS VARCHAR)+CAST(TRIM(A.GLCODE) AS VARCHAR)+CAST(A.SACSCODE AS VARCHAR)+CAST(A.SACSTYP AS VARCHAR)+CAST(A.ORIGAMT AS VARCHAR)+CAST(A.ORIGCURR AS VARCHAR)+CAST(A.TRANNO AS VARCHAR)+CAST(A.POSTYEAR AS VARCHAR)+CAST(A.POSTMONTH AS VARCHAR)+CAST(A.EFFDATE AS VARCHAR)
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_COMMISSION_PAIRING D on A.RRN = D.RRN and A.MOVEMENT= ''ACMV'''
		);
		
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE on					: ', @V_START)
		--PRINT @V_DESCRIPTION
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT
		
	------------------------------------------------
	-- LIFEASIA STEP 1 - FOUNDATION TABLE END
	------------------------------------------------


	--------------------------
	-- Error Log STEP 1 START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Creating STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT (Policy Mapping Function) '+ @V_FUNCTION_NAME + ' - STEP 2 at ' + convert(varchar(20),current_timestamp) + ' with Error Message STEP 1 (ifany): ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 1 END
	--------------------------
	
	
	DECLARE @TotalAllData AS INTEGER;
	SET @V_CMD = 'SELECT @TotalAllData = COUNT(1) FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE';
	SET @V_PARAM = N'@TotalAllData INT OUTPUT';
	EXEC sp_executesql @V_CMD, @V_PARAM, @TotalAllData=@TotalAllData OUTPUT;
	PRINT CONCAT('Total All Data												: ', @TotalAllData)
	
	
	

	-- Executing mapping policy function
	--Temporarily set manual
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT');
	
	SET @TABLE_OUT = 'STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT';
	SET @TABLE_IN= 'STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE';

	SET @V_CMD=(
		SELECT 'CREATE TABLE '+@TABLE_OUT+' WITH ( DISTRIBUTION = HASH(RDOCNUM), HEAP ) AS SELECT A.*,'+
		(SELECT 'CASE WHEN (MISSING_POLICY_NO IS NOT NULL OR MISSING_POLICY_NO <> '''') THEN MISSING_POLICY_NO '+STRING_AGG(POLICY_NO,' ')+' ELSE NULL END AS POLICY_NUMBER,' FROM 
		(SELECT TOP 100
			CASE WHEN (TRANREF = 'Y') THEN 'WHEN (TRANREF <> '''' AND TRANREF IS NOT NULL) AND ' ELSE 'WHEN ' END + 'SACSCODE+SACSTYP+BATCTRCDE IN ('+TCODE_IN+') THEN '+ THEN_CLAUSE AS POLICY_NO 
			FROM
			(SELECT TRANREF,''''+STRING_AGG(CAST(SASCODE+SASTYPE+TCODE AS NVARCHAR(MAX) ),''',''')+'''' AS TCODE_IN, THEN_CLAUSE FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING GROUP BY THEN_CLAUSE, TRANREF ) X_POLICY_NO ORDER BY TRANREF DESC
			) POLICY_NO_TABLE) -- POLICY NO SYNTAX
		+' '+
		(SELECT 'CASE WHEN (MISSING_POLICY_NO IS NOT NULL OR MISSING_POLICY_NO <> '''')THEN ''P'' '+STRING_AGG(POLICY_FLAG,' ')+' ELSE ' FROM 
		(SELECT TOP 100
			CASE WHEN (TRANREF = 'Y') THEN 'WHEN (TRANREF <> '''' AND TRANREF IS NOT NULL) AND ' ELSE 'WHEN ' END + 'SACSCODE+SACSTYP+BATCTRCDE IN ('+TCODE_IN+') THEN ''P''' AS POLICY_FLAG 
			FROM
			(SELECT TRANREF, ''''+STRING_AGG(CAST(SASCODE+SASTYPE+TCODE AS NVARCHAR(MAX)),''',''')+'''' TCODE_IN, THEN_CLAUSE FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING GROUP BY THEN_CLAUSE, TRANREF) X_POLICY_FLAG ORDER BY TRANREF DESC
			) POLICY_FLAG_TABLE) 
		+(SELECT 'CASE '+STRING_AGG(POLICY_FLAG,' ') FROM 
		(SELECT TOP 100
			CASE WHEN (TRANREF = 'Y') THEN 'WHEN (TRANREF = '''' OR TRANREF IS NULL) AND ' ELSE 'WHEN' END +' SACSCODE+SACSTYP+BATCTRCDE IN ('+SACSTCODE_IN+') THEN ''O''' AS POLICY_FLAG 
			FROM
		(SELECT TRANREF, ''''+STRING_AGG(CAST(SASCODE+SASTYPE+TCODE AS NVARCHAR(MAX)),''',''')+'''' SACSTCODE_IN FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING_NONRELATED GROUP BY TRANREF) X_POLICY_FLAG ORDER BY TRANREF DESC
		) POLICY_FLAG_TABLE)
		+'ELSE ''-'' END END AS POLICY_FLAG,'-- POLICY FLAG SYNTAX
		+' '+
		(SELECT 'CASE WHEN (MISSING_POLICY_NO IS NOT NULL OR MISSING_POLICY_NO <> '''') THEN MISSING_POLICY_NO '+STRING_AGG(NEW_RLDGACCT,' ')+' ELSE NULL END AS NEW_RLDGACCT' FROM 
		(SELECT TOP 100
			CASE WHEN (TRANREF = 'Y') THEN 'WHEN (TRANREF <> '''' AND TRANREF IS NOT NULL) AND ' ELSE 'WHEN ' END + 'SACSCODE+SACSTYP+BATCTRCDE IN ('+TCODE_IN+') THEN '+  THEN_ACCT AS NEW_RLDGACCT FROM
			(SELECT TRANREF,  ''''+STRING_AGG(CAST(SASCODE+SASTYPE+TCODE AS NVARCHAR(MAX)),''',''')+'''' TCODE_IN, THEN_ACCT FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING GROUP BY THEN_ACCT, TRANREF) X_NEW_RLDGACCT ORDER BY TRANREF DESC
			) NEW_RLDGACCT_TABLE) -- ACCOUNT NO SYNTAX
		+',
		CASE WHEN SACSCODE+SACSTYP+BATCTRCDE=''SCIT204'' AND CHARINDEX(''/'',TRANDESC) > 0 THEN RIGHT(LEFT(TRANDESC,CHARINDEX(''/'',TRANDESC)-1),8) ELSE NULL END POLICY_SCIT204
		FROM '+@TABLE_IN+' A
		');

		PRINT @V_CMD;
	EXEC( @V_CMD );
	
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT on			: ', @V_START)
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT
	
	
	
	--------------------------
	-- Error Log STEP 2A START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'List new policy number specific for SCIT204 - STEP 3A at ' + convert(varchar(20),current_timestamp) + ' with Error Message STEP 3A (ifany): ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 2A END
	--------------------------

	EXEC('IF OBJECT_ID(''tempdb.dbo.#NEW_CHDRNUM_'+@BATCH_NUMBER+''', ''U'') IS NOT NULL DROP TABLE #NEW_CHDRNUM_'+@BATCH_NUMBER+'');

	EXEC('
	SELECT DISTINCT NEW_POLICY_NO 
	INTO #NEW_CHDRNUM_'+@BATCH_NUMBER+'
	FROM
	(SELECT RIGHT(LEFT(TRANDESC,CHARINDEX(''/'',TRANDESC)-1),8) NEW_POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT
	WHERE SACSCODE+SACSTYP+BATCTRCDE=''SCIT204'' AND CHARINDEX(''/'',TRANDESC) > 0
	) A
	WHERE LEN(NEW_POLICY_NO)=8
	');
		
	--------------------------
	-- Error Log STEP 2 START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Creating STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 '+ @V_FUNCTION_NAME + ' - STEP 3 at ' + convert(varchar(20),current_timestamp) + ' with Error Message STEP 2 (ifany): ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 2 END
	--------------------------
	
	

	-- 2nd foundation table
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1');
	
		SET @V_CMD = 
			N'
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_B'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_B;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_B WITH (DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT CHDRNUM,CNTTYPE, MAX (PTDATE) AS PTDATE, MAX(BILLFREQ) BILLFREQ, MAX(STATCODE) STATCODE, MAX(PSTATCODE) PSTATCODE -- TAMBAHIN PTDATE, PAKAI GROUP BY INSTEAD OF DISTINCT
				FROM STAG_ID.STAG_LIFEASIA_CHDRPF 
				WHERE VALIDFLAG <> ''2'' 
						AND CHDRNUM IN (SELECT DISTINCT POLICY_NUMBER FROM (SELECT DISTINCT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT UNION ALL SELECT NEW_POLICY_NO POLICY_NUMBER FROM #NEW_CHDRNUM_'+@BATCH_NUMBER+') A)
				GROUP BY CHDRNUM,CNTTYPE
			);

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_C'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_C;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_C WITH (DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT CHDRNUM,CNTTYPE, MAX(PTDATE) AS PTDATE, MAX(BILLFREQ) BILLFREQ, MAX(STATCODE) STATCODE, MAX(PSTATCODE) PSTATCODE -- TAMBAHIN PTDATE, PAKAI GROUP BY INSTEAD OF DISTINCT
				FROM STAG_ID.STAG_LIFEASIA_CHDRPF 
				WHERE VALIDFLAG = ''2'' 
						AND CHDRNUM IN (SELECT DISTINCT POLICY_NUMBER FROM (SELECT DISTINCT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT UNION ALL SELECT NEW_POLICY_NO POLICY_NUMBER FROM #NEW_CHDRNUM_'+@BATCH_NUMBER+') A)
				GROUP BY CHDRNUM,CNTTYPE
			);

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_NON_2'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_NON_2;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_NON_2 WITH (DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE, MAX(CRRCD) CRRCD 
				FROM STAG_ID.STAG_LIFEASIA_COVRPF 
				WHERE VALIDFLAG <> ''2'' 
					AND CHDRNUM IN (SELECT DISTINCT POLICY_NUMBER FROM (SELECT DISTINCT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT UNION ALL SELECT NEW_POLICY_NO POLICY_NUMBER FROM #NEW_CHDRNUM_'+@BATCH_NUMBER+') A)
				GROUP BY CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE
				UNION ALL
				SELECT DISTINCT CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE, NULL CRRCD 
				FROM STAG_ID.STAG_LIFEASIA_COVTPF 
				WHERE CHDRNUM NOT IN (SELECT DISTINCT CHDRNUM FROM STAG_ID.STAG_LIFEASIA_COVRPF WHERE VALIDFLAG <> ''2'')
					AND CHDRNUM IN (SELECT DISTINCT POLICY_NUMBER FROM (SELECT DISTINCT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT UNION ALL SELECT NEW_POLICY_NO POLICY_NUMBER FROM #NEW_CHDRNUM_'+@BATCH_NUMBER+') A)
			);

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2 WITH (DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE, MAX(CRRCD) CRRCD FROM STAG_ID.STAG_LIFEASIA_COVRPF 
				WHERE VALIDFLAG <> ''2'' 
						AND CHDRNUM IN (SELECT DISTINCT POLICY_NUMBER FROM (SELECT DISTINCT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT UNION ALL SELECT NEW_POLICY_NO POLICY_NUMBER FROM #NEW_CHDRNUM_'+@BATCH_NUMBER+' UNION ALL SELECT DISTINCT RLDGACCT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT WHERE POLICY_NUMBER IS NULL) A)
				GROUP BY CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE
				UNION ALL
				SELECT DISTINCT CHDRNUM, LIFE, COVERAGE, RIDER, CRTABLE, NULL CRRCD 
				FROM STAG_ID.STAG_LIFEASIA_COVTPF 
				WHERE CHDRNUM NOT IN (SELECT DISTINCT CHDRNUM FROM STAG_ID.STAG_LIFEASIA_COVRPF WHERE VALIDFLAG <> ''2'')
						AND CHDRNUM IN (SELECT DISTINCT POLICY_NUMBER FROM (SELECT DISTINCT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT UNION ALL SELECT NEW_POLICY_NO POLICY_NUMBER FROM #NEW_CHDRNUM_'+@BATCH_NUMBER+' UNION ALL SELECT DISTINCT RLDGACCT POLICY_NUMBER FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT WHERE POLICY_NUMBER IS NULL) A)
			);'

			PRINT @V_CMD;
		--EXEC LongPrint @String = @V_CMD
		EXEC (@V_CMD);
		
		--IF @IsInitialIteration = 'Y'
		BEGIN
		SET @V_CMD = 
			N'
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF WITH ( DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT A.*, CAST(CONCAT(A.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,A.RGPYNUM) AS VARCHAR(20)) CLAIM_NO
				FROM
				(SELECT DISTINCT CLAIM_DATE, CAST(CHDRCOY AS VARCHAR(30)) CHDRCOY, CAST(CHDRNUM AS VARCHAR(30)) CHDRNUM, CAST(TRANNO AS NUMERIC(5,0)) TRANNO, CAST(RGPYNUM AS VARCHAR(5)) RGPYNUM
				FROM
				(SELECT EFFDATE CLAIM_DATE, CHDRCOY, STAG_ID.LPAD(CHDRNUM,8,''0'') CHDRNUM, TRANNO, STAG_ID.LPAD(RGPYNUM,4,''0'') RGPYNUM,
				DENSE_RANK()OVER(PARTITION BY STAG_ID.LPAD(CHDRNUM,8,''0''), TRANNO, CHDRCOY ORDER BY EFFDATE DESC, RGPYNUM DESC) RNK
				FROM STAG_ID.STAG_LIFEASIA_ZRVHPF) A
				WHERE RNK = 1) A
				LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2 B
				ON A.CHDRNUM = B.CHDRNUM	
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_OTHER'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_OTHER;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_OTHER WITH ( DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT A.*, CAST(CONCAT(A.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,A.RGPYNUM) AS VARCHAR(20)) CLAIM_NO
				FROM
				(SELECT DISTINCT CLAIM_DATE, CAST(CHDRCOY AS VARCHAR(30)) CHDRCOY, CAST(CHDRNUM AS VARCHAR(30)) CHDRNUM, CAST(TRANNO AS NUMERIC(5,0)) TRANNO, CAST(RGPYNUM AS VARCHAR(5)) RGPYNUM
				FROM
				(SELECT EFFDATE CLAIM_DATE, CHDRCOY, STAG_ID.LPAD(CHDRNUM,8,''0'') CHDRNUM, XTRANNO TRANNO, STAG_ID.LPAD(RGPYNUM,4,''0'') RGPYNUM,
				DENSE_RANK()OVER(PARTITION BY STAG_ID.LPAD(CHDRNUM,8,''0''), XTRANNO, CHDRCOY ORDER BY EFFDATE DESC, RGPYNUM DESC) RNK
				FROM STAG_ID.STAG_LIFEASIA_ZRVHPF) A
				WHERE RNK = 1) A
				LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2 B
				ON A.CHDRNUM = B.CHDRNUM
			);

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_T301'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_T301;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_T301 WITH ( DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT A.*, CAST(CONCAT(A.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,A.RGPYNUM) AS VARCHAR(20)) CLAIM_NO
				FROM
				(SELECT MAX(EFFDATE) CLAIM_DATE, CAST(CHDRCOY AS VARCHAR(30)) CHDRCOY, CAST(STAG_ID.LPAD(CHDRNUM,8,''0'') AS VARCHAR(30)) CHDRNUM, 
				CAST(STAG_ID.LPAD(CAST(RGPYNUM AS INTEGER),4,''0'') AS VARCHAR(10)) RGPYNUM 
				FROM STAG_ID.STAG_LIFEASIA_ZRVHPF GROUP BY CHDRCOY, CHDRNUM, RGPYNUM) A
				LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2 B
				ON A.CHDRNUM = B.CHDRNUM
			);'

		EXEC (@V_CMD);
		
		SET @V_CMD = N'
		IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_T7_RECLASS'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T7_RECLASS;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T7_RECLASS WITH 
			( 
				DISTRIBUTION = HASH(ITEMITEM)
			) AS
			(
				SELECT ITEMITEM, -- SUBSTRING(GENAREA,1,12) ANALYSISCODEDESC, 
				SUBSTRING(GENAREA,13,7) T7_REC_ACMV, ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) AS RN
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG005'' AND SUBSTRING(GENAREA,1,12) = ''ANALYSYSCD08'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_T3616'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T3616;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T3616 WITH 
			( 
				DISTRIBUTION = HASH(ITEMITEM)
			) AS
			(
				SELECT ITEMITEM, SUBSTRING(GENAREA,3,2) SL_PREFIX,ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM, SUBSTRING(GENAREA,3,2) DESC) RN 
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF 
				WHERE ITEMTABL = ''T3616'' AND ITEMPFX = ''IT''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_OMNI_PRODUCT'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_OMNI_PRODUCT;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_OMNI_PRODUCT WITH 
			( 
				DISTRIBUTION = HASH(ITEMITEM)
			) AS
			(
				SELECT ITEMITEM, ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) RN FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG011'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_4'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_4;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_4 WITH 
			( 
				DISTRIBUTION = HASH(ITEMITEM)
			) AS
			(
				SELECT A.ITEMITEM, SUBSTRING(A.GENAREA,1,7) T0_REPLACE, B.SHORTDESC COA, ROW_NUMBER() OVER(PARTITION BY A.ITEMITEM, B.SHORTDESC ORDER BY B.SHORTDESC) AS RN 
				FROM (SELECT * FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG007'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1'') A 
				JOIN (SELECT * FROM STAG_ID.STAG_LIFEASIA_DESCPF WHERE DESCTABL = ''TG007'' AND DESCPFX = ''IT'') B ON A.ITEMITEM = B.DESCITEM
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2A1'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2A1;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2A1 WITH 
			( 
				DISTRIBUTION = HASH(ITEMITEM)
			) AS
			(
				SELECT ITEMITEM, -- SUBSTRING(GENAREA,1,12) ANALYSISCODEDESC, 
				SUBSTRING(GENAREA,13,7) T0_REPLACE, ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) AS RN
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG005'' AND SUBSTRING(GENAREA,1,12) = ''ANALYSYSCD01'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2B1'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2B1;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2B1 WITH ( DISTRIBUTION = HASH(ITEMITEM)) AS
			(
				SELECT ITEMITEM, -- SUBSTRING(GENAREA,1,12) ANALYSISCODEDESC, 
				SUBSTRING(GENAREA,13,7) T0_REPLACE, ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) AS RN
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG005'' AND SUBSTRING(GENAREA,1,12) = ''ANALYSYSCD01'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_RTRN_T7'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_RTRN_T7;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_RTRN_T7 WITH ( DISTRIBUTION = HASH(ITEMITEM)) AS
			(
				SELECT ITEMITEM, -- SUBSTRING(GENAREA,1,12) ANALYSISCODEDESC, 
				SUBSTRING(GENAREA,13,3) T7_REPLACE, ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) AS RN
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG006'' AND SUBSTRING(GENAREA,1,12) = ''ANALYSYSCD08'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1''
			)';
EXEC (@V_CMD);
	SET @V_CMD_2 = N'
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ENTITY_SPLIT'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ENTITY_SPLIT;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ENTITY_SPLIT WITH ( DISTRIBUTION = HASH(ITEMITEM)) AS
			(
				SELECT ITEMITEM, CASE WHEN SUBSTRING(GENAREA,124,2) IN (''RS'',''SS'') THEN ''PSY'' ELSE ''P01'' END SY_FLG, ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) RN 
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''T5687'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_CLMH'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_CLMH;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_CLMH WITH ( DISTRIBUTION = HASH(CHDRNUM)) AS
			(
				SELECT MAX(CLAIM_DATE) CLAIM_DATE, CHDRNUM, TRANNO, CAST(CONCAT(A.CHDRNUM,''010100'',A.TRANNO,''T668'') AS VARCHAR(30)) CLAIM_NO
				FROM
				(SELECT DISTINCT EFFDATE CLAIM_DATE,CAST(STAG_ID.LPAD(CHDRNUM,8,''0'') AS VARCHAR(8)) CHDRNUM,CAST(TRANNO AS NUMERIC(5,0)) TRANNO
				FROM STAG_ID.STAG_LIFEASIA_ZRVHPF
				) A
				GROUP BY CHDRNUM, TRANNO, CAST(CONCAT(A.CHDRNUM,''010100'',A.TRANNO,''T668'') AS VARCHAR(20))
			);
			';
EXEC (@V_CMD_2);

	SET @V_CMD = N'
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2B2'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2B2;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2B2 WITH ( DISTRIBUTION = HASH(ITEMITEM)) AS
			(
				SELECT ITEMITEM, -- SUBSTRING(GENAREA,1,12) ANALYSISCODEDESC, 
				SUBSTRING(GENAREA,13,7) T0_REPLACE, ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) AS RN
				FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG005'' AND SUBSTRING(GENAREA,1,12) = ''ANALYSYSCD01'' AND ITEMPFX=''IT'' AND VALIDFLAG = ''1''
			);
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_RIDER_DESC'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_RIDER_DESC;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_RIDER_DESC WITH ( DISTRIBUTION = HASH(DESCITEM)) AS 
			(
				SELECT DESCITEM, LONGDESC FROM STAG_ID.STAG_LIFEASIA_DESCPF 
				WHERE DESCTABL = ''T5687'' AND DESCCOY = ''2''
			);

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_PRODUCT_DESC'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PRODUCT_DESC;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PRODUCT_DESC WITH ( DISTRIBUTION = HASH(DESCITEM)) AS 
			(
				SELECT DESCITEM, LONGDESC FROM STAG_ID.STAG_LIFEASIA_DESCPF 
				WHERE DESCTABL = ''T5688'' AND DESCCOY = ''2''
			);

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSCODE1'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSCODE1;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSCODE1 WITH ( DISTRIBUTION = HASH(DESCITEM)) AS 
			(
				SELECT * FROM (SELECT ROW_NUMBER() OVER (PARTITION BY DESCITEM ORDER BY DESCCOY) ROWNUM, DESCITEM, SHORTDESC, LONGDESC FROM STAG_ID.STAG_LIFEASIA_DESCPF WHERE DESCTABL = ''T3616'') A 
				WHERE ROWNUM = 1
			);

			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSTYP1'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSTYP1;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSTYP1 WITH ( DISTRIBUTION = HASH(DESCITEM)) AS 
			(
				SELECT * FROM (SELECT ROW_NUMBER() OVER (PARTITION BY DESCITEM ORDER BY DESCCOY) ROWNUM, DESCITEM, SHORTDESC, LONGDESC FROM STAG_ID.STAG_LIFEASIA_DESCPF WHERE DESCTABL = ''T3695'') A 
				WHERE ROWNUM = 1
			)
			
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_PTRNPF'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PTRNPF;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PTRNPF WITH ( DISTRIBUTION = HASH(CHDRNUM)) AS 
			(
			SELECT *
			FROM (
			SELECT CHDRNUM, TRANNO, BATCTRCDE
			FROM (SELECT DISTINCT CHDRNUM, TRANNO, BATCTRCDE FROM STAG_ID.STAG_LIFEASIA_PTRNPF) A
			GROUP BY CHDRNUM, TRANNO, BATCTRCDE HAVING COUNT(1) = 1
			) A
			WHERE NOT EXISTS
			(SELECT CHDRNUM, TRANNO FROM
			(SELECT CHDRNUM, TRANNO FROM
			(SELECT CHDRNUM, TRANNO, BATCTRCDE
			FROM (SELECT DISTINCT CHDRNUM, TRANNO, BATCTRCDE FROM STAG_ID.STAG_LIFEASIA_PTRNPF) B
			GROUP BY CHDRNUM, TRANNO, BATCTRCDE HAVING COUNT(1) = 1) B
			GROUP BY CHDRNUM, TRANNO HAVING COUNT(1) > 1) B
			WHERE A.CHDRNUM=B.CHDRNUM AND A.TRANNO=B.TRANNO)
			UNION ALL
			--DOUBLE CHDRNUM & TRANNO
			SELECT CHDRNUM, TRANNO, BATCTRCDE FROM (
			SELECT * FROM (
			SELECT ROW_NUMBER() OVER(PARTITION BY CHDRNUM,TRANNO ORDER BY BATCTRCDE DESC) RNK, CHDRNUM, TRANNO, BATCTRCDE
			FROM (SELECT DISTINCT CHDRNUM, TRANNO, BATCTRCDE FROM STAG_ID.STAG_LIFEASIA_PTRNPF) A
			GROUP BY CHDRNUM, TRANNO, BATCTRCDE
			) A
			WHERE EXISTS
			(SELECT CHDRNUM, TRANNO FROM
			(SELECT CHDRNUM, TRANNO FROM
			(SELECT CHDRNUM, TRANNO, BATCTRCDE
			FROM (SELECT DISTINCT CHDRNUM, TRANNO, BATCTRCDE FROM STAG_ID.STAG_LIFEASIA_PTRNPF) B
			GROUP BY CHDRNUM, TRANNO, BATCTRCDE HAVING COUNT(1) = 1) B
			GROUP BY CHDRNUM, TRANNO HAVING COUNT(1) > 1) B
			WHERE A.CHDRNUM=B.CHDRNUM AND A.TRANNO=B.TRANNO)
			) A WHERE RNK=1
			)
			';
	EXEC (@V_CMD);
	END
		

	SET @V_CMD_2 = N'
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 WITH 
			( 
				DISTRIBUTION = HASH(RDOCNUM)
				--, HEAP 
			) AS
			SELECT 
			-- T0 FLAG START
			CAST(CASE ' + (
		SELECT (
			SELECT 
				'WHEN (SUBSTRING(A.ALTREF,12,2) IN (''01'',''02'')) AND (E.CRTABLE+A.BATCTRCDE IN ('+STRING_AGG(ITEMITEM_FLAG,',')+'))' ITEMITEM_FLAG
				FROM 
				(
					SELECT DISTINCT ''''+TRIM(SUBSTRING(ITEMITEM,1,4))+TRIM(SUBSTRING(ITEMITEM,5,4))+'''' ITEMITEM_FLAG FROM STAG_ID.STAG_LIFEASIA_ITEMPF 
						WHERE ITEMTABL = 'TG002' AND VALIDFLAG <> '2'  AND ITEMPFX='IT'
						AND SUBSTRING(ITEMITEM,1,4)NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,1,4) <> '' AND SUBSTRING(ITEMITEM,1,4) IS NOT NULL
						AND SUBSTRING(ITEMITEM,5,4)NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,5,4) <> '' AND SUBSTRING(ITEMITEM,5,4) IS NOT NULL
				) A
				)+'THEN (E.CRTABLE+A.BATCTRCDE) '+(
			SELECT 
				'WHEN (SUBSTRING(A.ALTREF,12,2) IN (''01'',''02'')) AND (E.CRTABLE IN ('+STRING_AGG(CAST(ITEMITEM_FLAG AS NVARCHAR(MAX)),',')+'))' ITEMITEM_FLAG 
				FROM 
				(
					SELECT DISTINCT ''''+TRIM(SUBSTRING(ITEMITEM,1,4))+'''' ITEMITEM_FLAG FROM STAG_ID.STAG_LIFEASIA_ITEMPF 
						WHERE ITEMTABL = 'TG002' AND VALIDFLAG <> '2' AND ITEMPFX='IT'
						AND SUBSTRING(ITEMITEM,1,4)NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,1,4) <> '' AND SUBSTRING(ITEMITEM,1,4) IS NOT NULL
						AND SUBSTRING(ITEMITEM,5,4)LIKE '%*%' AND SUBSTRING(ITEMITEM,5,4) <> '' AND SUBSTRING(ITEMITEM,5,4) IS NOT NULL
				) A
				)+'THEN (E.CRTABLE+''****'') '+(
			SELECT 
				'WHEN (SUBSTRING(A.ALTREF,12,2) IN (''01'',''02'')) AND (A.BATCTRCDE  IN ('+STRING_AGG(CAST(ITEMITEM_FLAG AS NVARCHAR(MAX)),',')+'))' ITEMITEM_FLAG
				FROM 
				(
					SELECT DISTINCT ''''+TRIM(SUBSTRING(ITEMITEM,5,4))+'''' ITEMITEM_FLAG FROM STAG_ID.STAG_LIFEASIA_ITEMPF 
						WHERE ITEMTABL = 'TG002' AND VALIDFLAG <> '2' AND ITEMPFX='IT'
						AND SUBSTRING(ITEMITEM,1,4)LIKE '%*%' AND SUBSTRING(ITEMITEM,1,4) <> '' AND SUBSTRING(ITEMITEM,1,4) IS NOT NULL
						AND SUBSTRING(ITEMITEM,5,4)NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,5,4) <> '' AND SUBSTRING(ITEMITEM,5,4) IS NOT NULL
				) A)
				+'THEN (''****''+A.BATCTRCDE) 
				WHEN (SUBSTRING(A.ALTREF,12,2) IN (''01'',''02'')) THEN (''********'') END AS VARCHAR) ITEMITEM_FLAG,'
				+'
			A.TAXCODE,
			A.MOVEMENT,
			OMNI.ITEMITEM OMNI_PRODUCT_CD,
			CAST(A.ANLSCDXD01 as VARCHAR(7)) T0_0_REPLACE,
			T0_4.T0_REPLACE T0_4_REPLACE,
			T0_2A1.T0_REPLACE T0_2A1_REPLACE,
			T0_2B1.T0_REPLACE T0_2B1_REPLACE,
			T0_2B2.T0_REPLACE T0_2B2_REPLACE,
			T3616.SL_PREFIX,
		-- T0 FLAG END
			A.VOUCHER_NO,
			A.EFFDATE, 
			CASE WHEN LEN(TRIM(A.NEW_RLDGACCT))<14 THEN ''010100'' ELSE SUBSTRING(A.NEW_RLDGACCT,9,6) END AS LIFECOVERAGERIDER,
			CASE WHEN A.POLICY_FLAG = ''O'' THEN NULL ELSE E.CRTABLE END AS BENEFIT_CODE,
			A.BATCACTYR, A.BATCACTMN, A.APRVDATE, 
			A.TRANSACTION_DATE AS TRANS_DATE_ORI, 
			CASE WHEN SUBSTRING(CAST(A.TRANSACTION_DATE AS VARCHAR),1,6) <> CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),2,''0'')
				THEN CONVERT(VARCHAR,EOMONTH(CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),2,''0'')+''01''),112)
				ELSE CAST(A.TRANSACTION_DATE AS VARCHAR) END TRANS_DATE,
			CASE WHEN B.CNTTYPE IS NULL AND C.CNTTYPE IS NULL AND N_BC.CNTTYPE IS NOT NULL THEN A.POLICY_SCIT204 ELSE A.POLICY_NUMBER END AS POLICY_NO,
			ISNULL(ISNULL(B.CNTTYPE,C.CNTTYPE),N_BC.CNTTYPE) PRODUCT, 
			PRODUCT_DESC.LONGDESC AS PRODUCT_NAME,
			A.BATCBATCH, 
			D.CRTABLE AS RIDER_CODE, 
			RIDER_DESC.LONGDESC AS RIDER,
			CASE WHEN (B.PTDATE IS NULL AND C.PTDATE <> 0) THEN C.PTDATE
				 WHEN (B.PTDATE IS NULL AND C.PTDATE IS NULL AND N_BC.PTDATE <> 0) THEN N_BC.PTDATE
				 WHEN (B.PTDATE IS NULL AND C.PTDATE = 0) THEN A.EFFDATE
				 WHEN (B.PTDATE IS NULL AND C.PTDATE IS NULL AND N_BC.PTDATE = 0) THEN A.EFFDATE
				 WHEN (B.PTDATE = 0) THEN A.EFFDATE 
				 ELSE B.PTDATE END PTDATE,
			A.BATCTRCDE AS TRANS_CODE, 
			D.CRRCD AS CRRCD, 
			D.CRRCD AS CRRCD_DEFAULT, 
			ISNULL(ISNULL(B.BILLFREQ,C.BILLFREQ),N_BC.BILLFREQ) BILLFREQ,
			A.TRANDESC, A.SACSCODE, 
			SACSCODE1.LONGDESC AS SACSCODE_DESC, 
			A.SACSTYP, 
			SACSTYP1.LONGDESC AS SACSTYP_DESC, 
			A.GLCODE, A.SHTDESC AS GLCODE_DESC,A.RLDGACCT,A.RDOCNUM,A.TRANNO, 
			--DELETE SOON
			CASE WHEN CONCAT(A.SACSCODE,A.SACSTYP,A.BATCTRCDE)=''LEBMT542'' AND SUBSTRING(A.ALTREF,1,10)=''5111010000'' THEN ''5113010000''
				 WHEN CONCAT(A.SACSCODE,A.SACSTYP,A.BATCTRCDE)=''LESOTZ12'' AND SUBSTRING(A.ALTREF,1,10)=''5119030000'' THEN ''5114020000''
				 WHEN CONCAT(A.SACSCODE,A.SACSTYP,A.BATCTRCDE) IN (''LECVT512'',''LECVT513'',''LECVTI81'',''LECVTI86'') AND SUBSTRING(A.ALTREF,1,10)=''5114900000'' THEN ''5114010000''
				 WHEN CONCAT(A.SACSCODE,A.SACSTYP,A.BATCTRCDE)=''LEPWT510'' AND SUBSTRING(A.ALTREF,1,10)=''5114900000'' THEN ''5114020000''
			ELSE A.ALTREF END SUN_GLCODE, 
			A.ORIGCURR,A.RDOCPFX,A.RLDGPFX,A.TRANREF,A.POLICY_FLAG,A.GLSIGN,
			A.PAIRING_ACCOUNT,
			A.RRN,
			ENTITY_FLAG.SY_FLG,
			CASE 
				WHEN ACMV_T7.T7_REC_ACMV IS NOT NULL THEN ACMV_T7.T7_REC_ACMV 
				WHEN A.MOVEMENT = ''RTRN'' THEN 
					CASE WHEN RTRN_T7.T7_REPLACE IS NOT NULL 
					THEN RTRN_T7.T7_REPLACE ELSE ''P01'' 
					END
				ELSE A.T7_CHECK END T7,
			CASE WHEN GLSIGN = ''-'' THEN -1*ORIGAMT ELSE ORIGAMT END AS ORIG_AMT,
			CASE WHEN GLSIGN = ''-'' THEN -1*ACCTAMT ELSE ACCTAMT END AS ACCT_AMT,
			A.RDOCCOY,
			A.BATCCOY
		FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_M_TABLE_RESULT A
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_B B ON A.POLICY_NUMBER = B.CHDRNUM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_C C ON A.POLICY_NUMBER = C.CHDRNUM
		LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_B UNION ALL SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_C WHERE CHDRNUM NOT IN (SELECT CHDRNUM FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_B)) N_BC ON A.POLICY_SCIT204 = N_BC.CHDRNUM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_NON_2 D ON ISNULL(ISNULL(B.CHDRNUM,C.CHDRNUM),N_BC.CHDRNUM) = D.CHDRNUM AND (CASE WHEN LEN(TRIM(A.RLDGACCT))<14 THEN ''010100'' ELSE SUBSTRING(A.RLDGACCT,9,6) END) = D.LIFE+D.COVERAGE+D.RIDER
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_VALID_FLAG_2 E ON ISNULL(ISNULL(ISNULL(B.CHDRNUM,C.CHDRNUM),N_BC.CHDRNUM),A.RLDGACCT) = E.CHDRNUM AND ''010100'' = E.LIFE+E.COVERAGE+E.RIDER
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_RIDER_DESC RIDER_DESC ON D.CRTABLE = RIDER_DESC.DESCITEM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_PRODUCT_DESC PRODUCT_DESC ON ISNULL(ISNULL(B.CNTTYPE,C.CNTTYPE),N_BC.CNTTYPE) = PRODUCT_DESC.DESCITEM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSCODE1 SACSCODE1 ON A.SACSCODE = SACSCODE1.DESCITEM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_SACSTYP1 SACSTYP1 ON A.SACSTYP = SACSTYP1.DESCITEM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_OMNI_PRODUCT OMNI ON OMNI.ITEMITEM = SUBSTRING(A.TRANREF,7,4) AND OMNI.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_4 T0_4 ON T0_4.COA = SUBSTRING(A.ALTREF,1,10) AND T0_4.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2A1 T0_2A1 ON T0_2A1.ITEMITEM = SUBSTRING(A.ALTREF,1,5)+''PSY'' AND T0_2A1.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2B1 T0_2B1 ON T0_2B1.ITEMITEM = SUBSTRING(A.ALTREF,1,5)+T7_CHECK AND T0_2B1.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_RTRN_T7 RTRN_T7 ON RTRN_T7.ITEMITEM = E.CRTABLE--+''010100'' 
			AND RTRN_T7.RN = 1 AND A.MOVEMENT = ''RTRN''--U/ DAPET ANALYSIS CODE 8
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_T7_RECLASS ACMV_T7 ON ACMV_T7.ITEMITEM = SUBSTRING(A.ALTREF,1,5)+T7_CHECK 
			AND ACMV_T7.RN = 1 AND A.MOVEMENT = ''ACMV'' --U/ RECLASS T7 ACMV
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_T0_2B2 T0_2B2 ON T0_2B2.ITEMITEM = SUBSTRING(A.ALTREF,1,5)+RTRN_T7.T7_REPLACE AND T0_2B2.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ENTITY_SPLIT ENTITY_FLAG ON ENTITY_FLAG.ITEMITEM = E.CRTABLE AND ENTITY_FLAG.RN = 1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_T3616 T3616 ON T3616.ITEMITEM = A.SACSCODE AND T3616.RN = 1
		;'
		)
		PRINT @V_CMD_2;
	EXEC (@V_CMD_2);
	
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 on										: ', @V_START)
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT

	--------------------------
	-- Error Log STEP 3A START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Update Z429 TRANREF for Claim & Cohort '+ @V_FUNCTION_NAME + ' - STEP 4A at ' + convert(varchar(20),current_timestamp) + ' with Error Message: ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 3A END
	--------------------------

	EXEC('IF OBJECT_ID(''tempdb.dbo.#GET_TRANREF_'+@BATCH_NUMBER+''', ''U'') IS NOT NULL DROP TABLE #GET_TRANREF_'+@BATCH_NUMBER+'');
	EXEC ('
	SELECT A.ITEMITEM_FLAG,A.TAXCODE,A.MOVEMENT,A.OMNI_PRODUCT_CD,A.T0_0_REPLACE,A.T0_4_REPLACE,A.T0_2A1_REPLACE,A.T0_2B1_REPLACE,A.T0_2B2_REPLACE,A.SL_PREFIX,A.VOUCHER_NO,A.EFFDATE,
	A.LIFECOVERAGERIDER,A.BENEFIT_CODE,A.BATCACTYR,A.BATCACTMN,A.APRVDATE,A.TRANS_DATE_ORI,A.TRANS_DATE,A.POLICY_NO,A.PRODUCT,A.PRODUCT_NAME,A.BATCBATCH,A.RIDER_CODE,A.RIDER,A.PTDATE,A.TRANS_CODE,
	A.CRRCD,A.CRRCD_DEFAULT,A.BILLFREQ,A.TRANDESC,A.SACSCODE,A.SACSCODE_DESC,A.SACSTYP,A.SACSTYP_DESC,A.GLCODE,A.GLCODE_DESC,A.RLDGACCT,A.RDOCNUM,A.TRANNO,A.SUN_GLCODE,A.ORIGCURR,A.RDOCPFX,A.RLDGPFX,
	B.TRANREF,A.POLICY_FLAG,A.GLSIGN,A.PAIRING_ACCOUNT,A.RRN,A.SY_FLG,A.T7,A.ORIG_AMT,A.ACCT_AMT,A.RDOCCOY,A.BATCCOY
	INTO #GET_TRANREF_'+@BATCH_NUMBER+'
	FROM
	(SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 WHERE SACSCODE+SACSTYP+TRANS_CODE IN (''LERBZ432'',''LERBZ433'',''LERBZ429'')) A
	LEFT JOIN
	(SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 WHERE SACSCODE+SACSTYP+TRANS_CODE IN (''LEDOZ432'',''LEDOZ433'',''LEDOZ429'')) B
	ON A.RDOCNUM=B.RDOCNUM AND A.TRANNO=B.TRANNO AND A.TRANS_CODE=B.TRANS_CODE
	WHERE A.ORIG_AMT+B.ORIG_AMT=0 AND A.ACCT_AMT+B.ACCT_AMT=0
	');

	EXEC('
	DELETE FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 WHERE RRN IN (SELECT DISTINCT RRN FROM #GET_TRANREF_'+@BATCH_NUMBER+')
	');

	EXEC('
	INSERT INTO STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 
	SELECT * FROM #GET_TRANREF_'+@BATCH_NUMBER+'
	');


	--Check if there is invalid record related cohort date or claim_no
	EXEC('IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_INV_DATA11'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_INV_DATA11');

	SET @TABLE_OUT 	= 'STAG_ID.TMP_'+@BATCH_NUMBER+'_INV_DATA11';
	SET @TABLE_IN 	= 'STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1';
	SET @TABLE_INVALID = (SELECT 'FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_'+CAST(@IFRS17_YEAR AS VARCHAR)+STAG_ID.LPAD(CAST(@IFRS17_MONTH  AS VARCHAR),2,'00') );
	
	SET @V_CMD = ('
			--ICG_STORE AS
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ICG_STORE'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ICG_STORE;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ICG_STORE WITH ( CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = HASH(POLICY_NUMBER)) AS
			(
				SELECT 
					POLICY_NO POLICY_NUMBER,
					CAST(CONVERT(VARCHAR,CAST(CB_START_DT AS DATE),112) AS INTEGER) CB_START_DATE,
					CAST(CONVERT(VARCHAR,CAST(CB_END_DT AS DATE),112) AS INTEGER) CB_END_DATE,
					ROW_NUMBER()OVER(PARTITION BY POLICY_NO ORDER BY CB_START_DT DESC) RN 
				FROM FOND_ID.FOND_IFRS17_ICG_STORES
				WHERE SYSTEM = ''Life Asia'' AND PRODUCT_CD = BENEFIT_CD 
						AND POLICY_NO IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
			);
			
			--CLMHPF AS
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_CLMHPF'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_CLMHPF;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_CLMHPF WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT A.DTOFDEATH
						, A.CHDRNUM
						, A.LIFE 
						--, A.EFFDATE 
						, A.CHDRNUM+''010100''+CAST(A.TRANNO AS VARCHAR)+''T668'' AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM STAG_ID.STAG_LIFEASIA_CLMHPF A 
				INNER JOIN (SELECT MAX(TRANNO) TRANNO, CHDRNUM FROM STAG_ID.STAG_LIFEASIA_CLMHPF GROUP BY CHDRNUM) B ON A.TRANNO = B.TRANNO AND A.CHDRNUM = B.CHDRNUM
				WHERE A.CHDRNUM IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
			);
			
			--REGPPF AS 
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT DISTINCT 
					A.CRTDATE
					, A.CHDRNUM
					, A.LIFE
					, A.COVERAGE
					, A.RIDER
					, STAG_ID.LPAD(A.RGPYNUM,4,''0'') RGPYNUM 
					, A.CHDRNUM+A.LIFE+A.COVERAGE+A.RIDER+STAG_ID.LPAD(A.RGPYNUM,4,''0'') AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM STAG_ID.STAG_LIFEASIA_REGPPF A 
				WHERE A.VALIDFLAG <>''2''
						AND A.CHDRNUM IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
			);
			
			--REGPPF_WP AS
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_WP'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_WP;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_WP WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT DISTINCT 
						A.CHDRNUM
						, MAX(A.CRTDATE) CRTDATE 
						, A.CHDRNUM+''010100''+STAG_ID.LPAD(MAX(A.RGPYNUM),4,''0'') AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM STAG_ID.STAG_LIFEASIA_REGPPF A
				WHERE A.PAYREASON IN (''WP'',''CC'',''PD'') AND A.VALIDFLAG = ''1'' AND A.CHDRNUM IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
				GROUP BY A.CHDRNUM
			);')
SET  @V_CMD_2 = ('
			--REGPPF_C4 AS
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_C4'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_C4;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_C4 WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
			SELECT DISTINCT 
						A.CHDRNUM
						, MAX(A.CRTDATE) CRTDATE 
						, A.CHDRNUM+''010100''+STAG_ID.LPAD(MAX(A.RGPYNUM),4,''0'') AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM STAG_ID.STAG_LIFEASIA_REGPPF A
				WHERE A.VALIDFLAG = ''1'' AND A.CHDRNUM IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
				GROUP BY A.CHDRNUM
			);

			--ZALTPF
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_ZALTPF'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZALTPF;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_ZALTPF WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
			SELECT DISTINCT A. CHDRNUM,A.ZRCVDT, A.ZALTNUM,SUBSTRING(B.TRANDESC,1,22) AS CLAIM_NO
			 FROM (SELECT A. CHDRNUM,A.ZRCVDT, A.ZALTNUM 
						FROM STAG_ID.STAG_LIFEASIA_ZALTPF A
						WHERE A.CHDRNUM IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )) A 
			 INNER JOIN  STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 B ON substring(B.TRANDESC,15,8) = A.ZALTNUM AND A.CHDRNUM= B.POLICY_NO
			);
			
			--REGPPF_TRANNO AS 
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT 
					A.CHDRNUM
					, A.TRANNO
					, A.LIFE+A.COVERAGE+A.RIDER LIFECOVERAGERIDER
					, MIN(A.VALIDFLAG) VALIDFLAG
					, CASE WHEN MIN(A.VALIDFLAG) = ''1'' THEN MAX(A.CRTDATE) WHEN MIN(A.VALIDFLAG) = ''2'' THEN MAX(B.CRTDATE) END CRTDATE 
					, A.CHDRNUM+A.LIFE+A.COVERAGE+A.RIDER+STAG_ID.LPAD(MAX(A.RGPYNUM),4,''0'') AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM
					(SELECT 
						CHDRCOY
						, CHDRNUM
						, LIFE
						, COVERAGE
						, RIDER
						, RGPYNUM
						, MIN(VALIDFLAG) VALIDFLAG
						, PLAN_SUFFIX,TRANNO
						, MAX(CRTDATE) CRTDATE 
					 FROM STAG_ID.STAG_LIFEASIA_REGPPF 
					 WHERE CHDRNUM IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
					 GROUP BY CHDRCOY,CHDRNUM,LIFE,COVERAGE,RIDER,RGPYNUM,PLAN_SUFFIX,TRANNO) A
				LEFT JOIN (SELECT 
								MAX(CRTDATE) CRTDATE
								,CHDRCOY
								,CHDRNUM
								,LIFE
								,COVERAGE
								,RIDER
								,RGPYNUM
								,VALIDFLAG
								,PLAN_SUFFIX 
							FROM STAG_ID.STAG_LIFEASIA_REGPPF 
							WHERE VALIDFLAG = ''1'' 
									AND CHDRNUM IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
							GROUP BY CHDRCOY,CHDRNUM,LIFE,COVERAGE,RIDER,RGPYNUM,VALIDFLAG,PLAN_SUFFIX) B ON A.CHDRCOY=B.CHDRCOY AND A.VALIDFLAG = ''2''
																												AND A.CHDRNUM=B.CHDRNUM 
																												AND A.LIFE=B.LIFE 
																												AND A.COVERAGE=B.COVERAGE 
																												AND A.RIDER=B.RIDER 
																												AND A.RGPYNUM=B.RGPYNUM 
																												AND A.PLAN_SUFFIX = B.PLAN_SUFFIX
				GROUP BY A.CHDRNUM, A.TRANNO, A.TRANNO,A.LIFE,A.COVERAGE,A.RIDER
			);
			
			--REGPPF_TRANNO_DEFAULT AS 
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO_DEFAULT'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO_DEFAULT;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO_DEFAULT WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT 
					A.CHDRNUM
					, A.TRANNO
					, MIN(A.VALIDFLAG) VALIDFLAG
					, CASE WHEN MIN(A.VALIDFLAG) = ''1'' THEN MAX(A.CRTDATE) WHEN MIN(A.VALIDFLAG) = ''2'' THEN MAX(B.CRTDATE) END CRTDATE 
					, A.CHDRNUM
						+CASE WHEN MIN(A.VALIDFLAG) = ''1'' THEN MAX(A.LIFE)+MAX(A.COVERAGE)+MAX(A.RIDER) WHEN MIN(A.VALIDFLAG) = ''2'' THEN MAX(B.LIFE)+MAX(B.COVERAGE)+MAX(B.RIDER) END
						+STAG_ID.LPAD(MAX(A.RGPYNUM),4,''0'') AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM
					(SELECT 
						CHDRCOY
						,CHDRNUM
						,LIFE
						,COVERAGE
						,RIDER
						,RGPYNUM
						,MIN(VALIDFLAG) VALIDFLAG
						,PLAN_SUFFIX
						,TRANNO
						,MAX(CRTDATE) CRTDATE 
					FROM STAG_ID.STAG_LIFEASIA_REGPPF 
					WHERE CHDRNUM IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
					GROUP BY CHDRCOY,CHDRNUM,LIFE,COVERAGE,RIDER,RGPYNUM,PLAN_SUFFIX,TRANNO) A
				LEFT JOIN (SELECT 
								MAX(CRTDATE) CRTDATE
								,CHDRCOY
								,CHDRNUM
								,LIFE
								,COVERAGE
								,RIDER
								,RGPYNUM
								,VALIDFLAG
								,PLAN_SUFFIX 
							FROM STAG_ID.STAG_LIFEASIA_REGPPF 
							WHERE VALIDFLAG = ''1'' 
									AND CHDRNUM IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
							GROUP BY CHDRCOY,CHDRNUM,LIFE,COVERAGE,RIDER,RGPYNUM,VALIDFLAG,PLAN_SUFFIX) B ON A.CHDRCOY=B.CHDRCOY AND A.VALIDFLAG = ''2'' 
																												AND A.CHDRNUM=B.CHDRNUM 
																												AND A.LIFE=B.LIFE 
																												AND A.COVERAGE=B.COVERAGE 
																												AND A.RIDER=B.RIDER 
																												AND A.RGPYNUM=B.RGPYNUM 
																												AND A.PLAN_SUFFIX = B.PLAN_SUFFIX
				--WHERE A.CHDRNUM IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
				GROUP BY A.CHDRNUM, A.TRANNO
			);
			
			--REGPPF_RGPYNUM (NEW) AS 
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_RGPYNUM'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_RGPYNUM;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_RGPYNUM WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT DISTINCT 
					A.CRTDATE
					, A.CHDRNUM
					, STAG_ID.LPAD(A.RGPYNUM,4,''0'') RGPYNUM 
					, A.CHDRNUM+A.LIFE+A.COVERAGE+A.RIDER+STAG_ID.LPAD(A.RGPYNUM,4,''0'') AS CLAIM_NO -- NEWLY ADD FOR CLAIM_NO
				FROM STAG_ID.STAG_LIFEASIA_REGPPF A 
				WHERE A.VALIDFLAG <>''2''
						AND A.CHDRNUM IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
			);

			--REGPPF_ZCLP (NEW) AS 
			IF OBJECT_ID(''STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_ZCLP'', ''U'') IS NOT NULL DROP TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_ZCLP;
			CREATE TABLE STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_ZCLP WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP) AS
			(
				SELECT  DISTINCT A.CHDRNUM,
						A.LIFE,
						A.COVERAGE,
						A.RIDER,
						STAG_ID.LPAD(A.RGPYNUM,4,''0'') RGPYNUM,
						CONCAT(B.CHDRNUM,B.LIFE,B.COVERAGE,B.RIDER,STAG_ID.LPAD(B.RGPYNUM,4,''0'')) CLAIM_NO,
						B.CRTDATE 
				FROM
				(SELECT * FROM STAG_ID.STAG_LIFEASIA_ZCLPPF WHERE VALIDFLAG<>''2'') A
				INNER JOIN 
				(SELECT * FROM STAG_ID.STAG_LIFEASIA_REGPPF WHERE VALIDFLAG<>''2'') B
				ON A.CHDRNUM=B.CHDRNUM AND A.RGPYNUM=B.RGPYNUM
						WHERE A.CHDRNUM IN (SELECT DISTINCT POLICY_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_PROC_1 )
			);
		')
		PRINT @V_CMD;
		PRINT @V_CMD_2;
		--EXEC LongPrint @String = @V_CMD
		EXEC (@V_CMD+@V_CMD_2);

			  
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into STAG_ID.TMP_'+@BATCH_NUMBER+'_ICG_STORE, STAG_ID.TMP_'+@BATCH_NUMBER+'_CLMHPF, STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF on	: ', @V_START)
		--PRINT @V_DESCRIPTION
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT

		SET @V_CMD = ('CREATE TABLE '+@TABLE_OUT+' WITH ( DISTRIBUTION = HASH(ROWID), HEAP ) AS 
		WITH 
		TG002 AS
		(
			SELECT 
			ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) AS RN,
			SUBSTRING(GENAREA,1,1) A, -- A (DIGIT PERTAMA) CONFIRMED
			SUBSTRING(GENAREA,29,3) BBB, -- BBB (3 DIGIT BERIKUT) CONFIRMED
			TRIM(SUBSTRING(GENAREA,64,3)) SGLPRD, -- PRODUCT SUNGL (3 DIGIT BERIKUT) CONFIRMED
			TRIM(SUBSTRING(GENAREA,8,LEN(GENAREA))) LEGEND, -- ADDITIONAL ATTRIBUTE WILL NOT USE (IGNORE)
			ITEMTABL,
			ITEMITEM
			FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG002''
			AND VALIDFLAG <> ''2'' AND ITEMPFX=''IT''
			),
		TG002_OMNI AS
		(
			SELECT 
			ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) AS RN,
			SUBSTRING(GENAREA,1,1) A, -- A (DIGIT PERTAMA) CONFIRMED
			SUBSTRING(GENAREA,29,3) BBB, -- BBB (3 DIGIT BERIKUT) CONFIRMED
			TRIM(SUBSTRING(GENAREA,8,LEN(GENAREA))) LEGEND, -- ADDITIONAL ATTRIBUTE WILL NOT USE (IGNORE)
			ITEMTABL,
			ITEMITEM
			FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG002''
			AND VALIDFLAG <> ''2'' AND ITEMPFX=''IT''
			),
		TG002_OMNI_1 AS
		(
			SELECT 
			ROW_NUMBER() OVER(PARTITION BY ITEMITEM ORDER BY ITEMITEM) AS RN,
			SUBSTRING(GENAREA,1,1) A, -- A (DIGIT PERTAMA) CONFIRMED
			SUBSTRING(GENAREA,29,3) BBB, -- BBB (3 DIGIT BERIKUT) CONFIRMED
			TRIM(SUBSTRING(GENAREA,8,LEN(GENAREA))) LEGEND, -- ADDITIONAL ATTRIBUTE WILL NOT USE (IGNORE)
			ITEMTABL,
			ITEMITEM
			FROM STAG_ID.STAG_LIFEASIA_ITEMPF WHERE ITEMTABL = ''TG002''
			AND VALIDFLAG <> ''2'' AND ITEMPFX=''IT''
			),
		PARAM_NONRELATED AS (
		SELECT SASCODE,SASTYPE,TCODE, MAX(TRANREF) TRANREF
			FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING_NONRELATED GROUP BY SASCODE,SASTYPE,TCODE
		),
		COA_INSCOPE AS (
		SELECT DISTINCT IFRS_SUN_CD,IDENTIFIER FROM STAG_ID.STAG_LIFEASIA_IFRS17_COA_INSCOPE
		)
		')
	SET @V_CMD_2 = (
		'
		SELECT DISTINCT
			CAST( CASE 
				WHEN LEFT(PROC_1.SUN_GLCODE,10) IN (''1349903140'',''1423501030'') THEN ''ITYT000''
				WHEN (PROC_1.T0_0_REPLACE IS NOT NULL) THEN PROC_1.T0_0_REPLACE
				WHEN (PROC_1.SL_PREFIX NOT IN (''AG'',''CH'')) THEN ''0000000''
				WHEN (TG002.ITEMITEM IS NOT NULL AND PROC_1.OMNI_PRODUCT_CD IS NOT NULL AND (TG002.A+TG002.BBB NOT LIKE ''%[^A-Z0-9]%'' AND TG002.A+TG002.BBB <> ''    '') ) THEN TG002.A+TG002.BBB+''001''
				WHEN (TG002_OMNI_1.ITEMITEM IS NOT NULL AND PROC_1.OMNI_PRODUCT_CD IS NOT NULL AND (TG002_OMNI_1.A+TG002_OMNI_1.BBB NOT LIKE ''%[^A-Za-z0-9]%'' AND TG002_OMNI_1.A+TG002_OMNI_1.BBB <> ''    '') ) THEN TG002_OMNI_1.A+TG002_OMNI_1.BBB+''001''
				WHEN (TG002_OMNI.ITEMITEM IS NOT NULL AND PROC_1.OMNI_PRODUCT_CD IS NOT NULL AND (TG002_OMNI.A+TG002_OMNI.BBB NOT LIKE ''%[^A-Za-z0-9]%'' AND TG002_OMNI.A+TG002_OMNI.BBB <> ''    '') ) THEN TG002_OMNI.A+TG002_OMNI.BBB+''001''
				WHEN (TG002.ITEMITEM IS NOT NULL AND (TG002.A+TG002.BBB NOT LIKE ''%[^A-Za-z0-9]%'' AND TG002.A+TG002.BBB <> ''    '' AND ((PROC_1.T0_2A1_REPLACE IS NULL) OR (PROC_1.T0_2A1_REPLACE IS NOT NULL AND TG002.A+TG002.BBB <> ''ISYS'')))) THEN TG002.A+TG002.BBB+''000''
				WHEN (TG002.ITEMITEM IS NOT NULL AND PROC_1.T0_2A1_REPLACE IS NOT NULL AND (PROC_1.T0_2A1_REPLACE NOT LIKE ''%[^A-Za-z0-9]%'' AND PROC_1.T0_2A1_REPLACE NOT LIKE ''    %'')) THEN PROC_1.T0_2A1_REPLACE 
				WHEN (TG002.ITEMITEM IS NULL AND PROC_1.T0_2B1_REPLACE IS NOT NULL AND PROC_1.MOVEMENT=''ACMV'' AND (PROC_1.T0_2B1_REPLACE NOT LIKE ''%[^A-Za-z0-9]%'' AND PROC_1.T0_2B1_REPLACE NOT LIKE ''    %'')) THEN PROC_1.T0_2B1_REPLACE 
				WHEN (TG002.ITEMITEM IS NULL AND PROC_1.T0_2B2_REPLACE IS NOT NULL AND PROC_1.MOVEMENT=''RTRN'' AND (PROC_1.T0_2B2_REPLACE  NOT LIKE ''%[^A-Za-z0-9]%'' AND PROC_1.T0_2B2_REPLACE  NOT LIKE ''    %'')) THEN PROC_1.T0_2B2_REPLACE 
				WHEN (TG002.A+TG002.BBB =''    '' OR  TG002_OMNI_1.A+TG002_OMNI_1.BBB = ''    '' OR TG002_OMNI.A+TG002_OMNI.BBB = ''    '' OR (PROC_1.T0_2A1_REPLACE LIKE ''    %'') OR (PROC_1.T0_2B1_REPLACE LIKE ''    %'') OR (PROC_1.T0_2B2_REPLACE LIKE ''    %'')) THEN ''0000000''
				WHEN (TG002.A+TG002.BBB LIKE ''%[^A-Z0-9]%'' AND PROC_1.T0_4_REPLACE IS NOT NULL) THEN PROC_1.T0_4_REPLACE 
				ELSE ''0000LAS'' END AS VARCHAR) AS T0, 
			PROC_1.SUN_GLCODE ALTREF,
			PROC_1.TAXCODE,
			PROC_1.MOVEMENT,
			PROC_1.OMNI_PRODUCT_CD,
			PROC_1.SL_PREFIX,
			PROC_1.T0_0_REPLACE,
			PROC_1.T0_4_REPLACE, 
			TG002.A+TG002.BBB TG002_ABBB,	
			TG002_OMNI_1.A+TG002_OMNI_1.BBB TG002_OMNI_1_ABBB,
			TG002_OMNI.A+TG002_OMNI.BBB TG002_OMNI_ABBB,
			PROC_1.T0_2A1_REPLACE,
			PROC_1.T0_2B1_REPLACE,
			PROC_1.T0_2B2_REPLACE,
			TG002.ITEMITEM,'
				)
		SET @V_CMD_8 = ('
			CAST(CASE '
				+
				(
				SELECT 
					'WHEN (SUBSTRING(PROC_1.SUN_GLCODE,1,4)+TG002.SGLPRD IN ('+STRING_AGG(ITEMITEM_FLAG,',')+'))' ITEMITEM_FLAG
					FROM 
					(
						SELECT DISTINCT ''''+TRIM(SUBSTRING(ITEMITEM,1,4))+TRIM(SUBSTRING(ITEMITEM,5,3))+'''' ITEMITEM_FLAG FROM STAG_ID.STAG_LIFEASIA_ITEMPF 
							WHERE ITEMTABL = 'TG009' AND VALIDFLAG <> '2'  AND ITEMPFX='IT'
							AND SUBSTRING(ITEMITEM,1,4)NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,1,4) <> '' AND SUBSTRING(ITEMITEM,1,4) IS NOT NULL
							AND SUBSTRING(ITEMITEM,5,3)NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,5,3) <> '' AND SUBSTRING(ITEMITEM,5,3) IS NOT NULL
					) A
				)
				+'THEN SUBSTRING(PROC_1.SUN_GLCODE,1,4)+TG002.SGLPRD '+
				(
				SELECT 
					'WHEN (SUBSTRING(PROC_1.SUN_GLCODE,1,4)+''***'' IN ('+STRING_AGG(ITEMITEM_FLAG,',')+'))' ITEMITEM_FLAG
					FROM 
					(
						SELECT DISTINCT ''''+TRIM(SUBSTRING(ITEMITEM,1,4))+'***''' ITEMITEM_FLAG FROM STAG_ID.STAG_LIFEASIA_ITEMPF 
							WHERE ITEMTABL = 'TG009' AND VALIDFLAG <> '2' AND ITEMPFX='IT'
							AND SUBSTRING(ITEMITEM,1,4)NOT LIKE '%*%' AND SUBSTRING(ITEMITEM,1,4) <> '' AND SUBSTRING(ITEMITEM,1,4) IS NOT NULL
							AND SUBSTRING(ITEMITEM,5,3)LIKE '%*%' AND SUBSTRING(ITEMITEM,5,3) <> '' AND SUBSTRING(ITEMITEM,5,3) IS NOT NULL
					) A
					)
					+'THEN (SUBSTRING(PROC_1.SUN_GLCODE,1,4)+''***'') 
					ELSE NULL END AS VARCHAR) TG009_FLAG,'
				)
		SET @V_CMD_3 = ('
		--T0 RELATED END--
			CAST(STAG_ID.LPAD(ROW_NUMBER()OVER(ORDER BY (SELECT NULL)),12,''0'') AS VARCHAR) ROWID,
			PROC_1.APRVDATE,
			PROC_1.VOUCHER_NO,
			PROC_1.EFFDATE,
			PROC_1.TRANREF,
			PROC_1.POLICY_NO,
			CASE 
				WHEN (PROC_1.POLICY_FLAG =''P'' AND (PROC_1.POLICY_NO IS NULL OR TRIM(PROC_1.POLICY_NO) = '''') AND COA_INSCOPE.IFRS_SUN_CD IS NULL) THEN ''O''
				WHEN (PROC_1.POLICY_FLAG =''P'' AND PROC_1.PRODUCT IS NULL AND COA_INSCOPE.IFRS_SUN_CD IS NULL) THEN ''O''
				WHEN (PROC_1.POLICY_FLAG =''P'' AND COA_INSCOPE.IFRS_SUN_CD IS NOT NULL) THEN ''P''
				WHEN (PROC_1.POLICY_FLAG =''O'' AND COA_INSCOPE.IFRS_SUN_CD IS NOT NULL) THEN ''O''
				WHEN (PROC_1.POLICY_FLAG =''P'' AND COA_INSCOPE.IFRS_SUN_CD IS NULL) THEN ''P''
				ELSE PROC_1.POLICY_FLAG END POLICY_FLAG,
			PROC_1.PRODUCT,
			PROC_1.RIDER_CODE,
			PROC_1.BENEFIT_CODE,
			SUBSTRING(PROC_1.SUN_GLCODE,1,10) SUN_GLCODE,
			PROC_1.SACSCODE,
			PROC_1.SACSTYP,
			PROC_1.TRANS_CODE,
			PROC_1.TRANS_DATE,
			PROC_1.ORIGCURR,
			PROC_1.ORIG_AMT,
			PROC_1.ACCT_AMT,
			PROC_1.BATCACTYR,
			PROC_1.BATCACTMN BATCACTMN,
			PROC_1.RDOCNUM,
			PROC_1.RLDGACCT,
			PROC_1.TRANNO,
			CAST(''GJ'' AS VARCHAR) GLCODE,
			PROC_1.GLCODE GLCODE_ORI,
			PROC_1.TRANDESC,
			PROC_1.LIFECOVERAGERIDER,
			PROC_1.BILLFREQ,
			PROC_1.CRRCD_DEFAULT,
			PROC_1.PTDATE,
			')
		SET @V_CMD_7 = ('
		----###### COHORT_DT LOGIC
			CASE 
				'+ (SELECT STRING_AGG(CAST(WHEN_CLAUSE AS NVARCHAR(MAX)),' ') WITHIN GROUP (ORDER BY PRIORITY) FROM
				(SELECT PRIORITY,' WHEN (COA_INSCOPE.IDENTIFIER = '+COHORT_IDENTIFIER+ 
					CASE WHEN (COA <>'' AND COA IS NOT NULL) THEN ' AND SUBSTRING(PROC_1.SUN_GLCODE,1,10) IN '+COA ELSE '' END +
					CASE WHEN (SACSTRANS <>'' AND SACSTRANS IS NOT NULL) THEN ' AND PROC_1.SACSCODE+PROC_1.SACSTYP+PROC_1.TRANS_CODE IN '+SACSTRANS ELSE '' END + 
					CASE WHEN (SACS <>'' AND SACS IS NOT NULL) THEN ' AND PROC_1.SACSCODE+PROC_1.SACSTYP IN '+SACS ELSE '' END + 
					CASE WHEN (TRANS_CODE <>'' AND TRANS_CODE IS NOT NULL) THEN ' AND PROC_1.TRANS_CODE IN '+TRANS_CODE ELSE '' END +
					CASE WHEN (OTHERCLAUSE_1 <>'' AND OTHERCLAUSE_1 IS NOT NULL) THEN ' AND '+OTHERTABLE_1+'.'+OTHERCLAUSE_1 ELSE '' END + 
					CASE WHEN (OTHERCLAUSE_2 <>'' AND OTHERCLAUSE_2 IS NOT NULL) THEN ' AND '+OTHERTABLE_2+'.'+OTHERCLAUSE_2 ELSE '' END + 
					CASE WHEN (THEN_TABLE = 'MAIN') THEN ' AND (PROC_1.'+THEN_RESULT+') IS NOT NULL) THEN CAST(PROC_1.'+THEN_RESULT+' AS VARCHAR)'
						WHEN (THEN_TABLE = '' OR THEN_TABLE IS NULL) THEN ' AND ('+THEN_RESULT+') IS NOT NULL) THEN CAST('+THEN_RESULT+' AS VARCHAR)'
					ELSE ' AND ('+THEN_TABLE+'.'+THEN_RESULT+') IS NOT NULL) THEN CAST('+THEN_TABLE+'.'+THEN_RESULT+' AS VARCHAR)'
					END WHEN_CLAUSE
				FROM
				(SELECT PRIORITY, CONDITIONS, ''''+COHORT_IDENTIFIER+'''' COHORT_IDENTIFIER, 
					'('''+STRING_AGG(CASE WHEN (COA <> '' AND COA IS NOT NULL) THEN CAST(COA AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' COA,
					'('''+STRING_AGG(CASE WHEN ((SACSCODE+SACSTYPE) <> '' AND (SACSCODE+SACSTYPE) IS NOT NULL AND TRANS_CODE <> '' AND TRANS_CODE IS NOT NULL) THEN CAST((SACSCODE+SACSTYPE+TRANS_CODE) AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' SACSTRANS,
					'('''+STRING_AGG(CASE WHEN ((SACSCODE+SACSTYPE) <> '' AND (SACSCODE+SACSTYPE) IS NOT NULL AND (TRANS_CODE = '' OR TRANS_CODE IS NULL)) THEN CAST((SACSCODE+SACSTYPE) AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' SACS,
					'('''+STRING_AGG(CASE WHEN (((SACSCODE+SACSTYPE) = '' OR (SACSCODE+SACSTYPE) IS NULL) AND TRANS_CODE <> '' AND TRANS_CODE IS NOT NULL) THEN CAST(TRANS_CODE AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' TRANS_CODE,
					CASE WHEN (OTHERCLAUSE_1 <> '' AND OTHERCLAUSE_1 IS NOT NULL) THEN OTHERCLAUSE_1 ELSE NULL END OTHERCLAUSE_1,
					CASE WHEN OTHERTABLE_1 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_1 <> '' AND OTHERTABLE_1 IS NOT NULL) THEN OTHERTABLE_1 ELSE NULL END OTHERTABLE_1,
					CASE WHEN (OTHERCLAUSE_2 <> '' AND OTHERCLAUSE_2 IS NOT NULL) THEN OTHERCLAUSE_2 ELSE NULL END OTHERCLAUSE_2,
					CASE WHEN OTHERTABLE_2 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_2 <> '' AND OTHERTABLE_2 IS NOT NULL) THEN OTHERTABLE_2 ELSE NULL END OTHERTABLE_2,
					THEN_RESULT,
					THEN_TABLE
					FROM (SELECT DISTINCT COHORT_IDENTIFIER, PRIORITY, CONDITIONS, COA, SACSCODE, SACSTYPE, TRANS_CODE, UPPER(OTHERCLAUSE_1) AS OTHERCLAUSE_1, UPPER(OTHERTABLE_1) AS OTHERTABLE_1, UPPER(OTHERCLAUSE_2) AS OTHERCLAUSE_2, UPPER(OTHERTABLE_2) AS OTHERTABLE_2, REPLACE(REPLACE(UPPER(REPLACE(THEN_RESULT,'||','+')),'SUBSTRING(TRANS_DATE','SUBSTRING(CAST(TRANS_DATE AS VARCHAR)'),'SUBSTRING(CRRCD','SUBSTRING(CAST(CRRCD AS VARCHAR)' ) AS THEN_RESULT, UPPER(THEN_TABLE) AS THEN_TABLE FROM STAG_ID.STAG_CONFIG_IFRS17_COHORT_MAPPING_TABLE) A
				GROUP BY PRIORITY, CONDITIONS,COHORT_IDENTIFIER, 
					CASE WHEN (OTHERCLAUSE_1 <> '' AND OTHERCLAUSE_1 IS NOT NULL) THEN OTHERCLAUSE_1 ELSE NULL END,
					CASE WHEN OTHERTABLE_1 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_1 <> '' AND OTHERTABLE_1 IS NOT NULL) THEN OTHERTABLE_1 ELSE NULL END,
					CASE WHEN (OTHERCLAUSE_2 <> '' AND OTHERCLAUSE_2 IS NOT NULL) THEN OTHERCLAUSE_2 ELSE NULL END,
					CASE WHEN OTHERTABLE_2 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_2 <> '' AND OTHERTABLE_2 IS NOT NULL) THEN OTHERTABLE_2 ELSE NULL END,
					THEN_RESULT,
					THEN_TABLE
					) COHORT_MAPPING
					) AA)
				+' WHEN (PROC_1.POLICY_FLAG =''O'') OR (PROC_1.POLICY_FLAG = ''P'' AND COA_INSCOPE.IFRS_SUN_CD IS NULL)
					THEN CAST (PROC_1.EFFDATE AS VARCHAR)
				WHEN (COA_INSCOPE.IDENTIFIER = ''Claim'' AND PROC_1.TRANS_CODE = ''T301'' 
							AND ISDATE(
								CAST(
								CASE WHEN (RIGHT(PROC_1.TRANDESC,8) IS NULL OR RIGHT(PROC_1.TRANDESC,8) = '''') 
									THEN ''-'' ELSE STAG_ID.LPAD(SUBSTRING(RIGHT(PROC_1.TRANDESC,8),1,4),4,''0000'')+''-''+STAG_ID.LPAD(SUBSTRING(RIGHT(PROC_1.TRANDESC,8),5,2),2,''00'')+''-''+STAG_ID.LPAD(SUBSTRING(RIGHT(PROC_1.TRANDESC,8),7,2),2,''00'') END AS VARCHAR)
									) = 1) 
						  THEN RIGHT(PROC_1.TRANDESC,8)
					--ELSE PROC_1.TRANS_DATE
					END COHORT,
		')
		SET @V_CMD_4 = ('
		----###### CLAIM NO LOGIC
			CASE
				'+ (SELECT STRING_AGG(CAST(WHEN_CLAUSE AS NVARCHAR(MAX)),' ') WITHIN GROUP (ORDER BY PRIORITY) FROM
				(SELECT PRIORITY,' WHEN (COA_INSCOPE.IDENTIFIER = '+COHORT_IDENTIFIER+ 
					CASE WHEN (COA <>'' AND COA IS NOT NULL) THEN ' AND SUBSTRING(PROC_1.SUN_GLCODE,1,10) IN '+COA ELSE '' END + 
					CASE WHEN (SACSTRANS <>'' AND SACSTRANS IS NOT NULL) THEN ' AND PROC_1.SACSCODE+PROC_1.SACSTYP+PROC_1.TRANS_CODE IN '+SACSTRANS ELSE '' END + 
					CASE WHEN (SACS <>'' AND SACS IS NOT NULL) THEN ' AND PROC_1.SACSCODE+PROC_1.SACSTYP IN '+SACS ELSE '' END + 
					CASE WHEN (TRANS_CODE <>'' AND TRANS_CODE IS NOT NULL) THEN ' AND PROC_1.TRANS_CODE IN '+TRANS_CODE ELSE '' END + 
					CASE WHEN (OTHERCLAUSE_1 <>'' AND OTHERCLAUSE_1 IS NOT NULL) THEN ' AND '+OTHERTABLE_1+'.'+OTHERCLAUSE_1 ELSE '' END + 
					CASE WHEN (OTHERCLAUSE_2 <>'' AND OTHERCLAUSE_2 IS NOT NULL) THEN ' AND '+OTHERTABLE_2+'.'+OTHERCLAUSE_2 ELSE '' END + 
					CASE WHEN (THEN_TABLE = 'MAIN') THEN ' AND (PROC_1.'+THEN_RESULT+') IS NOT NULL) THEN CAST(PROC_1.'+THEN_RESULT+' AS VARCHAR)'
					WHEN (THEN_TABLE = '' OR THEN_TABLE IS NULL) THEN ' AND ('+THEN_RESULT+') IS NOT NULL) THEN CAST('+THEN_RESULT+' AS VARCHAR)'
					ELSE ' AND ('+THEN_TABLE+'.'+THEN_RESULT+') IS NOT NULL) THEN CAST('+THEN_TABLE+'.'+THEN_RESULT+' AS VARCHAR)'
					END WHEN_CLAUSE
					FROM
				(SELECT PRIORITY, CONDITIONS, ''''+COHORT_IDENTIFIER+'''' COHORT_IDENTIFIER, 
					'('''+STRING_AGG(CASE WHEN (COA <> '' AND COA IS NOT NULL) THEN CAST(COA AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' COA,
					'('''+STRING_AGG(CASE WHEN ((SACSCODE+SACSTYPE) <> '' AND (SACSCODE+SACSTYPE) IS NOT NULL AND TRANS_CODE <> '' AND TRANS_CODE IS NOT NULL) THEN CAST((SACSCODE+SACSTYPE+TRANS_CODE) AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' SACSTRANS,
					'('''+STRING_AGG(CASE WHEN ((SACSCODE+SACSTYPE) <> '' AND (SACSCODE+SACSTYPE) IS NOT NULL AND (TRANS_CODE = '' OR TRANS_CODE IS NULL)) THEN CAST((SACSCODE+SACSTYPE) AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' SACS,
					'('''+STRING_AGG(CASE WHEN (((SACSCODE+SACSTYPE) = '' OR (SACSCODE+SACSTYPE) IS NULL) AND TRANS_CODE <> '' AND TRANS_CODE IS NOT NULL) THEN CAST(TRANS_CODE AS NVARCHAR(MAX)) ELSE NULL END,''',''')+''')' TRANS_CODE,
					CASE WHEN (OTHERCLAUSE_1 <> '' AND OTHERCLAUSE_1 IS NOT NULL) THEN OTHERCLAUSE_1 ELSE NULL END OTHERCLAUSE_1,
					CASE WHEN OTHERTABLE_1 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_1 <> '' AND OTHERTABLE_1 IS NOT NULL) THEN OTHERTABLE_1 ELSE NULL END OTHERTABLE_1,
					CASE WHEN (OTHERCLAUSE_2 <> '' AND OTHERCLAUSE_2 IS NOT NULL) THEN OTHERCLAUSE_2 ELSE NULL END OTHERCLAUSE_2,
					CASE WHEN OTHERTABLE_2 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_2 <> '' AND OTHERTABLE_2 IS NOT NULL) THEN OTHERTABLE_2 ELSE NULL END OTHERTABLE_2,
					'CLAIM_NO' AS THEN_RESULT,
					THEN_TABLE
					FROM (SELECT DISTINCT COHORT_IDENTIFIER, PRIORITY, CONDITIONS, COA, SACSCODE, SACSTYPE, TRANS_CODE, UPPER(OTHERCLAUSE_1) AS OTHERCLAUSE_1, UPPER(OTHERTABLE_1) AS OTHERTABLE_1, UPPER(OTHERCLAUSE_2) AS OTHERCLAUSE_2, UPPER(OTHERTABLE_2) AS OTHERTABLE_2, UPPER(REPLACE(THEN_RESULT,'||','+')) AS THEN_RESULT, UPPER(THEN_TABLE) AS THEN_TABLE FROM STAG_ID.STAG_CONFIG_IFRS17_COHORT_MAPPING_TABLE
					WHERE COHORT_IDENTIFIER = 'Claim' AND (UPPER(THEN_TABLE) IS NOT NULL AND UPPER(THEN_TABLE) <>'MAIN' 
					/*--MISSING COHORT
					AND UPPER(THEN_TABLE) NOT LIKE 'ZRVHPF%'*/) -- ADDED FOR CLAIM NO
					) A 
				GROUP BY PRIORITY, CONDITIONS,COHORT_IDENTIFIER, 
					CASE WHEN (OTHERCLAUSE_1 <> '' AND OTHERCLAUSE_1 IS NOT NULL) THEN OTHERCLAUSE_1 ELSE NULL END,
					CASE WHEN OTHERTABLE_1 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_1 <> '' AND OTHERTABLE_1 IS NOT NULL) THEN OTHERTABLE_1 ELSE NULL END,
					CASE WHEN (OTHERCLAUSE_2 <> '' AND OTHERCLAUSE_2 IS NOT NULL) THEN OTHERCLAUSE_2 ELSE NULL END,
					CASE WHEN OTHERTABLE_2 = 'MAIN' THEN 'PROC_1' WHEN (OTHERTABLE_2 <> '' AND OTHERTABLE_2 IS NOT NULL) THEN OTHERTABLE_2 ELSE NULL END,
					THEN_RESULT,
					THEN_TABLE
					) COHORT_MAPPING
					) AA)
				+'  WHEN (COA_INSCOPE.IDENTIFIER = ''Claim'' AND PROC_1.TRANS_CODE = ''T301'' AND LEN(PROC_1.TRANDESC) = 26)
						THEN SUBSTRING(PROC_1.TRANDESC,1,18)
					WHEN (COA_INSCOPE.IDENTIFIER = ''Claim'' AND PROC_1.TRANS_CODE = ''T301'' AND LEN(PROC_1.TRANDESC) = 30)
						THEN SUBSTRING(PROC_1.TRANDESC,1,22)
					--WHEN COA_INSCOPE.IDENTIFIER = ''Claim''
					--THEN CONCAT(PROC_1.POLICY_NO,PROC_1.LIFECOVERAGERIDER,''CLAIM'')
					END CLAIM_NO,
					PROC_1.PAIRING_ACCOUNT,
					PROC_1.T7,
					PROC_1.SY_FLG,'
		)
		SET @V_CMD_5 = ('
					--Renewal Suspense Enhc 15-04-21
					CHDRPF.STATCODE, 
					CHDRPF.PSTATCODE,
					PTRNPF.BATCTRCDE AS ORI_TRCDE,
					--Renewal Suspense Enhc
					PROC_1.RRN,
					--ADD PTDATE DIFFERENCE (for loyalty bonus/ extra allocation)	
					ISNULL(DATEDIFF(MONTH,CONVERT(DATE,CAST(HPADPF.HOISSDTE AS VARCHAR),112),CONVERT(DATE,CONVERT(CHAR(10),'+@PRD_ID+'),112)),0) PTDATE_DIFF,
					CASE WHEN TRANS_CODE IN (''T204'',''T600'') AND TRANS_DATE_ORI <= HPADPF.HISSDTE THEN ''PS'' ELSE ''NON-PS'' END PROPOSAL_FLG
		FROM (SELECT * FROM '+@TABLE_IN+' WHERE VOUCHER_NO+SUBSTRING(SUN_GLCODE,1,10)+SACSCODE+SACSTYP+POLICY_NO+CAST(ACCT_AMT AS VARCHAR) IN(SELECT DISTINCT VOUCHER_NO+SUBSTRING(SUN_GLCODE,1,10)+SACSCODE+SACSTYP+POLICY_NO+CAST(ACCT_AMT AS VARCHAR) FROM '+@TABLE_INVALID+')) PROC_1
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ICG_STORE ICG_STORE ON ICG_STORE.POLICY_NUMBER = PROC_1.POLICY_NO AND PROC_1.EFFDATE>=ICG_STORE.CB_START_DATE AND PROC_1.EFFDATE <= ICG_STORE.CB_END_DATE
		LEFT JOIN STAG_ID.STAG_CONFIG_IFRS17_CB_MAPPING CB_MAPPING ON 
			(CASE WHEN (PROC_1.BENEFIT_CODE IS NOT NULL AND PROC_1.BENEFIT_CODE <> '''') THEN PROC_1.BENEFIT_CODE ELSE PROC_1.PRODUCT END) = CB_MAPPING.PRODUCT_CD and CB_MAPPING.SYSTEM = ''Life Asia''
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_CLMHPF CLMHPF ON CLMHPF.CHDRNUM = PROC_1.POLICY_NO AND SUBSTRING(PROC_1.LIFECOVERAGERIDER,1,2) = CLMHPF.LIFE -- AND CLMHPF.EFFDATE = PROC_1.EFFDATE
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF REGPPF ON REGPPF.CHDRNUM = PROC_1.POLICY_NO 
			AND REGPPF.LIFE+REGPPF.COVERAGE+REGPPF.RIDER = SUBSTRING(PROC_1.TRANDESC,9,6) AND SUBSTRING(PROC_1.TRANDESC,15,4) = REGPPF.RGPYNUM
		--NEW
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF REGPPF2 ON REGPPF2.CHDRNUM = PROC_1.POLICY_NO 
			AND REGPPF2.LIFE+REGPPF2.COVERAGE+REGPPF2.RIDER = SUBSTRING(PROC_1.TRANREF,9,6) AND SUBSTRING(PROC_1.TRANREF,15,4) = REGPPF2.RGPYNUM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_ZCLP REGPPF_ZCLP ON REGPPF_ZCLP.CHDRNUM = PROC_1.POLICY_NO 
			AND REGPPF_ZCLP.LIFE+REGPPF_ZCLP.COVERAGE+REGPPF_ZCLP.RIDER = SUBSTRING(PROC_1.TRANREF,9,6) AND SUBSTRING(PROC_1.TRANREF,15,4) = REGPPF_ZCLP.RGPYNUM
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_RGPYNUM REGPPF_RGPYNUM ON REGPPF_RGPYNUM.CHDRNUM = PROC_1.POLICY_NO AND REGPPF_RGPYNUM.RGPYNUM = RIGHT(PROC_1.TRANREF,4)
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO REGPPF_TRANNO2 ON REGPPF_TRANNO2.CHDRNUM = PROC_1.POLICY_NO AND REGPPF_TRANNO2.TRANNO = PROC_1.TRANNO AND SUBSTRING(PROC_1.RLDGACCT,9,6) = REGPPF_TRANNO2.LIFECOVERAGERIDER
		--
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO REGPPF_TRANNO ON REGPPF_TRANNO.CHDRNUM = PROC_1.POLICY_NO AND REGPPF_TRANNO.TRANNO = PROC_1.TRANNO AND PROC_1.LIFECOVERAGERIDER = REGPPF_TRANNO.LIFECOVERAGERIDER
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_TRANNO_DEFAULT REGPPF_TRANNO_DEFAULT ON REGPPF_TRANNO_DEFAULT.CHDRNUM = PROC_1.POLICY_NO AND REGPPF_TRANNO_DEFAULT.TRANNO = PROC_1.TRANNO
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_WP REGPPF_WP ON REGPPF_WP.CHDRNUM = PROC_1.POLICY_NO
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF_C4 REGPPF_C4 ON REGPPF_C4.CHDRNUM = PROC_1.POLICY_NO
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_REGPPF REGPPF3 ON REGPPF3.CHDRNUM = PROC_1.POLICY_NO AND CAST(REGPPF3.RGPYNUM AS INT) = 
			CASE WHEN LEN(TRIM(PROC_1.TRANDESC))>=18 AND SUBSTRING(TRIM(PROC_1.TRANDESC),15,4) LIKE ''[0-9][0-9][0-9][0-9]'' THEN CAST(TRIM(SUBSTRING(PROC_1.TRANDESC,15,4)) AS INT) ELSE 9999 END
	')
	SET @V_CMD_6 = ('
		LEFT JOIN COA_INSCOPE COA_INSCOPE ON COA_INSCOPE.IFRS_SUN_CD = SUBSTRING(SUN_GLCODE,1,10)
		LEFT JOIN PARAM_NONRELATED NONRELATED ON PROC_1.SACSCODE = NONRELATED.SASCODE AND PROC_1.SACSTYP = NONRELATED.SASTYPE AND PROC_1.TRANS_CODE = NONRELATED.TCODE
		LEFT JOIN TG002 TG002 ON PROC_1.ITEMITEM_FLAG = TG002.ITEMITEM AND TG002.RN = 1
		LEFT JOIN TG002_OMNI TG002_OMNI ON PROC_1.OMNI_PRODUCT_CD+''****'' = TG002_OMNI.ITEMITEM AND TG002_OMNI.RN = 1
		LEFT JOIN TG002_OMNI_1 TG002_OMNI_1 ON PROC_1.OMNI_PRODUCT_CD+PROC_1.TRANS_CODE = TG002_OMNI_1.ITEMITEM AND TG002_OMNI_1.RN = 1
		LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_B UNION ALL SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_C WHERE CHDRNUM NOT IN (SELECT CHDRNUM FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_B)) CHDRPF ON CHDRPF.CHDRNUM = PROC_1.POLICY_NO
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_PTRNPF PTRNPF ON PTRNPF.TRANNO = PROC_1.TRANNO AND PTRNPF.CHDRNUM = PROC_1.POLICY_NO
		LEFT JOIN (SELECT * FROM STAG_ID.STAG_LIFEASIA_HPADPF WHERE HOISSDTE <>''99999999'') HPADPF ON HPADPF.CHDRNUM = PROC_1.POLICY_NO
		--MISSING COHORT
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF ZRVHPF ON PROC_1.RDOCNUM = ZRVHPF.CHDRNUM AND PROC_1.TRANNO = ZRVHPF.TRANNO 
			AND ISNULL(NULLIF(TRIM(PROC_1.RDOCCOY),''''),PROC_1.BATCCOY) = ZRVHPF.CHDRCOY 
			AND PROC_1.LIFECOVERAGERIDER = CASE WHEN LEN(SUBSTRING(ZRVHPF.CLAIM_NO,9,6)) <> 6 THEN ''010100'' ELSE SUBSTRING(ZRVHPF.CLAIM_NO,9,6) END
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_OTHER ZRVHPF_OTHER ON PROC_1.RDOCNUM = ZRVHPF_OTHER.CHDRNUM AND PROC_1.TRANNO = ZRVHPF_OTHER.TRANNO 
			AND ISNULL(NULLIF(TRIM(PROC_1.RDOCCOY),''''),PROC_1.BATCCOY) = ZRVHPF_OTHER.CHDRCOY
			AND PROC_1.LIFECOVERAGERIDER = CASE WHEN LEN(SUBSTRING(ZRVHPF_OTHER.CLAIM_NO,9,6)) <> 6 THEN ''010100'' ELSE SUBSTRING(ZRVHPF_OTHER.CLAIM_NO,9,6) END
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_T301 ZRVHPF_T301 ON PROC_1.RDOCNUM = ZRVHPF_T301.CHDRNUM AND SUBSTRING(PROC_1.TRANDESC,15,4) = ZRVHPF_T301.RGPYNUM 
			AND ISNULL(NULLIF(TRIM(PROC_1.RDOCCOY),''''),PROC_1.BATCCOY) = ZRVHPF_T301.CHDRCOY
			AND PROC_1.LIFECOVERAGERIDER = CASE WHEN LEN(SUBSTRING(ZRVHPF_T301.CLAIM_NO,9,6)) <> 6 THEN ''010100'' ELSE SUBSTRING(ZRVHPF_T301.CLAIM_NO,9,6) END
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF_CLMH ZRVHPF_CLMH ON PROC_1.RDOCNUM = ZRVHPF_CLMH.CHDRNUM AND PROC_1.TRANNO = ZRVHPF_CLMH.TRANNO
		LEFT JOIN (SELECT DISTINCT MAX(CLAIM_DATE)CLAIM_DATE,CHDRCOY,CHDRNUM,RGPYNUM,CLAIM_NO FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_ZRVHPF GROUP BY CHDRCOY,CHDRNUM,RGPYNUM,CLAIM_NO) ZRVHPF_REGP ON ZRVHPF_REGP.CHDRNUM = PROC_1.POLICY_NO 
			AND CASE WHEN LEN(SUBSTRING(ZRVHPF_REGP.CLAIM_NO,9,6)) <> 6 THEN ''010100'' ELSE SUBSTRING(ZRVHPF_REGP.CLAIM_NO,9,6) END = SUBSTRING(PROC_1.TRANDESC,9,6) 
			AND SUBSTRING(PROC_1.TRANDESC,15,4) = ZRVHPF_REGP.RGPYNUM	
		LEFT JOIN STAG_ID.TMP_'+@BATCH_NUMBER+'_ZALTPF ZALTPF ON ZALTPF.CHDRNUM = PROC_1.POLICY_NO AND SUBSTRING(PROC_1.TRANDESC,15,8) = ZALTPF.ZALTNUM
		;'

	)

	PRINT @V_CMD;
	PRINT @V_CMD_2;
	PRINT @V_CMD_8;
	PRINT @V_CMD_3;
	PRINT @V_CMD_7;
	PRINT @V_CMD_4;
	PRINT @V_CMD_5;
	PRINT @V_CMD_6;
	EXEC (@V_CMD+@V_CMD_2+@V_CMD_8+@V_CMD_3+@V_CMD_7+@V_CMD_4+@V_CMD_5+@V_CMD_6);
	
		SET @V_START = CURRENT_TIMESTAMP;
		SET @V_DESCRIPTION = CONCAT('Finish Insert Into ', @TABLE_OUT,' on										: ', @V_START)
		RAISERROR (@V_DESCRIPTION, 0, 1) WITH NOWAIT

	SET @TABLE_OUT = (SELECT 'FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_'+CAST(@IFRS17_YEAR AS VARCHAR)+STAG_ID.LPAD(CAST(@IFRS17_MONTH  AS VARCHAR),2,'00'));

	SET @V_CMD= ( 
	'INSERT INTO '+@TABLE_OUT+ ' 
	SELECT ACF.*,
	CASE WHEN 
		(CASE WHEN FCT1.NEW_COA IS NOT NULL THEN FCT1.NEW_COA
			WHEN FCT2.NEW_COA IS NOT NULL THEN FCT2.NEW_COA
			WHEN FCT3.NEW_COA IS NOT NULL THEN FCT3.NEW_COA
			WHEN FCT4.NEW_COA IS NOT NULL THEN FCT4.NEW_COA
			WHEN FCT5.NEW_COA IS NOT NULL THEN FCT5.NEW_COA
			WHEN FCT6.NEW_COA IS NOT NULL THEN FCT6.NEW_COA
			WHEN FCT7.NEW_COA IS NOT NULL THEN FCT7.NEW_COA
			WHEN FCT8.NEW_COA IS NOT NULL THEN FCT8.NEW_COA
			WHEN FCT9.NEW_COA IS NOT NULL THEN FCT9.NEW_COA
			WHEN FCT10.NEW_COA IS NOT NULL THEN FCT10.NEW_COA
			WHEN FCT11.NEW_COA IS NOT NULL THEN FCT11.NEW_COA
			WHEN FCT12.NEW_COA IS NOT NULL THEN FCT12.NEW_COA
			WHEN FCT13.NEW_COA IS NOT NULL THEN FCT13.NEW_COA
			WHEN FCT14.NEW_COA IS NOT NULL THEN FCT14.NEW_COA
			WHEN FCT15.NEW_COA IS NOT NULL THEN FCT15.NEW_COA
			WHEN FCT16.NEW_COA IS NOT NULL THEN FCT16.NEW_COA
			ELSE NULL
			END) <> ''9999999999999'' 
		THEN NULL ELSE ''9999999999999'' END AS NEW_COA,
	CAST('''+@BATCH_MASTER_ID+''' AS INTEGER) [BATCH_MASTER_ID],
	CAST('''+@BATCH_RUN_ID+''' AS INTEGER) [BATCH_RUN_ID],
	CAST('''+@JOB_MASTER_ID+''' AS INTEGER) [JOB_MASTER_ID],
	CAST('''+@JOB_RUN_ID+''' AS INTEGER) [JOB_RUN_ID],
	'''+@BATCHDATE+''' [BATCHDATE],
	FORMAT(convert(datetime,substring('''+@GMT_START_DTTM+''',1,19)), ''yyyy-MM-dd HH:mm:ss'') [ETL_PROCESS_DATE_TIME] 
	FROM (
		SELECT 
		CAST(ROW_NUMBER()OVER(ORDER BY (SELECT NULL)) AS INTEGER) ROWNO,
		CAST(''IAI'' AS VARCHAR) ENTITY_ID,
		CAST(A.POLICY_NO AS VARCHAR) POLICY_NO,
		CAST(CASE WHEN (A.POLICY_FLAG IS NULL OR A.POLICY_FLAG = '''') THEN ''-'' ELSE A.POLICY_FLAG END AS VARCHAR) POLICY_IDENTIFIER,
		CAST(A.PRODUCT AS VARCHAR) PRODUCT_CD,
		CAST(A.PRODUCT AS VARCHAR) BENEFIT_CD,
		CAST(CASE WHEN (A.COHORT IS NULL OR A.COHORT = '''') THEN ''-'' ELSE STAG_ID.LPAD(SUBSTRING(A.COHORT,1,4),4,''0000'')+''-''+STAG_ID.LPAD(SUBSTRING(A.COHORT,5,2),2,''00'')+''-''+STAG_ID.LPAD(SUBSTRING(A.COHORT,7,2),2,''00'') END AS VARCHAR) COHORT_DT,
		CAST(
		CASE WHEN (SUBSTRING(A.SUN_GLCODE,1,10) IS NULL OR SUBSTRING(A.SUN_GLCODE,1,10) = '''') THEN ''-'' 
			 ELSE SUBSTRING(A.SUN_GLCODE,1,10) 
		END AS VARCHAR) SUN_CD,
		CASE 
		--BIN enhancement
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) IN (''1311219010'',''1311219020'',''4181010000'',''4182010000'') AND A.PRODUCT LIKE ''U%'' THEN A.BENEFIT_CODE
		--Renewal Suspense
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3394102000'' AND A.PSTATCODE = ''PS'' THEN ''PS''
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3394102000'' AND A.PROPOSAL_FLG = ''PS'' THEN ''PS''
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3394102000'' AND A.ORI_TRCDE = ''T642'' THEN ''T642''
		
		--Revenue Enhancement
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''4771050000'' AND A.PSTATCODE = ''PS'' THEN ''PS''
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3141401000'' AND A.PSTATCODE = ''PS'' THEN ''PS''
		')
	SET @V_CMD_1= (' 
		--WOP
			 WHEN (CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_WV WHERE WV_FLG=1) THEN CONCAT(A.ORI_TRCDE,''-LE-WP'')
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''5119030000'' AND A.ORI_TRCDE IN (''T515'',''T516'',''T518'') AND A.SACSCODE+A.SACSTYP=''LEWV'' THEN CONCAT(A.ORI_TRCDE,''-LE-WV'')
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3141990000'' AND A.ORI_TRCDE IN (''B516'') AND A.SACSCODE+A.SACSTYP=''LEWP'' THEN CONCAT(A.ORI_TRCDE,''-LE-WP'')
			 WHEN (CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_PEP WHERE PEP_FLG=1) THEN CONCAT(A.ORI_TRCDE,''-LE-EP'')
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) IN (''5119999000'') AND A.ORI_TRCDE IN (''T515'',''T516'',''T518'') AND A.SACSCODE+A.SACSTYP=''LERB'' THEN CONCAT(A.ORI_TRCDE,''-LE-RB'')
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3141990000'' AND A.ORI_TRCDE IN (''B516'') AND A.SACSCODE+A.SACSTYP=''LEEP'' THEN CONCAT(A.ORI_TRCDE,''-LE-EP'')
			 WHEN (CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI WHERE CI_FLG=1) THEN CONCAT(A.ORI_TRCDE,''-I1DR-I1ER'')
			 WHEN (CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI_LEG2 WHERE CI_FLG=1) THEN ''B516-I1DR-I1ER''
			 WHEN (CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_CI_LEG3 WHERE CI_FLG=1) THEN CONCAT(A.ORI_TRCDE,''-I1DR-I1ER'')
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) IN (''5119030000'') AND A.ORI_TRCDE IN (''T515'',''T516'',''T518'') AND A.SACSCODE+A.SACSTYP=''LERB'' THEN CONCAT(A.ORI_TRCDE,''-LE-RB'')
			 --TPD	 
			 --WHEN (CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_WOP_TPD WHERE TPD_FLG=1) THEN NULL
			 --WHEN SUBSTRING(A.SUN_GLCODE,1,10) = ''3141990000'' AND A.ORI_TRCDE = ''B516'' AND A.SACSCODE+A.SACSTYP=''LEWP'' AND A.PSTATCODE = ''TP'' THEN ''B516-LE-WP-TP'' 
		--Basic
			 WHEN C.SOURCE_PARM_1 = ''case1'' THEN A.SACSCODE+''-''+A.SACSTYP+''-''+A.TRANS_CODE
			 WHEN C.SOURCE_PARM_1 = ''case2'' THEN A.SACSTYP
			 WHEN C.SOURCE_PARM_1 = ''case3'' THEN A.BENEFIT_CODE
			 WHEN C.SOURCE_PARM_1 = ''case5'' THEN A.PAIRING_ACCOUNT
		ELSE NULL END SOURCE_PARM_1,
		--Loyalty Bonus
		CASE WHEN A.PTDATE_DIFF > 60 AND A.PRODUCT IN (''U1U'',''U2W'',''U2V'',''U2T'',''U24'',''U26'',''U20'') AND 
			 SUBSTRING(A.SUN_GLCODE,1,10) = ''4112310030'' AND A.TRANS_CODE = ''B633'' AND A.ORI_TRCDE = ''T989'' THEN ''T989'' 
		--Extra Allocation
			 WHEN A.PTDATE_DIFF > 24 AND A.PTDATE_DIFF <= 60 AND A.PRODUCT IN (''U2V'') AND 
				(CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END) IN (SELECT RRN FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_EA_FLAG WHERE EA_FLG=1) 
				AND SUBSTRING(A.SUN_GLCODE,1,10) = ''4112310030'' AND A.ORI_TRCDE = ''B522'' AND A.SACSCODE+A.SACSTYP = ''LENI'' THEN ''T999''
		--BIN enhancement
			 WHEN SUBSTRING(A.SUN_GLCODE,1,10) IN (''1311219010'',''1311219020'') AND A.PRODUCT LIKE ''U%'' AND A.ORI_TRCDE = ''B633'' THEN ''B633''
		ELSE NULL END SOURCE_PARM_2,
		CAST(NULL AS VARCHAR) SOURCE_PARM_3,
		CAST(CASE WHEN (CAST(A.TRANS_DATE AS VARCHAR) IS NULL) THEN ''-'' ELSE SUBSTRING(CAST(A.TRANS_DATE AS VARCHAR),1,4)+''-''+SUBSTRING(CAST(A.TRANS_DATE AS VARCHAR),5,2)+''-''+SUBSTRING(CAST(A.TRANS_DATE AS VARCHAR),7,2) END AS VARCHAR) TXN_DT,	
		CAST(CASE WHEN (A.ORIGCURR IS NULL OR A.ORIGCURR = '''') THEN ''-'' ELSE ORIGCURR END AS VARCHAR) ORG_CCY_CD,
		CAST(''IDR'' AS VARCHAR) RPT_CCY_CD,
		A.ORIG_AMT AMT_ORG_CCY,
		A.ACCT_AMT AMT_RPT_CCY,
		CAST(''LAS'' AS VARCHAR) PAS_NAME,
		CAST(CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'') AS BIGINT) ACCT_PERIOD,	
		CAST(A.VOUCHER_NO AS VARCHAR) VOUCHER_NO,
		CAST(CASE WHEN A.ACCT_AMT > 0 THEN ''DR'' ELSE ''CR'' END AS VARCHAR) AS CR_DR_FLG,
		CAST(CASE WHEN (A.T0 IS NULL OR A.T0 = '''') THEN ''-'' 
			WHEN (A.T0 = ''ITLP000'' AND A.T7 = ''P01'') THEN ''ITLS000''
			ELSE A.T0 END  AS VARCHAR) AS T0,
		CAST(NULL AS VARCHAR) T1,
		CAST(NULL AS VARCHAR) T2,
		CAST(NULL AS VARCHAR) T3,
		CAST(NULL AS VARCHAR) T4,
		CAST(NULL AS VARCHAR) T5,
		CAST(NULL AS VARCHAR) T6,
		CASE WHEN A.T0 = ''ITYT000'' THEN CAST(''TBR'' AS VARCHAR) ELSE CAST(A.T7 AS VARCHAR) END T7,
		CAST(NULL AS VARCHAR) T8,
		CAST(CASE WHEN (A.GLCODE IS NULL OR A.GLCODE = '''') THEN ''-'' ELSE A.GLCODE END AS VARCHAR) JRNAL_CD,
		CASE WHEN (A.RDOCNUM IS NULL OR A.RDOCNUM = '''') THEN ''-'' ELSE A.RDOCNUM END RDOCNUM,
		CASE WHEN (A.RLDGACCT IS NULL OR A.RLDGACCT = '''') THEN ''-'' ELSE A.RLDGACCT END RLDGACCT,
		A.TRANNO TRANNO,
		CASE WHEN (A.TRANDESC IS NULL OR A.TRANDESC = '''') THEN ''-'' ELSE A.TRANDESC END AS TRANDESC,
		CASE WHEN (CAST(A.LIFECOVERAGERIDER AS VARCHAR) IS NULL OR CAST(A.LIFECOVERAGERIDER AS VARCHAR) = '''') THEN ''-'' ELSE A.LIFECOVERAGERIDER END AS LIFECOVERAGERIDER,
				 	
		A.EFFDATE,
		CAST(CASE 
			WHEN (A.TRANREF IS NULL OR A.TRANREF = '''') THEN ''NON POLICY RELATED''
		ELSE ''POLICY RELATED'' END AS VARCHAR)
		POLICYRELATED_FLAG,
		A.TRANREF,
		CAST(A.SACSCODE AS VARCHAR(5)) SACSCODE,
		CAST(A.SACSTYP AS VARCHAR(5)) SACSTYP,
		')
	SET @V_CMD_2= ('
		A.TRANS_CODE,
		CAST(CASE WHEN (A.GLCODE_ORI IS NULL OR TRIM(A.GLCODE_ORI) = '''') THEN ''-'' ELSE TRIM(A.GLCODE_ORI) END AS VARCHAR) LFAGLCODE, 
		--CAST(A.CLAIM_NO AS VARCHAR) CLAIM_NO,
		CASE WHEN 
			CAST(
				CASE WHEN (SUBSTRING(A.SUN_GLCODE,1,10) IS NULL OR SUBSTRING(A.SUN_GLCODE,1,10) = '''') THEN ''-'' 
				ELSE SUBSTRING(A.SUN_GLCODE,1,10) 
		END AS VARCHAR) = ''5114900000'' THEN CAST(CONCAT(A.CLAIM_NO,''-SR'') AS VARCHAR) ELSE CAST(A.CLAIM_NO AS VARCHAR) END CLAIM_NO,
		CAST(NULL AS VARCHAR) TREATY_IDENTIFIER,
		CASE WHEN MOVEMENT=''ACMV PL'' THEN 
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''27''+STAG_ID.LPAD(ROW_NUMBER() OVER(ORDER BY (SELECT NULL)),23,''0'')) AS VARCHAR(32)),1,8) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''27''+STAG_ID.LPAD(ROW_NUMBER() OVER(ORDER BY (SELECT NULL)),23,''0'')) AS VARCHAR(32)),9,4) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''27''+STAG_ID.LPAD(ROW_NUMBER() OVER(ORDER BY (SELECT NULL)),23,''0'')) AS VARCHAR(32)),13,4) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''27''+STAG_ID.LPAD(ROW_NUMBER() OVER(ORDER BY (SELECT NULL)),23,''0'')) AS VARCHAR(32)),17,4) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''27''+STAG_ID.LPAD(ROW_NUMBER() OVER(ORDER BY (SELECT NULL)),23,''0'')) AS VARCHAR(32)),21,12)
		ELSE
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''01''+STAG_ID.LPAD(CAST(A.ROWID AS VARCHAR),23,''0'')) AS VARCHAR(32)),1,8) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''01''+STAG_ID.LPAD(CAST(A.ROWID AS VARCHAR),23,''0'')) AS VARCHAR(32)),9,4) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''01''+STAG_ID.LPAD(CAST(A.ROWID AS VARCHAR),23,''0'')) AS VARCHAR(32)),13,4) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''01''+STAG_ID.LPAD(CAST(A.ROWID AS VARCHAR),23,''0'')) AS VARCHAR(32)),17,4) +''-''+
		SUBSTRING(CAST((CAST(A.BATCACTYR AS VARCHAR)+STAG_ID.LPAD(CAST(A.BATCACTMN AS VARCHAR),3,''0'')+''01''+STAG_ID.LPAD(CAST(A.ROWID AS VARCHAR),23,''0'')) AS VARCHAR(32)),21,12)
		END
			TXN_SK,
		A.APRVDATE,
		A.BENEFIT_CODE CRTABLE,
		A.TAXCODE,
		A.MOVEMENT,
		A.OMNI_PRODUCT_CD,
		A.ALTREF,
		A.T0_4_REPLACE, 
		A.TG002_ABBB,
		A.TG002_OMNI_1_ABBB,
		A.TG002_OMNI_ABBB,
		A.T0_2A1_REPLACE,
		A.T0_2B1_REPLACE,
		A.T0_2B2_REPLACE,
		A.ITEMITEM,
		A.SL_PREFIX,
		A.T0_0_REPLACE,
		A.TG009_FLAG,
		A.BILLFREQ,
		A.CRRCD_DEFAULT,
		A.PTDATE,
		A.PAIRING_ACCOUNT,
		A.ORI_TRCDE,
		CASE WHEN NEW_RRN  = ''9999999999'' THEN CAST(NULL AS INT) ELSE A.NEW_RRN END RRN
		FROM (SELECT CAST(RRN AS VARCHAR) NEW_RRN, * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_INV_DATA11) A 
		LEFT JOIN (SELECT SASCODE,SASTYPE,TCODE, MAX(TRANREF) TRANREF FROM STAG_ID.STAG_CONFIG_IFRS17_PARAM_TABLE_MAPPING_NONRELATED GROUP BY SASCODE,SASTYPE,TCODE) B ON B.SASCODE = A.SACSCODE AND B.SASTYPE = A.SACSTYP AND B.TCODE = A.TRANS_CODE
		LEFT JOIN STAG_ID.STAG_LIFEASIA_IFRS17_COA_INSCOPE C ON SUBSTRING(A.SUN_GLCODE,1,10) = C.IFRS_SUN_CD 
		WHERE (POLICY_FLAG = ''P'' AND POLICY_NO IS NOT NULL AND PRODUCT IS NOT NULL AND 
		ISDATE(CAST(CASE WHEN (A.COHORT IS NULL OR A.COHORT = '''') THEN ''-'' ELSE STAG_ID.LPAD(SUBSTRING(A.COHORT,1,4),4,''0000'')+''-''+STAG_ID.LPAD(SUBSTRING(A.COHORT,5,2),2,''00'')+''-''+STAG_ID.LPAD(SUBSTRING(A.COHORT,7,2),2,''00'') END AS VARCHAR)) = 1)
		) ACF
		')
	SET @V_CMD_3= ('
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT1
	  ON ACF.ENTITY_ID = FCT1.ENTITY_ID      --PRIORITY 1
	  AND ACF.SUN_CD = FCT1.SUN_CD
	  AND ACF.PAS_NAME = FCT1.PAS_NAME
	  AND ACF.T0 LIKE REPLACE(FCT1.FUND_CD,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT1.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT1.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_3 LIKE REPLACE(FCT1.SOURCE_PARM_ID_3,''*'','''')+''%''
	  AND FCT1.FUND_CD <> ''*''
	  AND FCT1.PAS_NAME <> ''*''
	  AND FCT1.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT1.SOURCE_PARM_ID_2 <> ''*''
	  AND FCT1.SOURCE_PARM_ID_3 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT2
	  ON ACF.ENTITY_ID = FCT2.ENTITY_ID      --PRIORITY 2
	  AND ACF.SUN_CD = FCT2.SUN_CD
	  AND ACF.PAS_NAME = FCT2.PAS_NAME
	  AND FCT2.FUND_CD = ''*''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT2.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT2.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_3 LIKE REPLACE(FCT2.SOURCE_PARM_ID_3,''*'','''')+''%''
	  AND FCT2.PAS_NAME <> ''*''
	  AND FCT2.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT2.SOURCE_PARM_ID_2 <> ''*''
	  AND FCT2.SOURCE_PARM_ID_3 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT3
	  ON ACF.ENTITY_ID = FCT3.ENTITY_ID      --PRIORITY 3
	  AND ACF.SUN_CD = FCT3.SUN_CD
	  AND FCT3.PAS_NAME = ''*''
	  AND ACF.T0 LIKE REPLACE(FCT3.FUND_CD,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT3.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT3.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_3 LIKE REPLACE(FCT3.SOURCE_PARM_ID_3,''*'','''')+''%''
	  AND FCT3.FUND_CD <> ''*''
	  AND FCT3.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT3.SOURCE_PARM_ID_2 <> ''*''
	  AND FCT3.SOURCE_PARM_ID_3 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT4
	  ON ACF.ENTITY_ID = FCT4.ENTITY_ID      --PRIORITY 4
	  AND ACF.SUN_CD = FCT4.SUN_CD
	  AND FCT4.FUND_CD = ''*''
	  AND FCT4.PAS_NAME = ''*''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT4.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT4.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_3 LIKE REPLACE(FCT4.SOURCE_PARM_ID_3,''*'','''')+''%''
	  AND FCT4.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT4.SOURCE_PARM_ID_2 <> ''*''
	  AND FCT4.SOURCE_PARM_ID_3 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT5
	  ON ACF.ENTITY_ID = FCT5.ENTITY_ID      --PRIORITY 5
	  AND ACF.SUN_CD = FCT5.SUN_CD
	  AND ACF.PAS_NAME = FCT5.PAS_NAME
	  AND ACF.T0 LIKE REPLACE(FCT5.FUND_CD,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT5.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT5.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND FCT5.SOURCE_PARM_ID_3 = ''*''
	  AND FCT5.FUND_CD <> ''*''
	  AND FCT5.PAS_NAME <> ''*''
	  AND FCT5.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT5.SOURCE_PARM_ID_2 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT6
	  ON ACF.ENTITY_ID = FCT6.ENTITY_ID      --PRIORITY 6
	  AND ACF.SUN_CD = FCT6.SUN_CD
	  AND ACF.PAS_NAME = FCT6.PAS_NAME
	  AND FCT6.FUND_CD = ''*''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT6.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT6.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND FCT6.SOURCE_PARM_ID_3 = ''*''
	  AND FCT6.PAS_NAME <> ''*''
	  AND FCT6.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT6.SOURCE_PARM_ID_2 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT7        
	  ON ACF.ENTITY_ID = FCT7.ENTITY_ID      --PRIORITY 7
	  AND ACF.SUN_CD = FCT7.SUN_CD
	  AND FCT7.PAS_NAME = ''*''
	  AND ACF.T0 LIKE REPLACE(FCT7.FUND_CD,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT7.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT7.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND FCT7.SOURCE_PARM_ID_3 = ''*''
	  AND FCT7.FUND_CD <> ''*''
	  AND FCT7.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT7.SOURCE_PARM_ID_2 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT8
	  ON ACF.ENTITY_ID = FCT8.ENTITY_ID      --PRIORITY 8
	  AND ACF.SUN_CD = FCT8.SUN_CD
	  AND FCT8.FUND_CD = ''*''
	  AND FCT8.PAS_NAME = ''*''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT8.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_2 LIKE REPLACE(FCT8.SOURCE_PARM_ID_2,''*'','''')+''%''
	  AND FCT8.SOURCE_PARM_ID_3 = ''*''
	  AND FCT8.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT8.SOURCE_PARM_ID_2 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT9
	  ON ACF.ENTITY_ID = FCT9.ENTITY_ID      --PRIORITY 9
	  AND ACF.SUN_CD = FCT9.SUN_CD
	  AND ACF.PAS_NAME = FCT9.PAS_NAME
	  AND ACF.T0 LIKE REPLACE(FCT9.FUND_CD,''*'','''')+''%''            
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT9.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND FCT9.SOURCE_PARM_ID_3 = ''*''
	  AND FCT9.SOURCE_PARM_ID_2 = ''*''
	  AND FCT9.FUND_CD <> ''*''
	  AND FCT9.SOURCE_PARM_ID_1 <> ''*''
	  AND FCT9.PAS_NAME <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT10
	  ON ACF.ENTITY_ID = FCT10.ENTITY_ID     --PRIORITY 10
	  AND ACF.SUN_CD = FCT10.SUN_CD
	  AND FCT10.FUND_CD= ''*''
	  AND ACF.PAS_NAME = FCT10.PAS_NAME
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT10.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND FCT10.SOURCE_PARM_ID_3 = ''*''
	  AND FCT10.SOURCE_PARM_ID_2 = ''*''
	  AND FCT10.PAS_NAME <> ''*''
	  AND FCT10.SOURCE_PARM_ID_1 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT11
	  ON ACF.ENTITY_ID = FCT11.ENTITY_ID     --PRIORITY 11
	  AND ACF.SUN_CD = FCT11.SUN_CD
	  AND FCT11.PAS_NAME = ''*''
	  AND ACF.T0 LIKE REPLACE(FCT11.FUND_CD,''*'','''')+''%''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT11.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND FCT11.SOURCE_PARM_ID_3 = ''*''
	  AND FCT11.SOURCE_PARM_ID_2 = ''*''
	  AND FCT11.FUND_CD <> ''*''
	  AND FCT11.SOURCE_PARM_ID_1 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT12
	  ON ACF.ENTITY_ID = FCT12.ENTITY_ID     --PRIORITY 12
	  AND ACF.SUN_CD = FCT12.SUN_CD
	  AND FCT12.FUND_CD = ''*''
	  AND FCT12.PAS_NAME = ''*''
	  AND ACF.SOURCE_PARM_1 LIKE REPLACE(FCT12.SOURCE_PARM_ID_1,''*'','''')+''%''
	  AND FCT12.SOURCE_PARM_ID_3 = ''*''
	  AND FCT12.SOURCE_PARM_ID_2 = ''*''
	  AND FCT12.SOURCE_PARM_ID_1 <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT13
	  ON ACF.ENTITY_ID = FCT13.ENTITY_ID     --PRIORITY 13
	  AND ACF.SUN_CD = FCT13.SUN_CD
	  AND ACF.PAS_NAME = FCT13.PAS_NAME
	  AND ACF.T0 LIKE REPLACE(FCT13.FUND_CD,''*'','''')+''%''
	  AND FCT13.SOURCE_PARM_ID_1 = ''*''
	  AND FCT13.SOURCE_PARM_ID_3 = ''*''
	  AND FCT13.SOURCE_PARM_ID_2 = ''*''
	  AND FCT13.PAS_NAME <> ''*''
	  AND FCT13.FUND_CD <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT14
	  ON ACF.ENTITY_ID = FCT14.ENTITY_ID     --PRIORITY 14
	  AND ACF.SUN_CD = FCT14.SUN_CD
	  AND FCT14.FUND_CD = ''*''
	  AND ACF.PAS_NAME = FCT14.PAS_NAME
	  AND FCT14.SOURCE_PARM_ID_3 = ''*''
	  AND FCT14.SOURCE_PARM_ID_2 = ''*''
	  AND FCT14.SOURCE_PARM_ID_1 = ''*''
	  AND FCT14.PAS_NAME <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT15
	  ON ACF.ENTITY_ID = FCT15.ENTITY_ID     --PRIORITY 15
	  AND ACF.SUN_CD = FCT15.SUN_CD
	  AND ACF.T0 LIKE REPLACE(FCT15.FUND_CD,''*'','''')+''%''
	  AND FCT15.PAS_NAME = ''*''
	  AND FCT15.SOURCE_PARM_ID_3 = ''*''
	  AND FCT15.SOURCE_PARM_ID_2 = ''*''
	  AND FCT15.SOURCE_PARM_ID_1 = ''*''
	  AND FCT15.FUND_CD <> ''*''
	LEFT JOIN (SELECT * FROM STAG_ID.TMP_'+@BATCH_NUMBER+'_FCT) FCT16
	  ON ACF.ENTITY_ID = FCT16.ENTITY_ID     --PRIORITY 16
	  AND ACF.SUN_CD = FCT16.SUN_CD
	  AND FCT16.FUND_CD = ''*''
	  AND FCT16.PAS_NAME = ''*''
	  AND FCT16.SOURCE_PARM_ID_3 = ''*''
	  AND FCT16.SOURCE_PARM_ID_2 = ''*''
	  AND FCT16.SOURCE_PARM_ID_1 = ''*''
	');
	print @V_CMD;
	print @V_CMD_1;
	print @V_CMD_2;
	print @V_CMD_3;
	EXEC (@V_CMD+@V_CMD_1+@V_CMD_2+@V_CMD_3);

	--DELETE INVALID DATA
	SET @TABLE_IN 	= 'STAG_ID.TMP_'+@BATCH_NUMBER+'_INV_DATA11';
	SET @TABLE_INVALID = (SELECT 'FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_'+CAST(@IFRS17_YEAR AS VARCHAR)+STAG_ID.LPAD(CAST(@IFRS17_MONTH  AS VARCHAR),2,'00')+'' );
	
	SET @V_CMD='DELETE FROM '+@TABLE_INVALID+' WHERE VOUCHER_NO+SUN_CD+SACSCODE+SACSTYP IN(
	SELECT DISTINCT  VOUCHER_NO+SUBSTRING(ALTREF,1,10)+SACSCODE+SACSTYP FROM '+@TABLE_IN+')';
	EXEC(@V_CMD);


	--------------------------
	-- Error Log STEP 5-2 START 
	--------------------------
	SET @V_START = current_timestamp;
	SET @V_SEQNO = @V_SEQNO + 1;
	SET @V_DESCRIPTION = 'Finish Processing FOND_ID.FOND_LIFEASIA_ETL4_LIFEASIA_INVALID_'+ CAST(@IFRS17_YEAR AS VARCHAR) + STAG_ID.LPAD(CAST(@IFRS17_MONTH AS VARCHAR),2,'00') + @BATCH_NUMBER+ @V_FUNCTION_NAME + ' - STEP 5-2 Point 2 at ' + convert(varchar(20),current_timestamp) + ' with Error Message STEP 2 (ifany): ' + ERROR_MESSAGE();
	PRINT @V_DESCRIPTION;

    INSERT INTO FOND_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,DESCRIPTION)
    VALUES(@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);
	--------------------------
	-- Error Log STEP 5-2 END
	--------------------------

	--End Check
	PRINT 'CHECK POINT 2';
END -- END check record count Invalid table

		
	------------------------------------------------------------
	-- SUB-STEP 5-2 - Load to Invalid table - END
	------------------------------------------------------------


END TRY

BEGIN CATCH 
 
		DECLARE @ErrorMessage AS NVARCHAR(1000) = ERROR_MESSAGE()
		DECLARE @ErrorSeverity AS INT = ERROR_SEVERITY()
		DECLARE @ErrorState AS INT = ERROR_STATE() 

		SET @V_START = current_timestamp;
		SET @V_SEQNO = @V_SEQNO + 1;
		SET @V_DESCRIPTION = @ErrorMessage

		INSERT INTO STAG_ID.STAG_IFRS17_PROC_LOG(PROC_DATE,FUNC_NAME,SEQNO,[DESCRIPTION])
		VALUES (@V_START,@V_FUNCTION_NAME,@V_SEQNO,@V_DESCRIPTION);

		RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState)

END CATCH

